apply plugin: 'idea'
apply plugin: 'java'

buildscript {
    repositories {
        mavenCentral()
    }
}


sourceSets {
    main {
        java {
            srcDir 'src/'
        }
        resources {
            srcDir 'resources/'
        }
    }
    test {
        java {
            srcDir 'test/src'
        }
        resources {
            srcDirs = ['test/benchmarks', 'test/flowtyped', 'test/flowtests', 'test/unit/', 'test/tajsUnit/']
        }
    }
}

dependencies {
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.2.0'
    compile group: 'org.json', name: 'json', version: '20170516'

    compile fileTree(dir: 'lib', include: ['*.jar'])
    compile fileTree(dir: 'lib/selenium', include: ['*.jar'])
    compile fileTree(dir: 'ts-spec-reader/deserializers/java/libs', include: ['*.jar'])
    compile project(":ts-spec-reader")
    compile project(":tajs")
    compile 'org.jdom:jdom2:2.0.6'
    compile group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.6.3'
    compile 'org.apache.pdfbox:pdfbox:1.8.12'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

}


task wrapper(type: Wrapper) {
    gradleVersion = '4.10'
}

subprojects {
    apply plugin: 'java'

    sourceSets {
        main {
            java {
                srcDir 'src/'
            }
            resources {
                srcDir 'resources/'
            }
        }
        test {
            java {
                srcDir 'test/src/'
            }
            resources {
                srcDir 'test-resources/'
            }
        }
    }
}

jar {
    manifest {
        attributes(
            'Class-Path': configurations.compile,
            'Main-Class': 'dk.webbies.tajscheck.Main'
        )
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

allprojects {
    repositories {
        mavenCentral()
    }
}

// Example usage:
// ./gradlew deltaDebug -PappArgs="['Intro.js']"
task deltaDebug(type: JavaExec) {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
    classpath sourceSets.test.runtimeClasspath
    jvmArgs = ["-Xmx30G"]
    main = 'dk.webbies.tajscheck.test.tajs.analyze.ManualTajsCheckerEvaluation'
}

// Example usage:
// ./gradlew doEvaluation"
task doEvaluation(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    jvmArgs = ["-Xmx30G"]
    main = 'dk.webbies.tajscheck.test.tajs.analyze.TajsCheckerEvaluation'
}

// Example usage:
// ./gradlew compareModes
task compareModes(type: JavaExec) {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
    classpath sourceSets.test.runtimeClasspath
    jvmArgs = ["-Xmx30G"]
    main = 'dk.webbies.tajscheck.test.tajs.analyze.CompareModesEvaluation'
}

// Example usage:
// ./gradlew manualEval -PappArgs="['all-assumptions']"
task manualEval(type: JavaExec) {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
    classpath sourceSets.test.runtimeClasspath
    jvmArgs = ["-Xmx30G"]
    main = 'dk.webbies.tajscheck.test.tajs.analyze.ManualTajsCheckerEvaluation'
}

// Example usage:
// ./gradlew bigBenchEval -PappArgs="['limited']"
task bigBenchEval(type: JavaExec) {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
    classpath sourceSets.test.runtimeClasspath
    jvmArgs = ["-Xmx30G"]
    main = 'dk.webbies.tajscheck.test.tajs.analyze.BigLibEvaluation'
}


// Example usage:
// ./gradlew deltaDebugRetractedTestInAll"
task deltaDebugRetractedTestInAll(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    jvmArgs = ["-Xmx30G"]
    main = 'dk.webbies.tajscheck.test.DeltaDebug$DeltaDebugRetractedTestInAll'
}

// Example usage:
// ./gradlew runSingle -PappArgs="['classnames', 'writes']"
task runSingle(type: JavaExec) {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
    classpath sourceSets.test.runtimeClasspath
    jvmArgs = ["-Xmx30G"]
    main = 'dk.webbies.tajscheck.test.tajs.analyze.RunASingleBenchmark'
}
