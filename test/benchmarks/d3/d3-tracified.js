Object.defineProperty(typeof window === 'undefined' ? global : window, '$__', { configurable: false, enumerable: false, value: {
    fs: {},
    os: {},
    functionRegExp: /^function .*\([\s\S]*\) {[\s\S]*\}$/g,
    refs: {
        pop: Array.prototype.pop,
        slice: Array.prototype.slice
    },
    uid: Symbol('bHvKvd19fGrk'),
    w: window
}});
(((($__.fs.J$__v2246113107_1_3 = function J$__v2246113107_1(global, factory) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
global = arguments[0], factory = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (typeof exports === 'object', typeof define === 'function'), (factory, $__.fs.J$__v2246113107_2897_4)(global.d3 = (TAJS_restrictToType(global.d3, 'undefined'), $__.os.oid0 = {}), 0, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.d3 = global.d3 || {});})), $__.fs.J$__v2246113107_1_3))(this, (($__.fs.J$__v2246113107_2897_4 = function J$__v2246113107_2897(exports) {
'use strict';
var vvv_return, vvv_switch, version, ascending, bisector, ascendingComparator, ascendingBisect, bisectRight, bisectLeft, descending, number, variance, deviation, extent, array, slice, map, constant, identity, range, e10, e5, e2, ticks, tickStep, sturges, histogram, threshold, freedmanDiaconis, scott, max, mean, median, merge, min, pairs, permute, scan, shuffle, sum, transpose, length, zip, prefix, Map, map$1, nest, createObject, setObject, createMap, setMap, Set, proto, set, keys, values, entries, uniform, normal, logNormal, irwinHall, bates, exponential, linear, quadIn, quadOut, quadInOut, cubicIn, cubicOut, easeCubicInOut, exponent, polyIn, polyOut, polyInOut, pi, halfPi, sinIn, sinOut, sinInOut, expIn, expOut, expInOut, circleIn, circleOut, circleInOut, b1, b2, b3, b4, b5, b6, b7, b8, b9, b0, bounceIn, bounceOut, bounceInOut, overshoot, backIn, backOut, backInOut, tau, amplitude, period, elasticIn, elasticOut, elasticInOut, area, centroid, cross, lexicographicOrder, computeUpperHullIndexes, hull, contains, length$1, pi$1, tau$1, epsilon, tauEpsilon, Path, path, tree_add, add, addAll, tree_cover, tree_data, tree_extent, Quad, tree_find, tree_remove, removeAll, tree_root, tree_size, tree_visit, tree_visitAfter, defaultX, tree_x, defaultY, tree_y, quadtree, Quadtree, leaf_copy, treeProto, slice$1, noabort, Queue, poke, start, end, abort, maybeNotify, queue, constant$1, epsilon$1, pi$2, halfPi$1, tau$2, arcInnerRadius, arcOuterRadius, arcStartAngle, arcEndAngle, arcPadAngle, asin, intersect, cornerTangents, arc, Linear, curveLinear, x, y, line, area$1, descending$1, identity$1, pie, curveRadialLinear, Radial, curveRadial, radialLine, radialLine$1, radialArea, circle, cross$1, tan30, tan30_2, diamond, ka, kr, kx, ky, star, square, sqrt3, triangle, c, s, k, a, wye, symbols, symbol, noop, point, Basis, basis, BasisClosed, basisClosed, BasisOpen, basisOpen, Bundle, bundle, point$1, Cardinal, cardinal, CardinalClosed, cardinalClosed, CardinalOpen, cardinalOpen, point$2, CatmullRom, catmullRom, CatmullRomClosed, catmullRomClosed, CatmullRomOpen, catmullRomOpen, LinearClosed, linearClosed, sign, slope3, slope2, point$3, MonotoneX, MonotoneY, ReflectContext, monotoneX, monotoneY, Natural, controlPoints, natural, Step, step, stepBefore, stepAfter, slice$2, none, none$1, stackValue, stack, expand, silhouette, wiggle, ascending$1, sum$1, descending$2, insideOut, reverse, define, extend, Color, darker, brighter, reHex3, reHex6, reRgbInteger, reRgbPercent, reRgbaInteger, reRgbaPercent, reHslPercent, reHslaPercent, named, color, rgbn, rgba, rgbConvert, colorRgb, Rgb, hsla, hslConvert, colorHsl, Hsl, hsl2rgb, deg2rad, rad2deg, Kn, Xn, Yn, Zn, t0, t1, t2, t3, labConvert, lab, Lab, xyz2lab, lab2xyz, xyz2rgb, rgb2xyz, hclConvert, colorHcl, Hcl, A, B, C, D, E, ED, EB, BC_DA, cubehelixConvert, cubehelix, Cubehelix, basis$1, basis$2, basisClosed$1, constant$2, linear$1, exponential$1, hue, gamma, nogamma, interpolateRgb, rgbSpline, rgbBasis, rgbBasisClosed, array$1, date, interpolateNumber, object, reA, reB, zero, one, interpolateString, interpolate, interpolateRound, degrees, identity$2, decompose, cssNode, cssRoot, cssView, svgNode, parseCss, parseSvg, interpolateTransform, interpolateTransform$1, interpolateTransform$2, rho, rho2, rho4, epsilon2, cosh, sinh, tanh, interpolateZoom, hsl, hsl$1, hslLong, lab$1, hcl, hcl$1, hclLong, cubehelix$1, cubehelix$2, interpolateCubehelixLong, quantize, noop$1, dispatch, Dispatch, parseTypenames, get, set$1, objectConverter, customConverter, inferColumns, dsv, csv, csvParse, csvParseRows, csvFormat, csvFormatRows, tsv, tsvParse, tsvParseRows, tsvFormat, tsvFormatRows, request, fixCallback, hasResponse, type, html, json, text, xml, dsv$1, responseOf, csv$1, tsv$1, frame, timeout, interval, pokeDelay, taskHead, taskTail, clockLast, clockNow, clockSkew, clock, setFrame, now, clearNow, Timer, timer, timerFlush, wake, poke$1, nap, sleep, timeout$1, interval$1, t0$1, t1$1, newInterval, millisecond, milliseconds, durationSecond, durationMinute, durationHour, durationDay, durationWeek, second, seconds, minute, minutes, hour, hours, day, days, weekday, timeWeek, timeMonday, tuesday, wednesday, thursday, friday, saturday, sundays, mondays, tuesdays, wednesdays, thursdays, fridays, saturdays, month, months, year, years, utcMinute, utcMinutes, utcHour, utcHours, utcDay, utcDays, utcWeekday, utcWeek, utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcSundays, utcMondays, utcTuesdays, utcWednesdays, utcThursdays, utcFridays, utcSaturdays, utcMonth, utcMonths, utcYear, utcYears, formatDecimal, exponent$1, formatGroup, formatDefault, prefixExponent, formatPrefixAuto, formatRounded, formatTypes, re, formatSpecifier, FormatSpecifier, prefixes, identity$3, formatLocale, locale, defaultLocale, precisionFixed, precisionPrefix, precisionRound, localDate, utcDate, newYear, formatLocale$1, pads, numberRe, percentRe, requoteRe, pad, requote, formatRe, formatLookup, parseWeekdayNumber, parseWeekNumberSunday, parseWeekNumberMonday, parseFullYear, parseYear, parseZone, parseMonthNumber, parseDayOfMonth, parseDayOfYear, parseHour24, parseMinutes, parseSeconds, parseMilliseconds, parseLiteralPercent, formatDayOfMonth, formatHour24, formatHour12, formatDayOfYear, formatMilliseconds, formatMonthNumber, formatMinutes, formatSeconds, formatWeekNumberSunday, formatWeekdayNumber, formatWeekNumberMonday, formatYear, formatFullYear, formatZone, formatUTCDayOfMonth, formatUTCHour24, formatUTCHour12, formatUTCDayOfYear, formatUTCMilliseconds, formatUTCMonthNumber, formatUTCMinutes, formatUTCSeconds, formatUTCWeekNumberSunday, formatUTCWeekdayNumber, formatUTCWeekNumberMonday, formatUTCYear, formatUTCFullYear, formatUTCZone, formatLiteralPercent, locale$1, defaultLocale$1, isoSpecifier, formatIsoNative, formatIso, parseIsoNative, parseIso, array$2, map$2, slice$3, implicit, ordinal, band, pointish, point$4, constant$3, number$1, unit, deinterpolate, deinterpolateClamp, reinterpolateClamp, bimap, polymap, copy, continuous, tickFormat, linearish, linear$2, identity$4, nice, deinterpolate$1, reinterpolate, pow10, powp, logp, reflect, log, raise, pow, sqrt, quantile, quantize$1, threshold$1, durationSecond$1, durationMinute$1, durationHour$1, durationDay$1, durationWeek$1, durationMonth, durationYear, date$1, number$2, calendar, time, utcTime, colors, category10, category20b, category20c, category20, cubehelix$3, warm, cool, rainbow, rainbow$1, ramp, viridis, magma, inferno, plasma, sequential, xhtml, namespaces, namespace, creatorInherit, creatorFixed, creator, nextId, local, Local, matcher, element, vendorMatches, matcher$1, filterEvents, element$1, filterContextListener, contextListener, parseTypenames$1, onRemove, onAdd, selection_on, customEvent, sourceEvent, point$5, mouse, none$2, selector, selection_select, empty, selectorAll, selection_selectAll, selection_filter, sparse, selection_enter, EnterNode, constant$4, keyPrefix, bindIndex, bindKey, selection_data, selection_exit, selection_merge, selection_order, selection_sort, ascending$2, selection_call, selection_nodes, selection_node, selection_size, selection_empty, selection_each, attrRemove, attrRemoveNS, attrConstant, attrConstantNS, attrFunction, attrFunctionNS, selection_attr, window, styleRemove, styleConstant, styleFunction, selection_style, propertyRemove, propertyConstant, propertyFunction, selection_property, classArray, classList, ClassList, classedAdd, classedRemove, classedTrue, classedFalse, classedFunction, selection_classed, textRemove, textConstant, textFunction, selection_text, htmlRemove, htmlConstant, htmlFunction, selection_html, raise$1, selection_raise, lower, selection_lower, selection_append, constantNull, selection_insert, remove, selection_remove, selection_datum, dispatchEvent, dispatchConstant, dispatchFunction, selection_dispatch, root, Selection, selection, select, selectAll, touch, touches, emptyOn, emptyTween, CREATED, SCHEDULED, STARTING, STARTED, ENDING, ENDED, schedule, init, set$2, get$1, create, interrupt, selection_interrupt, tweenRemove, tweenFunction, transition_tween, tweenValue, interpolate$1, attrRemove$1, attrRemoveNS$1, attrConstant$1, attrConstantNS$1, attrFunction$1, attrFunctionNS$1, transition_attr, attrTweenNS, attrTween, transition_attrTween, delayFunction, delayConstant, transition_delay, durationFunction, durationConstant, transition_duration, easeConstant, transition_ease, transition_filter, transition_merge, start$1, onFunction, transition_on, removeFunction, transition_remove, transition_select, transition_selectAll, Selection$1, transition_selection, styleRemove$1, styleRemoveEnd, styleConstant$1, styleFunction$1, transition_style, styleTween, transition_styleTween, textConstant$1, textFunction$1, transition_text, transition_transition, id, Transition, transition, newId, selection_prototype, defaultTiming, inherit, selection_transition, root$1, active, slice$4, identity$5, top, right, bottom, left, epsilon$2, translateX, translateY, center, entering, axis, axisTop, axisRight, axisBottom, axisLeft, defaultSeparation, meanX, meanXReduce, maxY, maxYReduce, leafLeft, leafRight, cluster, node_each, node_eachBefore, node_eachAfter, node_sum, node_sort, node_path, leastCommonAncestor, node_ancestors, node_descendants, node_leaves, node_links, hierarchy, node_copy, defaultChildren, copyData, computeHeight, Node, Node$2, shuffle$1, enclose, encloses, encloseN, enclose1, enclose2, enclose3, place, intersects, distance2, Node$1, packEnclose, siblings, optional, required, constantZero, constant$5, defaultRadius, index, radiusLeaf, packChildren, translateChild, roundNode, treemapDice, partition, keyPrefix$1, preroot, ambiguous, defaultId, defaultParentId, stratify, defaultSeparation$1, nextLeft, nextRight, moveSubtree, executeShifts, nextAncestor, TreeNode, treeRoot, tree, treemapSlice, phi, squarifyRatio, squarify, index$1, binary, sliceDice, resquarify, center$1, constant$6, jiggle, x$1, y$1, collide, index$2, link, x$2, y$2, initialRadius, initialAngle, simulation, manyBody, x$3, y$3, nopropagation, noevent, dragDisable, dragEnable, constant$7, DragEvent, defaultFilter, defaultContainer, defaultSubject, drag, constant$8, x$4, y$4, RedBlackTree, RedBlackNode, RedBlackRotateLeft, RedBlackRotateRight, RedBlackFirst, createEdge, createBorderEdge, setEdgeEnd, clipEdge, connectEdge, clipEdges, createCell, cellHalfedgeAngle, cellHalfedgeStart, cellHalfedgeEnd, sortCellHalfedges, clipCells, circlePool, firstCircle, Circle, attachCircle, detachCircle, beachPool, Beach, createBeach, detachBeach, removeBeach, addBeach, leftBreakPoint, rightBreakPoint, epsilon$3, epsilon2$1, beaches, cells, circles, edges, triangleArea, lexicographic, Diagram, voronoi, constant$9, ZoomEvent, Transform, identity$6, transform, nopropagation$1, noevent$1, defaultFilter$1, defaultExtent, defaultTransform, zoom, constant$10, BrushEvent, nopropagation$2, noevent$2, MODE_DRAG, MODE_SPACE, MODE_HANDLE, MODE_CENTER, X, Y, XY, cursors, flipX, flipY, signsX, signsY, type$1, defaultFilter$2, defaultExtent$1, local$1, empty$1, brushSelection, brushX, brushY, brush, brush$1, cos, sin, pi$3, halfPi$2, tau$3, max$1, compareValue, chord, slice$5, constant$11, defaultSource, defaultTarget, defaultRadius$1, defaultStartAngle, defaultEndAngle, ribbon, adder, Adder, temp, add$1, epsilon$4, epsilon2$2, pi$4, halfPi$3, quarterPi, tau$4, degrees$1, radians, abs, atan, atan2, cos$1, ceil, exp, log$1, pow$1, sin$1, sign$1, sqrt$1, tan, acos, asin$1, haversin, noop$2, streamGeometry, streamObjectType, streamGeometryType, streamLine, streamPolygon, geoStream, areaRingSum, areaSum, lambda00, phi00, lambda0, cosPhi0, sinPhi0, areaStream, areaRingStart, areaRingEnd, areaPointFirst, areaPoint, area$2, spherical, cartesian, cartesianDot, cartesianCross, cartesianAddInPlace, cartesianScale, cartesianNormalizeInPlace, lambda0$1, phi0, lambda1, phi1, lambda2, lambda00$1, phi00$1, p0, deltaSum, ranges, range$1, boundsStream, boundsPoint, linePoint, boundsLineStart, boundsLineEnd, boundsRingPoint, boundsRingStart, boundsRingEnd, angle, rangeCompare, rangeContains, bounds, W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00$2, phi00$2, x0, y0, z0, centroidStream, centroidPoint, centroidPointCartesian, centroidLineStart, centroidLinePointFirst, centroidLinePoint, centroidLineEnd, centroidRingStart, centroidRingEnd, centroidRingPointFirst, centroidRingPoint, centroid$1, constant$12, compose, rotationIdentity, rotateRadians, forwardRotationLambda, rotationLambda, rotationPhiGamma, rotation, circleStream, circleRadius, circle$1, clipBuffer, clipLine, pointEqual, Intersection, clipPolygon, link$1, clipMax, clipMin, clipExtent, extent$1, lengthSum, lambda0$2, sinPhi0$1, cosPhi0$1, lengthStream, lengthLineStart, lengthLineEnd, lengthPointFirst, lengthPoint, length$2, coordinates, object$1, distance, graticuleX, graticuleY, graticule, interpolate$2, identity$7, areaSum$1, areaRingSum$1, x00, y00, x0$1, y0$1, areaStream$1, areaRingStart$1, areaPointFirst$1, areaPoint$1, areaRingEnd$1, x0$2, y0$2, x1, y1, boundsStream$1, boundsPoint$1, X0$1, Y0$1, Z0$1, X1$1, Y1$1, Z1$1, X2$1, Y2$1, Z2$1, x00$1, y00$1, x0$3, y0$3, centroidStream$1, centroidPoint$1, centroidLineStart$1, centroidPointFirstLine, centroidPointLine, centroidLineEnd$1, centroidRingStart$1, centroidRingEnd$1, centroidPointFirstRing, centroidPointRing, PathContext, PathString, circle$2, index$3, sum$2, polygonContains, clip, validSegment, compareIntersection, clipAntimeridian, clipAntimeridianLine, clipAntimeridianIntersect, clipAntimeridianInterpolate, clipCircle, transform$1, transform$2, Transform$1, fit, fitSize, fitExtent, maxDepth, cosMinDistance, resample, resampleNone, resample$1, transformRadians, projection, projectionMutator, conicProjection, conicEqualAreaRaw, conicEqualArea, albers, multiplex, albersUsa, azimuthalRaw, azimuthalInvert, azimuthalEqualAreaRaw, azimuthalEqualArea, azimuthalEquidistantRaw, azimuthalEquidistant, mercatorRaw, mercator, mercatorProjection, tany, conicConformalRaw, conicConformal, equirectangularRaw, equirectangular, conicEquidistantRaw, conicEquidistant, gnomonicRaw, gnomonic, orthographicRaw, orthographic, stereographicRaw, stereographic, transverseMercatorRaw, transverseMercator;
ascending = function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
};
bisector = function bisector(compare) {
    if (compare.length === 1)
        compare = ascendingComparator(compare);
    return {
        left: function (a, x, lo, hi) {
            if (lo == null)
                lo = 0;
            if (hi == null)
                hi = a.length;
            while (lo < hi) {
                var mid = lo + hi >>> 1;
                if (compare(a[mid], x) < 0)
                    lo = mid + 1;
                else
                    hi = mid;
            }
            return lo;
        },
        right: function (a, x, lo, hi) {
            if (lo == null)
                lo = 0;
            if (hi == null)
                hi = a.length;
            while (lo < hi) {
                var mid = lo + hi >>> 1;
                if (compare(a[mid], x) > 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
            return lo;
        }
    };
};
ascendingComparator = function ascendingComparator(f) {
    return function (d, x) {
        return ascending(f(d), x);
    };
};
descending = function descending(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
};
number = function number(x) {
    return x === null ? NaN : +x;
};
variance = function variance(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (f == null) {
        while (++i < n) {
            if (!isNaN(a = number(array[i]))) {
                d = a - m;
                m += d / ++j;
                s += d * (a - m);
            }
        }
    } else {
        while (++i < n) {
            if (!isNaN(a = number(f(array[i], i, array)))) {
                d = a - m;
                m += d / ++j;
                s += d * (a - m);
            }
        }
    }
    if (j > 1)
        return s / (j - 1);
};
deviation = function deviation(array, f) {
    var v = variance(array, f);
    return v ? Math.sqrt(v) : v;
};
extent = function extent(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (f == null) {
        while (++i < n)
            if ((b = array[i]) != null && b >= b) {
            a = c = b;
            break;
        }
        while (++i < n)
            if ((b = array[i]) != null) {
            if (a > b)
                a = b;
            if (c < b)
                c = b;
        }
    } else {
        while (++i < n)
            if ((b = f(array[i], i, array)) != null && b >= b) {
            a = c = b;
            break;
        }
        while (++i < n)
            if ((b = f(array[i], i, array)) != null) {
            if (a > b)
                a = b;
            if (c < b)
                c = b;
        }
    }
    return [
        a,
        c
    ];
};
constant = function constant(x) {
    return function () {
        return x;
    };
};
identity = function identity(x) {
    return x;
};
range = function range(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
    while (++i < n) {
        range[i] = start + i * step;
    }
    return range;
};
ticks = function ticks(start, stop, count) {
    var step = tickStep(start, stop, count);
    return range(Math.ceil(start / step) * step, Math.floor(stop / step) * step + step / 2, step);
};
tickStep = function tickStep(start, stop, count) {
    var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
    if (error >= e10)
        step1 *= 10;
    else if (error >= e5)
        step1 *= 5;
    else if (error >= e2)
        step1 *= 2;
    return stop < start ? -step1 : step1;
};
sturges = function sturges(values) {
    return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
};
histogram = function histogram() {
    var value = identity, domain = extent, threshold = sturges;
    function histogram(data) {
        var i, n = data.length, x, values = new Array(n);
        for (i = 0; i < n; ++i) {
            values[i] = value(data[i], i, data);
        }
        var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
        if (!Array.isArray(tz))
            tz = ticks(x0, x1, tz);
        var m = tz.length;
        while (tz[0] <= x0)
            tz.shift(), --m;
        while (tz[m - 1] >= x1)
            tz.pop(), --m;
        var bins = new Array(m + 1), bin;
        for (i = 0; i <= m; ++i) {
            bin = bins[i] = [];
            bin.x0 = i > 0 ? tz[i - 1] : x0;
            bin.x1 = i < m ? tz[i] : x1;
        }
        for (i = 0; i < n; ++i) {
            x = values[i];
            if (x0 <= x && x <= x1) {
                bins[bisectRight(tz, x, 0, m)].push(data[i]);
            }
        }
        return bins;
    }
    histogram.value = function (_) {
        return arguments.length ? (value = typeof _ === 'function' ? _ : constant(_), histogram) : value;
    };
    histogram.domain = function (_) {
        return arguments.length ? (domain = typeof _ === 'function' ? _ : constant([
            _[0],
            _[1]
        ]), histogram) : domain;
    };
    histogram.thresholds = function (_) {
        return arguments.length ? (threshold = typeof _ === 'function' ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
    };
    return histogram;
};
threshold = function threshold(array, p, f) {
    if (f == null)
        f = number;
    if (!(n = array.length))
        return;
    if ((p = +p) <= 0 || n < 2)
        return +f(array[0], 0, array);
    if (p >= 1)
        return +f(array[n - 1], n - 1, array);
    var n, h = (n - 1) * p, i = Math.floor(h), a = +f(array[i], i, array), b = +f(array[i + 1], i + 1, array);
    return a + (b - a) * (h - i);
};
freedmanDiaconis = function freedmanDiaconis(values, min, max) {
    values = map.call(values, number).sort(ascending);
    return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
};
scott = function scott(values, min, max) {
    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
};
max = function max(array, f) {
    var i = -1, n = array.length, a, b;
    if (f == null) {
        while (++i < n)
            if ((b = array[i]) != null && b >= b) {
            a = b;
            break;
        }
        while (++i < n)
            if ((b = array[i]) != null && b > a)
            a = b;
    } else {
        while (++i < n)
            if ((b = f(array[i], i, array)) != null && b >= b) {
            a = b;
            break;
        }
        while (++i < n)
            if ((b = f(array[i], i, array)) != null && b > a)
            a = b;
    }
    return a;
};
mean = function mean(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (f == null) {
        while (++i < n)
            if (!isNaN(a = number(array[i])))
            s += a;
        else
            --j;
    } else {
        while (++i < n)
            if (!isNaN(a = number(f(array[i], i, array))))
            s += a;
        else
            --j;
    }
    if (j)
        return s / j;
};
median = function median(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (f == null) {
        while (++i < n)
            if (!isNaN(a = number(array[i])))
            numbers.push(a);
    } else {
        while (++i < n)
            if (!isNaN(a = number(f(array[i], i, array))))
            numbers.push(a);
    }
    return threshold(numbers.sort(ascending), 0.5);
};
merge = function merge(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n)
        j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
        array = arrays[n];
        m = array.length;
        while (--m >= 0) {
            merged[--j] = array[m];
        }
    }
    return merged;
};
min = function min(array, f) {
    var i = -1, n = array.length, a, b;
    if (f == null) {
        while (++i < n)
            if ((b = array[i]) != null && b >= b) {
            a = b;
            break;
        }
        while (++i < n)
            if ((b = array[i]) != null && a > b)
            a = b;
    } else {
        while (++i < n)
            if ((b = f(array[i], i, array)) != null && b >= b) {
            a = b;
            break;
        }
        while (++i < n)
            if ((b = f(array[i], i, array)) != null && a > b)
            a = b;
    }
    return a;
};
pairs = function pairs(array) {
    var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n)
        pairs[i] = [
        p,
        p = array[++i]
    ];
    return pairs;
};
permute = function permute(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--)
        permutes[i] = array[indexes[i]];
    return permutes;
};
scan = function scan(array, compare) {
    if (!(n = array.length))
        return;
    var i = 0, n, j = 0, xi, xj = array[j];
    if (!compare)
        compare = ascending;
    while (++i < n)
        if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0)
        xj = xi, j = i;
    if (compare(xj, xj) === 0)
        return j;
};
shuffle = function shuffle(array, i0, i1) {
    var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0), t, i;
    while (m) {
        i = Math.random() * m-- | 0;
        t = array[m + i0];
        array[m + i0] = array[i + i0];
        array[i + i0] = t;
    }
    return array;
};
sum = function sum(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (f == null) {
        while (++i < n)
            if (a = +array[i])
            s += a;
    } else {
        while (++i < n)
            if (a = +f(array[i], i, array))
            s += a;
    }
    return s;
};
transpose = function transpose(matrix) {
    if (!(n = matrix.length))
        return [];
    for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
        for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
            row[j] = matrix[j][i];
        }
    }
    return transpose;
};
length = function length(d) {
    return d.length;
};
zip = function zip() {
    return transpose(arguments);
};
Map = function Map() {
};
map$1 = function map$1(object, f) {
    var map = new Map();
    if (object instanceof Map)
        object.each(function (value, key) {
        map.set(key, value);
    });
    else if (Array.isArray(object)) {
        var i = -1, n = object.length, o;
        if (f == null)
            while (++i < n)
            map.set(i, object[i]);
        else
            while (++i < n)
            map.set(f(o = object[i], i, object), o);
    } else if (object)
        for (var key in object)
        map.set(key, object[key]);
    return map;
};
nest = function nest() {
    var keys = [], sortKeys = [], sortValues, rollup, nest;
    function apply(array, depth, createResult, setResult) {
        if (depth >= keys.length)
            return rollup != null ? rollup(array) : sortValues != null ? array.sort(sortValues) : array;
        var i = -1, n = array.length, key = keys[depth++], keyValue, value, valuesByKey = map$1(), values, result = createResult();
        while (++i < n) {
            if (values = valuesByKey.get(keyValue = key(value = array[i]) + '')) {
                values.push(value);
            } else {
                valuesByKey.set(keyValue, [value]);
            }
        }
        valuesByKey.each(function (values, key) {
            setResult(result, key, apply(values, depth, createResult, setResult));
        });
        return result;
    }
    function entries(map, depth) {
        if (++depth > keys.length)
            return map;
        var array, sortKey = sortKeys[depth - 1];
        if (rollup != null && depth >= keys.length)
            array = map.entries();
        else
            array = [], map.each(function (v, k) {
            array.push({
                key: k,
                values: entries(v, depth)
            });
        });
        return sortKey != null ? array.sort(function (a, b) {
            return sortKey(a.key, b.key);
        }) : array;
    }
    return nest = {
        object: function (array) {
            return apply(array, 0, createObject, setObject);
        },
        map: function (array) {
            return apply(array, 0, createMap, setMap);
        },
        entries: function (array) {
            return entries(apply(array, 0, createMap, setMap), 0);
        },
        key: function (d) {
            keys.push(d);
            return nest;
        },
        sortKeys: function (order) {
            sortKeys[keys.length - 1] = order;
            return nest;
        },
        sortValues: function (order) {
            sortValues = order;
            return nest;
        },
        rollup: function (f) {
            rollup = f;
            return nest;
        }
    };
};
createObject = function createObject() {
    return {};
};
setObject = function setObject(object, key, value) {
    object[key] = value;
};
createMap = function createMap() {
    return map$1();
};
setMap = function setMap(map, key, value) {
    map.set(key, value);
};
Set = function Set() {
};
set = function set(object, f) {
    var set = new Set();
    if (object instanceof Set)
        object.each(function (value) {
        set.add(value);
    });
    else if (object) {
        var i = -1, n = object.length;
        if (f == null)
            while (++i < n)
            set.add(object[i]);
        else
            while (++i < n)
            set.add(f(object[i], i, object));
    }
    return set;
};
keys = function keys(map) {
    var keys = [];
    for (var key in map)
        keys.push(key);
    return keys;
};
values = function values(map) {
    var values = [];
    for (var key in map)
        values.push(map[key]);
    return values;
};
entries = function entries(map) {
    var entries = [];
    for (var key in map)
        entries.push({
        key: key,
        value: map[key]
    });
    return entries;
};
uniform = function uniform(min, max) {
    min = min == null ? 0 : +min;
    max = max == null ? 1 : +max;
    if (arguments.length === 1)
        max = min, min = 0;
    else
        max -= min;
    return function () {
        return Math.random() * max + min;
    };
};
normal = function normal(mu, sigma) {
    var x, r;
    mu = mu == null ? 0 : +mu;
    sigma = sigma == null ? 1 : +sigma;
    return function () {
        var y;
        if (x != null)
            y = x, x = null;
        else
            do {
            x = Math.random() * 2 - 1;
            y = Math.random() * 2 - 1;
            r = x * x + y * y;
        } while (!r || r > 1);
        return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
    };
};
logNormal = function logNormal() {
    var randomNormal = normal.apply(this, arguments);
    return function () {
        return Math.exp(randomNormal());
    };
};
irwinHall = function irwinHall(n) {
    return function () {
        for (var sum = 0, i = 0; i < n; ++i)
            sum += Math.random();
        return sum;
    };
};
bates = function bates(n) {
    var randomIrwinHall = irwinHall(n);
    return function () {
        return randomIrwinHall() / n;
    };
};
exponential = function exponential(lambda) {
    return function () {
        return -Math.log(1 - Math.random()) / lambda;
    };
};
linear = function linear(t) {
    return +t;
};
quadIn = function quadIn(t) {
    return t * t;
};
quadOut = function quadOut(t) {
    return t * (2 - t);
};
quadInOut = function quadInOut(t) {
    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
};
cubicIn = function cubicIn(t) {
    return t * t * t;
};
cubicOut = function cubicOut(t) {
    return --t * t * t + 1;
};
easeCubicInOut = function easeCubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
};
sinIn = function sinIn(t) {
    return 1 - Math.cos(t * halfPi);
};
sinOut = function sinOut(t) {
    return Math.sin(t * halfPi);
};
sinInOut = function sinInOut(t) {
    return (1 - Math.cos(pi * t)) / 2;
};
expIn = function expIn(t) {
    return Math.pow(2, 10 * t - 10);
};
expOut = function expOut(t) {
    return 1 - Math.pow(2, -10 * t);
};
expInOut = function expInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
};
circleIn = function circleIn(t) {
    return 1 - Math.sqrt(1 - t * t);
};
circleOut = function circleOut(t) {
    return Math.sqrt(1 - --t * t);
};
circleInOut = function circleInOut(t) {
    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
};
bounceIn = function bounceIn(t) {
    return 1 - bounceOut(1 - t);
};
bounceOut = function bounceOut(t) {
    return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
};
bounceInOut = function bounceInOut(t) {
    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
};
area = function area(polygon) {
    var i = -1, n = polygon.length, a, b = polygon[n - 1], area = 0;
    while (++i < n) {
        a = b;
        b = polygon[i];
        area += a[1] * b[0] - a[0] * b[1];
    }
    return area / 2;
};
centroid = function centroid(polygon) {
    var i = -1, n = polygon.length, x = 0, y = 0, a, b = polygon[n - 1], c, k = 0;
    while (++i < n) {
        a = b;
        b = polygon[i];
        k += c = a[0] * b[1] - b[0] * a[1];
        x += (a[0] + b[0]) * c;
        y += (a[1] + b[1]) * c;
    }
    return k *= 3, [
        x / k,
        y / k
    ];
};
cross = function cross(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
};
lexicographicOrder = function lexicographicOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
};
computeUpperHullIndexes = function computeUpperHullIndexes(points) {
    var n = points.length, indexes = [
            0,
            1
        ], size = 2;
    for (var i = 2; i < n; ++i) {
        while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0)
            --size;
        indexes[size++] = i;
    }
    return indexes.slice(0, size);
};
hull = function hull(points) {
    if ((n = points.length) < 3)
        return null;
    var i, n, sortedPoints = new Array(n), flippedPoints = new Array(n);
    for (i = 0; i < n; ++i)
        sortedPoints[i] = [
        +points[i][0],
        +points[i][1],
        i
    ];
    sortedPoints.sort(lexicographicOrder);
    for (i = 0; i < n; ++i)
        flippedPoints[i] = [
        sortedPoints[i][0],
        -sortedPoints[i][1]
    ];
    var upperIndexes = computeUpperHullIndexes(sortedPoints), lowerIndexes = computeUpperHullIndexes(flippedPoints);
    var skipLeft = lowerIndexes[0] === upperIndexes[0], skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1], hull = [];
    for (i = upperIndexes.length - 1; i >= 0; --i)
        hull.push(points[sortedPoints[upperIndexes[i]][2]]);
    for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i)
        hull.push(points[sortedPoints[lowerIndexes[i]][2]]);
    return hull;
};
contains = function contains(polygon, point) {
    var n = polygon.length, p = polygon[n - 1], x = point[0], y = point[1], x0 = p[0], y0 = p[1], x1, y1, inside = false;
    for (var i = 0; i < n; ++i) {
        p = polygon[i], x1 = p[0], y1 = p[1];
        if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)
            inside = !inside;
        x0 = x1, y0 = y1;
    }
    return inside;
};
length$1 = function length$1(polygon) {
    var i = -1, n = polygon.length, b = polygon[n - 1], xa, ya, xb = b[0], yb = b[1], perimeter = 0;
    while (++i < n) {
        xa = xb;
        ya = yb;
        b = polygon[i];
        xb = b[0];
        yb = b[1];
        xa -= xb;
        ya -= yb;
        perimeter += Math.sqrt(xa * xa + ya * ya);
    }
    return perimeter;
};
Path = function Path() {
    this._x0 = this._y0 = this._x1 = this._y1 = null;
    this._ = [];
};
path = function path() {
    return new Path();
};
tree_add = function tree_add(d) {
    var x = +this._x.call(null, d), y = +this._y.call(null, d);
    return add(this.cover(x, y), x, y, d);
};
add = function add(tree, x, y, d) {
    if (isNaN(x) || isNaN(y))
        return tree;
    var parent, node = tree._root, leaf = {
            data: d
        }, x0 = tree._x0, y0 = tree._y0, x1 = tree._x1, y1 = tree._y1, xm, ym, xp, yp, right, bottom, i, j;
    if (!node)
        return tree._root = leaf, tree;
    while (node.length) {
        if (right = x >= (xm = (x0 + x1) / 2))
            x0 = xm;
        else
            x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2))
            y0 = ym;
        else
            y1 = ym;
        if (parent = node, !(node = node[i = bottom << 1 | right]))
            return parent[i] = leaf, tree;
    }
    xp = +tree._x.call(null, node.data);
    yp = +tree._y.call(null, node.data);
    if (x === xp && y === yp)
        return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
    do {
        parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
        if (right = x >= (xm = (x0 + x1) / 2))
            x0 = xm;
        else
            x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2))
            y0 = ym;
        else
            y1 = ym;
    } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
    return parent[j] = node, parent[i] = leaf, tree;
};
addAll = function addAll(data) {
    var d, i, n = data.length, x, y, xz = new Array(n), yz = new Array(n), x0 = Infinity, y0 = Infinity, x1 = -Infinity, y1 = -Infinity;
    for (i = 0; i < n; ++i) {
        if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d)))
            continue;
        xz[i] = x;
        yz[i] = y;
        if (x < x0)
            x0 = x;
        if (x > x1)
            x1 = x;
        if (y < y0)
            y0 = y;
        if (y > y1)
            y1 = y;
    }
    if (x1 < x0)
        x0 = this._x0, x1 = this._x1;
    if (y1 < y0)
        y0 = this._y0, y1 = this._y1;
    this.cover(x0, y0).cover(x1, y1);
    for (i = 0; i < n; ++i) {
        add(this, xz[i], yz[i], data[i]);
    }
    return this;
};
tree_cover = function tree_cover(x, y) {
    if (isNaN(x = +x) || isNaN(y = +y))
        return this;
    var x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1;
    if (isNaN(x0)) {
        x1 = (x0 = Math.floor(x)) + 1;
        y1 = (y0 = Math.floor(y)) + 1;
    } else if (x0 > x || x > x1 || y0 > y || y > y1) {
        var z = x1 - x0, node = this._root, parent, i;
        switch (i = (y < (y0 + y1) / 2) << 1 | x < (x0 + x1) / 2) {
        case 0: {
                do
                    parent = new Array(4), parent[i] = node, node = parent;
                while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
                break;
            }
        case 1: {
                do
                    parent = new Array(4), parent[i] = node, node = parent;
                while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
                break;
            }
        case 2: {
                do
                    parent = new Array(4), parent[i] = node, node = parent;
                while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
                break;
            }
        case 3: {
                do
                    parent = new Array(4), parent[i] = node, node = parent;
                while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
                break;
            }
        }
        if (this._root && this._root.length)
            this._root = node;
    } else
        return this;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    return this;
};
tree_data = function tree_data() {
    var data = [];
    this.visit(function (node) {
        if (!node.length)
            do
            data.push(node.data);
        while (node = node.next);
    });
    return data;
};
tree_extent = function tree_extent(_) {
    return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [
        [
            this._x0,
            this._y0
        ],
        [
            this._x1,
            this._y1
        ]
    ];
};
Quad = function Quad(node, x0, y0, x1, y1) {
    this.node = node;
    this.x0 = x0;
    this.y0 = y0;
    this.x1 = x1;
    this.y1 = y1;
};
tree_find = function tree_find(x, y, radius) {
    var data, x0 = this._x0, y0 = this._y0, x1, y1, x2, y2, x3 = this._x1, y3 = this._y1, quads = [], node = this._root, q, i;
    if (node)
        quads.push(new Quad(node, x0, y0, x3, y3));
    if (radius == null)
        radius = Infinity;
    else {
        x0 = x - radius, y0 = y - radius;
        x3 = x + radius, y3 = y + radius;
        radius *= radius;
    }
    while (q = quads.pop()) {
        if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0)
            continue;
        if (node.length) {
            var xm = (x1 + x2) / 2, ym = (y1 + y2) / 2;
            quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym));
            if (i = (y >= ym) << 1 | x >= xm) {
                q = quads[quads.length - 1];
                quads[quads.length - 1] = quads[quads.length - 1 - i];
                quads[quads.length - 1 - i] = q;
            }
        } else {
            var dx = x - +this._x.call(null, node.data), dy = y - +this._y.call(null, node.data), d2 = dx * dx + dy * dy;
            if (d2 < radius) {
                var d = Math.sqrt(radius = d2);
                x0 = x - d, y0 = y - d;
                x3 = x + d, y3 = y + d;
                data = node.data;
            }
        }
    }
    return data;
};
tree_remove = function tree_remove(d) {
    if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)))
        return this;
    var parent, node = this._root, retainer, previous, next, x0 = this._x0, y0 = this._y0, x1 = this._x1, y1 = this._y1, x, y, xm, ym, right, bottom, i, j;
    if (!node)
        return this;
    if (node.length)
        while (true) {
        if (right = x >= (xm = (x0 + x1) / 2))
            x0 = xm;
        else
            x1 = xm;
        if (bottom = y >= (ym = (y0 + y1) / 2))
            y0 = ym;
        else
            y1 = ym;
        if (!(parent = node, node = node[i = bottom << 1 | right]))
            return this;
        if (!node.length)
            break;
        if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3])
            retainer = parent, j = i;
    }
    while (node.data !== d)
        if (!(previous = node, node = node.next))
        return this;
    if (next = node.next)
        delete node.next;
    if (previous)
        return next ? previous.next = next : delete previous.next, this;
    if (!parent)
        return this._root = next, this;
    next ? parent[i] = next : delete parent[i];
    if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
        if (retainer)
            retainer[j] = node;
        else
            this._root = node;
    }
    return this;
};
removeAll = function removeAll(data) {
    for (var i = 0, n = data.length; i < n; ++i)
        this.remove(data[i]);
    return this;
};
tree_root = function tree_root() {
    return this._root;
};
tree_size = function tree_size() {
    var size = 0;
    this.visit(function (node) {
        if (!node.length)
            do
            ++size;
        while (node = node.next);
    });
    return size;
};
tree_visit = function tree_visit(callback) {
    var quads = [], q, node = this._root, child, x0, y0, x1, y1;
    if (node)
        quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
        if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
            var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
            if (child = node[3])
                quads.push(new Quad(child, xm, ym, x1, y1));
            if (child = node[2])
                quads.push(new Quad(child, x0, ym, xm, y1));
            if (child = node[1])
                quads.push(new Quad(child, xm, y0, x1, ym));
            if (child = node[0])
                quads.push(new Quad(child, x0, y0, xm, ym));
        }
    }
    return this;
};
tree_visitAfter = function tree_visitAfter(callback) {
    var quads = [], next = [], q;
    if (this._root)
        quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
    while (q = quads.pop()) {
        var node = q.node;
        if (node.length) {
            var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
            if (child = node[0])
                quads.push(new Quad(child, x0, y0, xm, ym));
            if (child = node[1])
                quads.push(new Quad(child, xm, y0, x1, ym));
            if (child = node[2])
                quads.push(new Quad(child, x0, ym, xm, y1));
            if (child = node[3])
                quads.push(new Quad(child, xm, ym, x1, y1));
        }
        next.push(q);
    }
    while (q = next.pop()) {
        callback(q.node, q.x0, q.y0, q.x1, q.y1);
    }
    return this;
};
defaultX = function defaultX(d) {
    return d[0];
};
tree_x = function tree_x(_) {
    return arguments.length ? (this._x = _, this) : this._x;
};
defaultY = function defaultY(d) {
    return d[1];
};
tree_y = function tree_y(_) {
    return arguments.length ? (this._y = _, this) : this._y;
};
quadtree = function quadtree(nodes, x, y) {
    var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
    return nodes == null ? tree : tree.addAll(nodes);
};
Quadtree = function Quadtree(x, y, x0, y0, x1, y1) {
    this._x = x;
    this._y = y;
    this._x0 = x0;
    this._y0 = y0;
    this._x1 = x1;
    this._y1 = y1;
    this._root = undefined;
};
leaf_copy = function leaf_copy(leaf) {
    var copy = {
            data: leaf.data
        }, next = copy;
    while (leaf = leaf.next)
        next = next.next = {
        data: leaf.data
    };
    return copy;
};
Queue = function Queue(size) {
    if (!(size >= 1))
        throw new Error();
    this._size = size;
    this._call = this._error = null;
    this._tasks = [];
    this._data = [];
    this._waiting = this._active = this._ended = this._start = 0;
};
poke = function poke(q) {
    if (!q._start)
        try {
        start(q);
    } catch (e) {
        if (q._tasks[q._ended + q._active - 1])
            abort(q, e);
    }
};
start = function start(q) {
    while (q._start = q._waiting && q._active < q._size) {
        var i = q._ended + q._active, t = q._tasks[i], j = t.length - 1, c = t[j];
        t[j] = end(q, i);
        --q._waiting, ++q._active;
        t = c.apply(null, t);
        if (!q._tasks[i])
            continue;
        q._tasks[i] = t || noabort;
    }
};
end = function end(q, i) {
    return function (e, r) {
        if (!q._tasks[i])
            return;
        --q._active, ++q._ended;
        q._tasks[i] = null;
        if (q._error != null)
            return;
        if (e != null) {
            abort(q, e);
        } else {
            q._data[i] = r;
            if (q._waiting)
                poke(q);
            else
                maybeNotify(q);
        }
    };
};
abort = function abort(q, e) {
    var i = q._tasks.length, t;
    q._error = e;
    q._data = undefined;
    q._waiting = NaN;
    while (--i >= 0) {
        if (t = q._tasks[i]) {
            q._tasks[i] = null;
            if (t.abort)
                try {
                t.abort();
            } catch (e) {
            }
        }
    }
    q._active = NaN;
    maybeNotify(q);
};
maybeNotify = function maybeNotify(q) {
    if (!q._active && q._call)
        q._call(q._error, q._data);
};
queue = function queue(concurrency) {
    return new Queue(arguments.length ? +concurrency : Infinity);
};
constant$1 = function constant$1(x) {
    return function constant() {
        return x;
    };
};
arcInnerRadius = function arcInnerRadius(d) {
    return d.innerRadius;
};
arcOuterRadius = function arcOuterRadius(d) {
    return d.outerRadius;
};
arcStartAngle = function arcStartAngle(d) {
    return d.startAngle;
};
arcEndAngle = function arcEndAngle(d) {
    return d.endAngle;
};
arcPadAngle = function arcPadAngle(d) {
    return d && d.padAngle;
};
asin = function asin(x) {
    return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);
};
intersect = function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
    return [
        x0 + t * x10,
        y0 + t * y10
    ];
};
cornerTangents = function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
        cx0 = cx1, cy0 = cy1;
    return {
        cx: cx0,
        cy: cy0,
        x01: -ox,
        y01: -oy,
        x11: cx0 * (r1 / r - 1),
        y11: cy0 * (r1 / r - 1)
    };
};
arc = function arc() {
    var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant$1(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
    function arc() {
        var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi$1, a1 = endAngle.apply(this, arguments) - halfPi$1, da = Math.abs(a1 - a0), cw = a1 > a0;
        if (!context)
            context = buffer = path();
        if (r1 < r0)
            r = r1, r1 = r0, r0 = r;
        if (!(r1 > epsilon$1))
            context.moveTo(0, 0);
        else if (da > tau$2 - epsilon$1) {
            context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
            context.arc(0, 0, r1, a0, a1, !cw);
            if (r0 > epsilon$1) {
                context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
                context.arc(0, 0, r0, a1, a0, cw);
            }
        } else {
            var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon$1 && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)), rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
            if (rp > epsilon$1) {
                var p0 = asin(rp / r0 * Math.sin(ap)), p1 = asin(rp / r1 * Math.sin(ap));
                if ((da0 -= p0 * 2) > epsilon$1)
                    p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
                else
                    da0 = 0, a00 = a10 = (a0 + a1) / 2;
                if ((da1 -= p1 * 2) > epsilon$1)
                    p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
                else
                    da1 = 0, a01 = a11 = (a0 + a1) / 2;
            }
            var x01 = r1 * Math.cos(a01), y01 = r1 * Math.sin(a01), x10 = r0 * Math.cos(a10), y10 = r0 * Math.sin(a10);
            if (rc > epsilon$1) {
                var x11 = r1 * Math.cos(a11), y11 = r1 * Math.sin(a11), x00 = r0 * Math.cos(a00), y00 = r0 * Math.sin(a00);
                if (da < pi$2) {
                    var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [
                            x10,
                            y10
                        ], ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                    rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
                    rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
                }
            }
            if (!(da1 > epsilon$1))
                context.moveTo(x01, y01);
            else if (rc1 > epsilon$1) {
                t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
                if (rc1 < rc)
                    context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
                else {
                    context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                    context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                }
            } else
                context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
            if (!(r0 > epsilon$1) || !(da0 > epsilon$1))
                context.lineTo(x10, y10);
            else if (rc0 > epsilon$1) {
                t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
                if (rc0 < rc)
                    context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
                else {
                    context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                    context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                    context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
                }
            } else
                context.arc(0, 0, r0, a10, a00, cw);
        }
        context.closePath();
        if (buffer)
            return context = null, buffer + '' || null;
    }
    arc.centroid = function () {
        var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;
        return [
            Math.cos(a) * r,
            Math.sin(a) * r
        ];
    };
    arc.innerRadius = function (_) {
        return arguments.length ? (innerRadius = typeof _ === 'function' ? _ : constant$1(+_), arc) : innerRadius;
    };
    arc.outerRadius = function (_) {
        return arguments.length ? (outerRadius = typeof _ === 'function' ? _ : constant$1(+_), arc) : outerRadius;
    };
    arc.cornerRadius = function (_) {
        return arguments.length ? (cornerRadius = typeof _ === 'function' ? _ : constant$1(+_), arc) : cornerRadius;
    };
    arc.padRadius = function (_) {
        return arguments.length ? (padRadius = _ == null ? null : typeof _ === 'function' ? _ : constant$1(+_), arc) : padRadius;
    };
    arc.startAngle = function (_) {
        return arguments.length ? (startAngle = typeof _ === 'function' ? _ : constant$1(+_), arc) : startAngle;
    };
    arc.endAngle = function (_) {
        return arguments.length ? (endAngle = typeof _ === 'function' ? _ : constant$1(+_), arc) : endAngle;
    };
    arc.padAngle = function (_) {
        return arguments.length ? (padAngle = typeof _ === 'function' ? _ : constant$1(+_), arc) : padAngle;
    };
    arc.context = function (_) {
        return arguments.length ? (context = _ == null ? null : _, arc) : context;
    };
    return arc;
};
Linear = function Linear(context) {
    this._context = context;
};
curveLinear = function curveLinear(context) {
    return new Linear(context);
};
x = function x(p) {
    return p[0];
};
y = function y(p) {
    return p[1];
};
line = function line() {
    var x$$ = x, y$$ = y, defined = constant$1(true), context = null, curve = curveLinear, output = null;
    function line(data) {
        var i, n = data.length, d, defined0 = false, buffer;
        if (context == null)
            output = curve(buffer = path());
        for (i = 0; i <= n; ++i) {
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0)
                    output.lineStart();
                else
                    output.lineEnd();
            }
            if (defined0)
                output.point(+x$$(d, i, data), +y$$(d, i, data));
        }
        if (buffer)
            return output = null, buffer + '' || null;
    }
    line.x = function (_) {
        return arguments.length ? (x$$ = typeof _ === 'function' ? _ : constant$1(+_), line) : x$$;
    };
    line.y = function (_) {
        return arguments.length ? (y$$ = typeof _ === 'function' ? _ : constant$1(+_), line) : y$$;
    };
    line.defined = function (_) {
        return arguments.length ? (defined = typeof _ === 'function' ? _ : constant$1(!!_), line) : defined;
    };
    line.curve = function (_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function (_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };
    return line;
};
area$1 = function area$1() {
    var x0 = x, x1 = null, y0 = constant$1(0), y1 = y, defined = constant$1(true), context = null, curve = curveLinear, output = null;
    function area(data) {
        var i, j, k, n = data.length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
        if (context == null)
            output = curve(buffer = path());
        for (i = 0; i <= n; ++i) {
            if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                if (defined0 = !defined0) {
                    j = i;
                    output.areaStart();
                    output.lineStart();
                } else {
                    output.lineEnd();
                    output.lineStart();
                    for (k = i - 1; k >= j; --k) {
                        output.point(x0z[k], y0z[k]);
                    }
                    output.lineEnd();
                    output.areaEnd();
                }
            }
            if (defined0) {
                x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
                output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
            }
        }
        if (buffer)
            return output = null, buffer + '' || null;
    }
    function arealine() {
        return line().defined(defined).curve(curve).context(context);
    }
    area.x = function (_) {
        return arguments.length ? (x0 = typeof _ === 'function' ? _ : constant$1(+_), x1 = null, area) : x0;
    };
    area.x0 = function (_) {
        return arguments.length ? (x0 = typeof _ === 'function' ? _ : constant$1(+_), area) : x0;
    };
    area.x1 = function (_) {
        return arguments.length ? (x1 = _ == null ? null : typeof _ === 'function' ? _ : constant$1(+_), area) : x1;
    };
    area.y = function (_) {
        return arguments.length ? (y0 = typeof _ === 'function' ? _ : constant$1(+_), y1 = null, area) : y0;
    };
    area.y0 = function (_) {
        return arguments.length ? (y0 = typeof _ === 'function' ? _ : constant$1(+_), area) : y0;
    };
    area.y1 = function (_) {
        return arguments.length ? (y1 = _ == null ? null : typeof _ === 'function' ? _ : constant$1(+_), area) : y1;
    };
    area.lineX0 = area.lineY0 = function () {
        return arealine().x(x0).y(y0);
    };
    area.lineY1 = function () {
        return arealine().x(x0).y(y1);
    };
    area.lineX1 = function () {
        return arealine().x(x1).y(y0);
    };
    area.defined = function (_) {
        return arguments.length ? (defined = typeof _ === 'function' ? _ : constant$1(!!_), area) : defined;
    };
    area.curve = function (_) {
        return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };
    area.context = function (_) {
        return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };
    return area;
};
descending$1 = function descending$1(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
};
identity$1 = function identity$1(d) {
    return d;
};
pie = function pie() {
    var value = identity$1, sortValues = descending$1, sort = null, startAngle = constant$1(0), endAngle = constant$1(tau$2), padAngle = constant$1(0);
    function pie(data) {
        var i, n = data.length, j, k, sum = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau$2, Math.max(-tau$2, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
        for (i = 0; i < n; ++i) {
            if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
                sum += v;
            }
        }
        if (sortValues != null)
            index.sort(function (i, j) {
            return sortValues(arcs[i], arcs[j]);
        });
        else if (sort != null)
            index.sort(function (i, j) {
            return sort(data[i], data[j]);
        });
        for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
            j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
                data: data[j],
                index: i,
                value: v,
                startAngle: a0,
                endAngle: a1,
                padAngle: p
            };
        }
        return arcs;
    }
    pie.value = function (_) {
        return arguments.length ? (value = typeof _ === 'function' ? _ : constant$1(+_), pie) : value;
    };
    pie.sortValues = function (_) {
        return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
    };
    pie.sort = function (_) {
        return arguments.length ? (sort = _, sortValues = null, pie) : sort;
    };
    pie.startAngle = function (_) {
        return arguments.length ? (startAngle = typeof _ === 'function' ? _ : constant$1(+_), pie) : startAngle;
    };
    pie.endAngle = function (_) {
        return arguments.length ? (endAngle = typeof _ === 'function' ? _ : constant$1(+_), pie) : endAngle;
    };
    pie.padAngle = function (_) {
        return arguments.length ? (padAngle = typeof _ === 'function' ? _ : constant$1(+_), pie) : padAngle;
    };
    return pie;
};
Radial = function Radial(curve) {
    this._curve = curve;
};
curveRadial = function curveRadial(curve) {
    function radial(context) {
        return new Radial(curve(context));
    }
    radial._curve = curve;
    return radial;
};
radialLine = function radialLine(l) {
    var c = l.curve;
    l.angle = l.x, delete l.x;
    l.radius = l.y, delete l.y;
    l.curve = function (_) {
        return arguments.length ? c(curveRadial(_)) : c()._curve;
    };
    return l;
};
radialLine$1 = function radialLine$1() {
    return radialLine(line().curve(curveRadialLinear));
};
radialArea = function radialArea() {
    var a = area$1().curve(curveRadialLinear), c = a.curve, x0 = a.lineX0, x1 = a.lineX1, y0 = a.lineY0, y1 = a.lineY1;
    a.angle = a.x, delete a.x;
    a.startAngle = a.x0, delete a.x0;
    a.endAngle = a.x1, delete a.x1;
    a.radius = a.y, delete a.y;
    a.innerRadius = a.y0, delete a.y0;
    a.outerRadius = a.y1, delete a.y1;
    a.lineStartAngle = function () {
        return radialLine(x0());
    }, delete a.lineX0;
    a.lineEndAngle = function () {
        return radialLine(x1());
    }, delete a.lineX1;
    a.lineInnerRadius = function () {
        return radialLine(y0());
    }, delete a.lineY0;
    a.lineOuterRadius = function () {
        return radialLine(y1());
    }, delete a.lineY1;
    a.curve = function (_) {
        return arguments.length ? c(curveRadial(_)) : c()._curve;
    };
    return a;
};
symbol = function symbol() {
    var type = constant$1(circle), size = constant$1(64), context = null;
    function symbol() {
        var buffer;
        if (!context)
            context = buffer = path();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer)
            return context = null, buffer + '' || null;
    }
    symbol.type = function (_) {
        return arguments.length ? (type = typeof _ === 'function' ? _ : constant$1(_), symbol) : type;
    };
    symbol.size = function (_) {
        return arguments.length ? (size = typeof _ === 'function' ? _ : constant$1(+_), symbol) : size;
    };
    symbol.context = function (_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };
    return symbol;
};
noop = function noop() {
};
point = function point(that, x, y) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
};
Basis = function Basis(context) {
    this._context = context;
};
basis = function basis(context) {
    return new Basis(context);
};
BasisClosed = function BasisClosed(context) {
    this._context = context;
};
basisClosed = function basisClosed(context) {
    return new BasisClosed(context);
};
BasisOpen = function BasisOpen(context) {
    this._context = context;
};
basisOpen = function basisOpen(context) {
    return new BasisOpen(context);
};
Bundle = function Bundle(context, beta) {
    this._basis = new Basis(context);
    this._beta = beta;
};
point$1 = function point$1(that, x, y) {
    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
};
Cardinal = function Cardinal(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
};
CardinalClosed = function CardinalClosed(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
};
CardinalOpen = function CardinalOpen(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
};
point$2 = function point$2(that, x, y) {
    var x1 = that._x1, y1 = that._y1, x2 = that._x2, y2 = that._y2;
    if (that._l01_a > epsilon$1) {
        var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > epsilon$1) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
        y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
    }
    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
};
CatmullRom = function CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
};
CatmullRomClosed = function CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
};
CatmullRomOpen = function CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
};
LinearClosed = function LinearClosed(context) {
    this._context = context;
};
linearClosed = function linearClosed(context) {
    return new LinearClosed(context);
};
sign = function sign(x) {
    return x < 0 ? -1 : 1;
};
slope3 = function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
};
slope2 = function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
};
point$3 = function point$3(that, t0, t1) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
};
MonotoneX = function MonotoneX(context) {
    this._context = context;
};
MonotoneY = function MonotoneY(context) {
    this._context = new ReflectContext(context);
};
ReflectContext = function ReflectContext(context) {
    this._context = context;
};
monotoneX = function monotoneX(context) {
    return new MonotoneX(context);
};
monotoneY = function monotoneY(context) {
    return new MonotoneY(context);
};
Natural = function Natural(context) {
    this._context = context;
};
controlPoints = function controlPoints(x) {
    var i, n = x.length - 1, m, a = new Array(n), b = new Array(n), r = new Array(n);
    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
    for (i = 1; i < n - 1; ++i)
        a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
    for (i = 1; i < n; ++i)
        m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
    a[n - 1] = r[n - 1] / b[n - 1];
    for (i = n - 2; i >= 0; --i)
        a[i] = (r[i] - a[i + 1]) / b[i];
    b[n - 1] = (x[n] + a[n - 1]) / 2;
    for (i = 0; i < n - 1; ++i)
        b[i] = 2 * x[i + 1] - a[i + 1];
    return [
        a,
        b
    ];
};
natural = function natural(context) {
    return new Natural(context);
};
Step = function Step(context, t) {
    this._context = context;
    this._t = t;
};
step = function step(context) {
    return new Step(context, 0.5);
};
stepBefore = function stepBefore(context) {
    return new Step(context, 0);
};
stepAfter = function stepAfter(context) {
    return new Step(context, 1);
};
none = function none(series, order) {
    if (!((n = series.length) > 1))
        return;
    for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
        s0 = s1, s1 = series[order[i]];
        for (var j = 0; j < m; ++j) {
            s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
        }
    }
};
none$1 = function none$1(series) {
    var n = series.length, o = new Array(n);
    while (--n >= 0)
        o[n] = n;
    return o;
};
stackValue = function stackValue(d, key) {
    return d[key];
};
stack = function stack() {
    var keys = constant$1([]), order = none$1, offset = none, value = stackValue;
    function stack(data) {
        var kz = keys.apply(this, arguments), i, m = data.length, n = kz.length, sz = new Array(n), oz;
        for (i = 0; i < n; ++i) {
            for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
                si[j] = sij = [
                    0,
                    +value(data[j], ki, j, data)
                ];
                sij.data = data[j];
            }
            si.key = ki;
        }
        for (i = 0, oz = (order(sz)); i < n; ++i) {
            sz[oz[i]].index = i;
        }
        offset(sz, oz);
        return sz;
    }
    stack.keys = function (_) {
        return arguments.length ? (keys = typeof _ === 'function' ? _ : constant$1(slice$2.call(_)), stack) : keys;
    };
    stack.value = function (_) {
        return arguments.length ? (value = typeof _ === 'function' ? _ : constant$1(+_), stack) : value;
    };
    stack.order = function (_) {
        return arguments.length ? (order = _ == null ? none$1 : typeof _ === 'function' ? _ : constant$1(slice$2.call(_)), stack) : order;
    };
    stack.offset = function (_) {
        return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
    };
    return stack;
};
expand = function expand(series, order) {
    if (!((n = series.length) > 0))
        return;
    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
        for (y = i = 0; i < n; ++i)
            y += series[i][j][1] || 0;
        if (y)
            for (i = 0; i < n; ++i)
            series[i][j][1] /= y;
    }
    none(series, order);
};
silhouette = function silhouette(series, order) {
    if (!((n = series.length) > 0))
        return;
    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
        for (var i = 0, y = 0; i < n; ++i)
            y += series[i][j][1] || 0;
        s0[j][1] += s0[j][0] = -y / 2;
    }
    none(series, order);
};
wiggle = function wiggle(series, order) {
    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0))
        return;
    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
        for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
            var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
            for (var k = 0; k < i; ++k) {
                var sk = series[order[k]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
                s3 += skj0 - skj1;
            }
            s1 += sij0, s2 += s3 * sij0;
        }
        s0[j - 1][1] += s0[j - 1][0] = y;
        if (s1)
            y -= s2 / s1;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    none(series, order);
};
ascending$1 = function ascending$1(series) {
    var sums = series.map(sum$1);
    return none$1(series).sort(function (a, b) {
        return sums[a] - sums[b];
    });
};
sum$1 = function sum$1(series) {
    var s = 0, i = -1, n = series.length, v;
    while (++i < n)
        if (v = +series[i][1])
        s += v;
    return s;
};
descending$2 = function descending$2(series) {
    return ascending$1(series).reverse();
};
insideOut = function insideOut(series) {
    var n = series.length, i, j, sums = series.map(sum$1), order = none$1(series).sort(function (a, b) {
            return sums[b] - sums[a];
        }), top = 0, bottom = 0, tops = [], bottoms = [];
    for (i = 0; i < n; ++i) {
        j = order[i];
        if (top < bottom) {
            top += sums[j];
            tops.push(j);
        } else {
            bottom += sums[j];
            bottoms.push(j);
        }
    }
    return bottoms.reverse().concat(tops);
};
reverse = function reverse(series) {
    return none$1(series).reverse();
};
define = function define(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
};
extend = function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition)
        prototype[key] = definition[key];
    return prototype;
};
Color = function Color() {
};
color = function color(format) {
    var m;
    format = (format + '').trim().toLowerCase();
    return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1)) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === 'transparent' ? new Rgb(NaN, NaN, NaN, 0) : null;
};
rgbn = function rgbn(n) {
    return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
};
rgba = function rgba(r, g, b, a) {
    if (a <= 0)
        r = g = b = NaN;
    return new Rgb(r, g, b, a);
};
rgbConvert = function rgbConvert(o) {
    if (!(o instanceof Color))
        o = color(o);
    if (!o)
        return new Rgb();
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
};
colorRgb = function colorRgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
};
Rgb = function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
};
hsla = function hsla(h, s, l, a) {
    if (a <= 0)
        h = s = l = NaN;
    else if (l <= 0 || l >= 1)
        h = s = NaN;
    else if (s <= 0)
        h = NaN;
    return new Hsl(h, s, l, a);
};
hslConvert = function hslConvert(o) {
    if (o instanceof Hsl)
        return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color))
        o = color(o);
    if (!o)
        return new Hsl();
    if (o instanceof Hsl)
        return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
    if (s) {
        if (r === max)
            h = (g - b) / s + (g < b) * 6;
        else if (g === max)
            h = (b - r) / s + 2;
        else
            h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
    } else {
        s = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl(h, s, l, o.opacity);
};
colorHsl = function colorHsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
};
Hsl = function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
};
hsl2rgb = function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
};
labConvert = function labConvert(o) {
    if (o instanceof Lab)
        return new Lab(o.l, o.a, o.b, o.opacity);
    if (o instanceof Hcl) {
        var h = o.h * deg2rad;
        return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
    }
    if (!(o instanceof Rgb))
        o = rgbConvert(o);
    var b = rgb2xyz(o.r), a = rgb2xyz(o.g), l = rgb2xyz(o.b), x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn), y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.072175 * l) / Yn), z = xyz2lab((0.0193339 * b + 0.119192 * a + 0.9503041 * l) / Zn);
    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
};
lab = function lab(l, a, b, opacity) {
    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
};
Lab = function Lab(l, a, b, opacity) {
    this.l = +l;
    this.a = +a;
    this.b = +b;
    this.opacity = +opacity;
};
xyz2lab = function xyz2lab(t) {
    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
};
lab2xyz = function lab2xyz(t) {
    return t > t1 ? t * t * t : t2 * (t - t0);
};
xyz2rgb = function xyz2rgb(x) {
    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
};
rgb2xyz = function rgb2xyz(x) {
    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
};
hclConvert = function hclConvert(o) {
    if (o instanceof Hcl)
        return new Hcl(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof Lab))
        o = labConvert(o);
    var h = Math.atan2(o.b, o.a) * rad2deg;
    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
};
colorHcl = function colorHcl(h, c, l, opacity) {
    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
};
Hcl = function Hcl(h, c, l, opacity) {
    this.h = +h;
    this.c = +c;
    this.l = +l;
    this.opacity = +opacity;
};
cubehelixConvert = function cubehelixConvert(o) {
    if (o instanceof Cubehelix)
        return new Cubehelix(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Rgb))
        o = rgbConvert(o);
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
};
cubehelix = function cubehelix(h, s, l, opacity) {
    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
};
Cubehelix = function Cubehelix(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
};
basis$1 = function basis$1(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
};
basis$2 = function basis$2(values) {
    var n = values.length - 1;
    return function (t) {
        var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
        return basis$1((t - i / n) * n, v0, v1, v2, v3);
    };
};
basisClosed$1 = function basisClosed$1(values) {
    var n = values.length;
    return function (t) {
        var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
        return basis$1((t - i / n) * n, v0, v1, v2, v3);
    };
};
constant$2 = function constant$2(x) {
    return function () {
        return x;
    };
};
linear$1 = function linear$1(a, d) {
    return function (t) {
        return a + t * d;
    };
};
exponential$1 = function exponential$1(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
        return Math.pow(a + t * b, y);
    };
};
hue = function hue(a, b) {
    var d = b - a;
    return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);
};
gamma = function gamma(y) {
    return (y = +y) === 1 ? nogamma : function (a, b) {
        return b - a ? exponential$1(a, b, y) : constant$2(isNaN(a) ? b : a);
    };
};
nogamma = function nogamma(a, b) {
    var d = b - a;
    return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);
};
rgbSpline = function rgbSpline(spline) {
    return function (colors) {
        var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color;
        for (i = 0; i < n; ++i) {
            color = colorRgb(colors[i]);
            r[i] = color.r || 0;
            g[i] = color.g || 0;
            b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function (t) {
            color.r = r(t);
            color.g = g(t);
            color.b = b(t);
            return color + '';
        };
    };
};
array$1 = function array$1(a, b) {
    var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(nb), c = new Array(nb), i;
    for (i = 0; i < na; ++i)
        x[i] = interpolate(a[i], b[i]);
    for (; i < nb; ++i)
        c[i] = b[i];
    return function (t) {
        for (i = 0; i < na; ++i)
            c[i] = x[i](t);
        return c;
    };
};
date = function date(a, b) {
    var d = new Date();
    return a = +a, b -= a, function (t) {
        return d.setTime(a + b * t), d;
    };
};
interpolateNumber = function interpolateNumber(a, b) {
    return a = +a, b -= a, function (t) {
        return a + b * t;
    };
};
object = function object(a, b) {
    var i = {}, c = {}, k;
    if (a === null || typeof a !== 'object')
        a = {};
    if (b === null || typeof b !== 'object')
        b = {};
    for (k in b) {
        if (k in a) {
            i[k] = interpolate(a[k], b[k]);
        } else {
            c[k] = b[k];
        }
    }
    return function (t) {
        for (k in i)
            c[k] = i[k](t);
        return c;
    };
};
zero = function zero(b) {
    return function () {
        return b;
    };
};
one = function one(b) {
    return function (t) {
        return b(t) + '';
    };
};
interpolateString = function interpolateString(a, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + '', b = b + '';
    while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
        if ((bs = bm.index) > bi) {
            bs = b.slice(bi, bs);
            if (s[i])
                s[i] += bs;
            else
                s[++i] = bs;
        }
        if ((am = am[0]) === (bm = bm[0])) {
            if (s[i])
                s[i] += bm;
            else
                s[++i] = bm;
        } else {
            s[++i] = null;
            q.push({
                i: i,
                x: interpolateNumber(am, bm)
            });
        }
        bi = reB.lastIndex;
    }
    if (bi < b.length) {
        bs = b.slice(bi);
        if (s[i])
            s[i] += bs;
        else
            s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
        for (var i = 0, o; i < b; ++i)
            s[(o = q[i]).i] = o.x(t);
        return s.join('');
    });
};
interpolate = function interpolate(a, b) {
    var t = typeof b, c;
    return b == null || t === 'boolean' ? constant$2(b) : (t === 'number' ? interpolateNumber : t === 'string' ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : Array.isArray(b) ? array$1 : isNaN(b) ? object : interpolateNumber)(a, b);
};
interpolateRound = function interpolateRound(a, b) {
    return a = +a, b -= a, function (t) {
        return Math.round(a + b * t);
    };
};
decompose = function decompose(a, b, c, d, e, f) {
    var scaleX, scaleY, skewX;
    if (scaleX = Math.sqrt(a * a + b * b))
        a /= scaleX, b /= scaleX;
    if (skewX = a * c + b * d)
        c -= a * skewX, d -= b * skewX;
    if (scaleY = Math.sqrt(c * c + d * d))
        c /= scaleY, d /= scaleY, skewX /= scaleY;
    if (a * d < b * c)
        a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
    return {
        translateX: e,
        translateY: f,
        rotate: Math.atan2(b, a) * degrees,
        skewX: Math.atan(skewX) * degrees,
        scaleX: scaleX,
        scaleY: scaleY
    };
};
parseCss = function parseCss(value) {
    if (value === 'none')
        return identity$2;
    if (!cssNode)
        cssNode = document.createElement('DIV'), cssRoot = document.documentElement, cssView = document.defaultView;
    cssNode.style.transform = value;
    value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue('transform');
    cssRoot.removeChild(cssNode);
    value = value.slice(7, -1).split(',');
    return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
};
parseSvg = function parseSvg(value) {
    if (value == null)
        return identity$2;
    if (!svgNode)
        svgNode = document.createElementNS('http://www.w3.org/2000/svg', 'g');
    svgNode.setAttribute('transform', value);
    if (!(value = svgNode.transform.baseVal.consolidate()))
        return identity$2;
    value = value.matrix;
    return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
};
interpolateTransform = function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
        return s.length ? s.pop() + ' ' : '';
    }
    function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
            var i = s.push('translate(', null, pxComma, null, pxParen);
            q.push({
                i: i - 4,
                x: interpolateNumber(xa, xb)
            }, {
                i: i - 2,
                x: interpolateNumber(ya, yb)
            });
        } else if (xb || yb) {
            s.push('translate(' + xb + pxComma + yb + pxParen);
        }
    }
    function rotate(a, b, s, q) {
        if (a !== b) {
            if (a - b > 180)
                b += 360;
            else if (b - a > 180)
                a += 360;
            q.push({
                i: s.push(pop(s) + 'rotate(', null, degParen) - 2,
                x: interpolateNumber(a, b)
            });
        } else if (b) {
            s.push(pop(s) + 'rotate(' + b + degParen);
        }
    }
    function skewX(a, b, s, q) {
        if (a !== b) {
            q.push({
                i: s.push(pop(s) + 'skewX(', null, degParen) - 2,
                x: interpolateNumber(a, b)
            });
        } else if (b) {
            s.push(pop(s) + 'skewX(' + b + degParen);
        }
    }
    function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
            var i = s.push(pop(s) + 'scale(', null, ',', null, ')');
            q.push({
                i: i - 4,
                x: interpolateNumber(xa, xb)
            }, {
                i: i - 2,
                x: interpolateNumber(ya, yb)
            });
        } else if (xb !== 1 || yb !== 1) {
            s.push(pop(s) + 'scale(' + xb + ',' + yb + ')');
        }
    }
    return function (a, b) {
        var s = [], q = [];
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null;
        return function (t) {
            var i = -1, n = q.length, o;
            while (++i < n)
                s[(o = q[i]).i] = o.x(t);
            return s.join('');
        };
    };
};
cosh = function cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
};
sinh = function sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
};
tanh = function tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
};
interpolateZoom = function interpolateZoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon2) {
        S = Math.log(w1 / w0) / rho;
        i = function (t) {
            return [
                ux0 + t * dx,
                uy0 + t * dy,
                w0 * Math.exp(rho * t * S)
            ];
        };
    } else {
        var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
        S = (r1 - r0) / rho;
        i = function (t) {
            var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
            return [
                ux0 + u * dx,
                uy0 + u * dy,
                w0 * coshr0 / cosh(rho * s + r0)
            ];
        };
    }
    i.duration = S * 1000;
    return i;
};
hsl = function hsl(hue) {
    return function (start, end) {
        var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
        return function (t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + '';
        };
    };
};
lab$1 = function lab$1(start, end) {
    var l = nogamma((start = lab(start)).l, (end = lab(end)).l), a = nogamma(start.a, end.a), b = nogamma(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + '';
    };
};
hcl = function hcl(hue) {
    return function (start, end) {
        var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h), c = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
        return function (t) {
            start.h = h(t);
            start.c = c(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + '';
        };
    };
};
cubehelix$1 = function cubehelix$1(hue) {
    return function cubehelixGamma(y) {
        y = +y;
        function cubehelix$$(start, end) {
            var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
            return function (t) {
                start.h = h(t);
                start.s = s(t);
                start.l = l(Math.pow(t, y));
                start.opacity = opacity(t);
                return start + '';
            };
        }
        cubehelix$$.gamma = cubehelixGamma;
        return cubehelix$$;
    }(1);
};
quantize = function quantize(interpolator, n) {
    var samples = new Array(n);
    for (var i = 0; i < n; ++i)
        samples[i] = interpolator(i / (n - 1));
    return samples;
};
dispatch = function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
        if (!(t = arguments[i] + '') || t in _)
            throw new Error('illegal type: ' + t);
        _[t] = [];
    }
    return new Dispatch(_);
};
Dispatch = function Dispatch(_) {
    this._ = _;
};
parseTypenames = function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function (t) {
        var name = '', i = t.indexOf('.');
        if (i >= 0)
            name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t))
            throw new Error('unknown type: ' + t);
        return {
            type: t,
            name: name
        };
    });
};
get = function get(type, name) {
    for (var i = 0, n = type.length, c; i < n; ++i) {
        if ((c = type[i]).name === name) {
            return c.value;
        }
    }
};
set$1 = function set$1(type, name, callback) {
    for (var i = 0, n = type.length; i < n; ++i) {
        if (type[i].name === name) {
            type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
            break;
        }
    }
    if (callback != null)
        type.push({
        name: name,
        value: callback
    });
    return type;
};
objectConverter = function objectConverter(columns) {
    return new Function('d', 'return {' + columns.map(function (name, i) {
        return JSON.stringify(name) + ': d[' + i + ']';
    }).join(',') + '}');
};
customConverter = function customConverter(columns, f) {
    var object = objectConverter(columns);
    return function (row, i) {
        return f(object(row), i, columns);
    };
};
inferColumns = function inferColumns(rows) {
    var columnSet = Object.create(null), columns = [];
    rows.forEach(function (row) {
        for (var column in row) {
            if (!(column in columnSet)) {
                columns.push(columnSet[column] = column);
            }
        }
    });
    return columns;
};
dsv = function dsv(delimiter) {
    var reFormat = new RegExp('["' + delimiter + '\n]'), delimiterCode = delimiter.charCodeAt(0);
    function parse(text, f) {
        var convert, columns, rows = parseRows(text, function (row, i) {
                if (convert)
                    return convert(row, i - 1);
                columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
            });
        rows.columns = columns;
        return rows;
    }
    function parseRows(text, f) {
        var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
        function token() {
            if (I >= N)
                return EOF;
            if (eol)
                return eol = false, EOL;
            var j = I, c;
            if (text.charCodeAt(j) === 34) {
                var i = j;
                while (i++ < N) {
                    if (text.charCodeAt(i) === 34) {
                        if (text.charCodeAt(i + 1) !== 34)
                            break;
                        ++i;
                    }
                }
                I = i + 2;
                c = text.charCodeAt(i + 1);
                if (c === 13) {
                    eol = true;
                    if (text.charCodeAt(i + 2) === 10)
                        ++I;
                } else if (c === 10) {
                    eol = true;
                }
                return text.slice(j + 1, i).replace(/""/g, '"');
            }
            while (I < N) {
                var k = 1;
                c = text.charCodeAt(I++);
                if (c === 10)
                    eol = true;
                else if (c === 13) {
                    eol = true;
                    if (text.charCodeAt(I) === 10)
                        ++I, ++k;
                } else if (c !== delimiterCode)
                    continue;
                return text.slice(j, I - k);
            }
            return text.slice(j);
        }
        while ((t = token()) !== EOF) {
            var a = [];
            while (t !== EOL && t !== EOF) {
                a.push(t);
                t = token();
            }
            if (f && (a = f(a, n++)) == null)
                continue;
            rows.push(a);
        }
        return rows;
    }
    function format(rows, columns) {
        if (columns == null)
            columns = inferColumns(rows);
        return [columns.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
            return columns.map(function (column) {
                return formatValue(row[column]);
            }).join(delimiter);
        })).join('\n');
    }
    function formatRows(rows) {
        return rows.map(formatRow).join('\n');
    }
    function formatRow(row) {
        return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
        return text == null ? '' : reFormat.test(text += '') ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return {
        parse: parse,
        parseRows: parseRows,
        format: format,
        formatRows: formatRows
    };
};
request = function request(url, callback) {
    var request, event = dispatch('beforesend', 'progress', 'load', 'error'), mimeType, headers = map$1(), xhr = new XMLHttpRequest(), user = null, password = null, response, responseType, timeout = 0;
    if (typeof XDomainRequest !== 'undefined' && !('withCredentials' in xhr) && /^(http(s)?:)?\/\//.test(url))
        xhr = new XDomainRequest();
    'onload' in xhr ? xhr.onload = xhr.onerror = xhr.ontimeout = respond : xhr.onreadystatechange = function (o) {
        xhr.readyState > 3 && respond(o);
    };
    function respond(o) {
        var status = xhr.status, result;
        if (!status && hasResponse(xhr) || status >= 200 && status < 300 || status === 304) {
            if (response) {
                try {
                    result = response.call(request, xhr);
                } catch (e) {
                    event.call('error', request, e);
                    return;
                }
            } else {
                result = xhr;
            }
            event.call('load', request, result);
        } else {
            event.call('error', request, o);
        }
    }
    xhr.onprogress = function (e) {
        event.call('progress', request, e);
    };
    request = {
        header: function (name, value) {
            name = (name + '').toLowerCase();
            if (arguments.length < 2)
                return headers.get(name);
            if (value == null)
                headers.remove(name);
            else
                headers.set(name, value + '');
            return request;
        },
        mimeType: function (value) {
            if (!arguments.length)
                return mimeType;
            mimeType = value == null ? null : value + '';
            return request;
        },
        responseType: function (value) {
            if (!arguments.length)
                return responseType;
            responseType = value;
            return request;
        },
        timeout: function (value) {
            if (!arguments.length)
                return timeout;
            timeout = +value;
            return request;
        },
        user: function (value) {
            return arguments.length < 1 ? user : (user = value == null ? null : value + '', request);
        },
        password: function (value) {
            return arguments.length < 1 ? password : (password = value == null ? null : value + '', request);
        },
        response: function (value) {
            response = value;
            return request;
        },
        get: function (data, callback) {
            return request.send('GET', data, callback);
        },
        post: function (data, callback) {
            return request.send('POST', data, callback);
        },
        send: function (method, data, callback) {
            xhr.open(method, url, true, user, password);
            if (mimeType != null && !headers.has('accept'))
                headers.set('accept', mimeType + ',*/*');
            if (xhr.setRequestHeader)
                headers.each(function (value, name) {
                xhr.setRequestHeader(name, value);
            });
            if (mimeType != null && xhr.overrideMimeType)
                xhr.overrideMimeType(mimeType);
            if (responseType != null)
                xhr.responseType = responseType;
            if (timeout > 0)
                xhr.timeout = timeout;
            if (callback == null && typeof data === 'function')
                callback = data, data = null;
            if (callback != null && callback.length === 1)
                callback = fixCallback(callback);
            if (callback != null)
                request.on('error', callback).on('load', function (xhr) {
                callback(null, xhr);
            });
            event.call('beforesend', request, xhr);
            xhr.send(data == null ? null : data);
            return request;
        },
        abort: function () {
            xhr.abort();
            return request;
        },
        on: function () {
            var value = event.on.apply(event, arguments);
            return value === event ? request : value;
        }
    };
    if (callback != null) {
        if (typeof callback !== 'function')
            throw new Error('invalid callback: ' + callback);
        return request.get(callback);
    }
    return request;
};
fixCallback = function fixCallback(callback) {
    return function (error, xhr) {
        callback(error == null ? xhr : null);
    };
};
hasResponse = function hasResponse(xhr) {
    var type = xhr.responseType;
    return type && type !== 'text' ? xhr.response : xhr.responseText;
};
type = function type(defaultMimeType, response) {
    return function (url, callback) {
        var r = request(url).mimeType(defaultMimeType).response(response);
        if (callback != null) {
            if (typeof callback !== 'function')
                throw new Error('invalid callback: ' + callback);
            return r.get(callback);
        }
        return r;
    };
};
dsv$1 = function dsv$1(defaultMimeType, parse) {
    return function (url, row, callback) {
        if (arguments.length < 3)
            callback = row, row = null;
        var r = request(url).mimeType(defaultMimeType);
        r.row = function (_) {
            return arguments.length ? r.response(responseOf(parse, row = _)) : row;
        };
        r.row(row);
        return callback ? r.get(callback) : r;
    };
};
responseOf = function responseOf(parse, row) {
    return function (request) {
        return parse(request.responseText, row);
    };
};
now = function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
};
clearNow = function clearNow() {
    clockNow = 0;
};
Timer = function Timer() {
    this._call = this._time = this._next = null;
};
timer = function timer(callback, delay, time) {
    var t = new Timer();
    t.restart(callback, delay, time);
    return t;
};
timerFlush = function timerFlush() {
    now();
    ++frame;
    var t = taskHead, e;
    while (t) {
        if ((e = clockNow - t._time) >= 0)
            t._call.call(null, e);
        t = t._next;
    }
    --frame;
};
wake = function wake(time) {
    clockNow = (clockLast = time || clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
        timerFlush();
    } finally {
        frame = 0;
        nap();
        clockNow = 0;
    }
};
poke$1 = function poke$1() {
    var now = clock.now(), delay = now - clockLast;
    if (delay > pokeDelay)
        clockSkew -= delay, clockLast = now;
};
nap = function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while (t1) {
        if (t1._call) {
            if (time > t1._time)
                time = t1._time;
            t0 = t1, t1 = t1._next;
        } else {
            t2 = t1._next, t1._next = null;
            t1 = t0 ? t0._next = t2 : taskHead = t2;
        }
    }
    taskTail = t0;
    sleep(time);
};
sleep = function sleep(time) {
    if (frame)
        return;
    if (timeout)
        timeout = clearTimeout(timeout);
    var delay = time - clockNow;
    if (delay > 24) {
        if (time < Infinity)
            timeout = setTimeout(wake, delay);
        if (interval)
            interval = clearInterval(interval);
    } else {
        if (!interval)
            interval = setInterval(poke$1, pokeDelay);
        frame = 1, setFrame(wake);
    }
};
timeout$1 = function timeout$1(callback, delay, time) {
    var t = new Timer();
    delay = delay == null ? 0 : +delay;
    t.restart(function (elapsed) {
        t.stop();
        callback(elapsed + delay);
    }, delay, time);
    return t;
};
interval$1 = function interval$1(callback, delay, time) {
    var t = new Timer(), total = delay;
    if (delay == null)
        return t.restart(callback, delay, time), t;
    delay = +delay, time = time == null ? now() : +time;
    t.restart(function tick(elapsed) {
        elapsed += total;
        t.restart(tick, total += delay, time);
        callback(elapsed);
    }, delay, time);
    return t;
};
newInterval = function newInterval(floori, offseti, count, field) {
    function interval(date) {
        return floori(date = new Date(+date)), date;
    }
    interval.floor = interval;
    interval.ceil = function (date) {
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
    };
    interval.round = function (date) {
        var d0 = interval(date), d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
    };
    interval.offset = function (date, step) {
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
    };
    interval.range = function (start, stop, step) {
        var range = [];
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0))
            return range;
        do
            range.push(new Date(+start));
        while (offseti(start, step), floori(start), start < stop);
        return range;
    };
    interval.filter = function (test) {
        return newInterval(function (date) {
            while (floori(date), !test(date))
                date.setTime(date - 1);
        }, function (date, step) {
            while (--step >= 0)
                while (offseti(date, 1), !test(date));
        });
    };
    if (count) {
        interval.count = function (start, end) {
            t0$1.setTime(+start), t1$1.setTime(+end);
            floori(t0$1), floori(t1$1);
            return Math.floor(count(t0$1, t1$1));
        };
        interval.every = function (step) {
            step = Math.floor(step);
            return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
                return field(d) % step === 0;
            } : function (d) {
                return interval.count(0, d) % step === 0;
            });
        };
    }
    return interval;
};
weekday = function weekday(i) {
    return newInterval(function (date) {
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
    }, function (date, step) {
        date.setDate(date.getDate() + step * 7);
    }, function (start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
};
utcWeekday = function utcWeekday(i) {
    return newInterval(function (date) {
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7);
    }, function (start, end) {
        return (end - start) / durationWeek;
    });
};
formatDecimal = function formatDecimal(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf('e')) < 0)
        return null;
    var i, coefficient = x.slice(0, i);
    return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
    ];
};
exponent$1 = function exponent$1(x) {
    return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
};
formatGroup = function formatGroup(grouping, thousands) {
    return function (value, width) {
        var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
        while (i > 0 && g > 0) {
            if (length + g + 1 > width)
                g = Math.max(1, width - length);
            t.push(value.substring(i -= g, i + g));
            if ((length += g + 1) > width)
                break;
            g = grouping[j = (j + 1) % grouping.length];
        }
        return t.reverse().join(thousands);
    };
};
formatDefault = function formatDefault(x, p) {
    x = x.toPrecision(p);
    out:
        for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
            switch (x[i]) {
            case '.':
                i0 = i1 = i;
                break;
            case '0':
                if (i0 === 0)
                    i0 = i;
                i1 = i;
                break;
            case 'e':
                break out;
            default:
                if (i0 > 0)
                    i0 = 0;
                break;
            }
        }
    return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
};
formatPrefixAuto = function formatPrefixAuto(x, p) {
    var d = formatDecimal(x, p);
    if (!d)
        return x + '';
    var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join('0') : i > 0 ? coefficient.slice(0, i) + '.' + coefficient.slice(i) : '0.' + new Array(1 - i).join('0') + formatDecimal(x, Math.max(0, p + i - 1))[0];
};
formatRounded = function formatRounded(x, p) {
    var d = formatDecimal(x, p);
    if (!d)
        return x + '';
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? '0.' + new Array(-exponent).join('0') + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + '.' + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join('0');
};
formatSpecifier = function formatSpecifier(specifier) {
    return new FormatSpecifier(specifier);
};
FormatSpecifier = function FormatSpecifier(specifier) {
    if (!(match = re.exec(specifier)))
        throw new Error('invalid format: ' + specifier);
    var match, fill = match[1] || ' ', align = match[2] || '>', sign = match[3] || '-', symbol = match[4] || '', zero = !!match[5], width = match[6] && +match[6], comma = !!match[7], precision = match[8] && +match[8].slice(1), type = match[9] || '';
    if (type === 'n')
        comma = true, type = 'g';
    else if (!formatTypes[type])
        type = '';
    if (zero || fill === '0' && align === '=')
        zero = true, fill = '0', align = '=';
    this.fill = fill;
    this.align = align;
    this.sign = sign;
    this.symbol = symbol;
    this.zero = zero;
    this.width = width;
    this.comma = comma;
    this.precision = precision;
    this.type = type;
};
identity$3 = function identity$3(x) {
    return x;
};
formatLocale = function formatLocale(locale) {
    var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3, currency = locale.currency, decimal = locale.decimal;
    function newFormat(specifier) {
        specifier = formatSpecifier(specifier);
        var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, type = specifier.type;
        var prefix = symbol === '$' ? currency[0] : symbol === '#' && /[boxX]/.test(type) ? '0' + type.toLowerCase() : '', suffix = symbol === '$' ? currency[1] : /[%p]/.test(type) ? '%' : '';
        var formatType = formatTypes[type], maybeSuffix = !type || /[defgprs%]/.test(type);
        precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
        function format(value) {
            var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
            if (type === 'c') {
                valueSuffix = formatType(value) + valueSuffix;
                value = '';
            } else {
                value = +value;
                var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);
                value = formatType(value, precision);
                if (valueNegative) {
                    i = -1, n = value.length;
                    valueNegative = false;
                    while (++i < n) {
                        if (c = value.charCodeAt(i), 48 < c && c < 58 || type === 'x' && 96 < c && c < 103 || type === 'X' && 64 < c && c < 71) {
                            valueNegative = true;
                            break;
                        }
                    }
                }
                valuePrefix = (valueNegative ? sign === '(' ? sign : '-' : sign === '-' || sign === '(' ? '' : sign) + valuePrefix;
                valueSuffix = valueSuffix + (type === 's' ? prefixes[8 + prefixExponent / 3] : '') + (valueNegative && sign === '(' ? ')' : '');
                if (maybeSuffix) {
                    i = -1, n = value.length;
                    while (++i < n) {
                        if (c = value.charCodeAt(i), 48 > c || c > 57) {
                            valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                            value = value.slice(0, i);
                            break;
                        }
                    }
                }
            }
            if (comma && !zero)
                value = group(value, Infinity);
            var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : '';
            if (comma && zero)
                value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = '';
            switch (align) {
            case '<':
                return valuePrefix + value + valueSuffix + padding;
            case '=':
                return valuePrefix + padding + value + valueSuffix;
            case '^':
                return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            }
            return padding + valuePrefix + value + valueSuffix;
        }
        format.toString = function () {
            return specifier + '';
        };
        return format;
    }
    function formatPrefix(specifier, value) {
        var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = 'f', specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
        return function (value) {
            return f(k * value) + prefix;
        };
    }
    return {
        format: newFormat,
        formatPrefix: formatPrefix
    };
};
defaultLocale = function defaultLocale(definition) {
    locale = formatLocale(definition);
    exports.format = locale.format;
    exports.formatPrefix = locale.formatPrefix;
    return locale;
};
precisionFixed = function precisionFixed(step) {
    return Math.max(0, -exponent$1(Math.abs(step)));
};
precisionPrefix = function precisionPrefix(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
};
precisionRound = function precisionRound(step, max) {
    step = Math.abs(step), max = Math.abs(max) - step;
    return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
};
localDate = function localDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
};
utcDate = function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
};
newYear = function newYear(y) {
    return {
        y: y,
        m: 0,
        d: 1,
        H: 0,
        M: 0,
        S: 0,
        L: 0
    };
};
formatLocale$1 = function formatLocale$1(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_weekdays = locale.days, locale_shortWeekdays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
        'a': formatShortWeekday,
        'A': formatWeekday,
        'b': formatShortMonth,
        'B': formatMonth,
        'c': null,
        'd': formatDayOfMonth,
        'e': formatDayOfMonth,
        'H': formatHour24,
        'I': formatHour12,
        'j': formatDayOfYear,
        'L': formatMilliseconds,
        'm': formatMonthNumber,
        'M': formatMinutes,
        'p': formatPeriod,
        'S': formatSeconds,
        'U': formatWeekNumberSunday,
        'w': formatWeekdayNumber,
        'W': formatWeekNumberMonday,
        'x': null,
        'X': null,
        'y': formatYear,
        'Y': formatFullYear,
        'Z': formatZone,
        '%': formatLiteralPercent
    };
    var utcFormats = {
        'a': formatUTCShortWeekday,
        'A': formatUTCWeekday,
        'b': formatUTCShortMonth,
        'B': formatUTCMonth,
        'c': null,
        'd': formatUTCDayOfMonth,
        'e': formatUTCDayOfMonth,
        'H': formatUTCHour24,
        'I': formatUTCHour12,
        'j': formatUTCDayOfYear,
        'L': formatUTCMilliseconds,
        'm': formatUTCMonthNumber,
        'M': formatUTCMinutes,
        'p': formatUTCPeriod,
        'S': formatUTCSeconds,
        'U': formatUTCWeekNumberSunday,
        'w': formatUTCWeekdayNumber,
        'W': formatUTCWeekNumberMonday,
        'x': null,
        'X': null,
        'y': formatUTCYear,
        'Y': formatUTCFullYear,
        'Z': formatUTCZone,
        '%': formatLiteralPercent
    };
    var parses = {
        'a': parseShortWeekday,
        'A': parseWeekday,
        'b': parseShortMonth,
        'B': parseMonth,
        'c': parseLocaleDateTime,
        'd': parseDayOfMonth,
        'e': parseDayOfMonth,
        'H': parseHour24,
        'I': parseHour24,
        'j': parseDayOfYear,
        'L': parseMilliseconds,
        'm': parseMonthNumber,
        'M': parseMinutes,
        'p': parsePeriod,
        'S': parseSeconds,
        'U': parseWeekNumberSunday,
        'w': parseWeekdayNumber,
        'W': parseWeekNumberMonday,
        'x': parseLocaleDate,
        'X': parseLocaleTime,
        'y': parseYear,
        'Y': parseFullYear,
        'Z': parseZone,
        '%': parseLiteralPercent
    };
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats) {
        return function (date) {
            var string = [], i = -1, j = 0, n = specifier.length, c, pad, format;
            if (!(date instanceof Date))
                date = new Date(+date);
            while (++i < n) {
                if (specifier.charCodeAt(i) === 37) {
                    string.push(specifier.slice(j, i));
                    if ((pad = pads[c = specifier.charAt(++i)]) != null)
                        c = specifier.charAt(++i);
                    else
                        pad = c === 'e' ? ' ' : '0';
                    if (format = formats[c])
                        c = format(date, pad);
                    string.push(c);
                    j = i + 1;
                }
            }
            string.push(specifier.slice(j, i));
            return string.join('');
        };
    }
    function newParse(specifier, newDate) {
        return function (string) {
            var d = newYear(1900), i = parseSpecifier(d, specifier, string += '', 0);
            if (i != string.length)
                return null;
            if ('p' in d)
                d.H = d.H % 12 + d.p * 12;
            if ('W' in d || 'U' in d) {
                if (!('w' in d))
                    d.w = 'W' in d ? 1 : 0;
                var day = 'Z' in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
                d.m = 0;
                d.d = 'W' in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
            }
            if ('Z' in d) {
                d.H += d.Z / 100 | 0;
                d.M += d.Z % 100;
                return utcDate(d);
            }
            return newDate(d);
        };
    }
    function parseSpecifier(d, specifier, string, j) {
        var i = 0, n = specifier.length, m = string.length, c, parse;
        while (i < n) {
            if (j >= m)
                return -1;
            c = specifier.charCodeAt(i++);
            if (c === 37) {
                c = specifier.charAt(i++);
                parse = parses[c in pads ? specifier.charAt(i++) : c];
                if (!parse || (j = parse(d, string, j)) < 0)
                    return -1;
            } else if (c != string.charCodeAt(j++)) {
                return -1;
            }
        }
        return j;
    }
    function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }
    function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }
    function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }
    function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }
    function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
    }
    function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
    }
    function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
    }
    function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
        return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
    }
    function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
    }
    return {
        format: function (specifier) {
            var f = newFormat(specifier += '', formats);
            f.toString = function () {
                return specifier;
            };
            return f;
        },
        parse: function (specifier) {
            var p = newParse(specifier += '', localDate);
            p.toString = function () {
                return specifier;
            };
            return p;
        },
        utcFormat: function (specifier) {
            var f = newFormat(specifier += '', utcFormats);
            f.toString = function () {
                return specifier;
            };
            return f;
        },
        utcParse: function (specifier) {
            var p = newParse(specifier, utcDate);
            p.toString = function () {
                return specifier;
            };
            return p;
        }
    };
};
pad = function pad(value, fill, width) {
    var sign = value < 0 ? '-' : '', string = (sign ? -value : value) + '', length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
};
requote = function requote(s) {
    return s.replace(requoteRe, '\\$&');
};
formatRe = function formatRe(names) {
    return new RegExp('^(?:' + names.map(requote).join('|') + ')', 'i');
};
formatLookup = function formatLookup(names) {
    var map = {}, i = -1, n = names.length;
    while (++i < n)
        map[names[i].toLowerCase()] = i;
    return map;
};
parseWeekdayNumber = function parseWeekdayNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
};
parseWeekNumberSunday = function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
};
parseWeekNumberMonday = function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
};
parseFullYear = function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
};
parseYear = function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
};
parseZone = function parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || '00')), i + n[0].length) : -1;
};
parseMonthNumber = function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
};
parseDayOfMonth = function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
};
parseDayOfYear = function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
};
parseHour24 = function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
};
parseMinutes = function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
};
parseSeconds = function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
};
parseMilliseconds = function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
};
parseLiteralPercent = function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
};
formatDayOfMonth = function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2);
};
formatHour24 = function formatHour24(d, p) {
    return pad(d.getHours(), p, 2);
};
formatHour12 = function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2);
};
formatDayOfYear = function formatDayOfYear(d, p) {
    return pad(1 + day.count(year(d), d), p, 3);
};
formatMilliseconds = function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3);
};
formatMonthNumber = function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2);
};
formatMinutes = function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2);
};
formatSeconds = function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2);
};
formatWeekNumberSunday = function formatWeekNumberSunday(d, p) {
    return pad(timeWeek.count(year(d), d), p, 2);
};
formatWeekdayNumber = function formatWeekdayNumber(d) {
    return d.getDay();
};
formatWeekNumberMonday = function formatWeekNumberMonday(d, p) {
    return pad(timeMonday.count(year(d), d), p, 2);
};
formatYear = function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2);
};
formatFullYear = function formatFullYear(d, p) {
    return pad(d.getFullYear() % 10000, p, 4);
};
formatZone = function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? '-' : (z *= -1, '+')) + pad(z / 60 | 0, '0', 2) + pad(z % 60, '0', 2);
};
formatUTCDayOfMonth = function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2);
};
formatUTCHour24 = function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2);
};
formatUTCHour12 = function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2);
};
formatUTCDayOfYear = function formatUTCDayOfYear(d, p) {
    return pad(1 + utcDay.count(utcYear(d), d), p, 3);
};
formatUTCMilliseconds = function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3);
};
formatUTCMonthNumber = function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2);
};
formatUTCMinutes = function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2);
};
formatUTCSeconds = function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2);
};
formatUTCWeekNumberSunday = function formatUTCWeekNumberSunday(d, p) {
    return pad(utcWeek.count(utcYear(d), d), p, 2);
};
formatUTCWeekdayNumber = function formatUTCWeekdayNumber(d) {
    return d.getUTCDay();
};
formatUTCWeekNumberMonday = function formatUTCWeekNumberMonday(d, p) {
    return pad(utcMonday.count(utcYear(d), d), p, 2);
};
formatUTCYear = function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2);
};
formatUTCFullYear = function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 10000, p, 4);
};
formatUTCZone = function formatUTCZone() {
    return '+0000';
};
formatLiteralPercent = function formatLiteralPercent() {
    return '%';
};
defaultLocale$1 = function defaultLocale$1(definition) {
    locale$1 = formatLocale$1(definition);
    exports.timeFormat = locale$1.format;
    exports.timeParse = locale$1.parse;
    exports.utcFormat = locale$1.utcFormat;
    exports.utcParse = locale$1.utcParse;
    return locale$1;
};
formatIsoNative = function formatIsoNative(date) {
    return date.toISOString();
};
parseIsoNative = function parseIsoNative(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
};
ordinal = function ordinal(range) {
    var index = map$1(), domain = [], unknown = implicit;
    range = range == null ? [] : slice$3.call(range);
    function scale(d) {
        var key = d + '', i = index.get(key);
        if (!i) {
            if (unknown !== implicit)
                return unknown;
            index.set(key, i = domain.push(d));
        }
        return range[(i - 1) % range.length];
    }
    scale.domain = function (_) {
        if (!arguments.length)
            return domain.slice();
        domain = [], index = map$1();
        var i = -1, n = _.length, d, key;
        while (++i < n)
            if (!index.has(key = (d = _[i]) + ''))
            index.set(key, domain.push(d));
        return scale;
    };
    scale.range = function (_) {
        return arguments.length ? (range = slice$3.call(_), scale) : range.slice();
    };
    scale.unknown = function (_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function () {
        return ordinal().domain(domain).range(range).unknown(unknown);
    };
    return scale;
};
band = function band() {
    var scale = ordinal().unknown(undefined), domain = scale.domain, ordinalRange = scale.range, range$$ = [
            0,
            1
        ], step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
        var n = domain().length, reverse = range$$[1] < range$$[0], start = range$$[reverse - 0], stop = range$$[1 - reverse];
        step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
        if (round)
            step = Math.floor(step);
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round)
            start = Math.round(start), bandwidth = Math.round(bandwidth);
        var values = range(n).map(function (i) {
            return start + step * i;
        });
        return ordinalRange(reverse ? values.reverse() : values);
    }
    scale.domain = function (_) {
        return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.range = function (_) {
        return arguments.length ? (range$$ = [
            +_[0],
            +_[1]
        ], rescale()) : range$$.slice();
    };
    scale.rangeRound = function (_) {
        return range$$ = [
            +_[0],
            +_[1]
        ], round = true, rescale();
    };
    scale.bandwidth = function () {
        return bandwidth;
    };
    scale.step = function () {
        return step;
    };
    scale.round = function (_) {
        return arguments.length ? (round = !!_, rescale()) : round;
    };
    scale.padding = function (_) {
        return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
    };
    scale.paddingInner = function (_) {
        return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
    };
    scale.paddingOuter = function (_) {
        return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
    };
    scale.align = function (_) {
        return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };
    scale.copy = function () {
        return band().domain(domain()).range(range$$).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return rescale();
};
pointish = function pointish(scale) {
    var copy = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;
    scale.copy = function () {
        return pointish(copy());
    };
    return scale;
};
point$4 = function point$4() {
    return pointish(band().paddingInner(1));
};
constant$3 = function constant$3(x) {
    return function () {
        return x;
    };
};
number$1 = function number$1(x) {
    return +x;
};
deinterpolate = function deinterpolate(a, b) {
    return (b -= a = +a) ? function (x) {
        return (x - a) / b;
    } : constant$3(b);
};
deinterpolateClamp = function deinterpolateClamp(deinterpolate) {
    return function (a, b) {
        var d = deinterpolate(a = +a, b = +b);
        return function (x) {
            return x <= a ? 0 : x >= b ? 1 : d(x);
        };
    };
};
reinterpolateClamp = function reinterpolateClamp(reinterpolate) {
    return function (a, b) {
        var r = reinterpolate(a = +a, b = +b);
        return function (t) {
            return t <= 0 ? a : t >= 1 ? b : r(t);
        };
    };
};
bimap = function bimap(domain, range, deinterpolate, reinterpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0)
        d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
    else
        d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
    return function (x) {
        return r0(d0(x));
    };
};
polymap = function polymap(domain, range, deinterpolate, reinterpolate) {
    var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
    if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
    }
    while (++i < j) {
        d[i] = deinterpolate(domain[i], domain[i + 1]);
        r[i] = reinterpolate(range[i], range[i + 1]);
    }
    return function (x) {
        var i = bisectRight(domain, x, 1, j) - 1;
        return r[i](d[i](x));
    };
};
copy = function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());
};
continuous = function continuous(deinterpolate$$, reinterpolate) {
    var domain = unit, range = unit, interpolate$$ = interpolate, clamp = false, piecewise, output, input;
    function rescale() {
        piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
        output = input = null;
        return scale;
    }
    function scale(x) {
        return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate$$) : deinterpolate$$, interpolate$$)))(+x);
    }
    scale.invert = function (y) {
        return (input || (input = piecewise(range, domain, deinterpolate, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
    };
    scale.domain = function (_) {
        return arguments.length ? (domain = map$2.call(_, number$1), rescale()) : domain.slice();
    };
    scale.range = function (_) {
        return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();
    };
    scale.rangeRound = function (_) {
        return range = slice$3.call(_), interpolate$$ = interpolateRound, rescale();
    };
    scale.clamp = function (_) {
        return arguments.length ? (clamp = !!_, rescale()) : clamp;
    };
    scale.interpolate = function (_) {
        return arguments.length ? (interpolate$$ = _, rescale()) : interpolate$$;
    };
    return rescale();
};
tickFormat = function tickFormat(domain, count, specifier) {
    var start = domain[0], stop = domain[domain.length - 1], step = tickStep(start, stop, count == null ? 10 : count), precision;
    specifier = formatSpecifier(specifier == null ? ',f' : specifier);
    switch (specifier.type) {
    case 's': {
            var value = Math.max(Math.abs(start), Math.abs(stop));
            if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value)))
                specifier.precision = precision;
            return exports.formatPrefix(specifier, value);
        }
    case '':
    case 'e':
    case 'g':
    case 'p':
    case 'r': {
            if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)))))
                specifier.precision = precision - (specifier.type === 'e');
            break;
        }
    case 'f':
    case '%': {
            if (specifier.precision == null && !isNaN(precision = precisionFixed(step)))
                specifier.precision = precision - (specifier.type === '%') * 2;
            break;
        }
    }
    return exports.format(specifier);
};
linearish = function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function (count) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function (count, specifier) {
        return tickFormat(domain(), count, specifier);
    };
    scale.nice = function (count) {
        var d = domain(), i = d.length - 1, n = count == null ? 10 : count, start = d[0], stop = d[i], step = tickStep(start, stop, n);
        if (step) {
            step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
            d[0] = Math.floor(start / step) * step;
            d[i] = Math.ceil(stop / step) * step;
            domain(d);
        }
        return scale;
    };
    return scale;
};
linear$2 = function linear$2() {
    var scale = continuous(deinterpolate, interpolateNumber);
    scale.copy = function () {
        return copy(scale, linear$2());
    };
    return linearish(scale);
};
identity$4 = function identity$4() {
    var domain = [
        0,
        1
    ];
    function scale(x) {
        return +x;
    }
    scale.invert = scale;
    scale.domain = scale.range = function (_) {
        return arguments.length ? (domain = map$2.call(_, number$1), scale) : domain.slice();
    };
    scale.copy = function () {
        return identity$4().domain(domain);
    };
    return linearish(scale);
};
nice = function nice(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
    if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
};
deinterpolate$1 = function deinterpolate$1(a, b) {
    return (b = Math.log(b / a)) ? function (x) {
        return Math.log(x / a) / b;
    } : constant$3(b);
};
reinterpolate = function reinterpolate(a, b) {
    return a < 0 ? function (t) {
        return -Math.pow(-b, t) * Math.pow(-a, 1 - t);
    } : function (t) {
        return Math.pow(b, t) * Math.pow(a, 1 - t);
    };
};
pow10 = function pow10(x) {
    return isFinite(x) ? +('1e' + x) : x < 0 ? 0 : x;
};
powp = function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
        return Math.pow(base, x);
    };
};
logp = function logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
        return Math.log(x) / base;
    });
};
reflect = function reflect(f) {
    return function (x) {
        return -f(-x);
    };
};
log = function log() {
    var scale = continuous(deinterpolate$1, reinterpolate).domain([
            1,
            10
        ]), domain = scale.domain, base = 10, logs = logp(10), pows = powp(10);
    function rescale() {
        logs = logp(base), pows = powp(base);
        if (domain()[0] < 0)
            logs = reflect(logs), pows = reflect(pows);
        return scale;
    }
    scale.base = function (_) {
        return arguments.length ? (base = +_, rescale()) : base;
    };
    scale.domain = function (_) {
        return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = function (count) {
        var d = domain(), u = d[0], v = d[d.length - 1], r;
        if (r = v < u)
            i = u, u = v, v = i;
        var i = logs(u), j = logs(v), p, k, t, n = count == null ? 10 : +count, z = [];
        if (!(base % 1) && j - i < n) {
            i = Math.round(i) - 1, j = Math.round(j) + 1;
            if (u > 0)
                for (; i < j; ++i) {
                for (k = 1, p = (pows(i)); k < base; ++k) {
                    t = p * k;
                    if (t < u)
                        continue;
                    if (t > v)
                        break;
                    z.push(t);
                }
            }
            else
                for (; i < j; ++i) {
                for (k = base - 1, p = (pows(i)); k >= 1; --k) {
                    t = p * k;
                    if (t < u)
                        continue;
                    if (t > v)
                        break;
                    z.push(t);
                }
            }
        } else {
            z = ticks(i, j, Math.min(j - i, n)).map(pows);
        }
        return r ? z.reverse() : z;
    };
    scale.tickFormat = function (count, specifier) {
        if (specifier == null)
            specifier = base === 10 ? '.0e' : ',';
        if (typeof specifier !== 'function')
            specifier = exports.format(specifier);
        if (count === Infinity)
            return specifier;
        if (count == null)
            count = 10;
        var k = Math.max(1, base * count / scale.ticks().length);
        return function (d) {
            var i = d / pows(Math.round(logs(d)));
            if (i * base < base - 0.5)
                i *= base;
            return i <= k ? specifier(d) : '';
        };
    };
    scale.nice = function () {
        return domain(nice(domain(), {
            floor: function (x) {
                return pows(Math.floor(logs(x)));
            },
            ceil: function (x) {
                return pows(Math.ceil(logs(x)));
            }
        }));
    };
    scale.copy = function () {
        return copy(scale, log().base(base));
    };
    return scale;
};
raise = function raise(x, exponent) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
};
pow = function pow() {
    var exponent = 1, scale = continuous(deinterpolate, reinterpolate), domain = scale.domain;
    function deinterpolate(a, b) {
        return (b = raise(b, exponent) - (a = raise(a, exponent))) ? function (x) {
            return (raise(x, exponent) - a) / b;
        } : constant$3(b);
    }
    function reinterpolate(a, b) {
        b = raise(b, exponent) - (a = raise(a, exponent));
        return function (t) {
            return raise(a + b * t, 1 / exponent);
        };
    }
    scale.exponent = function (_) {
        return arguments.length ? (exponent = +_, domain(domain())) : exponent;
    };
    scale.copy = function () {
        return copy(scale, pow().exponent(exponent));
    };
    return linearish(scale);
};
sqrt = function sqrt() {
    return pow().exponent(0.5);
};
quantile = function quantile() {
    var domain = [], range = [], thresholds = [];
    function rescale() {
        var i = 0, n = Math.max(1, range.length);
        thresholds = new Array(n - 1);
        while (++i < n)
            thresholds[i - 1] = threshold(domain, i / n);
        return scale;
    }
    function scale(x) {
        if (!isNaN(x = +x))
            return range[bisectRight(thresholds, x)];
    }
    scale.invertExtent = function (y) {
        var i = range.indexOf(y);
        return i < 0 ? [
            NaN,
            NaN
        ] : [
            i > 0 ? thresholds[i - 1] : domain[0],
            i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
        ];
    };
    scale.domain = function (_) {
        if (!arguments.length)
            return domain.slice();
        domain = [];
        for (var i = 0, n = _.length, d; i < n; ++i)
            if (d = _[i], d != null && !isNaN(d = +d))
            domain.push(d);
        domain.sort(ascending);
        return rescale();
    };
    scale.range = function (_) {
        return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();
    };
    scale.quantiles = function () {
        return thresholds.slice();
    };
    scale.copy = function () {
        return quantile().domain(domain).range(range);
    };
    return scale;
};
quantize$1 = function quantize$1() {
    var x0 = 0, x1 = 1, n = 1, domain = [0.5], range = [
            0,
            1
        ];
    function scale(x) {
        if (x <= x)
            return range[bisectRight(domain, x, 0, n)];
    }
    function rescale() {
        var i = -1;
        domain = new Array(n);
        while (++i < n)
            domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
        return scale;
    }
    scale.domain = function (_) {
        return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [
            x0,
            x1
        ];
    };
    scale.range = function (_) {
        return arguments.length ? (n = (range = slice$3.call(_)).length - 1, rescale()) : range.slice();
    };
    scale.invertExtent = function (y) {
        var i = range.indexOf(y);
        return i < 0 ? [
            NaN,
            NaN
        ] : i < 1 ? [
            x0,
            domain[0]
        ] : i >= n ? [
            domain[n - 1],
            x1
        ] : [
            domain[i - 1],
            domain[i]
        ];
    };
    scale.copy = function () {
        return quantize$1().domain([
            x0,
            x1
        ]).range(range);
    };
    return linearish(scale);
};
threshold$1 = function threshold$1() {
    var domain = [0.5], range = [
            0,
            1
        ], n = 1;
    function scale(x) {
        if (x <= x)
            return range[bisectRight(domain, x, 0, n)];
    }
    scale.domain = function (_) {
        return arguments.length ? (domain = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
    };
    scale.range = function (_) {
        return arguments.length ? (range = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
    };
    scale.invertExtent = function (y) {
        var i = range.indexOf(y);
        return [
            domain[i - 1],
            domain[i]
        ];
    };
    scale.copy = function () {
        return threshold$1().domain(domain).range(range);
    };
    return scale;
};
date$1 = function date$1(t) {
    return new Date(t);
};
number$2 = function number$2(t) {
    return t instanceof Date ? +t : +new Date(+t);
};
calendar = function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
    var scale = continuous(deinterpolate, interpolateNumber), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format('.%L'), formatSecond = format(':%S'), formatMinute = format('%I:%M'), formatHour = format('%I %p'), formatDay = format('%a %d'), formatWeek = format('%b %d'), formatMonth = format('%B'), formatYear = format('%Y');
    var tickIntervals = [
        [
            second,
            1,
            durationSecond$1
        ],
        [
            second,
            5,
            5 * durationSecond$1
        ],
        [
            second,
            15,
            15 * durationSecond$1
        ],
        [
            second,
            30,
            30 * durationSecond$1
        ],
        [
            minute,
            1,
            durationMinute$1
        ],
        [
            minute,
            5,
            5 * durationMinute$1
        ],
        [
            minute,
            15,
            15 * durationMinute$1
        ],
        [
            minute,
            30,
            30 * durationMinute$1
        ],
        [
            hour,
            1,
            durationHour$1
        ],
        [
            hour,
            3,
            3 * durationHour$1
        ],
        [
            hour,
            6,
            6 * durationHour$1
        ],
        [
            hour,
            12,
            12 * durationHour$1
        ],
        [
            day,
            1,
            durationDay$1
        ],
        [
            day,
            2,
            2 * durationDay$1
        ],
        [
            week,
            1,
            durationWeek$1
        ],
        [
            month,
            1,
            durationMonth
        ],
        [
            month,
            3,
            3 * durationMonth
        ],
        [
            year,
            1,
            durationYear
        ]
    ];
    function tickFormat(date) {
        return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
    }
    function tickInterval(interval, start, stop, step) {
        if (interval == null)
            interval = 10;
        if (typeof interval === 'number') {
            var target = Math.abs(stop - start) / interval, i = bisector(function (i) {
                    return i[2];
                }).right(tickIntervals, target);
            if (i === tickIntervals.length) {
                step = tickStep(start / durationYear, stop / durationYear, interval);
                interval = year;
            } else if (i) {
                i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
                step = i[1];
                interval = i[0];
            } else {
                step = tickStep(start, stop, interval);
                interval = millisecond;
            }
        }
        return step == null ? interval : interval.every(step);
    }
    scale.invert = function (y) {
        return new Date(invert(y));
    };
    scale.domain = function (_) {
        return arguments.length ? domain(map$2.call(_, number$2)) : domain().map(date$1);
    };
    scale.ticks = function (interval, step) {
        var d = domain(), t0 = d[0], t1 = d[d.length - 1], r = t1 < t0, t;
        if (r)
            t = t0, t0 = t1, t1 = t;
        t = tickInterval(interval, t0, t1, step);
        t = t ? t.range(t0, t1 + 1) : [];
        return r ? t.reverse() : t;
    };
    scale.tickFormat = function (count, specifier) {
        return specifier == null ? tickFormat : format(specifier);
    };
    scale.nice = function (interval, step) {
        var d = domain();
        return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain(nice(d, interval)) : scale;
    };
    scale.copy = function () {
        return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
    };
    return scale;
};
time = function time() {
    return calendar(year, month, timeWeek, day, hour, minute, second, millisecond, exports.timeFormat).domain([
        new Date(2000, 0, 1),
        new Date(2000, 0, 2)
    ]);
};
utcTime = function utcTime() {
    return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([
        Date.UTC(2000, 0, 1),
        Date.UTC(2000, 0, 2)
    ]);
};
colors = function colors(s) {
    return s.match(/.{6}/g).map(function (x) {
        return '#' + x;
    });
};
rainbow$1 = function rainbow$1(t) {
    if (t < 0 || t > 1)
        t -= Math.floor(t);
    var ts = Math.abs(t - 0.5);
    rainbow.h = 360 * t - 100;
    rainbow.s = 1.5 - 1.5 * ts;
    rainbow.l = 0.8 - 0.9 * ts;
    return rainbow + '';
};
ramp = function ramp(range) {
    var n = range.length;
    return function (t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
};
sequential = function sequential(interpolator) {
    var x0 = 0, x1 = 1, clamp = false;
    function scale(x) {
        var t = (x - x0) / (x1 - x0);
        return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
    }
    scale.domain = function (_) {
        return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [
            x0,
            x1
        ];
    };
    scale.clamp = function (_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function (_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    scale.copy = function () {
        return sequential(interpolator).domain([
            x0,
            x1
        ]).clamp(clamp);
    };
    return linearish(scale);
};
namespace = function namespace(name) {
    var prefix = name += '', i = prefix.indexOf(':');
    if (i >= 0 && (prefix = name.slice(0, i)) !== 'xmlns')
        name = name.slice(i + 1);
    return namespaces.hasOwnProperty(prefix) ? {
        space: namespaces[prefix],
        local: name
    } : name;
};
creatorInherit = function creatorInherit(name) {
    return function () {
        var document = this.ownerDocument, uri = this.namespaceURI;
        return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
    };
};
creatorFixed = function creatorFixed(fullname) {
    return function () {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
};
creator = function creator(name) {
    var fullname = namespace(name);
    return (fullname.local ? creatorFixed : creatorInherit)(fullname);
};
local = function local() {
    return new Local();
};
Local = function Local() {
    this._ = '@' + (++nextId).toString(36);
};
filterContextListener = function filterContextListener(listener, index, group) {
    listener = contextListener(listener, index, group);
    return function (event) {
        var related = event.relatedTarget;
        if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
            listener.call(this, event);
        }
    };
};
contextListener = function contextListener(listener, index, group) {
    return function (event1) {
        var event0 = exports.event;
        exports.event = event1;
        try {
            listener.call(this, this.__data__, index, group);
        } finally {
            exports.event = event0;
        }
    };
};
parseTypenames$1 = function parseTypenames$1(typenames) {
    return typenames.trim().split(/^|\s+/).map(function (t) {
        var name = '', i = t.indexOf('.');
        if (i >= 0)
            name = t.slice(i + 1), t = t.slice(0, i);
        return {
            type: t,
            name: name
        };
    });
};
onRemove = function onRemove(typename) {
    return function () {
        var on = this.__on;
        if (!on)
            return;
        for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
            if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
                this.removeEventListener(o.type, o.listener, o.capture);
            } else {
                on[++i] = o;
            }
        }
        if (++i)
            on.length = i;
        else
            delete this.__on;
    };
};
onAdd = function onAdd(typename, value, capture) {
    var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
    return function (d, i, group) {
        var on = this.__on, o, listener = wrap(value, i, group);
        if (on)
            for (var j = 0, m = on.length; j < m; ++j) {
            if ((o = on[j]).type === typename.type && o.name === typename.name) {
                this.removeEventListener(o.type, o.listener, o.capture);
                this.addEventListener(o.type, o.listener = listener, o.capture = capture);
                o.value = value;
                return;
            }
        }
        this.addEventListener(typename.type, listener, capture);
        o = {
            type: typename.type,
            name: typename.name,
            value: value,
            listener: listener,
            capture: capture
        };
        if (!on)
            this.__on = [o];
        else
            on.push(o);
    };
};
selection_on = function selection_on(typename, value, capture) {
    var typenames = parseTypenames$1(typename + ''), i, n = typenames.length, t;
    if (arguments.length < 2) {
        var on = this.node().__on;
        if (on)
            for (var j = 0, m = on.length, o; j < m; ++j) {
            for (i = 0, o = on[j]; i < n; ++i) {
                if ((t = typenames[i]).type === o.type && t.name === o.name) {
                    return o.value;
                }
            }
        }
        return;
    }
    on = value ? onAdd : onRemove;
    if (capture == null)
        capture = false;
    for (i = 0; i < n; ++i)
        this.each(on(typenames[i], value, capture));
    return this;
};
customEvent = function customEvent(event1, listener, that, args) {
    var event0 = exports.event;
    event1.sourceEvent = exports.event;
    exports.event = event1;
    try {
        return listener.apply(that, args);
    } finally {
        exports.event = event0;
    }
};
sourceEvent = function sourceEvent() {
    var current = exports.event, source;
    while (source = current.sourceEvent)
        current = source;
    return current;
};
point$5 = function point$5(node, event) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
        var point = svg.createSVGPoint();
        point.x = event.clientX, point.y = event.clientY;
        point = point.matrixTransform(node.getScreenCTM().inverse());
        return [
            point.x,
            point.y
        ];
    }
    var rect = node.getBoundingClientRect();
    return [
        event.clientX - rect.left - node.clientLeft,
        event.clientY - rect.top - node.clientTop
    ];
};
mouse = function mouse(node) {
    var event = sourceEvent();
    if (event.changedTouches)
        event = event.changedTouches[0];
    return point$5(node, event);
};
none$2 = function none$2() {
};
selector = function selector(selector) {
    return selector == null ? none$2 : function () {
        return this.querySelector(selector);
    };
};
selection_select = function selection_select(select) {
    if (typeof select !== 'function')
        select = selector(select);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
            if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                if ('__data__' in node)
                    subnode.__data__ = node.__data__;
                subgroup[i] = subnode;
            }
        }
    }
    return new Selection(subgroups, this._parents);
};
empty = function empty() {
    return [];
};
selectorAll = function selectorAll(selector) {
    return selector == null ? empty : function () {
        return this.querySelectorAll(selector);
    };
};
selection_selectAll = function selection_selectAll(select) {
    if (typeof select !== 'function')
        select = selectorAll(select);
    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
            if (node = group[i]) {
                subgroups.push(select.call(node, node.__data__, i, group));
                parents.push(node);
            }
        }
    }
    return new Selection(subgroups, parents);
};
selection_filter = function selection_filter(match) {
    if (typeof match !== 'function')
        match = matcher$1(match);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
            if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                subgroup.push(node);
            }
        }
    }
    return new Selection(subgroups, this._parents);
};
sparse = function sparse(update) {
    return new Array(update.length);
};
selection_enter = function selection_enter() {
    return new Selection(this._enter || this._groups.map(sparse), this._parents);
};
EnterNode = function EnterNode(parent, datum) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum;
};
constant$4 = function constant$4(x) {
    return function () {
        return x;
    };
};
bindIndex = function bindIndex(parent, group, enter, update, exit, data) {
    var i = 0, node, groupLength = group.length, dataLength = data.length;
    for (; i < dataLength; ++i) {
        if (node = group[i]) {
            node.__data__ = data[i];
            update[i] = node;
        } else {
            enter[i] = new EnterNode(parent, data[i]);
        }
    }
    for (; i < groupLength; ++i) {
        if (node = group[i]) {
            exit[i] = node;
        }
    }
};
bindKey = function bindKey(parent, group, enter, update, exit, data, key) {
    var i, node, nodeByKeyValue = {}, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    for (i = 0; i < groupLength; ++i) {
        if (node = group[i]) {
            keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
            if (keyValue in nodeByKeyValue) {
                exit[i] = node;
            } else {
                nodeByKeyValue[keyValue] = node;
            }
        }
    }
    for (i = 0; i < dataLength; ++i) {
        keyValue = keyPrefix + key.call(parent, data[i], i, data);
        if (node = nodeByKeyValue[keyValue]) {
            update[i] = node;
            node.__data__ = data[i];
            nodeByKeyValue[keyValue] = null;
        } else {
            enter[i] = new EnterNode(parent, data[i]);
        }
    }
    for (i = 0; i < groupLength; ++i) {
        if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
            exit[i] = node;
        }
    }
};
selection_data = function selection_data(value, key) {
    if (!value) {
        data = new Array(this.size()), j = -1;
        this.each(function (d) {
            data[++j] = d;
        });
        return data;
    }
    var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
    if (typeof value !== 'function')
        value = constant$4(value);
    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
        var parent = parents[j], group = groups[j], groupLength = group.length, data = value.call(parent, parent && parent.__data__, j, parents), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
        bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
        for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
            if (previous = enterGroup[i0]) {
                if (i0 >= i1)
                    i1 = i0 + 1;
                while (!(next = updateGroup[i1]) && ++i1 < dataLength);
                previous._next = next || null;
            }
        }
    }
    update = new Selection(update, parents);
    update._enter = enter;
    update._exit = exit;
    return update;
};
selection_exit = function selection_exit() {
    return new Selection(this._exit || this._groups.map(sparse), this._parents);
};
selection_merge = function selection_merge(selection) {
    for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
            if (node = group0[i] || group1[i]) {
                merge[i] = node;
            }
        }
    }
    for (; j < m0; ++j) {
        merges[j] = groups0[j];
    }
    return new Selection(merges, this._parents);
};
selection_order = function selection_order() {
    for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
        for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
            if (node = group[i]) {
                if (next && next !== node.nextSibling)
                    next.parentNode.insertBefore(node, next);
                next = node;
            }
        }
    }
    return this;
};
selection_sort = function selection_sort(compare) {
    if (!compare)
        compare = ascending$2;
    function compareNode(a, b) {
        return a && b ? compare(a.__data__, b.__data__) : !a - !b;
    }
    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
            if (node = group[i]) {
                sortgroup[i] = node;
            }
        }
        sortgroup.sort(compareNode);
    }
    return new Selection(sortgroups, this._parents).order();
};
ascending$2 = function ascending$2(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
};
selection_call = function selection_call() {
    var callback = arguments[0];
    arguments[0] = this;
    callback.apply(null, arguments);
    return this;
};
selection_nodes = function selection_nodes() {
    var nodes = new Array(this.size()), i = -1;
    this.each(function () {
        nodes[++i] = this;
    });
    return nodes;
};
selection_node = function selection_node() {
    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
            var node = group[i];
            if (node)
                return node;
        }
    }
    return null;
};
selection_size = function selection_size() {
    var size = 0;
    this.each(function () {
        ++size;
    });
    return size;
};
selection_empty = function selection_empty() {
    return !this.node();
};
selection_each = function selection_each(callback) {
    for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
        for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
            if (node = group[i])
                callback.call(node, node.__data__, i, group);
        }
    }
    return this;
};
attrRemove = function attrRemove(name) {
    return function () {
        this.removeAttribute(name);
    };
};
attrRemoveNS = function attrRemoveNS(fullname) {
    return function () {
        this.removeAttributeNS(fullname.space, fullname.local);
    };
};
attrConstant = function attrConstant(name, value) {
    return function () {
        this.setAttribute(name, value);
    };
};
attrConstantNS = function attrConstantNS(fullname, value) {
    return function () {
        this.setAttributeNS(fullname.space, fullname.local, value);
    };
};
attrFunction = function attrFunction(name, value) {
    return function () {
        var v = value.apply(this, arguments);
        if (v == null)
            this.removeAttribute(name);
        else
            this.setAttribute(name, v);
    };
};
attrFunctionNS = function attrFunctionNS(fullname, value) {
    return function () {
        var v = value.apply(this, arguments);
        if (v == null)
            this.removeAttributeNS(fullname.space, fullname.local);
        else
            this.setAttributeNS(fullname.space, fullname.local, v);
    };
};
selection_attr = function selection_attr(name, value) {
    var fullname = namespace(name);
    if (arguments.length < 2) {
        var node = this.node();
        return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
    }
    return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === 'function' ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
};
window = function window(node) {
    return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
};
styleRemove = function styleRemove(name) {
    return function () {
        this.style.removeProperty(name);
    };
};
styleConstant = function styleConstant(name, value, priority) {
    return function () {
        this.style.setProperty(name, value, priority);
    };
};
styleFunction = function styleFunction(name, value, priority) {
    return function () {
        var v = value.apply(this, arguments);
        if (v == null)
            this.style.removeProperty(name);
        else
            this.style.setProperty(name, v, priority);
    };
};
selection_style = function selection_style(name, value, priority) {
    var node;
    return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === 'function' ? styleFunction : styleConstant)(name, value, priority == null ? '' : priority)) : window(node = this.node()).getComputedStyle(node, null).getPropertyValue(name);
};
propertyRemove = function propertyRemove(name) {
    return function () {
        delete this[name];
    };
};
propertyConstant = function propertyConstant(name, value) {
    return function () {
        this[name] = value;
    };
};
propertyFunction = function propertyFunction(name, value) {
    return function () {
        var v = value.apply(this, arguments);
        if (v == null)
            delete this[name];
        else
            this[name] = v;
    };
};
selection_property = function selection_property(name, value) {
    return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === 'function' ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
};
classArray = function classArray(string) {
    return string.trim().split(/^|\s+/);
};
classList = function classList(node) {
    return node.classList || new ClassList(node);
};
ClassList = function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute('class') || '');
};
classedAdd = function classedAdd(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n)
        list.add(names[i]);
};
classedRemove = function classedRemove(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while (++i < n)
        list.remove(names[i]);
};
classedTrue = function classedTrue(names) {
    return function () {
        classedAdd(this, names);
    };
};
classedFalse = function classedFalse(names) {
    return function () {
        classedRemove(this, names);
    };
};
classedFunction = function classedFunction(names, value) {
    return function () {
        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
};
selection_classed = function selection_classed(name, value) {
    var names = classArray(name + '');
    if (arguments.length < 2) {
        var list = classList(this.node()), i = -1, n = names.length;
        while (++i < n)
            if (!list.contains(names[i]))
            return false;
        return true;
    }
    return this.each((typeof value === 'function' ? classedFunction : value ? classedTrue : classedFalse)(names, value));
};
textRemove = function textRemove() {
    this.textContent = '';
};
textConstant = function textConstant(value) {
    return function () {
        this.textContent = value;
    };
};
textFunction = function textFunction(value) {
    return function () {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? '' : v;
    };
};
selection_text = function selection_text(value) {
    return arguments.length ? this.each(value == null ? textRemove : (typeof value === 'function' ? textFunction : textConstant)(value)) : this.node().textContent;
};
htmlRemove = function htmlRemove() {
    this.innerHTML = '';
};
htmlConstant = function htmlConstant(value) {
    return function () {
        this.innerHTML = value;
    };
};
htmlFunction = function htmlFunction(value) {
    return function () {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? '' : v;
    };
};
selection_html = function selection_html(value) {
    return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === 'function' ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
};
raise$1 = function raise$1() {
    if (this.nextSibling)
        this.parentNode.appendChild(this);
};
selection_raise = function selection_raise() {
    return this.each(raise$1);
};
lower = function lower() {
    if (this.previousSibling)
        this.parentNode.insertBefore(this, this.parentNode.firstChild);
};
selection_lower = function selection_lower() {
    return this.each(lower);
};
selection_append = function selection_append(name) {
    var create = typeof name === 'function' ? name : creator(name);
    return this.select(function () {
        return this.appendChild(create.apply(this, arguments));
    });
};
constantNull = function constantNull() {
    return null;
};
selection_insert = function selection_insert(name, before) {
    var create = typeof name === 'function' ? name : creator(name), select = before == null ? constantNull : typeof before === 'function' ? before : selector(before);
    return this.select(function () {
        return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
    });
};
remove = function remove() {
    var parent = this.parentNode;
    if (parent)
        parent.removeChild(this);
};
selection_remove = function selection_remove() {
    return this.each(remove);
};
selection_datum = function selection_datum(value) {
    return arguments.length ? this.property('__data__', value) : this.node().__data__;
};
dispatchEvent = function dispatchEvent(node, type, params) {
    var window$$ = window(node), event = window$$.CustomEvent;
    if (event) {
        event = new event(type, params);
    } else {
        event = window$$.document.createEvent('Event');
        if (params)
            event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else
            event.initEvent(type, false, false);
    }
    node.dispatchEvent(event);
};
dispatchConstant = function dispatchConstant(type, params) {
    return function () {
        return dispatchEvent(this, type, params);
    };
};
dispatchFunction = function dispatchFunction(type, params) {
    return function () {
        return dispatchEvent(this, type, params.apply(this, arguments));
    };
};
selection_dispatch = function selection_dispatch(type, params) {
    return this.each((typeof params === 'function' ? dispatchFunction : dispatchConstant)(type, params));
};
Selection = function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
};
selection = function selection() {
    return new Selection([[document.documentElement]], root);
};
select = function select(selector) {
    return typeof selector === 'string' ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
};
selectAll = function selectAll(selector) {
    return typeof selector === 'string' ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([selector == null ? [] : selector], root);
};
touch = function touch(node, touches, identifier) {
    if (arguments.length < 3)
        identifier = touches, touches = sourceEvent().changedTouches;
    for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
        if ((touch = touches[i]).identifier === identifier) {
            return point$5(node, touch);
        }
    }
    return null;
};
touches = function touches(node, touches) {
    if (touches == null)
        touches = sourceEvent().touches;
    for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
        points[i] = point$5(node, touches[i]);
    }
    return points;
};
schedule = function schedule(node, name, id, index, group, timing) {
    var schedules = node.__transition;
    if (!schedules)
        node.__transition = {};
    else if (id in schedules)
        return;
    create(node, id, {
        name: name,
        index: index,
        group: group,
        on: emptyOn,
        tween: emptyTween,
        time: timing.time,
        delay: timing.delay,
        duration: timing.duration,
        ease: timing.ease,
        timer: null,
        state: CREATED
    });
};
init = function init(node, id) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED)
        throw new Error('too late');
    return schedule;
};
set$2 = function set$2(node, id) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING)
        throw new Error('too late');
    return schedule;
};
get$1 = function get$1(node, id) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id]))
        throw new Error('too late');
    return schedule;
};
create = function create(node, id, self) {
    var schedules = node.__transition, tween;
    schedules[id] = self;
    self.timer = timer(schedule, 0, self.time);
    function schedule(elapsed) {
        self.state = SCHEDULED;
        if (self.delay <= elapsed)
            start(elapsed - self.delay);
        else
            self.timer.restart(start, self.delay, self.time);
    }
    function start(elapsed) {
        var i, j, n, o;
        for (i in schedules) {
            o = schedules[i];
            if (o.name !== self.name)
                continue;
            if (o.state === STARTED) {
                o.state = ENDED;
                o.timer.stop();
                o.on.call('interrupt', node, node.__data__, o.index, o.group);
                delete schedules[i];
            } else if (+i < id) {
                o.state = ENDED;
                o.timer.stop();
                delete schedules[i];
            }
        }
        timeout$1(function () {
            if (self.state === STARTED) {
                self.timer.restart(tick, self.delay, self.time);
                tick(elapsed);
            }
        });
        self.state = STARTING;
        self.on.call('start', node, node.__data__, self.index, self.group);
        if (self.state !== STARTING)
            return;
        self.state = STARTED;
        tween = new Array(n = self.tween.length);
        for (i = 0, j = -1; i < n; ++i) {
            if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
                tween[++j] = o;
            }
        }
        tween.length = j + 1;
    }
    function tick(elapsed) {
        var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.state = ENDING, 1), i = -1, n = tween.length;
        while (++i < n) {
            tween[i].call(null, t);
        }
        if (self.state === ENDING) {
            self.state = ENDED;
            self.timer.stop();
            self.on.call('end', node, node.__data__, self.index, self.group);
            for (i in schedules)
                if (+i !== id)
                return void delete schedules[id];
            delete node.__transition;
        }
    }
};
interrupt = function interrupt(node, name) {
    var schedules = node.__transition, schedule, active, empty = true, i;
    if (!schedules)
        return;
    name = name == null ? null : name + '';
    for (i in schedules) {
        if ((schedule = schedules[i]).name !== name) {
            empty = false;
            continue;
        }
        active = schedule.state === STARTED;
        schedule.state = ENDED;
        schedule.timer.stop();
        if (active)
            schedule.on.call('interrupt', node, node.__data__, schedule.index, schedule.group);
        delete schedules[i];
    }
    if (empty)
        delete node.__transition;
};
selection_interrupt = function selection_interrupt(name) {
    return this.each(function () {
        interrupt(this, name);
    });
};
tweenRemove = function tweenRemove(id, name) {
    var tween0, tween1;
    return function () {
        var schedule = set$2(this, id), tween = schedule.tween;
        if (tween !== tween0) {
            tween1 = tween0 = tween;
            for (var i = 0, n = tween1.length; i < n; ++i) {
                if (tween1[i].name === name) {
                    tween1 = tween1.slice();
                    tween1.splice(i, 1);
                    break;
                }
            }
        }
        schedule.tween = tween1;
    };
};
tweenFunction = function tweenFunction(id, name, value) {
    var tween0, tween1;
    if (typeof value !== 'function')
        throw new Error();
    return function () {
        var schedule = set$2(this, id), tween = schedule.tween;
        if (tween !== tween0) {
            tween1 = (tween0 = tween).slice();
            for (var t = {
                        name: name,
                        value: value
                    }, i = 0, n = tween1.length; i < n; ++i) {
                if (tween1[i].name === name) {
                    tween1[i] = t;
                    break;
                }
            }
            if (i === n)
                tween1.push(t);
        }
        schedule.tween = tween1;
    };
};
transition_tween = function transition_tween(name, value) {
    var id = this._id;
    name += '';
    if (arguments.length < 2) {
        var tween = get$1(this.node(), id).tween;
        for (var i = 0, n = tween.length, t; i < n; ++i) {
            if ((t = tween[i]).name === name) {
                return t.value;
            }
        }
        return null;
    }
    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
};
tweenValue = function tweenValue(transition, name, value) {
    var id = transition._id;
    transition.each(function () {
        var schedule = set$2(this, id);
        (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });
    return function (node) {
        return get$1(node, id).value[name];
    };
};
interpolate$1 = function interpolate$1(a, b) {
    var c;
    return (typeof b === 'number' ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
};
attrRemove$1 = function attrRemove$1(name) {
    return function () {
        this.removeAttribute(name);
    };
};
attrRemoveNS$1 = function attrRemoveNS$1(fullname) {
    return function () {
        this.removeAttributeNS(fullname.space, fullname.local);
    };
};
attrConstant$1 = function attrConstant$1(name, interpolate, value1) {
    var value00, interpolate0;
    return function () {
        var value0 = this.getAttribute(name);
        return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
    };
};
attrConstantNS$1 = function attrConstantNS$1(fullname, interpolate, value1) {
    var value00, interpolate0;
    return function () {
        var value0 = this.getAttributeNS(fullname.space, fullname.local);
        return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
    };
};
attrFunction$1 = function attrFunction$1(name, interpolate, value) {
    var value00, value10, interpolate0;
    return function () {
        var value0, value1 = value(this);
        if (value1 == null)
            return void this.removeAttribute(name);
        value0 = this.getAttribute(name);
        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
    };
};
attrFunctionNS$1 = function attrFunctionNS$1(fullname, interpolate, value) {
    var value00, value10, interpolate0;
    return function () {
        var value0, value1 = value(this);
        if (value1 == null)
            return void this.removeAttributeNS(fullname.space, fullname.local);
        value0 = this.getAttributeNS(fullname.space, fullname.local);
        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
    };
};
transition_attr = function transition_attr(name, value) {
    var fullname = namespace(name), i = fullname === 'transform' ? interpolateTransform$2 : interpolate$1;
    return this.attrTween(name, typeof value === 'function' ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, 'attr.' + name, value)) : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname) : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
};
attrTweenNS = function attrTweenNS(fullname, value) {
    function tween() {
        var node = this, i = value.apply(node, arguments);
        return i && function (t) {
            node.setAttributeNS(fullname.space, fullname.local, i(t));
        };
    }
    tween._value = value;
    return tween;
};
attrTween = function attrTween(name, value) {
    function tween() {
        var node = this, i = value.apply(node, arguments);
        return i && function (t) {
            node.setAttribute(name, i(t));
        };
    }
    tween._value = value;
    return tween;
};
transition_attrTween = function transition_attrTween(name, value) {
    var key = 'attr.' + name;
    if (arguments.length < 2)
        return (key = this.tween(key)) && key._value;
    if (value == null)
        return this.tween(key, null);
    if (typeof value !== 'function')
        throw new Error();
    var fullname = namespace(name);
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
};
delayFunction = function delayFunction(id, value) {
    return function () {
        init(this, id).delay = +value.apply(this, arguments);
    };
};
delayConstant = function delayConstant(id, value) {
    return value = +value, function () {
        init(this, id).delay = value;
    };
};
transition_delay = function transition_delay(value) {
    var id = this._id;
    return arguments.length ? this.each((typeof value === 'function' ? delayFunction : delayConstant)(id, value)) : get$1(this.node(), id).delay;
};
durationFunction = function durationFunction(id, value) {
    return function () {
        set$2(this, id).duration = +value.apply(this, arguments);
    };
};
durationConstant = function durationConstant(id, value) {
    return value = +value, function () {
        set$2(this, id).duration = value;
    };
};
transition_duration = function transition_duration(value) {
    var id = this._id;
    return arguments.length ? this.each((typeof value === 'function' ? durationFunction : durationConstant)(id, value)) : get$1(this.node(), id).duration;
};
easeConstant = function easeConstant(id, value) {
    if (typeof value !== 'function')
        throw new Error();
    return function () {
        set$2(this, id).ease = value;
    };
};
transition_ease = function transition_ease(value) {
    var id = this._id;
    return arguments.length ? this.each(easeConstant(id, value)) : get$1(this.node(), id).ease;
};
transition_filter = function transition_filter(match) {
    if (typeof match !== 'function')
        match = matcher$1(match);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
            if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                subgroup.push(node);
            }
        }
    }
    return new Transition(subgroups, this._parents, this._name, this._id);
};
transition_merge = function transition_merge(transition) {
    if (transition._id !== this._id)
        throw new Error();
    for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
        for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
            if (node = group0[i] || group1[i]) {
                merge[i] = node;
            }
        }
    }
    for (; j < m0; ++j) {
        merges[j] = groups0[j];
    }
    return new Transition(merges, this._parents, this._name, this._id);
};
start$1 = function start$1(name) {
    return (name + '').trim().split(/^|\s+/).every(function (t) {
        var i = t.indexOf('.');
        if (i >= 0)
            t = t.slice(0, i);
        return !t || t === 'start';
    });
};
onFunction = function onFunction(id, name, listener) {
    var on0, on1, sit = start$1(name) ? init : set$2;
    return function () {
        var schedule = sit(this, id), on = schedule.on;
        if (on !== on0)
            (on1 = (on0 = on).copy()).on(name, listener);
        schedule.on = on1;
    };
};
transition_on = function transition_on(name, listener) {
    var id = this._id;
    return arguments.length < 2 ? get$1(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
};
removeFunction = function removeFunction(id) {
    return function () {
        var parent = this.parentNode;
        for (var i in this.__transition)
            if (+i !== id)
            return;
        if (parent)
            parent.removeChild(this);
    };
};
transition_remove = function transition_remove() {
    return this.on('end.remove', removeFunction(this._id));
};
transition_select = function transition_select(select) {
    var name = this._name, id = this._id;
    if (typeof select !== 'function')
        select = selector(select);
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
            if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                if ('__data__' in node)
                    subnode.__data__ = node.__data__;
                subgroup[i] = subnode;
                schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
            }
        }
    }
    return new Transition(subgroups, this._parents, name, id);
};
transition_selectAll = function transition_selectAll(select) {
    var name = this._name, id = this._id;
    if (typeof select !== 'function')
        select = selectorAll(select);
    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
            if (node = group[i]) {
                for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
                    if (child = children[k]) {
                        schedule(child, name, id, k, children, inherit);
                    }
                }
                subgroups.push(children);
                parents.push(node);
            }
        }
    }
    return new Transition(subgroups, parents, name, id);
};
transition_selection = function transition_selection() {
    return new Selection$1(this._groups, this._parents);
};
styleRemove$1 = function styleRemove$1(name, interpolate) {
    var value00, value10, interpolate0;
    return function () {
        var style = window(this).getComputedStyle(this, null), value0 = style.getPropertyValue(name), value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
    };
};
styleRemoveEnd = function styleRemoveEnd(name) {
    return function () {
        this.style.removeProperty(name);
    };
};
styleConstant$1 = function styleConstant$1(name, interpolate, value1) {
    var value00, interpolate0;
    return function () {
        var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);
        return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
    };
};
styleFunction$1 = function styleFunction$1(name, interpolate, value) {
    var value00, value10, interpolate0;
    return function () {
        var style = window(this).getComputedStyle(this, null), value0 = style.getPropertyValue(name), value1 = value(this);
        if (value1 == null)
            value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
    };
};
transition_style = function transition_style(name, value, priority) {
    var i = (name += '') === 'transform' ? interpolateTransform$1 : interpolate$1;
    return value == null ? this.styleTween(name, styleRemove$1(name, i)).on('end.style.' + name, styleRemoveEnd(name)) : this.styleTween(name, typeof value === 'function' ? styleFunction$1(name, i, tweenValue(this, 'style.' + name, value)) : styleConstant$1(name, i, value), priority);
};
styleTween = function styleTween(name, value, priority) {
    function tween() {
        var node = this, i = value.apply(node, arguments);
        return i && function (t) {
            node.style.setProperty(name, i(t), priority);
        };
    }
    tween._value = value;
    return tween;
};
transition_styleTween = function transition_styleTween(name, value, priority) {
    var key = 'style.' + (name += '');
    if (arguments.length < 2)
        return (key = this.tween(key)) && key._value;
    if (value == null)
        return this.tween(key, null);
    if (typeof value !== 'function')
        throw new Error();
    return this.tween(key, styleTween(name, value, priority == null ? '' : priority));
};
textConstant$1 = function textConstant$1(value) {
    return function () {
        this.textContent = value;
    };
};
textFunction$1 = function textFunction$1(value) {
    return function () {
        var value1 = value(this);
        this.textContent = value1 == null ? '' : value1;
    };
};
transition_text = function transition_text(value) {
    return this.tween('text', typeof value === 'function' ? textFunction$1(tweenValue(this, 'text', value)) : textConstant$1(value == null ? '' : value + ''));
};
transition_transition = function transition_transition() {
    var name = this._name, id0 = this._id, id1 = newId();
    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
            if (node = group[i]) {
                var inherit = get$1(node, id0);
                schedule(node, name, id1, i, group, {
                    time: inherit.time + inherit.delay + inherit.duration,
                    delay: 0,
                    duration: inherit.duration,
                    ease: inherit.ease
                });
            }
        }
    }
    return new Transition(groups, this._parents, name, id1);
};
Transition = function Transition(groups, parents, name, id) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id;
};
transition = function transition(name) {
    return selection().transition(name);
};
newId = function newId() {
    return ++id;
};
inherit = function inherit(node, id) {
    var timing;
    while (!(timing = node.__transition) || !(timing = timing[id])) {
        if (!(node = node.parentNode)) {
            return defaultTiming.time = now(), defaultTiming;
        }
    }
    return timing;
};
selection_transition = function selection_transition(name) {
    var id, timing;
    if (name instanceof Transition) {
        id = name._id, name = name._name;
    } else {
        id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + '';
    }
    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
        for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
            if (node = group[i]) {
                schedule(node, name, id, i, group, timing || inherit(node, id));
            }
        }
    }
    return new Transition(groups, this._parents, name, id);
};
active = function active(node, name) {
    var schedules = node.__transition, schedule, i;
    if (schedules) {
        name = name == null ? null : name + '';
        for (i in schedules) {
            if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
                return new Transition([[node]], root$1, name, +i);
            }
        }
    }
    return null;
};
identity$5 = function identity$5(x) {
    return x;
};
translateX = function translateX(scale0, scale1, d) {
    var x = scale0(d);
    return 'translate(' + (isFinite(x) ? x : scale1(d)) + ',0)';
};
translateY = function translateY(scale0, scale1, d) {
    var y = scale0(d);
    return 'translate(0,' + (isFinite(y) ? y : scale1(d)) + ')';
};
center = function center(scale) {
    var offset = scale.bandwidth() / 2;
    if (scale.round())
        offset = Math.round(offset);
    return function (d) {
        return scale(d) + offset;
    };
};
entering = function entering() {
    return !this.__axis;
};
axis = function axis(orient, scale) {
    var tickArguments = [], tickValues = null, tickFormat = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3;
    function axis(context) {
        var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5 : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, transform = orient === top || orient === bottom ? translateX : translateY, range = scale.range(), range0 = range[0] + 0.5, range1 = range[range.length - 1] + 0.5, position = (scale.bandwidth ? center : identity$5)(scale.copy()), selection = context.selection ? context.selection() : context, path = selection.selectAll('.domain').data([null]), tick = selection.selectAll('.tick').data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append('g').attr('class', 'tick'), line = tick.select('line'), text = tick.select('text'), k = orient === top || orient === left ? -1 : 1, x, y = orient === left || orient === right ? (x = 'x', 'y') : (x = 'y', 'x');
        path = path.merge(path.enter().insert('path', '.tick').attr('class', 'domain').attr('stroke', '#000'));
        tick = tick.merge(tickEnter);
        line = line.merge(tickEnter.append('line').attr('stroke', '#000').attr(x + '2', k * tickSizeInner).attr(y + '1', 0.5).attr(y + '2', 0.5));
        text = text.merge(tickEnter.append('text').attr('fill', '#000').attr(x, k * spacing).attr(y, 0.5).attr('dy', orient === top ? '0em' : orient === bottom ? '0.71em' : '0.32em'));
        if (context !== selection) {
            path = path.transition(context);
            tick = tick.transition(context);
            line = line.transition(context);
            text = text.transition(context);
            tickExit = tickExit.transition(context).attr('opacity', epsilon$2).attr('transform', function (d) {
                return transform(position, this.parentNode.__axis || position, d);
            });
            tickEnter.attr('opacity', epsilon$2).attr('transform', function (d) {
                return transform(this.parentNode.__axis || position, position, d);
            });
        }
        tickExit.remove();
        path.attr('d', orient === left || orient == right ? 'M' + k * tickSizeOuter + ',' + range0 + 'H0.5V' + range1 + 'H' + k * tickSizeOuter : 'M' + range0 + ',' + k * tickSizeOuter + 'V0.5H' + range1 + 'V' + k * tickSizeOuter);
        tick.attr('opacity', 1).attr('transform', function (d) {
            return transform(position, position, d);
        });
        line.attr(x + '2', k * tickSizeInner);
        text.attr(x, k * spacing).text(format);
        selection.filter(entering).attr('fill', 'none').attr('font-size', 10).attr('font-family', 'sans-serif').attr('text-anchor', orient === right ? 'start' : orient === left ? 'end' : 'middle');
        selection.each(function () {
            this.__axis = position;
        });
    }
    axis.scale = function (_) {
        return arguments.length ? (scale = _, axis) : scale;
    };
    axis.ticks = function () {
        return tickArguments = slice$4.call(arguments), axis;
    };
    axis.tickArguments = function (_) {
        return arguments.length ? (tickArguments = _ == null ? [] : slice$4.call(_), axis) : tickArguments.slice();
    };
    axis.tickValues = function (_) {
        return arguments.length ? (tickValues = _ == null ? null : slice$4.call(_), axis) : tickValues && tickValues.slice();
    };
    axis.tickFormat = function (_) {
        return arguments.length ? (tickFormat = _, axis) : tickFormat;
    };
    axis.tickSize = function (_) {
        return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
    };
    axis.tickSizeInner = function (_) {
        return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
    };
    axis.tickSizeOuter = function (_) {
        return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
    };
    axis.tickPadding = function (_) {
        return arguments.length ? (tickPadding = +_, axis) : tickPadding;
    };
    return axis;
};
axisTop = function axisTop(scale) {
    return axis(top, scale);
};
axisRight = function axisRight(scale) {
    return axis(right, scale);
};
axisBottom = function axisBottom(scale) {
    return axis(bottom, scale);
};
axisLeft = function axisLeft(scale) {
    return axis(left, scale);
};
defaultSeparation = function defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
};
meanX = function meanX(children) {
    return children.reduce(meanXReduce, 0) / children.length;
};
meanXReduce = function meanXReduce(x, c) {
    return x + c.x;
};
maxY = function maxY(children) {
    return 1 + children.reduce(maxYReduce, 0);
};
maxYReduce = function maxYReduce(y, c) {
    return Math.max(y, c.y);
};
leafLeft = function leafLeft(node) {
    var children;
    while (children = node.children)
        node = children[0];
    return node;
};
leafRight = function leafRight(node) {
    var children;
    while (children = node.children)
        node = children[children.length - 1];
    return node;
};
cluster = function cluster() {
    var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
    function cluster(root) {
        var previousNode, x = 0;
        root.eachAfter(function (node) {
            var children = node.children;
            if (children) {
                node.x = meanX(children);
                node.y = maxY(children);
            } else {
                node.x = previousNode ? x += separation(node, previousNode) : 0;
                node.y = 0;
                previousNode = node;
            }
        });
        var left = leafLeft(root), right = leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
        return root.eachAfter(nodeSize ? function (node) {
            node.x = (node.x - root.x) * dx;
            node.y = (root.y - node.y) * dy;
        } : function (node) {
            node.x = (node.x - x0) / (x1 - x0) * dx;
            node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
        });
    }
    cluster.separation = function (x) {
        return arguments.length ? (separation = x, cluster) : separation;
    };
    cluster.size = function (x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [
            dx,
            dy
        ];
    };
    cluster.nodeSize = function (x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [
            dx,
            dy
        ] : null;
    };
    return cluster;
};
node_each = function node_each(callback) {
    var node = this, current, next = [node], children, i, n;
    do {
        current = next.reverse(), next = [];
        while (node = current.pop()) {
            callback(node), children = node.children;
            if (children)
                for (i = 0, n = children.length; i < n; ++i) {
                next.push(children[i]);
            }
        }
    } while (next.length);
    return this;
};
node_eachBefore = function node_eachBefore(callback) {
    var node = this, nodes = [node], children, i;
    while (node = nodes.pop()) {
        callback(node), children = node.children;
        if (children)
            for (i = children.length - 1; i >= 0; --i) {
            nodes.push(children[i]);
        }
    }
    return this;
};
node_eachAfter = function node_eachAfter(callback) {
    var node = this, nodes = [node], next = [], children, i, n;
    while (node = nodes.pop()) {
        next.push(node), children = node.children;
        if (children)
            for (i = 0, n = children.length; i < n; ++i) {
            nodes.push(children[i]);
        }
    }
    while (node = next.pop()) {
        callback(node);
    }
    return this;
};
node_sum = function node_sum(value) {
    return this.eachAfter(function (node) {
        var sum = +value(node.data) || 0, children = node.children, i = children && children.length;
        while (--i >= 0)
            sum += children[i].value;
        node.value = sum;
    });
};
node_sort = function node_sort(compare) {
    return this.eachBefore(function (node) {
        if (node.children) {
            node.children.sort(compare);
        }
    });
};
node_path = function node_path(end) {
    var start = this, ancestor = leastCommonAncestor(start, end), nodes = [start];
    while (start !== ancestor) {
        start = start.parent;
        nodes.push(start);
    }
    var k = nodes.length;
    while (end !== ancestor) {
        nodes.splice(k, 0, end);
        end = end.parent;
    }
    return nodes;
};
leastCommonAncestor = function leastCommonAncestor(a, b) {
    if (a === b)
        return a;
    var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
    a = aNodes.pop();
    b = bNodes.pop();
    while (a === b) {
        c = a;
        a = aNodes.pop();
        b = bNodes.pop();
    }
    return c;
};
node_ancestors = function node_ancestors() {
    var node = this, nodes = [node];
    while (node = node.parent) {
        nodes.push(node);
    }
    return nodes;
};
node_descendants = function node_descendants() {
    var nodes = [];
    this.each(function (node) {
        nodes.push(node);
    });
    return nodes;
};
node_leaves = function node_leaves() {
    var leaves = [];
    this.eachBefore(function (node) {
        if (!node.children) {
            leaves.push(node);
        }
    });
    return leaves;
};
node_links = function node_links() {
    var root = this, links = [];
    root.each(function (node) {
        if (node !== root) {
            links.push({
                source: node.parent,
                target: node
            });
        }
    });
    return links;
};
hierarchy = function hierarchy(data, children) {
    var root = new Node(data), valued = +data.value && (root.value = data.value), node, nodes = [root], child, childs, i, n;
    if (children == null)
        children = defaultChildren;
    while (node = nodes.pop()) {
        if (valued)
            node.value = +node.data.value;
        if ((childs = children(node.data)) && (n = childs.length)) {
            node.children = new Array(n);
            for (i = n - 1; i >= 0; --i) {
                nodes.push(child = node.children[i] = new Node(childs[i]));
                child.parent = node;
                child.depth = node.depth + 1;
            }
        }
    }
    return root.eachBefore(computeHeight);
};
node_copy = function node_copy() {
    return hierarchy(this).eachBefore(copyData);
};
defaultChildren = function defaultChildren(d) {
    return d.children;
};
copyData = function copyData(node) {
    node.data = node.data.data;
};
computeHeight = function computeHeight(node) {
    var height = 0;
    do
        node.height = height;
    while ((node = node.parent) && node.height < ++height);
};
Node = function Node(data) {
    this.data = data;
    this.depth = this.height = 0;
    this.parent = null;
};
Node$2 = function Node$2(value) {
    this._ = value;
    this.next = null;
};
shuffle$1 = function shuffle$1(array) {
    var i, n = (array = array.slice()).length, head = null, node = head;
    while (n) {
        var next = new Node$2(array[n - 1]);
        if (node)
            node = node.next = next;
        else
            node = head = next;
        array[i] = array[--n];
    }
    return {
        head: head,
        tail: node
    };
};
enclose = function enclose(circles) {
    return encloseN(shuffle$1(circles), []);
};
encloses = function encloses(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r - b.r;
    return dr * dr + 0.000001 > dx * dx + dy * dy;
};
encloseN = function encloseN(L, B) {
    var circle, l0 = null, l1 = L.head, l2, p1;
    switch (B.length) {
    case 1:
        circle = enclose1(B[0]);
        break;
    case 2:
        circle = enclose2(B[0], B[1]);
        break;
    case 3:
        circle = enclose3(B[0], B[1], B[2]);
        break;
    }
    while (l1) {
        p1 = l1._, l2 = l1.next;
        if (!circle || !encloses(circle, p1)) {
            if (l0)
                L.tail = l0, l0.next = null;
            else
                L.head = L.tail = null;
            B.push(p1);
            circle = encloseN(L, B);
            B.pop();
            if (L.head)
                l1.next = L.head, L.head = l1;
            else
                l1.next = null, L.head = L.tail = l1;
            l0 = L.tail, l0.next = l2;
        } else {
            l0 = l1;
        }
        l1 = l2;
    }
    L.tail = l0;
    return circle;
};
enclose1 = function enclose1(a) {
    return {
        x: a.x,
        y: a.y,
        r: a.r
    };
};
enclose2 = function enclose2(a, b) {
    var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1, l = Math.sqrt(x21 * x21 + y21 * y21);
    return {
        x: (x1 + x2 + x21 / l * r21) / 2,
        y: (y1 + y2 + y21 / l * r21) / 2,
        r: (l + r1 + r2) / 2
    };
};
enclose3 = function enclose3(a, b, c) {
    var x1 = a.x, y1 = a.y, r1 = a.r, x2 = b.x, y2 = b.y, r2 = b.r, x3 = c.x, y3 = c.y, r3 = c.r, a2 = 2 * (x1 - x2), b2 = 2 * (y1 - y2), c2 = 2 * (r2 - r1), d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2, a3 = 2 * (x1 - x3), b3 = 2 * (y1 - y3), c3 = 2 * (r3 - r1), d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3, ab = a3 * b2 - a2 * b3, xa = (b2 * d3 - b3 * d2) / ab - x1, xb = (b3 * c2 - b2 * c3) / ab, ya = (a3 * d2 - a2 * d3) / ab - y1, yb = (a2 * c3 - a3 * c2) / ab, A = xb * xb + yb * yb - 1, B = 2 * (xa * xb + ya * yb + r1), C = xa * xa + ya * ya - r1 * r1, r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
    return {
        x: xa + xb * r + x1,
        y: ya + yb * r + y1,
        r: r
    };
};
place = function place(a, b, c) {
    var ax = a.x, ay = a.y, da = b.r + c.r, db = a.r + c.r, dx = b.x - ax, dy = b.y - ay, dc = dx * dx + dy * dy;
    if (dc) {
        var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
        c.x = ax + x * dx + y * dy;
        c.y = ay + x * dy - y * dx;
    } else {
        c.x = ax + db;
        c.y = ay;
    }
};
intersects = function intersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return dr * dr > dx * dx + dy * dy;
};
distance2 = function distance2(circle, x, y) {
    var dx = circle.x - x, dy = circle.y - y;
    return dx * dx + dy * dy;
};
Node$1 = function Node$1(circle) {
    this._ = circle;
    this.next = null;
    this.previous = null;
};
packEnclose = function packEnclose(circles) {
    if (!(n = circles.length))
        return 0;
    var a, b, c, n;
    a = circles[0], a.x = 0, a.y = 0;
    if (!(n > 1))
        return a.r;
    b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
    if (!(n > 2))
        return a.r + b.r;
    place(b, a, c = circles[2]);
    var aa = a.r * a.r, ba = b.r * b.r, ca = c.r * c.r, oa = aa + ba + ca, ox = aa * a.x + ba * b.x + ca * c.x, oy = aa * a.y + ba * b.y + ca * c.y, cx, cy, i, j, k, sj, sk;
    a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
    a.next = c.previous = b;
    b.next = a.previous = c;
    c.next = b.previous = a;
    pack:
        for (i = 3; i < n; ++i) {
            place(a._, b._, c = circles[i]), c = new Node$1(c);
            if ((k = a.previous) === (j = b.next)) {
                if (intersects(j._, c._)) {
                    a = b, b = j, --i;
                    continue pack;
                }
            } else {
                sj = j._.r, sk = k._.r;
                do {
                    if (sj <= sk) {
                        if (intersects(j._, c._)) {
                            b = j, a.next = b, b.previous = a, --i;
                            continue pack;
                        }
                        j = j.next, sj += j._.r;
                    } else {
                        if (intersects(k._, c._)) {
                            a = k, a.next = b, b.previous = a, --i;
                            continue pack;
                        }
                        k = k.previous, sk += k._.r;
                    }
                } while (j !== k.next);
            }
            c.previous = a, c.next = b, a.next = b.previous = b = c;
            oa += ca = c._.r * c._.r;
            ox += ca * c._.x;
            oy += ca * c._.y;
            aa = distance2(a._, cx = ox / oa, cy = oy / oa);
            while ((c = c.next) !== b) {
                if ((ca = distance2(c._, cx, cy)) < aa) {
                    a = c, aa = ca;
                }
            }
            b = a.next;
        }
    a = [b._], c = b;
    while ((c = c.next) !== b)
        a.push(c._);
    c = enclose(a);
    for (i = 0; i < n; ++i)
        a = circles[i], a.x -= c.x, a.y -= c.y;
    return c.r;
};
siblings = function siblings(circles) {
    packEnclose(circles);
    return circles;
};
optional = function optional(f) {
    return f == null ? null : required(f);
};
required = function required(f) {
    if (typeof f !== 'function')
        throw new Error();
    return f;
};
constantZero = function constantZero() {
    return 0;
};
constant$5 = function constant$5(x) {
    return function () {
        return x;
    };
};
defaultRadius = function defaultRadius(d) {
    return Math.sqrt(d.value);
};
index = function index() {
    var radius = null, dx = 1, dy = 1, padding = constantZero;
    function pack(root) {
        root.x = dx / 2, root.y = dy / 2;
        if (radius) {
            root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
        } else {
            root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
        }
        return root;
    }
    pack.radius = function (x) {
        return arguments.length ? (radius = optional(x), pack) : radius;
    };
    pack.size = function (x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [
            dx,
            dy
        ];
    };
    pack.padding = function (x) {
        return arguments.length ? (padding = typeof x === 'function' ? x : constant$5(+x), pack) : padding;
    };
    return pack;
};
radiusLeaf = function radiusLeaf(radius) {
    return function (node) {
        if (!node.children) {
            node.r = Math.max(0, +radius(node) || 0);
        }
    };
};
packChildren = function packChildren(padding, k) {
    return function (node) {
        if (children = node.children) {
            var children, i, n = children.length, r = padding(node) * k || 0, e;
            if (r)
                for (i = 0; i < n; ++i)
                children[i].r += r;
            e = packEnclose(children);
            if (r)
                for (i = 0; i < n; ++i)
                children[i].r -= r;
            node.r = e + r;
        }
    };
};
translateChild = function translateChild(k) {
    return function (node) {
        var parent = node.parent;
        node.r *= k;
        if (parent) {
            node.x = parent.x + k * node.x;
            node.y = parent.y + k * node.y;
        }
    };
};
roundNode = function roundNode(node) {
    node.x0 = Math.round(node.x0);
    node.y0 = Math.round(node.y0);
    node.x1 = Math.round(node.x1);
    node.y1 = Math.round(node.y1);
};
treemapDice = function treemapDice(parent, x0, y0, x1, y1) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (x1 - x0) / parent.value;
    while (++i < n) {
        node = nodes[i], node.y0 = y0, node.y1 = y1;
        node.x0 = x0, node.x1 = x0 += node.value * k;
    }
};
partition = function partition() {
    var dx = 1, dy = 1, padding = 0, round = false;
    function partition(root) {
        var n = root.height + 1;
        root.x0 = root.y0 = padding;
        root.x1 = dx;
        root.y1 = dy / n;
        root.eachBefore(positionNode(dy, n));
        if (round)
            root.eachBefore(roundNode);
        return root;
    }
    function positionNode(dy, n) {
        return function (node) {
            if (node.children) {
                treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
            }
            var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
            if (x1 < x0)
                x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0)
                y0 = y1 = (y0 + y1) / 2;
            node.x0 = x0;
            node.y0 = y0;
            node.x1 = x1;
            node.y1 = y1;
        };
    }
    partition.round = function (x) {
        return arguments.length ? (round = !!x, partition) : round;
    };
    partition.size = function (x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [
            dx,
            dy
        ];
    };
    partition.padding = function (x) {
        return arguments.length ? (padding = +x, partition) : padding;
    };
    return partition;
};
defaultId = function defaultId(d) {
    return d.id;
};
defaultParentId = function defaultParentId(d) {
    return d.parentId;
};
stratify = function stratify() {
    var id = defaultId, parentId = defaultParentId;
    function stratify(data) {
        var d, i, n = data.length, root, parent, node, nodes = new Array(n), nodeId, nodeKey, nodeByKey = {};
        for (i = 0; i < n; ++i) {
            d = data[i], node = nodes[i] = new Node(d);
            if ((nodeId = id(d, i, data)) != null && (nodeId += '')) {
                nodeKey = keyPrefix$1 + (node.id = nodeId);
                nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
            }
        }
        for (i = 0; i < n; ++i) {
            node = nodes[i], nodeId = parentId(data[i], i, data);
            if (nodeId == null || !(nodeId += '')) {
                if (root)
                    throw new Error('multiple roots');
                root = node;
            } else {
                parent = nodeByKey[keyPrefix$1 + nodeId];
                if (!parent)
                    throw new Error('missing: ' + nodeId);
                if (parent === ambiguous)
                    throw new Error('ambiguous: ' + nodeId);
                if (parent.children)
                    parent.children.push(node);
                else
                    parent.children = [node];
                node.parent = parent;
            }
        }
        if (!root)
            throw new Error('no root');
        root.parent = preroot;
        root.eachBefore(function (node) {
            node.depth = node.parent.depth + 1;
            --n;
        }).eachBefore(computeHeight);
        root.parent = null;
        if (n > 0)
            throw new Error('cycle');
        return root;
    }
    stratify.id = function (x) {
        return arguments.length ? (id = required(x), stratify) : id;
    };
    stratify.parentId = function (x) {
        return arguments.length ? (parentId = required(x), stratify) : parentId;
    };
    return stratify;
};
defaultSeparation$1 = function defaultSeparation$1(a, b) {
    return a.parent === b.parent ? 1 : 2;
};
nextLeft = function nextLeft(v) {
    var children = v.children;
    return children ? children[0] : v.t;
};
nextRight = function nextRight(v) {
    var children = v.children;
    return children ? children[children.length - 1] : v.t;
};
moveSubtree = function moveSubtree(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
};
executeShifts = function executeShifts(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
        w = children[i];
        w.z += shift;
        w.m += shift;
        shift += w.s + (change += w.c);
    }
};
nextAncestor = function nextAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
};
TreeNode = function TreeNode(node, i) {
    this._ = node;
    this.parent = null;
    this.children = null;
    this.A = null;
    this.a = this;
    this.z = 0;
    this.m = 0;
    this.c = 0;
    this.s = 0;
    this.t = null;
    this.i = i;
};
treeRoot = function treeRoot(root) {
    var tree = new TreeNode(root, 0), node, nodes = [tree], child, children, i, n;
    while (node = nodes.pop()) {
        if (children = node._.children) {
            node.children = new Array(n = children.length);
            for (i = n - 1; i >= 0; --i) {
                nodes.push(child = node.children[i] = new TreeNode(children[i], i));
                child.parent = node;
            }
        }
    }
    (tree.parent = new TreeNode(null, 0)).children = [tree];
    return tree;
};
tree = function tree() {
    var separation = defaultSeparation$1, dx = 1, dy = 1, nodeSize = null;
    function tree(root) {
        var t = treeRoot(root);
        t.eachAfter(firstWalk), t.parent.m = -t.z;
        t.eachBefore(secondWalk);
        if (nodeSize)
            root.eachBefore(sizeNode);
        else {
            var left = root, right = root, bottom = root;
            root.eachBefore(function (node) {
                if (node.x < left.x)
                    left = node;
                if (node.x > right.x)
                    right = node;
                if (node.depth > bottom.depth)
                    bottom = node;
            });
            var s = left === right ? 1 : separation(left, right) / 2, tx = s - left.x, kx = dx / (right.x + s + tx), ky = dy / (bottom.depth || 1);
            root.eachBefore(function (node) {
                node.x = (node.x + tx) * kx;
                node.y = node.depth * ky;
            });
        }
        return root;
    }
    function firstWalk(v) {
        var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
        if (children) {
            executeShifts(v);
            var midpoint = (children[0].z + children[children.length - 1].z) / 2;
            if (w) {
                v.z = w.z + separation(v._, w._);
                v.m = v.z - midpoint;
            } else {
                v.z = midpoint;
            }
        } else if (w) {
            v.z = w.z + separation(v._, w._);
        }
        v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
        v._.x = v.z + v.parent.m;
        v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
        if (w) {
            var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
            while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
                vom = nextLeft(vom);
                vop = nextRight(vop);
                vop.a = v;
                shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
                if (shift > 0) {
                    moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
                    sip += shift;
                    sop += shift;
                }
                sim += vim.m;
                sip += vip.m;
                som += vom.m;
                sop += vop.m;
            }
            if (vim && !nextRight(vop)) {
                vop.t = vim;
                vop.m += sim - sop;
            }
            if (vip && !nextLeft(vom)) {
                vom.t = vip;
                vom.m += sip - som;
                ancestor = v;
            }
        }
        return ancestor;
    }
    function sizeNode(node) {
        node.x *= dx;
        node.y = node.depth * dy;
    }
    tree.separation = function (x) {
        return arguments.length ? (separation = x, tree) : separation;
    };
    tree.size = function (x) {
        return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [
            dx,
            dy
        ];
    };
    tree.nodeSize = function (x) {
        return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [
            dx,
            dy
        ] : null;
    };
    return tree;
};
treemapSlice = function treemapSlice(parent, x0, y0, x1, y1) {
    var nodes = parent.children, node, i = -1, n = nodes.length, k = parent.value && (y1 - y0) / parent.value;
    while (++i < n) {
        node = nodes[i], node.x0 = x0, node.x1 = x1;
        node.y0 = y0, node.y1 = y0 += node.value * k;
    }
};
squarifyRatio = function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
    var rows = [], nodes = parent.children, row, nodeValue, i0 = 0, i1, n = nodes.length, dx, dy, value = parent.value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
    while (i0 < n) {
        dx = x1 - x0, dy = y1 - y0;
        minValue = maxValue = sumValue = nodes[i0].value;
        alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
        beta = sumValue * sumValue * alpha;
        minRatio = Math.max(maxValue / beta, beta / minValue);
        for (i1 = i0 + 1; i1 < n; ++i1) {
            sumValue += nodeValue = nodes[i1].value;
            if (nodeValue < minValue)
                minValue = nodeValue;
            if (nodeValue > maxValue)
                maxValue = nodeValue;
            beta = sumValue * sumValue * alpha;
            newRatio = Math.max(maxValue / beta, beta / minValue);
            if (newRatio > minRatio) {
                sumValue -= nodeValue;
                break;
            }
            minRatio = newRatio;
        }
        rows.push(row = {
            value: sumValue,
            dice: dx < dy,
            children: nodes.slice(i0, i1)
        });
        if (row.dice)
            treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
        else
            treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
        value -= sumValue, i0 = i1;
    }
    return rows;
};
index$1 = function index$1() {
    var tile = squarify, round = false, dx = 1, dy = 1, paddingStack = [0], paddingInner = constantZero, paddingTop = constantZero, paddingRight = constantZero, paddingBottom = constantZero, paddingLeft = constantZero;
    function treemap(root) {
        root.x0 = root.y0 = 0;
        root.x1 = dx;
        root.y1 = dy;
        root.eachBefore(positionNode);
        paddingStack = [0];
        if (round)
            root.eachBefore(roundNode);
        return root;
    }
    function positionNode(node) {
        var p = paddingStack[node.depth], x0 = node.x0 + p, y0 = node.y0 + p, x1 = node.x1 - p, y1 = node.y1 - p;
        if (x1 < x0)
            x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0)
            y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
        if (node.children) {
            p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
            x0 += paddingLeft(node) - p;
            y0 += paddingTop(node) - p;
            x1 -= paddingRight(node) - p;
            y1 -= paddingBottom(node) - p;
            if (x1 < x0)
                x0 = x1 = (x0 + x1) / 2;
            if (y1 < y0)
                y0 = y1 = (y0 + y1) / 2;
            tile(node, x0, y0, x1, y1);
        }
    }
    treemap.round = function (x) {
        return arguments.length ? (round = !!x, treemap) : round;
    };
    treemap.size = function (x) {
        return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [
            dx,
            dy
        ];
    };
    treemap.tile = function (x) {
        return arguments.length ? (tile = required(x), treemap) : tile;
    };
    treemap.padding = function (x) {
        return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
    };
    treemap.paddingInner = function (x) {
        return arguments.length ? (paddingInner = typeof x === 'function' ? x : constant$5(+x), treemap) : paddingInner;
    };
    treemap.paddingOuter = function (x) {
        return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
    };
    treemap.paddingTop = function (x) {
        return arguments.length ? (paddingTop = typeof x === 'function' ? x : constant$5(+x), treemap) : paddingTop;
    };
    treemap.paddingRight = function (x) {
        return arguments.length ? (paddingRight = typeof x === 'function' ? x : constant$5(+x), treemap) : paddingRight;
    };
    treemap.paddingBottom = function (x) {
        return arguments.length ? (paddingBottom = typeof x === 'function' ? x : constant$5(+x), treemap) : paddingBottom;
    };
    treemap.paddingLeft = function (x) {
        return arguments.length ? (paddingLeft = typeof x === 'function' ? x : constant$5(+x), treemap) : paddingLeft;
    };
    return treemap;
};
binary = function binary(parent, x0, y0, x1, y1) {
    var nodes = parent.children, i, n = nodes.length, sum, sums = new Array(n + 1);
    for (sums[0] = sum = i = 0; i < n; ++i) {
        sums[i + 1] = sum += nodes[i].value;
    }
    partition(0, n, parent.value, x0, y0, x1, y1);
    function partition(i, j, value, x0, y0, x1, y1) {
        if (i >= j - 1) {
            var node = nodes[i];
            node.x0 = x0, node.y0 = y0;
            node.x1 = x1, node.y1 = y1;
            return;
        }
        var valueOffset = sums[i], valueTarget = value / 2 + valueOffset, k = i + 1, hi = j - 1;
        while (k < hi) {
            var mid = k + hi >>> 1;
            if (sums[mid] < valueTarget)
                k = mid + 1;
            else
                hi = mid;
        }
        var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;
        if (y1 - y0 > x1 - x0) {
            var yk = (y0 * valueRight + y1 * valueLeft) / value;
            partition(i, k, valueLeft, x0, y0, x1, yk);
            partition(k, j, valueRight, x0, yk, x1, y1);
        } else {
            var xk = (x0 * valueRight + x1 * valueLeft) / value;
            partition(i, k, valueLeft, x0, y0, xk, y1);
            partition(k, j, valueRight, xk, y0, x1, y1);
        }
    }
};
sliceDice = function sliceDice(parent, x0, y0, x1, y1) {
    (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
};
center$1 = function center$1(x, y) {
    var nodes;
    if (x == null)
        x = 0;
    if (y == null)
        y = 0;
    function force() {
        var i, n = nodes.length, node, sx = 0, sy = 0;
        for (i = 0; i < n; ++i) {
            node = nodes[i], sx += node.x, sy += node.y;
        }
        for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
            node = nodes[i], node.x -= sx, node.y -= sy;
        }
    }
    force.initialize = function (_) {
        nodes = _;
    };
    force.x = function (_) {
        return arguments.length ? (x = +_, force) : x;
    };
    force.y = function (_) {
        return arguments.length ? (y = +_, force) : y;
    };
    return force;
};
constant$6 = function constant$6(x) {
    return function () {
        return x;
    };
};
jiggle = function jiggle() {
    return (Math.random() - 0.5) * 0.000001;
};
x$1 = function x$1(d) {
    return d.x + d.vx;
};
y$1 = function y$1(d) {
    return d.y + d.vy;
};
collide = function collide(radius) {
    var nodes, radii, strength = 1, iterations = 1;
    if (typeof radius !== 'function')
        radius = constant$6(radius == null ? 1 : +radius);
    function force() {
        var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
        for (var k = 0; k < iterations; ++k) {
            tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);
            for (i = 0; i < n; ++i) {
                node = nodes[i];
                ri = radii[i], ri2 = ri * ri;
                xi = node.x + node.vx;
                yi = node.y + node.vy;
                tree.visit(apply);
            }
        }
        function apply(quad, x0, y0, x1, y1) {
            var data = quad.data, rj = quad.r, r = ri + rj;
            if (data) {
                if (data.index > i) {
                    var x = xi - data.x - data.vx, y = yi - data.y - data.vy, l = x * x + y * y;
                    if (l < r * r) {
                        if (x === 0)
                            x = jiggle(), l += x * x;
                        if (y === 0)
                            y = jiggle(), l += y * y;
                        l = (r - (l = Math.sqrt(l))) / l * strength;
                        node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                        node.vy += (y *= l) * r;
                        data.vx -= x * (r = 1 - r);
                        data.vy -= y * r;
                    }
                }
                return;
            }
            return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
        }
    }
    function prepare(quad) {
        if (quad.data)
            return quad.r = radii[quad.data.index];
        for (var i = quad.r = 0; i < 4; ++i) {
            if (quad[i] && quad[i].r > quad.r) {
                quad.r = quad[i].r;
            }
        }
    }
    force.initialize = function (_) {
        var i, n = (nodes = _).length;
        radii = new Array(n);
        for (i = 0; i < n; ++i)
            radii[i] = +radius(nodes[i], i, nodes);
    };
    force.iterations = function (_) {
        return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function (_) {
        return arguments.length ? (strength = +_, force) : strength;
    };
    force.radius = function (_) {
        return arguments.length ? (radius = typeof _ === 'function' ? _ : constant$6(+_), force) : radius;
    };
    return force;
};
index$2 = function index$2(d, i) {
    return i;
};
link = function link(links) {
    var id = index$2, strength = defaultStrength, strengths, distance = constant$6(30), distances, nodes, count, bias, iterations = 1;
    if (links == null)
        links = [];
    function defaultStrength(link) {
        return 1 / Math.min(count[link.source.index], count[link.target.index]);
    }
    function force(alpha) {
        for (var k = 0, n = links.length; k < iterations; ++k) {
            for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
                link = links[i], source = link.source, target = link.target;
                x = target.x + target.vx - source.x - source.vx || jiggle();
                y = target.y + target.vy - source.y - source.vy || jiggle();
                l = Math.sqrt(x * x + y * y);
                l = (l - distances[i]) / l * alpha * strengths[i];
                x *= l, y *= l;
                target.vx -= x * (b = bias[i]);
                target.vy -= y * b;
                source.vx += x * (b = 1 - b);
                source.vy += y * b;
            }
        }
    }
    function initialize() {
        if (!nodes)
            return;
        var i, n = nodes.length, m = links.length, nodeById = map$1(nodes, id), link;
        for (i = 0, count = new Array(n); i < n; ++i) {
            count[i] = 0;
        }
        for (i = 0; i < m; ++i) {
            link = links[i], link.index = i;
            if (typeof link.source !== 'object')
                link.source = nodeById.get(link.source);
            if (typeof link.target !== 'object')
                link.target = nodeById.get(link.target);
            ++count[link.source.index], ++count[link.target.index];
        }
        for (i = 0, bias = new Array(m); i < m; ++i) {
            link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
        }
        strengths = new Array(m), initializeStrength();
        distances = new Array(m), initializeDistance();
    }
    function initializeStrength() {
        if (!nodes)
            return;
        for (var i = 0, n = links.length; i < n; ++i) {
            strengths[i] = +strength(links[i], i, links);
        }
    }
    function initializeDistance() {
        if (!nodes)
            return;
        for (var i = 0, n = links.length; i < n; ++i) {
            distances[i] = +distance(links[i], i, links);
        }
    }
    force.initialize = function (_) {
        nodes = _;
        initialize();
    };
    force.links = function (_) {
        return arguments.length ? (links = _, initialize(), force) : links;
    };
    force.id = function (_) {
        return arguments.length ? (id = _, force) : id;
    };
    force.iterations = function (_) {
        return arguments.length ? (iterations = +_, force) : iterations;
    };
    force.strength = function (_) {
        return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initializeStrength(), force) : strength;
    };
    force.distance = function (_) {
        return arguments.length ? (distance = typeof _ === 'function' ? _ : constant$6(+_), initializeDistance(), force) : distance;
    };
    return force;
};
x$2 = function x$2(d) {
    return d.x;
};
y$2 = function y$2(d) {
    return d.y;
};
simulation = function simulation(nodes) {
    var simulation, alpha = 1, alphaMin = 0.001, alphaDecay = 1 - Math.pow(alphaMin, 1 / 300), alphaTarget = 0, velocityDecay = 0.6, forces = map$1(), stepper = timer(step), event = dispatch('tick', 'end');
    if (nodes == null)
        nodes = [];
    function step() {
        tick();
        event.call('tick', simulation);
        if (alpha < alphaMin) {
            stepper.stop();
            event.call('end', simulation);
        }
    }
    function tick() {
        var i, n = nodes.length, node;
        alpha += (alphaTarget - alpha) * alphaDecay;
        forces.each(function (force) {
            force(alpha);
        });
        for (i = 0; i < n; ++i) {
            node = nodes[i];
            if (node.fx == null)
                node.x += node.vx *= velocityDecay;
            else
                node.x = node.fx, node.vx = 0;
            if (node.fy == null)
                node.y += node.vy *= velocityDecay;
            else
                node.y = node.fy, node.vy = 0;
        }
    }
    function initializeNodes() {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
            node = nodes[i], node.index = i;
            if (isNaN(node.x) || isNaN(node.y)) {
                var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
                node.x = radius * Math.cos(angle);
                node.y = radius * Math.sin(angle);
            }
            if (isNaN(node.vx) || isNaN(node.vy)) {
                node.vx = node.vy = 0;
            }
        }
    }
    function initializeForce(force) {
        if (force.initialize)
            force.initialize(nodes);
        return force;
    }
    initializeNodes();
    return simulation = {
        tick: tick,
        restart: function () {
            return stepper.restart(step), simulation;
        },
        stop: function () {
            return stepper.stop(), simulation;
        },
        nodes: function (_) {
            return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
        },
        alpha: function (_) {
            return arguments.length ? (alpha = +_, simulation) : alpha;
        },
        alphaMin: function (_) {
            return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
        },
        alphaDecay: function (_) {
            return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
        },
        alphaTarget: function (_) {
            return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
        },
        velocityDecay: function (_) {
            return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
        },
        force: function (name, _) {
            return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
        },
        find: function (x, y, radius) {
            var i = 0, n = nodes.length, dx, dy, d2, node, closest;
            if (radius == null)
                radius = Infinity;
            else
                radius *= radius;
            for (i = 0; i < n; ++i) {
                node = nodes[i];
                dx = x - node.x;
                dy = y - node.y;
                d2 = dx * dx + dy * dy;
                if (d2 < radius)
                    closest = node, radius = d2;
            }
            return closest;
        },
        on: function (name, _) {
            return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
        }
    };
};
manyBody = function manyBody() {
    var nodes, node, alpha, strength = constant$6(-30), strengths, distanceMin2 = 1, distanceMax2 = Infinity, theta2 = 0.81;
    function force(_) {
        var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);
        for (alpha = _, i = 0; i < n; ++i)
            node = nodes[i], tree.visit(apply);
    }
    function initialize() {
        if (!nodes)
            return;
        var i, n = nodes.length;
        strengths = new Array(n);
        for (i = 0; i < n; ++i)
            strengths[i] = +strength(nodes[i], i, nodes);
    }
    function accumulate(quad) {
        var strength = 0, q, c, x, y, i;
        if (quad.length) {
            for (x = y = i = 0; i < 4; ++i) {
                if ((q = quad[i]) && (c = q.value)) {
                    strength += c, x += c * q.x, y += c * q.y;
                }
            }
            quad.x = x / strength;
            quad.y = y / strength;
        } else {
            q = quad;
            q.x = q.data.x;
            q.y = q.data.y;
            do
                strength += strengths[q.data.index];
            while (q = q.next);
        }
        quad.value = strength;
    }
    function apply(quad, x1, _, x2) {
        if (!quad.value)
            return true;
        var x = quad.x - node.x, y = quad.y - node.y, w = x2 - x1, l = x * x + y * y;
        if (w * w / theta2 < l) {
            if (l < distanceMax2) {
                if (x === 0)
                    x = jiggle(), l += x * x;
                if (y === 0)
                    y = jiggle(), l += y * y;
                if (l < distanceMin2)
                    l = Math.sqrt(distanceMin2 * l);
                node.vx += x * quad.value * alpha / l;
                node.vy += y * quad.value * alpha / l;
            }
            return true;
        } else if (quad.length || l >= distanceMax2)
            return;
        if (quad.data !== node || quad.next) {
            if (x === 0)
                x = jiggle(), l += x * x;
            if (y === 0)
                y = jiggle(), l += y * y;
            if (l < distanceMin2)
                l = Math.sqrt(distanceMin2 * l);
        }
        do
            if (quad.data !== node) {
            w = strengths[quad.data.index] * alpha / l;
            node.vx += x * w;
            node.vy += y * w;
        }
        while (quad = quad.next);
    }
    force.initialize = function (_) {
        nodes = _;
        initialize();
    };
    force.strength = function (_) {
        return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : strength;
    };
    force.distanceMin = function (_) {
        return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
    };
    force.distanceMax = function (_) {
        return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
    };
    force.theta = function (_) {
        return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
    };
    return force;
};
x$3 = function x$3(x) {
    var strength = constant$6(0.1), nodes, strengths, xz;
    if (typeof x !== 'function')
        x = constant$6(x == null ? 0 : +x);
    function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
            node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
        }
    }
    function initialize() {
        if (!nodes)
            return;
        var i, n = nodes.length;
        strengths = new Array(n);
        xz = new Array(n);
        for (i = 0; i < n; ++i) {
            strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
    }
    force.initialize = function (_) {
        nodes = _;
        initialize();
    };
    force.strength = function (_) {
        return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : strength;
    };
    force.x = function (_) {
        return arguments.length ? (x = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : x;
    };
    return force;
};
y$3 = function y$3(y) {
    var strength = constant$6(0.1), nodes, strengths, yz;
    if (typeof y !== 'function')
        y = constant$6(y == null ? 0 : +y);
    function force(alpha) {
        for (var i = 0, n = nodes.length, node; i < n; ++i) {
            node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
        }
    }
    function initialize() {
        if (!nodes)
            return;
        var i, n = nodes.length;
        strengths = new Array(n);
        yz = new Array(n);
        for (i = 0; i < n; ++i) {
            strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
        }
    }
    force.initialize = function (_) {
        nodes = _;
        initialize();
    };
    force.strength = function (_) {
        return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : strength;
    };
    force.y = function (_) {
        return arguments.length ? (y = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : y;
    };
    return force;
};
nopropagation = function nopropagation() {
    exports.event.stopImmediatePropagation();
};
noevent = function noevent() {
    exports.event.preventDefault();
    exports.event.stopImmediatePropagation();
};
dragDisable = function dragDisable(view) {
    var root = view.document.documentElement, selection = select(view).on('dragstart.drag', noevent, true);
    if ('onselectstart' in root) {
        selection.on('selectstart.drag', noevent, true);
    } else {
        root.__noselect = root.style.MozUserSelect;
        root.style.MozUserSelect = 'none';
    }
};
dragEnable = function dragEnable(view, noclick) {
    var root = view.document.documentElement, selection = select(view).on('dragstart.drag', null);
    if (noclick) {
        selection.on('click.drag', noevent, true);
        setTimeout(function () {
            selection.on('click.drag', null);
        }, 0);
    }
    if ('onselectstart' in root) {
        selection.on('selectstart.drag', null);
    } else {
        root.style.MozUserSelect = root.__noselect;
        delete root.__noselect;
    }
};
constant$7 = function constant$7(x) {
    return function () {
        return x;
    };
};
DragEvent = function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
    this.target = target;
    this.type = type;
    this.subject = subject;
    this.identifier = id;
    this.active = active;
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this._ = dispatch;
};
defaultFilter = function defaultFilter() {
    return !exports.event.button;
};
defaultContainer = function defaultContainer() {
    return this.parentNode;
};
defaultSubject = function defaultSubject(d) {
    return d == null ? {
        x: exports.event.x,
        y: exports.event.y
    } : d;
};
drag = function drag() {
    var filter = defaultFilter, container = defaultContainer, subject = defaultSubject, gestures = {}, listeners = dispatch('start', 'drag', 'end'), active = 0, mousemoving, touchending;
    function drag(selection) {
        selection.on('mousedown.drag', mousedowned).on('touchstart.drag', touchstarted).on('touchmove.drag', touchmoved).on('touchend.drag touchcancel.drag', touchended).style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)');
    }
    function mousedowned() {
        if (touchending || !filter.apply(this, arguments))
            return;
        var gesture = beforestart('mouse', container.apply(this, arguments), mouse, this, arguments);
        if (!gesture)
            return;
        select(exports.event.view).on('mousemove.drag', mousemoved, true).on('mouseup.drag', mouseupped, true);
        dragDisable(exports.event.view);
        nopropagation();
        mousemoving = false;
        gesture('start');
    }
    function mousemoved() {
        noevent();
        mousemoving = true;
        gestures.mouse('drag');
    }
    function mouseupped() {
        select(exports.event.view).on('mousemove.drag mouseup.drag', null);
        dragEnable(exports.event.view, mousemoving);
        noevent();
        gestures.mouse('end');
    }
    function touchstarted() {
        if (!filter.apply(this, arguments))
            return;
        var touches = exports.event.changedTouches, c = container.apply(this, arguments), n = touches.length, i, gesture;
        for (i = 0; i < n; ++i) {
            if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {
                nopropagation();
                gesture('start');
            }
        }
    }
    function touchmoved() {
        var touches = exports.event.changedTouches, n = touches.length, i, gesture;
        for (i = 0; i < n; ++i) {
            if (gesture = gestures[touches[i].identifier]) {
                noevent();
                gesture('drag');
            }
        }
    }
    function touchended() {
        var touches = exports.event.changedTouches, n = touches.length, i, gesture;
        if (touchending)
            clearTimeout(touchending);
        touchending = setTimeout(function () {
            touchending = null;
        }, 500);
        for (i = 0; i < n; ++i) {
            if (gesture = gestures[touches[i].identifier]) {
                nopropagation();
                gesture('end');
            }
        }
    }
    function beforestart(id, container, point, that, args) {
        var p = point(container, id), s, dx, dy, sublisteners = listeners.copy();
        if (!customEvent(new DragEvent(drag, 'beforestart', s, id, active, p[0], p[1], 0, 0, sublisteners), function () {
                if ((exports.event.subject = s = subject.apply(that, args)) == null)
                    return false;
                dx = s.x - p[0] || 0;
                dy = s.y - p[1] || 0;
                return true;
            }))
            return;
        return function gesture(type) {
            var p0 = p, n;
            switch (type) {
            case 'start':
                gestures[id] = gesture, n = active++;
                break;
            case 'end':
                delete gestures[id], --active;
            case 'drag':
                p = point(container, id), n = active;
                break;
            }
            customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [
                type,
                that,
                args
            ]);
        };
    }
    drag.filter = function (_) {
        return arguments.length ? (filter = typeof _ === 'function' ? _ : constant$7(!!_), drag) : filter;
    };
    drag.container = function (_) {
        return arguments.length ? (container = typeof _ === 'function' ? _ : constant$7(_), drag) : container;
    };
    drag.subject = function (_) {
        return arguments.length ? (subject = typeof _ === 'function' ? _ : constant$7(_), drag) : subject;
    };
    drag.on = function () {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? drag : value;
    };
    return drag;
};
constant$8 = function constant$8(x) {
    return function () {
        return x;
    };
};
x$4 = function x$4(d) {
    return d[0];
};
y$4 = function y$4(d) {
    return d[1];
};
RedBlackTree = function RedBlackTree() {
    this._ = null;
};
RedBlackNode = function RedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
};
RedBlackRotateLeft = function RedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
        if (parent.L === p)
            parent.L = q;
        else
            parent.R = q;
    } else {
        tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R)
        p.R.U = p;
    q.L = p;
};
RedBlackRotateRight = function RedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
        if (parent.L === p)
            parent.L = q;
        else
            parent.R = q;
    } else {
        tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L)
        p.L.U = p;
    q.R = p;
};
RedBlackFirst = function RedBlackFirst(node) {
    while (node.L)
        node = node.L;
    return node;
};
createEdge = function createEdge(left, right, v0, v1) {
    var edge = [
            null,
            null
        ], index = edges.push(edge) - 1;
    edge.left = left;
    edge.right = right;
    if (v0)
        setEdgeEnd(edge, left, right, v0);
    if (v1)
        setEdgeEnd(edge, right, left, v1);
    cells[left.index].halfedges.push(index);
    cells[right.index].halfedges.push(index);
    return edge;
};
createBorderEdge = function createBorderEdge(left, v0, v1) {
    var edge = [
        v0,
        v1
    ];
    edge.left = left;
    return edge;
};
setEdgeEnd = function setEdgeEnd(edge, left, right, vertex) {
    if (!edge[0] && !edge[1]) {
        edge[0] = vertex;
        edge.left = left;
        edge.right = right;
    } else if (edge.left === right) {
        edge[1] = vertex;
    } else {
        edge[0] = vertex;
    }
};
clipEdge = function clipEdge(edge, x0, y0, x1, y1) {
    var a = edge[0], b = edge[1], ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
    r = x0 - ax;
    if (!dx && r > 0)
        return;
    r /= dx;
    if (dx < 0) {
        if (r < t0)
            return;
        if (r < t1)
            t1 = r;
    } else if (dx > 0) {
        if (r > t1)
            return;
        if (r > t0)
            t0 = r;
    }
    r = x1 - ax;
    if (!dx && r < 0)
        return;
    r /= dx;
    if (dx < 0) {
        if (r > t1)
            return;
        if (r > t0)
            t0 = r;
    } else if (dx > 0) {
        if (r < t0)
            return;
        if (r < t1)
            t1 = r;
    }
    r = y0 - ay;
    if (!dy && r > 0)
        return;
    r /= dy;
    if (dy < 0) {
        if (r < t0)
            return;
        if (r < t1)
            t1 = r;
    } else if (dy > 0) {
        if (r > t1)
            return;
        if (r > t0)
            t0 = r;
    }
    r = y1 - ay;
    if (!dy && r < 0)
        return;
    r /= dy;
    if (dy < 0) {
        if (r > t1)
            return;
        if (r > t0)
            t0 = r;
    } else if (dy > 0) {
        if (r < t0)
            return;
        if (r < t1)
            t1 = r;
    }
    if (!(t0 > 0) && !(t1 < 1))
        return true;
    if (t0 > 0)
        edge[0] = [
        ax + t0 * dx,
        ay + t0 * dy
    ];
    if (t1 < 1)
        edge[1] = [
        ax + t1 * dx,
        ay + t1 * dy
    ];
    return true;
};
connectEdge = function connectEdge(edge, x0, y0, x1, y1) {
    var v1 = edge[1];
    if (v1)
        return true;
    var v0 = edge[0], left = edge.left, right = edge.right, lx = left[0], ly = left[1], rx = right[0], ry = right[1], fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
        if (fx < x0 || fx >= x1)
            return;
        if (lx > rx) {
            if (!v0)
                v0 = [
                fx,
                y0
            ];
            else if (v0[1] >= y1)
                return;
            v1 = [
                fx,
                y1
            ];
        } else {
            if (!v0)
                v0 = [
                fx,
                y1
            ];
            else if (v0[1] < y0)
                return;
            v1 = [
                fx,
                y0
            ];
        }
    } else {
        fm = (lx - rx) / (ry - ly);
        fb = fy - fm * fx;
        if (fm < -1 || fm > 1) {
            if (lx > rx) {
                if (!v0)
                    v0 = [
                    (y0 - fb) / fm,
                    y0
                ];
                else if (v0[1] >= y1)
                    return;
                v1 = [
                    (y1 - fb) / fm,
                    y1
                ];
            } else {
                if (!v0)
                    v0 = [
                    (y1 - fb) / fm,
                    y1
                ];
                else if (v0[1] < y0)
                    return;
                v1 = [
                    (y0 - fb) / fm,
                    y0
                ];
            }
        } else {
            if (ly < ry) {
                if (!v0)
                    v0 = [
                    x0,
                    fm * x0 + fb
                ];
                else if (v0[0] >= x1)
                    return;
                v1 = [
                    x1,
                    fm * x1 + fb
                ];
            } else {
                if (!v0)
                    v0 = [
                    x1,
                    fm * x1 + fb
                ];
                else if (v0[0] < x0)
                    return;
                v1 = [
                    x0,
                    fm * x0 + fb
                ];
            }
        }
    }
    edge[0] = v0;
    edge[1] = v1;
    return true;
};
clipEdges = function clipEdges(x0, y0, x1, y1) {
    var i = edges.length, edge;
    while (i--) {
        if (!connectEdge(edge = edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3 || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {
            delete edges[i];
        }
    }
};
createCell = function createCell(site) {
    return cells[site.index] = {
        site: site,
        halfedges: []
    };
};
cellHalfedgeAngle = function cellHalfedgeAngle(cell, edge) {
    var site = cell.site, va = edge.left, vb = edge.right;
    if (site === vb)
        vb = va, va = site;
    if (vb)
        return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
    if (site === va)
        va = edge[1], vb = edge[0];
    else
        va = edge[0], vb = edge[1];
    return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
};
cellHalfedgeStart = function cellHalfedgeStart(cell, edge) {
    return edge[+(edge.left !== cell.site)];
};
cellHalfedgeEnd = function cellHalfedgeEnd(cell, edge) {
    return edge[+(edge.left === cell.site)];
};
sortCellHalfedges = function sortCellHalfedges() {
    for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
        if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
            var index = new Array(m), array = new Array(m);
            for (j = 0; j < m; ++j)
                index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
            index.sort(function (i, j) {
                return array[j] - array[i];
            });
            for (j = 0; j < m; ++j)
                array[j] = halfedges[index[j]];
            for (j = 0; j < m; ++j)
                halfedges[j] = array[j];
        }
    }
};
clipCells = function clipCells(x0, y0, x1, y1) {
    var nCells = cells.length, iCell, cell, site, iHalfedge, halfedges, nHalfedges, start, startX, startY, end, endX, endY, cover = true;
    for (iCell = 0; iCell < nCells; ++iCell) {
        if (cell = cells[iCell]) {
            site = cell.site;
            halfedges = cell.halfedges;
            iHalfedge = halfedges.length;
            while (iHalfedge--) {
                if (!edges[halfedges[iHalfedge]]) {
                    halfedges.splice(iHalfedge, 1);
                }
            }
            iHalfedge = 0, nHalfedges = halfedges.length;
            while (iHalfedge < nHalfedges) {
                end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
                start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
                if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {
                    halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end, Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [
                        x0,
                        Math.abs(startX - x0) < epsilon$3 ? startY : y1
                    ] : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [
                        Math.abs(startY - y1) < epsilon$3 ? startX : x1,
                        y1
                    ] : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [
                        x1,
                        Math.abs(startX - x1) < epsilon$3 ? startY : y0
                    ] : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [
                        Math.abs(startY - y0) < epsilon$3 ? startX : x0,
                        y0
                    ] : null)) - 1);
                    ++nHalfedges;
                }
            }
            if (nHalfedges)
                cover = false;
        }
    }
    if (cover) {
        var dx, dy, d2, dc = Infinity;
        for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
            if (cell = cells[iCell]) {
                site = cell.site;
                dx = site[0] - x0;
                dy = site[1] - y0;
                d2 = dx * dx + dy * dy;
                if (d2 < dc)
                    dc = d2, cover = cell;
            }
        }
        if (cover) {
            var v00 = [
                    x0,
                    y0
                ], v01 = [
                    x0,
                    y1
                ], v11 = [
                    x1,
                    y1
                ], v10 = [
                    x1,
                    y0
                ];
            cover.halfedges.push(edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1, edges.push(createBorderEdge(site, v01, v11)) - 1, edges.push(createBorderEdge(site, v11, v10)) - 1, edges.push(createBorderEdge(site, v10, v00)) - 1);
        }
    }
    for (iCell = 0; iCell < nCells; ++iCell) {
        if (cell = cells[iCell]) {
            if (!cell.halfedges.length) {
                delete cells[iCell];
            }
        }
    }
};
Circle = function Circle() {
    RedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
};
attachCircle = function attachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc)
        return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite)
        return;
    var bx = cSite[0], by = cSite[1], ax = lSite[0] - bx, ay = lSite[1] - by, cx = rSite[0] - bx, cy = rSite[1] - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -epsilon2$1)
        return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d;
    var circle = circlePool.pop() || new Circle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y);
    arc.circle = circle;
    var before = null, node = circles._;
    while (node) {
        if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
            if (node.L)
                node = node.L;
            else {
                before = node.P;
                break;
            }
        } else {
            if (node.R)
                node = node.R;
            else {
                before = node;
                break;
            }
        }
    }
    circles.insert(before, circle);
    if (!before)
        firstCircle = circle;
};
detachCircle = function detachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
        if (!circle.P)
            firstCircle = circle.N;
        circles.remove(circle);
        circlePool.push(circle);
        RedBlackNode(circle);
        arc.circle = null;
    }
};
Beach = function Beach() {
    RedBlackNode(this);
    this.edge = this.site = this.circle = null;
};
createBeach = function createBeach(site) {
    var beach = beachPool.pop() || new Beach();
    beach.site = site;
    return beach;
};
detachBeach = function detachBeach(beach) {
    detachCircle(beach);
    beaches.remove(beach);
    beachPool.push(beach);
    RedBlackNode(beach);
};
removeBeach = function removeBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = [
            x,
            y
        ], previous = beach.P, next = beach.N, disappearing = [beach];
    detachBeach(beach);
    var lArc = previous;
    while (lArc.circle && Math.abs(x - lArc.circle.x) < epsilon$3 && Math.abs(y - lArc.circle.cy) < epsilon$3) {
        previous = lArc.P;
        disappearing.unshift(lArc);
        detachBeach(lArc);
        lArc = previous;
    }
    disappearing.unshift(lArc);
    detachCircle(lArc);
    var rArc = next;
    while (rArc.circle && Math.abs(x - rArc.circle.x) < epsilon$3 && Math.abs(y - rArc.circle.cy) < epsilon$3) {
        next = rArc.N;
        disappearing.push(rArc);
        detachBeach(rArc);
        rArc = next;
    }
    disappearing.push(rArc);
    detachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
        rArc = disappearing[iArc];
        lArc = disappearing[iArc - 1];
        setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);
    attachCircle(lArc);
    attachCircle(rArc);
};
addBeach = function addBeach(site) {
    var x = site[0], directrix = site[1], lArc, rArc, dxl, dxr, node = beaches._;
    while (node) {
        dxl = leftBreakPoint(node, directrix) - x;
        if (dxl > epsilon$3)
            node = node.L;
        else {
            dxr = x - rightBreakPoint(node, directrix);
            if (dxr > epsilon$3) {
                if (!node.R) {
                    lArc = node;
                    break;
                }
                node = node.R;
            } else {
                if (dxl > -epsilon$3) {
                    lArc = node.P;
                    rArc = node;
                } else if (dxr > -epsilon$3) {
                    lArc = node;
                    rArc = node.N;
                } else {
                    lArc = rArc = node;
                }
                break;
            }
        }
    }
    createCell(site);
    var newArc = createBeach(site);
    beaches.insert(lArc, newArc);
    if (!lArc && !rArc)
        return;
    if (lArc === rArc) {
        detachCircle(lArc);
        rArc = createBeach(lArc.site);
        beaches.insert(newArc, rArc);
        newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
        attachCircle(lArc);
        attachCircle(rArc);
        return;
    }
    if (!rArc) {
        newArc.edge = createEdge(lArc.site, newArc.site);
        return;
    }
    detachCircle(lArc);
    detachCircle(rArc);
    var lSite = lArc.site, ax = lSite[0], ay = lSite[1], bx = site[0] - ax, by = site[1] - ay, rSite = rArc.site, cx = rSite[0] - ax, cy = rSite[1] - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = [
            (cy * hb - by * hc) / d + ax,
            (bx * hc - cx * hb) / d + ay
        ];
    setEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = createEdge(lSite, site, null, vertex);
    rArc.edge = createEdge(site, rSite, null, vertex);
    attachCircle(lArc);
    attachCircle(rArc);
};
leftBreakPoint = function leftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site[0], rfocy = site[1], pby2 = rfocy - directrix;
    if (!pby2)
        return rfocx;
    var lArc = arc.P;
    if (!lArc)
        return -Infinity;
    site = lArc.site;
    var lfocx = site[0], lfocy = site[1], plby2 = lfocy - directrix;
    if (!plby2)
        return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2)
        return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
};
rightBreakPoint = function rightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc)
        return leftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site[1] === directrix ? site[0] : Infinity;
};
triangleArea = function triangleArea(a, b, c) {
    return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
};
lexicographic = function lexicographic(a, b) {
    return b[1] - a[1] || b[0] - a[0];
};
Diagram = function Diagram(sites, extent) {
    var site = sites.sort(lexicographic).pop(), x, y, circle;
    edges = [];
    cells = new Array(sites.length);
    beaches = new RedBlackTree();
    circles = new RedBlackTree();
    while (true) {
        circle = firstCircle;
        if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
            if (site[0] !== x || site[1] !== y) {
                addBeach(site);
                x = site[0], y = site[1];
            }
            site = sites.pop();
        } else if (circle) {
            removeBeach(circle.arc);
        } else {
            break;
        }
    }
    sortCellHalfedges();
    if (extent) {
        var x0 = +extent[0][0], y0 = +extent[0][1], x1 = +extent[1][0], y1 = +extent[1][1];
        clipEdges(x0, y0, x1, y1);
        clipCells(x0, y0, x1, y1);
    }
    this.edges = edges;
    this.cells = cells;
    beaches = circles = edges = cells = null;
};
voronoi = function voronoi() {
    var x = x$4, y = y$4, extent = null;
    function voronoi(data) {
        return new Diagram(data.map(function (d, i) {
            var s = [
                Math.round(x(d, i, data) / epsilon$3) * epsilon$3,
                Math.round(y(d, i, data) / epsilon$3) * epsilon$3
            ];
            s.index = i;
            s.data = d;
            return s;
        }), extent);
    }
    voronoi.polygons = function (data) {
        return voronoi(data).polygons();
    };
    voronoi.links = function (data) {
        return voronoi(data).links();
    };
    voronoi.triangles = function (data) {
        return voronoi(data).triangles();
    };
    voronoi.x = function (_) {
        return arguments.length ? (x = typeof _ === 'function' ? _ : constant$8(+_), voronoi) : x;
    };
    voronoi.y = function (_) {
        return arguments.length ? (y = typeof _ === 'function' ? _ : constant$8(+_), voronoi) : y;
    };
    voronoi.extent = function (_) {
        return arguments.length ? (extent = _ == null ? null : [
            [
                +_[0][0],
                +_[0][1]
            ],
            [
                +_[1][0],
                +_[1][1]
            ]
        ], voronoi) : extent && [
            [
                extent[0][0],
                extent[0][1]
            ],
            [
                extent[1][0],
                extent[1][1]
            ]
        ];
    };
    voronoi.size = function (_) {
        return arguments.length ? (extent = _ == null ? null : [
            [
                0,
                0
            ],
            [
                +_[0],
                +_[1]
            ]
        ], voronoi) : extent && [
            extent[1][0] - extent[0][0],
            extent[1][1] - extent[0][1]
        ];
    };
    return voronoi;
};
constant$9 = function constant$9(x) {
    return function () {
        return x;
    };
};
ZoomEvent = function ZoomEvent(target, type, transform) {
    this.target = target;
    this.type = type;
    this.transform = transform;
};
Transform = function Transform(k, x, y) {
    this.k = k;
    this.x = x;
    this.y = y;
};
transform = function transform(node) {
    return node.__zoom || identity$6;
};
nopropagation$1 = function nopropagation$1() {
    exports.event.stopImmediatePropagation();
};
noevent$1 = function noevent$1() {
    exports.event.preventDefault();
    exports.event.stopImmediatePropagation();
};
defaultFilter$1 = function defaultFilter$1() {
    return !exports.event.button;
};
defaultExtent = function defaultExtent() {
    var e = this, w, h;
    if (e instanceof SVGElement) {
        e = e.ownerSVGElement || e;
        w = e.width.baseVal.value;
        h = e.height.baseVal.value;
    } else {
        w = e.clientWidth;
        h = e.clientHeight;
    }
    return [
        [
            0,
            0
        ],
        [
            w,
            h
        ]
    ];
};
defaultTransform = function defaultTransform() {
    return this.__zoom || identity$6;
};
zoom = function zoom() {
    var filter = defaultFilter$1, extent = defaultExtent, k0 = 0, k1 = Infinity, x0 = -k1, x1 = k1, y0 = x0, y1 = x1, duration = 250, gestures = [], listeners = dispatch('start', 'zoom', 'end'), touchstarting, touchending, touchDelay = 500, wheelDelay = 150;
    function zoom(selection) {
        selection.on('wheel.zoom', wheeled).on('mousedown.zoom', mousedowned).on('dblclick.zoom', dblclicked).on('touchstart.zoom', touchstarted).on('touchmove.zoom', touchmoved).on('touchend.zoom touchcancel.zoom', touchended).style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)').property('__zoom', defaultTransform);
    }
    zoom.transform = function (collection, transform) {
        var selection = collection.selection ? collection.selection() : collection;
        selection.property('__zoom', defaultTransform);
        if (collection !== selection) {
            schedule(collection, transform);
        } else {
            selection.interrupt().each(function () {
                gesture(this, arguments).start().zoom(null, typeof transform === 'function' ? transform.apply(this, arguments) : transform).end();
            });
        }
    };
    zoom.scaleBy = function (selection, k) {
        zoom.scaleTo(selection, function () {
            var k0 = this.__zoom.k, k1 = typeof k === 'function' ? k.apply(this, arguments) : k;
            return k0 * k1;
        });
    };
    zoom.scaleTo = function (selection, k) {
        zoom.transform(selection, function () {
            var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = centroid(e), p1 = t0.invert(p0), k1 = typeof k === 'function' ? k.apply(this, arguments) : k;
            return constrain(translate(scale(t0, k1), p0, p1), e);
        });
    };
    zoom.translateBy = function (selection, x, y) {
        zoom.transform(selection, function () {
            return constrain(this.__zoom.translate(typeof x === 'function' ? x.apply(this, arguments) : x, typeof y === 'function' ? y.apply(this, arguments) : y), extent.apply(this, arguments));
        });
    };
    function scale(transform, k) {
        k = Math.max(k0, Math.min(k1, k));
        return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
    }
    function translate(transform, p0, p1) {
        var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
        return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
    }
    function constrain(transform, extent) {
        var dx = Math.min(0, transform.invertX(extent[0][0]) - x0) || Math.max(0, transform.invertX(extent[1][0]) - x1), dy = Math.min(0, transform.invertY(extent[0][1]) - y0) || Math.max(0, transform.invertY(extent[1][1]) - y1);
        return dx || dy ? transform.translate(dx, dy) : transform;
    }
    function centroid(extent) {
        return [
            (+extent[0][0] + +extent[1][0]) / 2,
            (+extent[0][1] + +extent[1][1]) / 2
        ];
    }
    function schedule(transition, transform, center) {
        transition.on('start.zoom', function () {
            gesture(this, arguments).start();
        }).on('interrupt.zoom end.zoom', function () {
            gesture(this, arguments).end();
        }).tween('zoom', function () {
            var that = this, args = arguments, g = gesture(that, args), e = extent.apply(that, args), p = center || centroid(e), w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform === 'function' ? transform.apply(that, args) : transform, i = interpolateZoom(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
            return function (t) {
                if (t === 1)
                    t = b;
                else {
                    var l = i(t), k = w / l[2];
                    t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
                }
                g.zoom(null, t);
            };
        });
    }
    function gesture(that, args) {
        for (var i = 0, n = gestures.length, g; i < n; ++i) {
            if ((g = gestures[i]).that === that) {
                return g;
            }
        }
        return new Gesture(that, args);
    }
    function Gesture(that, args) {
        this.that = that;
        this.args = args;
        this.index = -1;
        this.active = 0;
        this.extent = extent.apply(that, args);
    }
    Gesture.prototype = {
        start: function () {
            if (++this.active === 1) {
                this.index = gestures.push(this) - 1;
                this.emit('start');
            }
            return this;
        },
        zoom: function (key, transform) {
            if (this.mouse && key !== 'mouse')
                this.mouse[1] = transform.invert(this.mouse[0]);
            if (this.touch0 && key !== 'touch')
                this.touch0[1] = transform.invert(this.touch0[0]);
            if (this.touch1 && key !== 'touch')
                this.touch1[1] = transform.invert(this.touch1[0]);
            this.that.__zoom = transform;
            this.emit('zoom');
            return this;
        },
        end: function () {
            if (--this.active === 0) {
                gestures.splice(this.index, 1);
                this.index = -1;
                this.emit('end');
            }
            return this;
        },
        emit: function (type) {
            customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [
                type,
                this.that,
                this.args
            ]);
        }
    };
    function wheeled() {
        if (!filter.apply(this, arguments))
            return;
        var g = gesture(this, arguments), t = this.__zoom, k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))), p = mouse(this);
        if (g.wheel) {
            if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
                g.mouse[1] = t.invert(g.mouse[0] = p);
            }
            clearTimeout(g.wheel);
        } else if (t.k === k)
            return;
        else {
            g.mouse = [
                p,
                t.invert(p)
            ];
            interrupt(this);
            g.start();
        }
        noevent$1();
        g.wheel = setTimeout(wheelidled, wheelDelay);
        g.zoom('mouse', constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));
        function wheelidled() {
            g.wheel = null;
            g.end();
        }
    }
    function mousedowned() {
        if (touchending || !filter.apply(this, arguments))
            return;
        var g = gesture(this, arguments), v = select(exports.event.view).on('mousemove.zoom', mousemoved, true).on('mouseup.zoom', mouseupped, true), p = mouse(this);
        dragDisable(exports.event.view);
        nopropagation$1();
        g.mouse = [
            p,
            this.__zoom.invert(p)
        ];
        interrupt(this);
        g.start();
        function mousemoved() {
            noevent$1();
            g.moved = true;
            g.zoom('mouse', constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));
        }
        function mouseupped() {
            v.on('mousemove.zoom mouseup.zoom', null);
            dragEnable(exports.event.view, g.moved);
            noevent$1();
            g.end();
        }
    }
    function dblclicked() {
        if (!filter.apply(this, arguments))
            return;
        var t0 = this.__zoom, p0 = mouse(this), p1 = t0.invert(p0), k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));
        noevent$1();
        if (duration > 0)
            select(this).transition().duration(duration).call(schedule, t1, p0);
        else
            select(this).call(zoom.transform, t1);
    }
    function touchstarted() {
        if (!filter.apply(this, arguments))
            return;
        var g = gesture(this, arguments), touches = exports.event.changedTouches, n = touches.length, i, t, p;
        nopropagation$1();
        for (i = 0; i < n; ++i) {
            t = touches[i], p = touch(this, touches, t.identifier);
            p = [
                p,
                this.__zoom.invert(p),
                t.identifier
            ];
            if (!g.touch0)
                g.touch0 = p;
            else if (!g.touch1)
                g.touch1 = p;
        }
        if (touchstarting) {
            touchstarting = clearTimeout(touchstarting);
            if (!g.touch1)
                return g.end(), dblclicked.apply(this, arguments);
        }
        if (exports.event.touches.length === n) {
            touchstarting = setTimeout(function () {
                touchstarting = null;
            }, touchDelay);
            interrupt(this);
            g.start();
        }
    }
    function touchmoved() {
        var g = gesture(this, arguments), touches = exports.event.changedTouches, n = touches.length, i, t, p, l;
        noevent$1();
        if (touchstarting)
            touchstarting = clearTimeout(touchstarting);
        for (i = 0; i < n; ++i) {
            t = touches[i], p = touch(this, touches, t.identifier);
            if (g.touch0 && g.touch0[2] === t.identifier)
                g.touch0[0] = p;
            else if (g.touch1 && g.touch1[2] === t.identifier)
                g.touch1[0] = p;
        }
        t = g.that.__zoom;
        if (g.touch1) {
            var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
            t = scale(t, Math.sqrt(dp / dl));
            p = [
                (p0[0] + p1[0]) / 2,
                (p0[1] + p1[1]) / 2
            ];
            l = [
                (l0[0] + l1[0]) / 2,
                (l0[1] + l1[1]) / 2
            ];
        } else if (g.touch0)
            p = g.touch0[0], l = g.touch0[1];
        else
            return;
        g.zoom('touch', constrain(translate(t, p, l), g.extent));
    }
    function touchended() {
        var g = gesture(this, arguments), touches = exports.event.changedTouches, n = touches.length, i, t;
        nopropagation$1();
        if (touchending)
            clearTimeout(touchending);
        touchending = setTimeout(function () {
            touchending = null;
        }, touchDelay);
        for (i = 0; i < n; ++i) {
            t = touches[i];
            if (g.touch0 && g.touch0[2] === t.identifier)
                delete g.touch0;
            else if (g.touch1 && g.touch1[2] === t.identifier)
                delete g.touch1;
        }
        if (g.touch1 && !g.touch0)
            g.touch0 = g.touch1, delete g.touch1;
        if (!g.touch0)
            g.end();
    }
    zoom.filter = function (_) {
        return arguments.length ? (filter = typeof _ === 'function' ? _ : constant$9(!!_), zoom) : filter;
    };
    zoom.extent = function (_) {
        return arguments.length ? (extent = typeof _ === 'function' ? _ : constant$9([
            [
                +_[0][0],
                +_[0][1]
            ],
            [
                +_[1][0],
                +_[1][1]
            ]
        ]), zoom) : extent;
    };
    zoom.scaleExtent = function (_) {
        return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [
            k0,
            k1
        ];
    };
    zoom.translateExtent = function (_) {
        return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    zoom.duration = function (_) {
        return arguments.length ? (duration = +_, zoom) : duration;
    };
    zoom.on = function () {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? zoom : value;
    };
    return zoom;
};
constant$10 = function constant$10(x) {
    return function () {
        return x;
    };
};
BrushEvent = function BrushEvent(target, type, selection) {
    this.target = target;
    this.type = type;
    this.selection = selection;
};
nopropagation$2 = function nopropagation$2() {
    exports.event.stopImmediatePropagation();
};
noevent$2 = function noevent$2() {
    exports.event.preventDefault();
    exports.event.stopImmediatePropagation();
};
type$1 = function type$1(t) {
    return {
        type: t
    };
};
defaultFilter$2 = function defaultFilter$2() {
    return !exports.event.button;
};
defaultExtent$1 = function defaultExtent$1() {
    var svg = this.ownerSVGElement || this;
    return [
        [
            0,
            0
        ],
        [
            svg.width.baseVal.value,
            svg.height.baseVal.value
        ]
    ];
};
local$1 = function local$1(node) {
    while (!node.__brush)
        if (!(node = node.parentNode))
        return;
    return node.__brush;
};
empty$1 = function empty$1(extent) {
    return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
};
brushSelection = function brushSelection(node) {
    var state = node.__brush;
    return state ? state.dim.output(state.selection) : null;
};
brushX = function brushX() {
    return brush$1(X);
};
brushY = function brushY() {
    return brush$1(Y);
};
brush = function brush() {
    return brush$1(XY);
};
brush$1 = function brush$1(dim) {
    var extent = defaultExtent$1, filter = defaultFilter$2, listeners = dispatch(brush, 'start', 'brush', 'end'), handleSize = 6, touchending;
    function brush(group) {
        var overlay = group.property('__brush', initialize).selectAll('.overlay').data([type$1('overlay')]);
        overlay.enter().append('rect').attr('class', 'overlay').attr('pointer-events', 'all').attr('cursor', cursors.overlay).merge(overlay).each(function () {
            var extent = local$1(this).extent;
            select(this).attr('x', extent[0][0]).attr('y', extent[0][1]).attr('width', extent[1][0] - extent[0][0]).attr('height', extent[1][1] - extent[0][1]);
        });
        group.selectAll('.selection').data([type$1('selection')]).enter().append('rect').attr('class', 'selection').attr('cursor', cursors.selection).attr('fill', '#777').attr('fill-opacity', 0.3).attr('stroke', '#fff').attr('shape-rendering', 'crispEdges');
        var handle = group.selectAll('.handle').data(dim.handles, function (d) {
            return d.type;
        });
        handle.exit().remove();
        handle.enter().append('rect').attr('class', function (d) {
            return 'handle handle--' + d.type;
        }).attr('cursor', function (d) {
            return cursors[d.type];
        });
        group.each(redraw).attr('fill', 'none').attr('pointer-events', 'all').style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)').on('mousedown.brush touchstart.brush', started);
    }
    brush.move = function (group, selection) {
        if (group.selection) {
            group.on('start.brush', function () {
                emitter(this, arguments).beforestart().start();
            }).on('interrupt.brush end.brush', function () {
                emitter(this, arguments).end();
            }).tween('brush', function () {
                var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection === 'function' ? selection.apply(this, arguments) : selection, state.extent), i = interpolate(selection0, selection1);
                function tween(t) {
                    state.selection = t === 1 && empty$1(selection1) ? null : i(t);
                    redraw.call(that);
                    emit.brush();
                }
                return selection0 && selection1 ? tween : tween(1);
            });
        } else {
            group.each(function () {
                var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection === 'function' ? selection.apply(that, args) : selection, state.extent), emit = emitter(that, args).beforestart();
                interrupt(that);
                state.selection = selection1 == null || empty$1(selection1) ? null : selection1;
                redraw.call(that);
                emit.start().brush().end();
            });
        }
    };
    function redraw() {
        var group = select(this), selection = local$1(this).selection;
        if (selection) {
            group.selectAll('.selection').style('display', null).attr('x', selection[0][0]).attr('y', selection[0][1]).attr('width', selection[1][0] - selection[0][0]).attr('height', selection[1][1] - selection[0][1]);
            group.selectAll('.handle').style('display', null).attr('x', function (d) {
                return d.type[d.type.length - 1] === 'e' ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
            }).attr('y', function (d) {
                return d.type[0] === 's' ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
            }).attr('width', function (d) {
                return d.type === 'n' || d.type === 's' ? selection[1][0] - selection[0][0] + handleSize : handleSize;
            }).attr('height', function (d) {
                return d.type === 'e' || d.type === 'w' ? selection[1][1] - selection[0][1] + handleSize : handleSize;
            });
        } else {
            group.selectAll('.selection,.handle').style('display', 'none').attr('x', null).attr('y', null).attr('width', null).attr('height', null);
        }
    }
    function emitter(that, args) {
        return that.__brush.emitter || new Emitter(that, args);
    }
    function Emitter(that, args) {
        this.that = that;
        this.args = args;
        this.state = that.__brush;
        this.active = 0;
    }
    Emitter.prototype = {
        beforestart: function () {
            if (++this.active === 1)
                this.state.emitter = this, this.starting = true;
            return this;
        },
        start: function () {
            if (this.starting)
                this.starting = false, this.emit('start');
            return this;
        },
        brush: function () {
            this.emit('brush');
            return this;
        },
        end: function () {
            if (--this.active === 0)
                delete this.state.emitter, this.emit('end');
            return this;
        },
        emit: function (type) {
            customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [
                type,
                this.that,
                this.args
            ]);
        }
    };
    function started() {
        if (exports.event.touches) {
            if (exports.event.changedTouches.length < exports.event.touches.length)
                return noevent$2();
        } else if (touchending)
            return;
        if (!filter.apply(this, arguments))
            return;
        var that = this, type = exports.event.target.__data__.type, mode = (exports.event.metaKey ? type = 'overlay' : type) === 'selection' ? MODE_DRAG : exports.event.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y ? null : signsX[type], signY = dim === X ? null : signsY[type], state = local$1(that), extent = state.extent, selection = state.selection, W = extent[0][0], w0, w1, N = extent[0][1], n0, n1, E = extent[1][0], e0, e1, S = extent[1][1], s0, s1, dx, dy, moving, shifting = signX && signY && exports.event.shiftKey, lockX, lockY, point0 = mouse(that), point = point0, emit = emitter(that, arguments).beforestart();
        if (type === 'overlay') {
            state.selection = selection = [
                [
                    w0 = dim === Y ? W : point0[0],
                    n0 = dim === X ? N : point0[1]
                ],
                [
                    e0 = dim === Y ? E : w0,
                    s0 = dim === X ? S : n0
                ]
            ];
        } else {
            w0 = selection[0][0];
            n0 = selection[0][1];
            e0 = selection[1][0];
            s0 = selection[1][1];
        }
        w1 = w0;
        n1 = n0;
        e1 = e0;
        s1 = s0;
        var group = select(that).attr('pointer-events', 'none');
        var overlay = group.selectAll('.overlay').attr('cursor', cursors[type]);
        if (exports.event.touches) {
            group.on('touchmove.brush', moved, true).on('touchend.brush touchcancel.brush', ended, true);
        } else {
            var view = select(exports.event.view).on('keydown.brush', keydowned, true).on('keyup.brush', keyupped, true).on('mousemove.brush', moved, true).on('mouseup.brush', ended, true);
            dragDisable(exports.event.view);
        }
        nopropagation$2();
        interrupt(that);
        redraw.call(that);
        emit.start();
        function moved() {
            var point1 = mouse(that);
            if (shifting && !lockX && !lockY) {
                if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1]))
                    lockY = true;
                else
                    lockX = true;
            }
            point = point1;
            moving = true;
            noevent$2();
            move();
        }
        function move() {
            var t;
            dx = point[0] - point0[0];
            dy = point[1] - point0[1];
            switch (mode) {
            case MODE_SPACE:
            case MODE_DRAG: {
                    if (signX)
                        dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
                    if (signY)
                        dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
                    break;
                }
            case MODE_HANDLE: {
                    if (signX < 0)
                        dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                    else if (signX > 0)
                        dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                    if (signY < 0)
                        dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                    else if (signY > 0)
                        dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
                    break;
                }
            case MODE_CENTER: {
                    if (signX)
                        w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
                    if (signY)
                        n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
                    break;
                }
            }
            if (e1 < w1) {
                signX *= -1;
                t = w0, w0 = e0, e0 = t;
                t = w1, w1 = e1, e1 = t;
                if (type in flipX)
                    overlay.attr('cursor', cursors[type = flipX[type]]);
            }
            if (s1 < n1) {
                signY *= -1;
                t = n0, n0 = s0, s0 = t;
                t = n1, n1 = s1, s1 = t;
                if (type in flipY)
                    overlay.attr('cursor', cursors[type = flipY[type]]);
            }
            selection = state.selection;
            if (lockX)
                w1 = selection[0][0], e1 = selection[1][0];
            if (lockY)
                n1 = selection[0][1], s1 = selection[1][1];
            if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
                state.selection = [
                    [
                        w1,
                        n1
                    ],
                    [
                        e1,
                        s1
                    ]
                ];
                redraw.call(that);
                emit.brush();
            }
        }
        function ended() {
            nopropagation$2();
            if (exports.event.touches) {
                if (exports.event.touches.length)
                    return;
                if (touchending)
                    clearTimeout(touchending);
                touchending = setTimeout(function () {
                    touchending = null;
                }, 500);
                group.on('touchmove.brush touchend.brush touchcancel.brush', null);
            } else {
                dragEnable(exports.event.view, moving);
                view.on('keydown.brush keyup.brush mousemove.brush mouseup.brush', null);
            }
            group.attr('pointer-events', 'all');
            overlay.attr('cursor', cursors.overlay);
            if (empty$1(selection))
                state.selection = null, redraw.call(that);
            emit.end();
        }
        function keydowned() {
            switch (exports.event.keyCode) {
            case 16: {
                    shifting = signX && signY;
                    break;
                }
            case 18: {
                    if (mode === MODE_HANDLE) {
                        if (signX)
                            e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                        if (signY)
                            s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                        mode = MODE_CENTER;
                        move();
                    }
                    break;
                }
            case 32: {
                    if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                        if (signX < 0)
                            e0 = e1 - dx;
                        else if (signX > 0)
                            w0 = w1 - dx;
                        if (signY < 0)
                            s0 = s1 - dy;
                        else if (signY > 0)
                            n0 = n1 - dy;
                        mode = MODE_SPACE;
                        overlay.attr('cursor', cursors.selection);
                        move();
                    }
                    break;
                }
            default:
                return;
            }
            noevent$2();
        }
        function keyupped() {
            switch (exports.event.keyCode) {
            case 16: {
                    if (shifting) {
                        lockX = lockY = shifting = false;
                        move();
                    }
                    break;
                }
            case 18: {
                    if (mode === MODE_CENTER) {
                        if (signX < 0)
                            e0 = e1;
                        else if (signX > 0)
                            w0 = w1;
                        if (signY < 0)
                            s0 = s1;
                        else if (signY > 0)
                            n0 = n1;
                        mode = MODE_HANDLE;
                        move();
                    }
                    break;
                }
            case 32: {
                    if (mode === MODE_SPACE) {
                        if (exports.event.altKey) {
                            if (signX)
                                e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                            if (signY)
                                s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                            mode = MODE_CENTER;
                        } else {
                            if (signX < 0)
                                e0 = e1;
                            else if (signX > 0)
                                w0 = w1;
                            if (signY < 0)
                                s0 = s1;
                            else if (signY > 0)
                                n0 = n1;
                            mode = MODE_HANDLE;
                        }
                        overlay.attr('cursor', cursors[type]);
                        move();
                    }
                    break;
                }
            default:
                return;
            }
            noevent$2();
        }
    }
    function initialize() {
        var state = this.__brush || {
            selection: null
        };
        state.extent = extent.apply(this, arguments);
        state.dim = dim;
        return state;
    }
    brush.extent = function (_) {
        return arguments.length ? (extent = typeof _ === 'function' ? _ : constant$10([
            [
                +_[0][0],
                +_[0][1]
            ],
            [
                +_[1][0],
                +_[1][1]
            ]
        ]), brush) : extent;
    };
    brush.filter = function (_) {
        return arguments.length ? (filter = typeof _ === 'function' ? _ : constant$10(!!_), brush) : filter;
    };
    brush.handleSize = function (_) {
        return arguments.length ? (handleSize = +_, brush) : handleSize;
    };
    brush.on = function () {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? brush : value;
    };
    return brush;
};
compareValue = function compareValue(compare) {
    return function (a, b) {
        return compare(a.source.value + a.target.value, b.source.value + b.target.value);
    };
};
chord = function chord() {
    var padAngle = 0, sortGroups = null, sortSubgroups = null, sortChords = null;
    function chord(matrix) {
        var n = matrix.length, groupSums = [], groupIndex = range(n), subgroupIndex = [], chords = [], groups = chords.groups = new Array(n), subgroups = new Array(n * n), k, x, x0, dx, i, j;
        k = 0, i = -1;
        while (++i < n) {
            x = 0, j = -1;
            while (++j < n) {
                x += matrix[i][j];
            }
            groupSums.push(x);
            subgroupIndex.push(range(n));
            k += x;
        }
        if (sortGroups)
            groupIndex.sort(function (a, b) {
            return sortGroups(groupSums[a], groupSums[b]);
        });
        if (sortSubgroups)
            subgroupIndex.forEach(function (d, i) {
            d.sort(function (a, b) {
                return sortSubgroups(matrix[i][a], matrix[i][b]);
            });
        });
        k = max$1(0, tau$3 - padAngle * n) / k;
        dx = k ? padAngle : tau$3 / n;
        x = 0, i = -1;
        while (++i < n) {
            x0 = x, j = -1;
            while (++j < n) {
                var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
                subgroups[dj * n + di] = {
                    index: di,
                    subindex: dj,
                    startAngle: a0,
                    endAngle: a1,
                    value: v
                };
            }
            groups[di] = {
                index: di,
                startAngle: x0,
                endAngle: x,
                value: groupSums[di]
            };
            x += dx;
        }
        i = -1;
        while (++i < n) {
            j = i - 1;
            while (++j < n) {
                var source = subgroups[j * n + i], target = subgroups[i * n + j];
                if (source.value || target.value) {
                    chords.push(source.value < target.value ? {
                        source: target,
                        target: source
                    } : {
                        source: source,
                        target: target
                    });
                }
            }
        }
        return sortChords ? chords.sort(sortChords) : chords;
    }
    chord.padAngle = function (_) {
        return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
    };
    chord.sortGroups = function (_) {
        return arguments.length ? (sortGroups = _, chord) : sortGroups;
    };
    chord.sortSubgroups = function (_) {
        return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
    };
    chord.sortChords = function (_) {
        return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
    };
    return chord;
};
constant$11 = function constant$11(x) {
    return function () {
        return x;
    };
};
defaultSource = function defaultSource(d) {
    return d.source;
};
defaultTarget = function defaultTarget(d) {
    return d.target;
};
defaultRadius$1 = function defaultRadius$1(d) {
    return d.radius;
};
defaultStartAngle = function defaultStartAngle(d) {
    return d.startAngle;
};
defaultEndAngle = function defaultEndAngle(d) {
    return d.endAngle;
};
ribbon = function ribbon() {
    var source = defaultSource, target = defaultTarget, radius = defaultRadius$1, startAngle = defaultStartAngle, endAngle = defaultEndAngle, context = null;
    function ribbon() {
        var buffer, argv = slice$5.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv), sr = +radius.apply(this, (argv[0] = s, argv)), sa0 = startAngle.apply(this, argv) - halfPi$2, sa1 = endAngle.apply(this, argv) - halfPi$2, sx0 = sr * cos(sa0), sy0 = sr * sin(sa0), tr = +radius.apply(this, (argv[0] = t, argv)), ta0 = startAngle.apply(this, argv) - halfPi$2, ta1 = endAngle.apply(this, argv) - halfPi$2;
        if (!context)
            context = buffer = path();
        context.moveTo(sx0, sy0);
        context.arc(0, 0, sr, sa0, sa1);
        if (sa0 !== ta0 || sa1 !== ta1) {
            context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
            context.arc(0, 0, tr, ta0, ta1);
        }
        context.quadraticCurveTo(0, 0, sx0, sy0);
        context.closePath();
        if (buffer)
            return context = null, buffer + '' || null;
    }
    ribbon.radius = function (_) {
        return arguments.length ? (radius = typeof _ === 'function' ? _ : constant$11(+_), ribbon) : radius;
    };
    ribbon.startAngle = function (_) {
        return arguments.length ? (startAngle = typeof _ === 'function' ? _ : constant$11(+_), ribbon) : startAngle;
    };
    ribbon.endAngle = function (_) {
        return arguments.length ? (endAngle = typeof _ === 'function' ? _ : constant$11(+_), ribbon) : endAngle;
    };
    ribbon.source = function (_) {
        return arguments.length ? (source = _, ribbon) : source;
    };
    ribbon.target = function (_) {
        return arguments.length ? (target = _, ribbon) : target;
    };
    ribbon.context = function (_) {
        return arguments.length ? (context = _ == null ? null : _, ribbon) : context;
    };
    return ribbon;
};
adder = function adder() {
    return new Adder();
};
Adder = function Adder() {
    this.reset();
};
add$1 = function add$1(adder, a, b) {
    var x = adder.s = a + b, bv = x - a, av = x - bv;
    adder.t = a - av + (b - bv);
};
acos = function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);
};
asin$1 = function asin$1(x) {
    return x > 1 ? halfPi$3 : x < -1 ? -halfPi$3 : Math.asin(x);
};
haversin = function haversin(x) {
    return (x = sin$1(x / 2)) * x;
};
noop$2 = function noop$2() {
};
streamGeometry = function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
        streamGeometryType[geometry.type](geometry, stream);
    }
};
streamLine = function streamLine(coordinates, stream, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream.lineStart();
    while (++i < n)
        coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    stream.lineEnd();
};
streamPolygon = function streamPolygon(coordinates, stream) {
    var i = -1, n = coordinates.length;
    stream.polygonStart();
    while (++i < n)
        streamLine(coordinates[i], stream, 1);
    stream.polygonEnd();
};
geoStream = function geoStream(object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
        streamObjectType[object.type](object, stream);
    } else {
        streamGeometry(object, stream);
    }
};
areaRingStart = function areaRingStart() {
    areaStream.point = areaPointFirst;
};
areaRingEnd = function areaRingEnd() {
    areaPoint(lambda00, phi00);
};
areaPointFirst = function areaPointFirst(lambda, phi) {
    areaStream.point = areaPoint;
    lambda00 = lambda, phi00 = phi;
    lambda *= radians, phi *= radians;
    lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
};
areaPoint = function areaPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    phi = phi / 2 + quarterPi;
    var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos$1(phi), sinPhi = sin$1(phi), k = sinPhi0 * sinPhi, u = cosPhi0 * cosPhi + k * cos$1(adLambda), v = k * sdLambda * sin$1(adLambda);
    areaRingSum.add(atan2(v, u));
    lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
};
area$2 = function area$2(object) {
    areaSum.reset();
    geoStream(object, areaStream);
    return areaSum * 2;
};
spherical = function spherical(cartesian) {
    return [
        atan2(cartesian[1], cartesian[0]),
        asin$1(cartesian[2])
    ];
};
cartesian = function cartesian(spherical) {
    var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
    return [
        cosPhi * cos$1(lambda),
        cosPhi * sin$1(lambda),
        sin$1(phi)
    ];
};
cartesianDot = function cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};
cartesianCross = function cartesianCross(a, b) {
    return [
        a[1] * b[2] - a[2] * b[1],
        a[2] * b[0] - a[0] * b[2],
        a[0] * b[1] - a[1] * b[0]
    ];
};
cartesianAddInPlace = function cartesianAddInPlace(a, b) {
    a[0] += b[0], a[1] += b[1], a[2] += b[2];
};
cartesianScale = function cartesianScale(vector, k) {
    return [
        vector[0] * k,
        vector[1] * k,
        vector[2] * k
    ];
};
cartesianNormalizeInPlace = function cartesianNormalizeInPlace(d) {
    var l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
};
boundsPoint = function boundsPoint(lambda, phi) {
    ranges.push(range$1 = [
        lambda0$1 = lambda,
        lambda1 = lambda
    ]);
    if (phi < phi0)
        phi0 = phi;
    if (phi > phi1)
        phi1 = phi;
};
linePoint = function linePoint(lambda, phi) {
    var p = cartesian([
        lambda * radians,
        phi * radians
    ]);
    if (p0) {
        var normal = cartesianCross(p0, p), equatorial = [
                normal[1],
                -normal[0],
                0
            ], inflection = cartesianCross(equatorial, normal);
        cartesianNormalizeInPlace(inflection);
        inflection = spherical(inflection);
        var delta = lambda - lambda2, sign = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees$1 * sign, phii, antimeridian = abs(delta) > 180;
        if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
            phii = inflection[1] * degrees$1;
            if (phii > phi1)
                phi1 = phii;
        } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
            phii = -inflection[1] * degrees$1;
            if (phii < phi0)
                phi0 = phii;
        } else {
            if (phi < phi0)
                phi0 = phi;
            if (phi > phi1)
                phi1 = phi;
        }
        if (antimeridian) {
            if (lambda < lambda2) {
                if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1))
                    lambda1 = lambda;
            } else {
                if (angle(lambda, lambda1) > angle(lambda0$1, lambda1))
                    lambda0$1 = lambda;
            }
        } else {
            if (lambda1 >= lambda0$1) {
                if (lambda < lambda0$1)
                    lambda0$1 = lambda;
                if (lambda > lambda1)
                    lambda1 = lambda;
            } else {
                if (lambda > lambda2) {
                    if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1))
                        lambda1 = lambda;
                } else {
                    if (angle(lambda, lambda1) > angle(lambda0$1, lambda1))
                        lambda0$1 = lambda;
                }
            }
        }
    } else {
        boundsPoint(lambda, phi);
    }
    p0 = p, lambda2 = lambda;
};
boundsLineStart = function boundsLineStart() {
    boundsStream.point = linePoint;
};
boundsLineEnd = function boundsLineEnd() {
    range$1[0] = lambda0$1, range$1[1] = lambda1;
    boundsStream.point = boundsPoint;
    p0 = null;
};
boundsRingPoint = function boundsRingPoint(lambda, phi) {
    if (p0) {
        var delta = lambda - lambda2;
        deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
    } else {
        lambda00$1 = lambda, phi00$1 = phi;
    }
    areaStream.point(lambda, phi);
    linePoint(lambda, phi);
};
boundsRingStart = function boundsRingStart() {
    areaStream.lineStart();
};
boundsRingEnd = function boundsRingEnd() {
    boundsRingPoint(lambda00$1, phi00$1);
    areaStream.lineEnd();
    if (abs(deltaSum) > epsilon$4)
        lambda0$1 = -(lambda1 = 180);
    range$1[0] = lambda0$1, range$1[1] = lambda1;
    p0 = null;
};
angle = function angle(lambda0, lambda1) {
    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
};
rangeCompare = function rangeCompare(a, b) {
    return a[0] - b[0];
};
rangeContains = function rangeContains(range, x) {
    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
};
bounds = function bounds(feature) {
    var i, n, a, b, merged, deltaMax, delta;
    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
    ranges = [];
    geoStream(feature, boundsStream);
    if (n = ranges.length) {
        ranges.sort(rangeCompare);
        for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
            b = ranges[i];
            if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
                if (angle(a[0], b[1]) > angle(a[0], a[1]))
                    a[1] = b[1];
                if (angle(b[0], a[1]) > angle(a[0], a[1]))
                    a[0] = b[0];
            } else {
                merged.push(a = b);
            }
        }
        for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
            b = merged[i];
            if ((delta = angle(a[1], b[0])) > deltaMax)
                deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
        }
    }
    ranges = range$1 = null;
    return lambda0$1 === Infinity || phi0 === Infinity ? [
        [
            NaN,
            NaN
        ],
        [
            NaN,
            NaN
        ]
    ] : [
        [
            lambda0$1,
            phi0
        ],
        [
            lambda1,
            phi1
        ]
    ];
};
centroidPoint = function centroidPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi);
    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
};
centroidPointCartesian = function centroidPointCartesian(x, y, z) {
    ++W0;
    X0 += (x - X0) / W0;
    Y0 += (y - Y0) / W0;
    Z0 += (z - Z0) / W0;
};
centroidLineStart = function centroidLineStart() {
    centroidStream.point = centroidLinePointFirst;
};
centroidLinePointFirst = function centroidLinePointFirst(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi);
    x0 = cosPhi * cos$1(lambda);
    y0 = cosPhi * sin$1(lambda);
    z0 = sin$1(phi);
    centroidStream.point = centroidLinePoint;
    centroidPointCartesian(x0, y0, z0);
};
centroidLinePoint = function centroidLinePoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi), x = cosPhi * cos$1(lambda), y = cosPhi * sin$1(lambda), z = sin$1(phi), w = atan2(sqrt$1((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
};
centroidLineEnd = function centroidLineEnd() {
    centroidStream.point = centroidPoint;
};
centroidRingStart = function centroidRingStart() {
    centroidStream.point = centroidRingPointFirst;
};
centroidRingEnd = function centroidRingEnd() {
    centroidRingPoint(lambda00$2, phi00$2);
    centroidStream.point = centroidPoint;
};
centroidRingPointFirst = function centroidRingPointFirst(lambda, phi) {
    lambda00$2 = lambda, phi00$2 = phi;
    lambda *= radians, phi *= radians;
    centroidStream.point = centroidRingPoint;
    var cosPhi = cos$1(phi);
    x0 = cosPhi * cos$1(lambda);
    y0 = cosPhi * sin$1(lambda);
    z0 = sin$1(phi);
    centroidPointCartesian(x0, y0, z0);
};
centroidRingPoint = function centroidRingPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var cosPhi = cos$1(phi), x = cosPhi * cos$1(lambda), y = cosPhi * sin$1(lambda), z = sin$1(phi), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = sqrt$1(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -acos(u) / m, w = atan2(m, u);
    X2 += v * cx;
    Y2 += v * cy;
    Z2 += v * cz;
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
};
centroid$1 = function centroid$1(object) {
    W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    geoStream(object, centroidStream);
    var x = X2, y = Y2, z = Z2, m = x * x + y * y + z * z;
    if (m < epsilon2$2) {
        x = X1, y = Y1, z = Z1;
        if (W1 < epsilon$4)
            x = X0, y = Y0, z = Z0;
        m = x * x + y * y + z * z;
        if (m < epsilon2$2)
            return [
            NaN,
            NaN
        ];
    }
    return [
        atan2(y, x) * degrees$1,
        asin$1(z / sqrt$1(m)) * degrees$1
    ];
};
constant$12 = function constant$12(x) {
    return function () {
        return x;
    };
};
compose = function compose(a, b) {
    function compose(x, y) {
        return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert)
        compose.invert = function (x, y) {
        return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
};
rotationIdentity = function rotationIdentity(lambda, phi) {
    return [
        lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda,
        phi
    ];
};
rotateRadians = function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= tau$4) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
};
forwardRotationLambda = function forwardRotationLambda(deltaLambda) {
    return function (lambda, phi) {
        return lambda += deltaLambda, [
            lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda,
            phi
        ];
    };
};
rotationLambda = function rotationLambda(deltaLambda) {
    var rotation = forwardRotationLambda(deltaLambda);
    rotation.invert = forwardRotationLambda(-deltaLambda);
    return rotation;
};
rotationPhiGamma = function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = cos$1(deltaPhi), sinDeltaPhi = sin$1(deltaPhi), cosDeltaGamma = cos$1(deltaGamma), sinDeltaGamma = sin$1(deltaGamma);
    function rotation(lambda, phi) {
        var cosPhi = cos$1(phi), x = cos$1(lambda) * cosPhi, y = sin$1(lambda) * cosPhi, z = sin$1(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
        return [
            atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
            asin$1(k * cosDeltaGamma + y * sinDeltaGamma)
        ];
    }
    rotation.invert = function (lambda, phi) {
        var cosPhi = cos$1(phi), x = cos$1(lambda) * cosPhi, y = sin$1(lambda) * cosPhi, z = sin$1(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
        return [
            atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
            asin$1(k * cosDeltaPhi - x * sinDeltaPhi)
        ];
    };
    return rotation;
};
rotation = function rotation(rotate) {
    rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
    function forward(coordinates) {
        coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
        return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
    }
    forward.invert = function (coordinates) {
        coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
        return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
    };
    return forward;
};
circleStream = function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta)
        return;
    var cosRadius = cos$1(radius), sinRadius = sin$1(radius), step = direction * delta;
    if (t0 == null) {
        t0 = radius + direction * tau$4;
        t1 = radius - step / 2;
    } else {
        t0 = circleRadius(cosRadius, t0);
        t1 = circleRadius(cosRadius, t1);
        if (direction > 0 ? t0 < t1 : t0 > t1)
            t0 += direction * tau$4;
    }
    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
        point = spherical([
            cosRadius,
            -sinRadius * cos$1(t),
            -sinRadius * sin$1(t)
        ]);
        stream.point(point[0], point[1]);
    }
};
circleRadius = function circleRadius(cosRadius, point) {
    point = cartesian(point), point[0] -= cosRadius;
    cartesianNormalizeInPlace(point);
    var radius = acos(-point[1]);
    return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$4) % tau$4;
};
circle$1 = function circle$1() {
    var center = constant$12([
            0,
            0
        ]), radius = constant$12(90), precision = constant$12(6), ring, rotate, stream = {
            point: point
        };
    function point(x, y) {
        ring.push(x = rotate(x, y));
        x[0] *= degrees$1, x[1] *= degrees$1;
    }
    function circle() {
        var c = center.apply(this, arguments), r = radius.apply(this, arguments) * radians, p = precision.apply(this, arguments) * radians;
        ring = [];
        rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
        circleStream(stream, r, p, 1);
        c = {
            type: 'Polygon',
            coordinates: [ring]
        };
        ring = rotate = null;
        return c;
    }
    circle.center = function (_) {
        return arguments.length ? (center = typeof _ === 'function' ? _ : constant$12([
            +_[0],
            +_[1]
        ]), circle) : center;
    };
    circle.radius = function (_) {
        return arguments.length ? (radius = typeof _ === 'function' ? _ : constant$12(+_), circle) : radius;
    };
    circle.precision = function (_) {
        return arguments.length ? (precision = typeof _ === 'function' ? _ : constant$12(+_), circle) : precision;
    };
    return circle;
};
clipBuffer = function clipBuffer() {
    var lines = [], line;
    return {
        point: function (x, y) {
            line.push([
                x,
                y
            ]);
        },
        lineStart: function () {
            lines.push(line = []);
        },
        lineEnd: noop$2,
        rejoin: function () {
            if (lines.length > 1)
                lines.push(lines.pop().concat(lines.shift()));
        },
        result: function () {
            var result = lines;
            lines = [];
            line = null;
            return result;
        }
    };
};
clipLine = function clipLine(a, b, x0, y0, x1, y1) {
    var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
    r = x0 - ax;
    if (!dx && r > 0)
        return;
    r /= dx;
    if (dx < 0) {
        if (r < t0)
            return;
        if (r < t1)
            t1 = r;
    } else if (dx > 0) {
        if (r > t1)
            return;
        if (r > t0)
            t0 = r;
    }
    r = x1 - ax;
    if (!dx && r < 0)
        return;
    r /= dx;
    if (dx < 0) {
        if (r > t1)
            return;
        if (r > t0)
            t0 = r;
    } else if (dx > 0) {
        if (r < t0)
            return;
        if (r < t1)
            t1 = r;
    }
    r = y0 - ay;
    if (!dy && r > 0)
        return;
    r /= dy;
    if (dy < 0) {
        if (r < t0)
            return;
        if (r < t1)
            t1 = r;
    } else if (dy > 0) {
        if (r > t1)
            return;
        if (r > t0)
            t0 = r;
    }
    r = y1 - ay;
    if (!dy && r < 0)
        return;
    r /= dy;
    if (dy < 0) {
        if (r > t1)
            return;
        if (r > t0)
            t0 = r;
    } else if (dy > 0) {
        if (r < t0)
            return;
        if (r < t1)
            t1 = r;
    }
    if (t0 > 0)
        a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
    if (t1 < 1)
        b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
    return true;
};
pointEqual = function pointEqual(a, b) {
    return abs(a[0] - b[0]) < epsilon$4 && abs(a[1] - b[1]) < epsilon$4;
};
Intersection = function Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
};
clipPolygon = function clipPolygon(segments, compareIntersection, startInside, interpolate, stream) {
    var subject = [], clip = [], i, n;
    segments.forEach(function (segment) {
        if ((n = segment.length - 1) <= 0)
            return;
        var n, p0 = segment[0], p1 = segment[n], x;
        if (pointEqual(p0, p1)) {
            stream.lineStart();
            for (i = 0; i < n; ++i)
                stream.point((p0 = segment[i])[0], p0[1]);
            stream.lineEnd();
            return;
        }
        subject.push(x = new Intersection(p0, segment, null, true));
        clip.push(x.o = new Intersection(p0, null, x, false));
        subject.push(x = new Intersection(p1, segment, null, false));
        clip.push(x.o = new Intersection(p1, null, x, true));
    });
    if (!subject.length)
        return;
    clip.sort(compareIntersection);
    link$1(subject);
    link$1(clip);
    for (i = 0, n = clip.length; i < n; ++i) {
        clip[i].e = startInside = !startInside;
    }
    var start = subject[0], points, point;
    while (1) {
        var current = start, isSubject = true;
        while (current.v)
            if ((current = current.n) === start)
            return;
        points = current.z;
        stream.lineStart();
        do {
            current.v = current.o.v = true;
            if (current.e) {
                if (isSubject) {
                    for (i = 0, n = points.length; i < n; ++i)
                        stream.point((point = points[i])[0], point[1]);
                } else {
                    interpolate(current.x, current.n.x, 1, stream);
                }
                current = current.n;
            } else {
                if (isSubject) {
                    points = current.p.z;
                    for (i = points.length - 1; i >= 0; --i)
                        stream.point((point = points[i])[0], point[1]);
                } else {
                    interpolate(current.x, current.p.x, -1, stream);
                }
                current = current.p;
            }
            current = current.o;
            points = current.z;
            isSubject = !isSubject;
        } while (!current.v);
        stream.lineEnd();
    }
};
link$1 = function link$1(array) {
    if (!(n = array.length))
        return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
        a.n = b = array[i];
        b.p = a;
        a = b;
    }
    a.n = b = array[0];
    b.p = a;
};
clipExtent = function clipExtent(x0, y0, x1, y1) {
    function visible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }
    function interpolate(from, to, direction, stream) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
            do
                stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
            while ((a = (a + direction + 4) % 4) !== a1);
        } else {
            stream.point(to[0], to[1]);
        }
    }
    function corner(p, direction) {
        return abs(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compareIntersection(a, b) {
        return comparePoint(a.x, b.x);
    }
    function comparePoint(a, b) {
        var ca = corner(a, 1), cb = corner(b, 1);
        return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
    return function (stream) {
        var activeStream = stream, bufferStream = clipBuffer(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
        var clipStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: polygonStart,
            polygonEnd: polygonEnd
        };
        function point(x, y) {
            if (visible(x, y))
                activeStream.point(x, y);
        }
        function polygonInside() {
            var winding = 0;
            for (var i = 0, n = polygon.length; i < n; ++i) {
                for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
                    a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
                    if (a1 <= y1) {
                        if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0))
                            ++winding;
                    } else {
                        if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0))
                            --winding;
                    }
                }
            }
            return winding;
        }
        function polygonStart() {
            activeStream = bufferStream, segments = [], polygon = [], clean = true;
        }
        function polygonEnd() {
            var startInside = polygonInside(), cleanInside = clean && startInside, visible = (segments = merge(segments)).length;
            if (cleanInside || visible) {
                stream.polygonStart();
                if (cleanInside) {
                    stream.lineStart();
                    interpolate(null, null, 1, stream);
                    stream.lineEnd();
                }
                if (visible) {
                    clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
                }
                stream.polygonEnd();
            }
            activeStream = stream, segments = polygon = ring = null;
        }
        function lineStart() {
            clipStream.point = linePoint;
            if (polygon)
                polygon.push(ring = []);
            first = true;
            v_ = false;
            x_ = y_ = NaN;
        }
        function lineEnd() {
            if (segments) {
                linePoint(x__, y__);
                if (v__ && v_)
                    bufferStream.rejoin();
                segments.push(bufferStream.result());
            }
            clipStream.point = point;
            if (v_)
                activeStream.lineEnd();
        }
        function linePoint(x, y) {
            var v = visible(x, y);
            if (polygon)
                ring.push([
                x,
                y
            ]);
            if (first) {
                x__ = x, y__ = y, v__ = v;
                first = false;
                if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                }
            } else {
                if (v && v_)
                    activeStream.point(x, y);
                else {
                    var a = [
                            x_ = Math.max(clipMin, Math.min(clipMax, x_)),
                            y_ = Math.max(clipMin, Math.min(clipMax, y_))
                        ], b = [
                            x = Math.max(clipMin, Math.min(clipMax, x)),
                            y = Math.max(clipMin, Math.min(clipMax, y))
                        ];
                    if (clipLine(a, b, x0, y0, x1, y1)) {
                        if (!v_) {
                            activeStream.lineStart();
                            activeStream.point(a[0], a[1]);
                        }
                        activeStream.point(b[0], b[1]);
                        if (!v)
                            activeStream.lineEnd();
                        clean = false;
                    } else if (v) {
                        activeStream.lineStart();
                        activeStream.point(x, y);
                        clean = false;
                    }
                }
            }
            x_ = x, y_ = y, v_ = v;
        }
        return clipStream;
    };
};
extent$1 = function extent$1() {
    var x0 = 0, y0 = 0, x1 = 960, y1 = 500, cache, cacheStream, clip;
    return clip = {
        stream: function (stream) {
            return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
        },
        extent: function (_) {
            return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [
                [
                    x0,
                    y0
                ],
                [
                    x1,
                    y1
                ]
            ];
        }
    };
};
lengthLineStart = function lengthLineStart() {
    lengthStream.point = lengthPointFirst;
    lengthStream.lineEnd = lengthLineEnd;
};
lengthLineEnd = function lengthLineEnd() {
    lengthStream.point = lengthStream.lineEnd = noop$2;
};
lengthPointFirst = function lengthPointFirst(lambda, phi) {
    lambda *= radians, phi *= radians;
    lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
    lengthStream.point = lengthPoint;
};
lengthPoint = function lengthPoint(lambda, phi) {
    lambda *= radians, phi *= radians;
    var sinPhi = sin$1(phi), cosPhi = cos$1(phi), delta = abs(lambda - lambda0$2), cosDelta = cos$1(delta), sinDelta = sin$1(delta), x = cosPhi * sinDelta, y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta, z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
    lengthSum.add(atan2(sqrt$1(x * x + y * y), z));
    lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
};
length$2 = function length$2(object) {
    lengthSum.reset();
    geoStream(object, lengthStream);
    return +lengthSum;
};
distance = function distance(a, b) {
    coordinates[0] = a;
    coordinates[1] = b;
    return length$2(object$1);
};
graticuleX = function graticuleX(y0, y1, dy) {
    var y = range(y0, y1 - epsilon$4, dy).concat(y1);
    return function (x) {
        return y.map(function (y) {
            return [
                x,
                y
            ];
        });
    };
};
graticuleY = function graticuleY(x0, x1, dx) {
    var x = range(x0, x1 - epsilon$4, dx).concat(x1);
    return function (y) {
        return x.map(function (x) {
            return [
                x,
                y
            ];
        });
    };
};
graticule = function graticule() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
        return {
            type: 'MultiLineString',
            coordinates: lines()
        };
    }
    function lines() {
        return range(ceil(X0 / DX) * DX, X1, DX).map(X).concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
            return abs(x % DX) > epsilon$4;
        }).map(x)).concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
            return abs(y % DY) > epsilon$4;
        }).map(y));
    }
    graticule.lines = function () {
        return lines().map(function (coordinates) {
            return {
                type: 'LineString',
                coordinates: coordinates
            };
        });
    };
    graticule.outline = function () {
        return {
            type: 'Polygon',
            coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
        };
    };
    graticule.extent = function (_) {
        if (!arguments.length)
            return graticule.extentMinor();
        return graticule.extentMajor(_).extentMinor(_);
    };
    graticule.extentMajor = function (_) {
        if (!arguments.length)
            return [
            [
                X0,
                Y0
            ],
            [
                X1,
                Y1
            ]
        ];
        X0 = +_[0][0], X1 = +_[1][0];
        Y0 = +_[0][1], Y1 = +_[1][1];
        if (X0 > X1)
            _ = X0, X0 = X1, X1 = _;
        if (Y0 > Y1)
            _ = Y0, Y0 = Y1, Y1 = _;
        return graticule.precision(precision);
    };
    graticule.extentMinor = function (_) {
        if (!arguments.length)
            return [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
        x0 = +_[0][0], x1 = +_[1][0];
        y0 = +_[0][1], y1 = +_[1][1];
        if (x0 > x1)
            _ = x0, x0 = x1, x1 = _;
        if (y0 > y1)
            _ = y0, y0 = y1, y1 = _;
        return graticule.precision(precision);
    };
    graticule.step = function (_) {
        if (!arguments.length)
            return graticule.stepMinor();
        return graticule.stepMajor(_).stepMinor(_);
    };
    graticule.stepMajor = function (_) {
        if (!arguments.length)
            return [
            DX,
            DY
        ];
        DX = +_[0], DY = +_[1];
        return graticule;
    };
    graticule.stepMinor = function (_) {
        if (!arguments.length)
            return [
            dx,
            dy
        ];
        dx = +_[0], dy = +_[1];
        return graticule;
    };
    graticule.precision = function (_) {
        if (!arguments.length)
            return precision;
        precision = +_;
        x = graticuleX(y0, y1, 90);
        y = graticuleY(x0, x1, precision);
        X = graticuleX(Y0, Y1, 90);
        Y = graticuleY(X0, X1, precision);
        return graticule;
    };
    return graticule.extentMajor([
        [
            -180,
            -90 + epsilon$4
        ],
        [
            180,
            90 - epsilon$4
        ]
    ]).extentMinor([
        [
            -180,
            -80 - epsilon$4
        ],
        [
            180,
            80 + epsilon$4
        ]
    ]);
};
interpolate$2 = function interpolate$2(a, b) {
    var x0 = a[0] * radians, y0 = a[1] * radians, x1 = b[0] * radians, y1 = b[1] * radians, cy0 = cos$1(y0), sy0 = sin$1(y0), cy1 = cos$1(y1), sy1 = sin$1(y1), kx0 = cy0 * cos$1(x0), ky0 = cy0 * sin$1(x0), kx1 = cy1 * cos$1(x1), ky1 = cy1 * sin$1(x1), d = 2 * asin$1(sqrt$1(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))), k = sin$1(d);
    var interpolate = d ? function (t) {
        var B = sin$1(t *= d) / k, A = sin$1(d - t) / k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
        return [
            atan2(y, x) * degrees$1,
            atan2(z, sqrt$1(x * x + y * y)) * degrees$1
        ];
    } : function () {
        return [
            x0 * degrees$1,
            y0 * degrees$1
        ];
    };
    interpolate.distance = d;
    return interpolate;
};
identity$7 = function identity$7(x) {
    return x;
};
areaRingStart$1 = function areaRingStart$1() {
    areaStream$1.point = areaPointFirst$1;
};
areaPointFirst$1 = function areaPointFirst$1(x, y) {
    areaStream$1.point = areaPoint$1;
    x00 = x0$1 = x, y00 = y0$1 = y;
};
areaPoint$1 = function areaPoint$1(x, y) {
    areaRingSum$1.add(y0$1 * x - x0$1 * y);
    x0$1 = x, y0$1 = y;
};
areaRingEnd$1 = function areaRingEnd$1() {
    areaPoint$1(x00, y00);
};
boundsPoint$1 = function boundsPoint$1(x, y) {
    if (x < x0$2)
        x0$2 = x;
    if (x > x1)
        x1 = x;
    if (y < y0$2)
        y0$2 = y;
    if (y > y1)
        y1 = y;
};
centroidPoint$1 = function centroidPoint$1(x, y) {
    X0$1 += x;
    Y0$1 += y;
    ++Z0$1;
};
centroidLineStart$1 = function centroidLineStart$1() {
    centroidStream$1.point = centroidPointFirstLine;
};
centroidPointFirstLine = function centroidPointFirstLine(x, y) {
    centroidStream$1.point = centroidPointLine;
    centroidPoint$1(x0$3 = x, y0$3 = y);
};
centroidPointLine = function centroidPointLine(x, y) {
    var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);
    X1$1 += z * (x0$3 + x) / 2;
    Y1$1 += z * (y0$3 + y) / 2;
    Z1$1 += z;
    centroidPoint$1(x0$3 = x, y0$3 = y);
};
centroidLineEnd$1 = function centroidLineEnd$1() {
    centroidStream$1.point = centroidPoint$1;
};
centroidRingStart$1 = function centroidRingStart$1() {
    centroidStream$1.point = centroidPointFirstRing;
};
centroidRingEnd$1 = function centroidRingEnd$1() {
    centroidPointRing(x00$1, y00$1);
};
centroidPointFirstRing = function centroidPointFirstRing(x, y) {
    centroidStream$1.point = centroidPointRing;
    centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
};
centroidPointRing = function centroidPointRing(x, y) {
    var dx = x - x0$3, dy = y - y0$3, z = sqrt$1(dx * dx + dy * dy);
    X1$1 += z * (x0$3 + x) / 2;
    Y1$1 += z * (y0$3 + y) / 2;
    Z1$1 += z;
    z = y0$3 * x - x0$3 * y;
    X2$1 += z * (x0$3 + x);
    Y2$1 += z * (y0$3 + y);
    Z2$1 += z * 3;
    centroidPoint$1(x0$3 = x, y0$3 = y);
};
PathContext = function PathContext(context) {
    var pointRadius = 4.5;
    var stream = {
        point: point,
        lineStart: function () {
            stream.point = pointLineStart;
        },
        lineEnd: lineEnd,
        polygonStart: function () {
            stream.lineEnd = lineEndPolygon;
        },
        polygonEnd: function () {
            stream.lineEnd = lineEnd;
            stream.point = point;
        },
        pointRadius: function (_) {
            pointRadius = _;
            return stream;
        },
        result: noop$2
    };
    function point(x, y) {
        context.moveTo(x + pointRadius, y);
        context.arc(x, y, pointRadius, 0, tau$4);
    }
    function pointLineStart(x, y) {
        context.moveTo(x, y);
        stream.point = pointLine;
    }
    function pointLine(x, y) {
        context.lineTo(x, y);
    }
    function lineEnd() {
        stream.point = point;
    }
    function lineEndPolygon() {
        context.closePath();
    }
    return stream;
};
PathString = function PathString() {
    var pointCircle = circle$2(4.5), string = [];
    var stream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
            stream.lineEnd = lineEndPolygon;
        },
        polygonEnd: function () {
            stream.lineEnd = lineEnd;
            stream.point = point;
        },
        pointRadius: function (_) {
            pointCircle = circle$2(_);
            return stream;
        },
        result: function () {
            if (string.length) {
                var result = string.join('');
                string = [];
                return result;
            }
        }
    };
    function point(x, y) {
        string.push('M', x, ',', y, pointCircle);
    }
    function pointLineStart(x, y) {
        string.push('M', x, ',', y);
        stream.point = pointLine;
    }
    function pointLine(x, y) {
        string.push('L', x, ',', y);
    }
    function lineStart() {
        stream.point = pointLineStart;
    }
    function lineEnd() {
        stream.point = point;
    }
    function lineEndPolygon() {
        string.push('Z');
    }
    return stream;
};
circle$2 = function circle$2(radius) {
    return 'm0,' + radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + -2 * radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + 2 * radius + 'z';
};
index$3 = function index$3() {
    var pointRadius = 4.5, projection, projectionStream, context, contextStream;
    function path(object) {
        if (object) {
            if (typeof pointRadius === 'function')
                contextStream.pointRadius(+pointRadius.apply(this, arguments));
            geoStream(object, projectionStream(contextStream));
        }
        return contextStream.result();
    }
    path.area = function (object) {
        geoStream(object, projectionStream(areaStream$1));
        return areaStream$1.result();
    };
    path.bounds = function (object) {
        geoStream(object, projectionStream(boundsStream$1));
        return boundsStream$1.result();
    };
    path.centroid = function (object) {
        geoStream(object, projectionStream(centroidStream$1));
        return centroidStream$1.result();
    };
    path.projection = function (_) {
        return arguments.length ? (projectionStream = (projection = _) == null ? identity$7 : _.stream, path) : projection;
    };
    path.context = function (_) {
        if (!arguments.length)
            return context;
        contextStream = (context = _) == null ? new PathString() : new PathContext(_);
        if (typeof pointRadius !== 'function')
            contextStream.pointRadius(pointRadius);
        return path;
    };
    path.pointRadius = function (_) {
        if (!arguments.length)
            return pointRadius;
        pointRadius = typeof _ === 'function' ? _ : (contextStream.pointRadius(+_), +_);
        return path;
    };
    return path.projection(null).context(null);
};
polygonContains = function polygonContains(polygon, point) {
    var lambda = point[0], phi = point[1], normal = [
            sin$1(lambda),
            -cos$1(lambda),
            0
        ], angle = 0, winding = 0;
    sum$2.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
        if (!(m = (ring = polygon[i]).length))
            continue;
        var ring, m, point0 = ring[m - 1], lambda0 = point0[0], phi0 = point0[1] / 2 + quarterPi, sinPhi0 = sin$1(phi0), cosPhi0 = cos$1(phi0);
        for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
            var point1 = ring[j], lambda1 = point1[0], phi1 = point1[1] / 2 + quarterPi, sinPhi1 = sin$1(phi1), cosPhi1 = cos$1(phi1), delta = lambda1 - lambda0, sign = delta >= 0 ? 1 : -1, absDelta = sign * delta, antimeridian = absDelta > pi$4, k = sinPhi0 * sinPhi1;
            sum$2.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
            angle += antimeridian ? delta + sign * tau$4 : delta;
            if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
                var arc = cartesianCross(cartesian(point0), cartesian(point1));
                cartesianNormalizeInPlace(arc);
                var intersection = cartesianCross(normal, arc);
                cartesianNormalizeInPlace(intersection);
                var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);
                if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
                    winding += antimeridian ^ delta >= 0 ? 1 : -1;
                }
            }
        }
    }
    return (angle < -epsilon$4 || angle < epsilon$4 && sum$2 < -epsilon$4) ^ winding & 1;
};
clip = function clip(pointVisible, clipLine, interpolate, start) {
    return function (rotate, sink) {
        var line = clipLine(sink), rotatedStart = rotate.invert(start[0], start[1]), ringBuffer = clipBuffer(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
        var clip = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function () {
                clip.point = pointRing;
                clip.lineStart = ringStart;
                clip.lineEnd = ringEnd;
                segments = [];
                polygon = [];
            },
            polygonEnd: function () {
                clip.point = point;
                clip.lineStart = lineStart;
                clip.lineEnd = lineEnd;
                segments = merge(segments);
                var startInside = polygonContains(polygon, rotatedStart);
                if (segments.length) {
                    if (!polygonStarted)
                        sink.polygonStart(), polygonStarted = true;
                    clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
                } else if (startInside) {
                    if (!polygonStarted)
                        sink.polygonStart(), polygonStarted = true;
                    sink.lineStart();
                    interpolate(null, null, 1, sink);
                    sink.lineEnd();
                }
                if (polygonStarted)
                    sink.polygonEnd(), polygonStarted = false;
                segments = polygon = null;
            },
            sphere: function () {
                sink.polygonStart();
                sink.lineStart();
                interpolate(null, null, 1, sink);
                sink.lineEnd();
                sink.polygonEnd();
            }
        };
        function point(lambda, phi) {
            var point = rotate(lambda, phi);
            if (pointVisible(lambda = point[0], phi = point[1]))
                sink.point(lambda, phi);
        }
        function pointLine(lambda, phi) {
            var point = rotate(lambda, phi);
            line.point(point[0], point[1]);
        }
        function lineStart() {
            clip.point = pointLine;
            line.lineStart();
        }
        function lineEnd() {
            clip.point = point;
            line.lineEnd();
        }
        function pointRing(lambda, phi) {
            ring.push([
                lambda,
                phi
            ]);
            var point = rotate(lambda, phi);
            ringSink.point(point[0], point[1]);
        }
        function ringStart() {
            ringSink.lineStart();
            ring = [];
        }
        function ringEnd() {
            pointRing(ring[0][0], ring[0][1]);
            ringSink.lineEnd();
            var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point;
            ring.pop();
            polygon.push(ring);
            ring = null;
            if (!n)
                return;
            if (clean & 1) {
                segment = ringSegments[0];
                if ((m = segment.length - 1) > 0) {
                    if (!polygonStarted)
                        sink.polygonStart(), polygonStarted = true;
                    sink.lineStart();
                    for (i = 0; i < m; ++i)
                        sink.point((point = segment[i])[0], point[1]);
                    sink.lineEnd();
                }
                return;
            }
            if (n > 1 && clean & 2)
                ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
            segments.push(ringSegments.filter(validSegment));
        }
        return clip;
    };
};
validSegment = function validSegment(segment) {
    return segment.length > 1;
};
compareIntersection = function compareIntersection(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfPi$3 - epsilon$4 : halfPi$3 - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi$3 - epsilon$4 : halfPi$3 - b[1]);
};
clipAntimeridianLine = function clipAntimeridianLine(stream) {
    var lambda0 = NaN, phi0 = NaN, sign0 = NaN, clean;
    return {
        lineStart: function () {
            stream.lineStart();
            clean = 1;
        },
        point: function (lambda1, phi1) {
            var sign1 = lambda1 > 0 ? pi$4 : -pi$4, delta = abs(lambda1 - lambda0);
            if (abs(delta - pi$4) < epsilon$4) {
                stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$3 : -halfPi$3);
                stream.point(sign0, phi0);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi0);
                stream.point(lambda1, phi0);
                clean = 0;
            } else if (sign0 !== sign1 && delta >= pi$4) {
                if (abs(lambda0 - sign0) < epsilon$4)
                    lambda0 -= sign0 * epsilon$4;
                if (abs(lambda1 - sign1) < epsilon$4)
                    lambda1 -= sign1 * epsilon$4;
                phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
                stream.point(sign0, phi0);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi0);
                clean = 0;
            }
            stream.point(lambda0 = lambda1, phi0 = phi1);
            sign0 = sign1;
        },
        lineEnd: function () {
            stream.lineEnd();
            lambda0 = phi0 = NaN;
        },
        clean: function () {
            return 2 - clean;
        }
    };
};
clipAntimeridianIntersect = function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    var cosPhi0, cosPhi1, sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
    return abs(sinLambda0Lambda1) > epsilon$4 ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1) - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
};
clipAntimeridianInterpolate = function clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;
    if (from == null) {
        phi = direction * halfPi$3;
        stream.point(-pi$4, phi);
        stream.point(0, phi);
        stream.point(pi$4, phi);
        stream.point(pi$4, 0);
        stream.point(pi$4, -phi);
        stream.point(0, -phi);
        stream.point(-pi$4, -phi);
        stream.point(-pi$4, 0);
        stream.point(-pi$4, phi);
    } else if (abs(from[0] - to[0]) > epsilon$4) {
        var lambda = from[0] < to[0] ? pi$4 : -pi$4;
        phi = direction * lambda / 2;
        stream.point(-lambda, phi);
        stream.point(0, phi);
        stream.point(lambda, phi);
    } else {
        stream.point(to[0], to[1]);
    }
};
clipCircle = function clipCircle(radius, delta) {
    var cr = cos$1(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > epsilon$4;
    function interpolate(from, to, direction, stream) {
        circleStream(stream, radius, delta, direction, from, to);
    }
    function visible(lambda, phi) {
        return cos$1(lambda) * cos$1(phi) > cr;
    }
    function clipLine(stream) {
        var point0, c0, v0, v00, clean;
        return {
            lineStart: function () {
                v00 = v0 = false;
                clean = 1;
            },
            point: function (lambda, phi) {
                var point1 = [
                        lambda,
                        phi
                    ], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi$4 : -pi$4), phi) : 0;
                if (!point0 && (v00 = v0 = v))
                    stream.lineStart();
                if (v !== v0) {
                    point2 = intersect(point0, point1);
                    if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
                        point1[0] += epsilon$4;
                        point1[1] += epsilon$4;
                        v = visible(point1[0], point1[1]);
                    }
                }
                if (v !== v0) {
                    clean = 0;
                    if (v) {
                        stream.lineStart();
                        point2 = intersect(point1, point0);
                        stream.point(point2[0], point2[1]);
                    } else {
                        point2 = intersect(point0, point1);
                        stream.point(point2[0], point2[1]);
                        stream.lineEnd();
                    }
                    point0 = point2;
                } else if (notHemisphere && point0 && smallRadius ^ v) {
                    var t;
                    if (!(c & c0) && (t = intersect(point1, point0, true))) {
                        clean = 0;
                        if (smallRadius) {
                            stream.lineStart();
                            stream.point(t[0][0], t[0][1]);
                            stream.point(t[1][0], t[1][1]);
                            stream.lineEnd();
                        } else {
                            stream.point(t[1][0], t[1][1]);
                            stream.lineEnd();
                            stream.lineStart();
                            stream.point(t[0][0], t[0][1]);
                        }
                    }
                }
                if (v && (!point0 || !pointEqual(point0, point1))) {
                    stream.point(point1[0], point1[1]);
                }
                point0 = point1, v0 = v, c0 = c;
            },
            lineEnd: function () {
                if (v0)
                    stream.lineEnd();
                point0 = null;
            },
            clean: function () {
                return clean | (v00 && v0) << 1;
            }
        };
    }
    function intersect(a, b, two) {
        var pa = cartesian(a), pb = cartesian(b);
        var n1 = [
                1,
                0,
                0
            ], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
        if (!determinant)
            return !two && a;
        var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A = cartesianScale(n1, c1), B = cartesianScale(n2, c2);
        cartesianAddInPlace(A, B);
        var u = n1xn2, w = cartesianDot(A, u), uu = cartesianDot(u, u), t2 = w * w - uu * (cartesianDot(A, A) - 1);
        if (t2 < 0)
            return;
        var t = sqrt$1(t2), q = cartesianScale(u, (-w - t) / uu);
        cartesianAddInPlace(q, A);
        q = spherical(q);
        if (!two)
            return q;
        var lambda0 = a[0], lambda1 = b[0], phi0 = a[1], phi1 = b[1], z;
        if (lambda1 < lambda0)
            z = lambda0, lambda0 = lambda1, lambda1 = z;
        var delta = lambda1 - lambda0, polar = abs(delta - pi$4) < epsilon$4, meridian = polar || delta < epsilon$4;
        if (!polar && phi1 < phi0)
            z = phi0, phi0 = phi1, phi1 = z;
        if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$4 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi$4 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
            var q1 = cartesianScale(u, (-w + t) / uu);
            cartesianAddInPlace(q1, A);
            return [
                q,
                spherical(q1)
            ];
        }
    }
    function code(lambda, phi) {
        var r = smallRadius ? radius : pi$4 - radius, code = 0;
        if (lambda < -r)
            code |= 1;
        else if (lambda > r)
            code |= 2;
        if (phi < -r)
            code |= 4;
        else if (phi > r)
            code |= 8;
        return code;
    }
    return clip(visible, clipLine, interpolate, smallRadius ? [
        0,
        -radius
    ] : [
        -pi$4,
        radius - pi$4
    ]);
};
transform$1 = function transform$1(prototype) {
    return {
        stream: transform$2(prototype)
    };
};
transform$2 = function transform$2(prototype) {
    function T() {
    }
    var p = T.prototype = Object.create(Transform$1.prototype);
    for (var k in prototype)
        p[k] = prototype[k];
    return function (stream) {
        var t = new T();
        t.stream = stream;
        return t;
    };
};
Transform$1 = function Transform$1() {
};
fit = function fit(project, extent, object) {
    var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], clip = project.clipExtent && project.clipExtent();
    project.scale(150).translate([
        0,
        0
    ]);
    if (clip != null)
        project.clipExtent(null);
    geoStream(object, project.stream(boundsStream$1));
    var b = boundsStream$1.result(), k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    if (clip != null)
        project.clipExtent(clip);
    return project.scale(k * 150).translate([
        x,
        y
    ]);
};
fitSize = function fitSize(project) {
    return function (size, object) {
        return fit(project, [
            [
                0,
                0
            ],
            size
        ], object);
    };
};
fitExtent = function fitExtent(project) {
    return function (extent, object) {
        return fit(project, extent, object);
    };
};
resample = function resample(project, delta2) {
    return +delta2 ? resample$1(project, delta2) : resampleNone(project);
};
resampleNone = function resampleNone(project) {
    return transform$2({
        point: function (x, y) {
            x = project(x, y);
            this.stream.point(x[0], x[1]);
        }
    });
};
resample$1 = function resample$1(project, delta2) {
    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
        var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
        if (d2 > 4 * delta2 && depth--) {
            var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = sqrt$1(a * a + b * b + c * c), phi2 = asin$1(c /= m), lambda2 = abs(abs(c) - 1) < epsilon$4 || abs(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a), p = project(lambda2, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
            if (dz * dz / d2 > delta2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
                stream.point(x2, y2);
                resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
            }
        }
    }
    return function (stream) {
        var lambda00, x00, y00, a00, b00, c00, lambda0, x0, y0, a0, b0, c0;
        var resampleStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function () {
                stream.polygonStart();
                resampleStream.lineStart = ringStart;
            },
            polygonEnd: function () {
                stream.polygonEnd();
                resampleStream.lineStart = lineStart;
            }
        };
        function point(x, y) {
            x = project(x, y);
            stream.point(x[0], x[1]);
        }
        function lineStart() {
            x0 = NaN;
            resampleStream.point = linePoint;
            stream.lineStart();
        }
        function linePoint(lambda, phi) {
            var c = cartesian([
                    lambda,
                    phi
                ]), p = project(lambda, phi);
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
            stream.point(x0, y0);
        }
        function lineEnd() {
            resampleStream.point = point;
            stream.lineEnd();
        }
        function ringStart() {
            lineStart();
            resampleStream.point = ringPoint;
            resampleStream.lineEnd = ringEnd;
        }
        function ringPoint(lambda, phi) {
            linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
            resampleStream.point = linePoint;
        }
        function ringEnd() {
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
            resampleStream.lineEnd = lineEnd;
            lineEnd();
        }
        return resampleStream;
    };
};
projection = function projection(project) {
    return projectionMutator(function () {
        return project;
    })();
};
projectionMutator = function projectionMutator(projectAt) {
    var project, k = 150, x = 480, y = 250, dx, dy, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, theta = null, preclip = clipAntimeridian, x0 = null, y0, x1, y1, postclip = identity$7, delta2 = 0.5, projectResample = resample(projectTransform, delta2), cache, cacheStream;
    function projection(point) {
        point = projectRotate(point[0] * radians, point[1] * radians);
        return [
            point[0] * k + dx,
            dy - point[1] * k
        ];
    }
    function invert(point) {
        point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
        return point && [
            point[0] * degrees$1,
            point[1] * degrees$1
        ];
    }
    function projectTransform(x, y) {
        return x = project(x, y), [
            x[0] * k + dx,
            dy - x[1] * k
        ];
    }
    projection.stream = function (stream) {
        return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
    };
    projection.clipAngle = function (_) {
        return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
    };
    projection.clipExtent = function (_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    projection.scale = function (_) {
        return arguments.length ? (k = +_, recenter()) : k;
    };
    projection.translate = function (_) {
        return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [
            x,
            y
        ];
    };
    projection.center = function (_) {
        return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [
            lambda * degrees$1,
            phi * degrees$1
        ];
    };
    projection.rotate = function (_) {
        return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [
            deltaLambda * degrees$1,
            deltaPhi * degrees$1,
            deltaGamma * degrees$1
        ];
    };
    projection.precision = function (_) {
        return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);
    };
    projection.fitExtent = fitExtent(projection);
    projection.fitSize = fitSize(projection);
    function recenter() {
        projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
        var center = project(lambda, phi);
        dx = x - center[0] * k;
        dy = y + center[1] * k;
        return reset();
    }
    function reset() {
        cache = cacheStream = null;
        return projection;
    }
    return function () {
        project = projectAt.apply(this, arguments);
        projection.invert = project.invert && invert;
        return recenter();
    };
};
conicProjection = function conicProjection(projectAt) {
    var phi0 = 0, phi1 = pi$4 / 3, m = projectionMutator(projectAt), p = m(phi0, phi1);
    p.parallels = function (_) {
        return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [
            phi0 * degrees$1,
            phi1 * degrees$1
        ];
    };
    return p;
};
conicEqualAreaRaw = function conicEqualAreaRaw(y0, y1) {
    var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2, c = 1 + sy0 * (2 * n - sy0), r0 = sqrt$1(c) / n;
    function project(x, y) {
        var r = sqrt$1(c - 2 * n * sin$1(y)) / n;
        return [
            r * sin$1(x *= n),
            r0 - r * cos$1(x)
        ];
    }
    project.invert = function (x, y) {
        var r0y = r0 - y;
        return [
            atan2(x, r0y) / n,
            asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))
        ];
    };
    return project;
};
conicEqualArea = function conicEqualArea() {
    return conicProjection(conicEqualAreaRaw).scale(155.424).center([
        0,
        33.6442
    ]);
};
albers = function albers() {
    return conicEqualArea().parallels([
        29.5,
        45.5
    ]).scale(1070).translate([
        480,
        250
    ]).rotate([
        96,
        0
    ]).center([
        -0.6,
        38.7
    ]);
};
multiplex = function multiplex(streams) {
    var n = streams.length;
    return {
        point: function (x, y) {
            var i = -1;
            while (++i < n)
                streams[i].point(x, y);
        },
        sphere: function () {
            var i = -1;
            while (++i < n)
                streams[i].sphere();
        },
        lineStart: function () {
            var i = -1;
            while (++i < n)
                streams[i].lineStart();
        },
        lineEnd: function () {
            var i = -1;
            while (++i < n)
                streams[i].lineEnd();
        },
        polygonStart: function () {
            var i = -1;
            while (++i < n)
                streams[i].polygonStart();
        },
        polygonEnd: function () {
            var i = -1;
            while (++i < n)
                streams[i].polygonEnd();
        }
    };
};
albersUsa = function albersUsa() {
    var cache, cacheStream, lower48 = albers(), lower48Point, alaska = conicEqualArea().rotate([
            154,
            0
        ]).center([
            -2,
            58.5
        ]).parallels([
            55,
            65
        ]), alaskaPoint, hawaii = conicEqualArea().rotate([
            157,
            0
        ]).center([
            -3,
            19.9
        ]).parallels([
            8,
            18
        ]), hawaiiPoint, point, pointStream = {
            point: function (x, y) {
                point = [
                    x,
                    y
                ];
            }
        };
    function albersUsa(coordinates) {
        var x = coordinates[0], y = coordinates[1];
        return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
    }
    albersUsa.invert = function (coordinates) {
        var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
        return (y >= 0.12 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function (stream) {
        return cache && cacheStream === stream ? cache : cache = multiplex([
            lower48.stream(cacheStream = stream),
            alaska.stream(stream),
            hawaii.stream(stream)
        ]);
    };
    albersUsa.precision = function (_) {
        if (!arguments.length)
            return lower48.precision();
        lower48.precision(_), alaska.precision(_), hawaii.precision(_);
        return albersUsa;
    };
    albersUsa.scale = function (_) {
        if (!arguments.length)
            return lower48.scale();
        lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
        return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function (_) {
        if (!arguments.length)
            return lower48.translate();
        var k = lower48.scale(), x = +_[0], y = +_[1];
        lower48Point = lower48.translate(_).clipExtent([
            [
                x - 0.455 * k,
                y - 0.238 * k
            ],
            [
                x + 0.455 * k,
                y + 0.238 * k
            ]
        ]).stream(pointStream);
        alaskaPoint = alaska.translate([
            x - 0.307 * k,
            y + 0.201 * k
        ]).clipExtent([
            [
                x - 0.425 * k + epsilon$4,
                y + 0.12 * k + epsilon$4
            ],
            [
                x - 0.214 * k - epsilon$4,
                y + 0.234 * k - epsilon$4
            ]
        ]).stream(pointStream);
        hawaiiPoint = hawaii.translate([
            x - 0.205 * k,
            y + 0.212 * k
        ]).clipExtent([
            [
                x - 0.214 * k + epsilon$4,
                y + 0.166 * k + epsilon$4
            ],
            [
                x - 0.115 * k - epsilon$4,
                y + 0.234 * k - epsilon$4
            ]
        ]).stream(pointStream);
        return albersUsa;
    };
    albersUsa.fitExtent = fitExtent(albersUsa);
    albersUsa.fitSize = fitSize(albersUsa);
    return albersUsa.scale(1070);
};
azimuthalRaw = function azimuthalRaw(scale) {
    return function (x, y) {
        var cx = cos$1(x), cy = cos$1(y), k = scale(cx * cy);
        return [
            k * cy * sin$1(x),
            k * sin$1(y)
        ];
    };
};
azimuthalInvert = function azimuthalInvert(angle) {
    return function (x, y) {
        var z = sqrt$1(x * x + y * y), c = angle(z), sc = sin$1(c), cc = cos$1(c);
        return [
            atan2(x * sc, z * cc),
            asin$1(z && y * sc / z)
        ];
    };
};
azimuthalEqualArea = function azimuthalEqualArea() {
    return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 0.001);
};
azimuthalEquidistant = function azimuthalEquidistant() {
    return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 0.001);
};
mercatorRaw = function mercatorRaw(lambda, phi) {
    return [
        lambda,
        log$1(tan((halfPi$3 + phi) / 2))
    ];
};
mercator = function mercator() {
    return mercatorProjection(mercatorRaw).scale(961 / tau$4);
};
mercatorProjection = function mercatorProjection(project) {
    var m = projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function (_) {
        return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();
    };
    m.translate = function (_) {
        return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();
    };
    m.clipExtent = function (_) {
        if (!arguments.length)
            return clipAuto ? null : clipExtent();
        if (clipAuto = _ == null) {
            var k = pi$4 * scale(), t = translate();
            _ = [
                [
                    t[0] - k,
                    t[1] - k
                ],
                [
                    t[0] + k,
                    t[1] + k
                ]
            ];
        }
        clipExtent(_);
        return m;
    };
    return m.clipExtent(null);
};
tany = function tany(y) {
    return tan((halfPi$3 + y) / 2);
};
conicConformalRaw = function conicConformalRaw(y0, y1) {
    var cy0 = cos$1(y0), n = y0 === y1 ? sin$1(y0) : log$1(cy0 / cos$1(y1)) / log$1(tany(y1) / tany(y0)), f = cy0 * pow$1(tany(y0), n) / n;
    if (!n)
        return mercatorRaw;
    function project(x, y) {
        if (f > 0) {
            if (y < -halfPi$3 + epsilon$4)
                y = -halfPi$3 + epsilon$4;
        } else {
            if (y > halfPi$3 - epsilon$4)
                y = halfPi$3 - epsilon$4;
        }
        var r = f / pow$1(tany(y), n);
        return [
            r * sin$1(n * x),
            f - r * cos$1(n * x)
        ];
    }
    project.invert = function (x, y) {
        var fy = f - y, r = sign$1(n) * sqrt$1(x * x + fy * fy);
        return [
            atan2(x, fy) / n,
            2 * atan(pow$1(f / r, 1 / n)) - halfPi$3
        ];
    };
    return project;
};
conicConformal = function conicConformal() {
    return conicProjection(conicConformalRaw).scale(109.5).parallels([
        30,
        30
    ]);
};
equirectangularRaw = function equirectangularRaw(lambda, phi) {
    return [
        lambda,
        phi
    ];
};
equirectangular = function equirectangular() {
    return projection(equirectangularRaw).scale(152.63);
};
conicEquidistantRaw = function conicEquidistantRaw(y0, y1) {
    var cy0 = cos$1(y0), n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0), g = cy0 / n + y0;
    if (abs(n) < epsilon$4)
        return equirectangularRaw;
    function project(x, y) {
        var gy = g - y, nx = n * x;
        return [
            gy * sin$1(nx),
            g - gy * cos$1(nx)
        ];
    }
    project.invert = function (x, y) {
        var gy = g - y;
        return [
            atan2(x, gy) / n,
            g - sign$1(n) * sqrt$1(x * x + gy * gy)
        ];
    };
    return project;
};
conicEquidistant = function conicEquidistant() {
    return conicProjection(conicEquidistantRaw).scale(131.154).center([
        0,
        13.9389
    ]);
};
gnomonicRaw = function gnomonicRaw(x, y) {
    var cy = cos$1(y), k = cos$1(x) * cy;
    return [
        cy * sin$1(x) / k,
        sin$1(y) / k
    ];
};
gnomonic = function gnomonic() {
    return projection(gnomonicRaw).scale(144.049).clipAngle(60);
};
orthographicRaw = function orthographicRaw(x, y) {
    return [
        cos$1(y) * sin$1(x),
        sin$1(y)
    ];
};
orthographic = function orthographic() {
    return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon$4);
};
stereographicRaw = function stereographicRaw(x, y) {
    var cy = cos$1(y), k = 1 + cos$1(x) * cy;
    return [
        cy * sin$1(x) / k,
        sin$1(y) / k
    ];
};
stereographic = function stereographic() {
    return projection(stereographicRaw).scale(250).clipAngle(142);
};
transverseMercatorRaw = function transverseMercatorRaw(lambda, phi) {
    return [
        log$1(tan((halfPi$3 + phi) / 2)),
        -lambda
    ];
};
transverseMercator = function transverseMercator() {
    var m = mercatorProjection(transverseMercatorRaw), center = m.center, rotate = m.rotate;
    m.center = function (_) {
        return arguments.length ? center([
            -_[1],
            _[0]
        ]) : (_ = center(), [
            _[1],
            -_[0]
        ]);
    };
    m.rotate = function (_) {
        return arguments.length ? rotate([
            _[0],
            _[1],
            _.length > 2 ? _[2] + 90 : 90
        ]) : (_ = rotate(), [
            _[0],
            _[1],
            _[2] - 90
        ]);
    };
    return rotate([
        0,
        0,
        90
    ]).scale(159.155);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
exports = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    ascending = ($__.fs.ascending_5 = function ascending(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;});
    bisector = ($__.fs.bisector_6 = function bisector(compare) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
compare = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (compare.length, 2) === 1;
    return $__.os.oid1 = {
        'left': ($__.fs.J$__v2246113107_4_839 = function J$__v2246113107_4(a, x, lo, hi) {
var vvv_return, vvv_switch, mid;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], x = arguments[1], lo = arguments[2], hi = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (lo == null)
    lo = 0;
if (hi == null)
    hi = a.length;
while (lo < hi) {
    mid = lo + hi >>> 1;
    if (compare(a[mid], x) < 0)
        lo = mid + 1;
    else
        hi = mid;
}
return lo;}),
        'right': ($__.fs.J$__v2246113107_6_840 = function J$__v2246113107_6(a, x, lo, hi) {
var vvv_return, vvv_switch, mid;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], x = arguments[1], lo = arguments[2], hi = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (lo == null)
    lo = 0;
if (hi == null)
    hi = a.length;
while (lo < hi) {
    mid = lo + hi >>> 1;
    if (compare(a[mid], x) > 0)
        hi = mid;
    else
        lo = mid + 1;
}
return lo;})
    };
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (compare.length === 1)
    compare = ascendingComparator(compare);
return {
    left: function (a, x, lo, hi) {
        if (lo == null)
            lo = 0;
        if (hi == null)
            hi = a.length;
        while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) < 0)
                lo = mid + 1;
            else
                hi = mid;
        }
        return lo;
    },
    right: function (a, x, lo, hi) {
        if (lo == null)
            lo = 0;
        if (hi == null)
            hi = a.length;
        while (lo < hi) {
            var mid = lo + hi >>> 1;
            if (compare(a[mid], x) > 0)
                hi = mid;
            else
                lo = mid + 1;
        }
        return lo;
    }
};});
    ascendingComparator = ($__.fs.ascendingComparator_7 = function ascendingComparator(f) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
f = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (d, x) {
    return ascending(f(d), x);
};});
    descending = ($__.fs.descending_8 = function descending(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;});
    number = ($__.fs.number_9 = function number(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x === null ? NaN : +x;});
    variance = ($__.fs.variance_10 = function variance(array, f) {
var vvv_return, vvv_switch, n, m, a, d, s, i, j;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = array.length;
m = 0;
s = 0;
i = -1;
j = 0;
if (f == null) {
    while (++i < n) {
        if (!isNaN(a = number(array[i]))) {
            d = a - m;
            m += d / ++j;
            s += d * (a - m);
        }
    }
} else {
    while (++i < n) {
        if (!isNaN(a = number(f(array[i], i, array)))) {
            d = a - m;
            m += d / ++j;
            s += d * (a - m);
        }
    }
}
if (j > 1)
    return s / (j - 1);});
    deviation = ($__.fs.deviation_11 = function deviation(array, f) {
var vvv_return, vvv_switch, v;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
v = variance(array, f);
return v ? Math.sqrt(v) : v;});
    extent = ($__.fs.extent_12 = function extent(array, f) {
var vvv_return, vvv_switch, i, n, a, b, c;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = -1;
n = array.length;
if (f == null) {
    while (++i < n)
        if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
    }
    while (++i < n)
        if ((b = array[i]) != null) {
        if (a > b)
            a = b;
        if (c < b)
            c = b;
    }
} else {
    while (++i < n)
        if ((b = f(array[i], i, array)) != null && b >= b) {
        a = c = b;
        break;
    }
    while (++i < n)
        if ((b = f(array[i], i, array)) != null) {
        if (a > b)
            a = b;
        if (c < b)
            c = b;
    }
}
return [
    a,
    c
];});
    constant = ($__.fs.constant_13 = function constant(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    identity = ($__.fs.identity_14 = function identity(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x;});
    range = ($__.fs.J$__v2246113107_22_15 = function J$__v2246113107_22(start, stop, step) {
var vvv_return, vvv_switch, i, n, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
i = -1;
n = Math.max(0, Math.ceil((stop - start) / step)) | 0;
range = new Array(n);
while (++i < n) {
    range[i] = start + i * step;
}
return range;});
    ticks = ($__.fs.ticks_16 = function ticks(start, stop, count) {
var vvv_return, vvv_switch, step;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], count = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = tickStep(start, stop, count);
return range(Math.ceil(start / step) * step, Math.floor(stop / step) * step + step / 2, step);});
    tickStep = ($__.fs.tickStep_17 = function tickStep(start, stop, count) {
var vvv_return, vvv_switch, step0, step1, error;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], count = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step0 = Math.abs(stop - start) / Math.max(0, count);
step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10));
error = step0 / step1;
if (error >= e10)
    step1 *= 10;
else if (error >= e5)
    step1 *= 5;
else if (error >= e2)
    step1 *= 2;
return stop < start ? -step1 : step1;});
    sturges = ($__.fs.sturges_18 = function sturges(values) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
values = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.ceil(Math.log(values.length) / Math.LN2) + 1;});
    histogram = ($__.fs.histogram_19 = function histogram() {
var vvv_return, vvv_switch, value, domain, threshold, histogram;
histogram = function histogram(data) {
    var i, n = data.length, x, values = new Array(n);
    for (i = 0; i < n; ++i) {
        values[i] = value(data[i], i, data);
    }
    var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
    if (!Array.isArray(tz))
        tz = ticks(x0, x1, tz);
    var m = tz.length;
    while (tz[0] <= x0)
        tz.shift(), --m;
    while (tz[m - 1] >= x1)
        tz.pop(), --m;
    var bins = new Array(m + 1), bin;
    for (i = 0; i <= m; ++i) {
        bin = bins[i] = [];
        bin.x0 = i > 0 ? tz[i - 1] : x0;
        bin.x1 = i < m ? tz[i] : x1;
    }
    for (i = 0; i < n; ++i) {
        x = values[i];
        if (x0 <= x && x <= x1) {
            bins[bisectRight(tz, x, 0, m)].push(data[i]);
        }
    }
    return bins;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
value = identity;
domain = extent;
threshold = sturges;
histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === 'function' ? _ : constant(_), histogram) : value;
};
histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === 'function' ? _ : constant([
        _[0],
        _[1]
    ]), histogram) : domain;
};
histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === 'function' ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
};
return histogram;});
    threshold = ($__.fs.threshold_20 = function threshold(array, p, f) {
var vvv_return, vvv_switch, n, h, i, a, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], p = arguments[1], f = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (f == null)
    f = number;
if (!(n = array.length))
    return;
if ((p = +p) <= 0 || n < 2)
    return +f(array[0], 0, array);
if (p >= 1)
    return +f(array[n - 1], n - 1, array);
h = (n - 1) * p;
i = Math.floor(h);
a = +f(array[i], i, array);
b = +f(array[i + 1], i + 1, array);
return a + (b - a) * (h - i);});
    freedmanDiaconis = ($__.fs.freedmanDiaconis_21 = function freedmanDiaconis(values, min, max) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
values = arguments[0], min = arguments[1], max = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
values = map.call(values, number).sort(ascending);
return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));});
    scott = ($__.fs.scott_22 = function scott(values, min, max) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
values = arguments[0], min = arguments[1], max = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));});
    max = ($__.fs.max_23 = function max(array, f) {
var vvv_return, vvv_switch, i, n, a, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = -1;
n = array.length;
if (f == null) {
    while (++i < n)
        if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
    }
    while (++i < n)
        if ((b = array[i]) != null && b > a)
        a = b;
} else {
    while (++i < n)
        if ((b = f(array[i], i, array)) != null && b >= b) {
        a = b;
        break;
    }
    while (++i < n)
        if ((b = f(array[i], i, array)) != null && b > a)
        a = b;
}
return a;});
    mean = ($__.fs.mean_24 = function mean(array, f) {
var vvv_return, vvv_switch, s, n, a, i, j;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = 0;
n = array.length;
i = -1;
j = n;
if (f == null) {
    while (++i < n)
        if (!isNaN(a = number(array[i])))
        s += a;
    else
        --j;
} else {
    while (++i < n)
        if (!isNaN(a = number(f(array[i], i, array))))
        s += a;
    else
        --j;
}
if (j)
    return s / j;});
    median = ($__.fs.median_25 = function median(array, f) {
var vvv_return, vvv_switch, numbers, n, a, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
numbers = [];
n = array.length;
i = -1;
if (f == null) {
    while (++i < n)
        if (!isNaN(a = number(array[i])))
        numbers.push(a);
} else {
    while (++i < n)
        if (!isNaN(a = number(f(array[i], i, array))))
        numbers.push(a);
}
return threshold(numbers.sort(ascending), 0.5);});
    merge = ($__.fs.merge_26 = function merge(arrays) {
var vvv_return, vvv_switch, n, m, i, j, merged, array;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arrays = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = arrays.length;
i = -1;
j = 0;
while (++i < n)
    j += arrays[i].length;
merged = new Array(j);
while (--n >= 0) {
    array = arrays[n];
    m = array.length;
    while (--m >= 0) {
        merged[--j] = array[m];
    }
}
return merged;});
    min = ($__.fs.min_27 = function min(array, f) {
var vvv_return, vvv_switch, i, n, a, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = -1;
n = array.length;
if (f == null) {
    while (++i < n)
        if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
    }
    while (++i < n)
        if ((b = array[i]) != null && a > b)
        a = b;
} else {
    while (++i < n)
        if ((b = f(array[i], i, array)) != null && b >= b) {
        a = b;
        break;
    }
    while (++i < n)
        if ((b = f(array[i], i, array)) != null && a > b)
        a = b;
}
return a;});
    pairs = ($__.fs.J$__v2246113107_43_28 = function J$__v2246113107_43(array) {
var vvv_return, vvv_switch, i, n, p, pairs;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = 0;
n = array.length - 1;
p = array[0];
pairs = new Array(n < 0 ? 0 : n);
while (i < n)
    pairs[i] = [
    p,
    p = array[++i]
];
return pairs;});
    permute = ($__.fs.permute_29 = function permute(array, indexes) {
var vvv_return, vvv_switch, i, permutes;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], indexes = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = indexes.length;
permutes = new Array(i);
while (i--)
    permutes[i] = array[indexes[i]];
return permutes;});
    scan = ($__.fs.scan_30 = function scan(array, compare) {
var vvv_return, vvv_switch, i, n, j, xi, xj;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], compare = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!(n = array.length))
    return;
i = 0;
j = 0;
xj = array[j];
if (!compare)
    compare = ascending;
while (++i < n)
    if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0)
    xj = xi, j = i;
if (compare(xj, xj) === 0)
    return j;});
    shuffle = ($__.fs.shuffle_31 = function shuffle(array, i0, i1) {
var vvv_return, vvv_switch, m, t, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], i0 = arguments[1], i1 = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0);
while (m) {
    i = Math.random() * m-- | 0;
    t = array[m + i0];
    array[m + i0] = array[i + i0];
    array[i + i0] = t;
}
return array;});
    sum = ($__.fs.sum_32 = function sum(array, f) {
var vvv_return, vvv_switch, s, n, a, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = 0;
n = array.length;
i = -1;
if (f == null) {
    while (++i < n)
        if (a = +array[i])
        s += a;
} else {
    while (++i < n)
        if (a = +f(array[i], i, array))
        s += a;
}
return s;});
    transpose = ($__.fs.J$__v2246113107_49_33 = function J$__v2246113107_49(matrix) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
matrix = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!(n = matrix.length))
    return [];
for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
        row[j] = matrix[j][i];
    }
}
return transpose;});
    length = ($__.fs.length_34 = function length(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.length;});
    zip = ($__.fs.zip_35 = function zip() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return transpose(arguments);});
    Map = ($__.fs.Map_36 = function Map() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');});
    map$1 = ($__.fs.map$1_37 = function map$1(object, f) {
var vvv_return, vvv_switch, map, i, n, o;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
map = new Map();
if (object instanceof Map)
    object.each(function (value, key) {
    map.set(key, value);
});
else if (Array.isArray(object)) {
    i = -1;
    n = object.length;
    if (f == null)
        while (++i < n)
        map.set(i, object[i]);
    else
        while (++i < n)
        map.set(f(o = object[i], i, object), o);
} else if (object)
    for (var key in object)
    map.set(key, object[key]);
return map;});
    nest = ($__.fs.J$__v2246113107_101_38 = function J$__v2246113107_101() {
var vvv_return, vvv_switch, keys, sortKeys, sortValues, rollup, nest, apply, entries;
apply = function apply(array, depth, createResult, setResult) {
    if (depth >= keys.length)
        return rollup != null ? rollup(array) : sortValues != null ? array.sort(sortValues) : array;
    var i = -1, n = array.length, key = keys[depth++], keyValue, value, valuesByKey = map$1(), values, result = createResult();
    while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(value = array[i]) + '')) {
            values.push(value);
        } else {
            valuesByKey.set(keyValue, [value]);
        }
    }
    valuesByKey.each(function (values, key) {
        setResult(result, key, apply(values, depth, createResult, setResult));
    });
    return result;
};
entries = function entries(map, depth) {
    if (++depth > keys.length)
        return map;
    var array, sortKey = sortKeys[depth - 1];
    if (rollup != null && depth >= keys.length)
        array = map.entries();
    else
        array = [], map.each(function (v, k) {
        array.push({
            key: k,
            values: entries(v, depth)
        });
    });
    return sortKey != null ? array.sort(function (a, b) {
        return sortKey(a.key, b.key);
    }) : array;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
keys = [];
sortKeys = [];
return nest = {
    object: function (array) {
        return apply(array, 0, createObject, setObject);
    },
    map: function (array) {
        return apply(array, 0, createMap, setMap);
    },
    entries: function (array) {
        return entries(apply(array, 0, createMap, setMap), 0);
    },
    key: function (d) {
        keys.push(d);
        return nest;
    },
    sortKeys: function (order) {
        sortKeys[keys.length - 1] = order;
        return nest;
    },
    sortValues: function (order) {
        sortValues = order;
        return nest;
    },
    rollup: function (f) {
        rollup = f;
        return nest;
    }
};});
    createObject = ($__.fs.createObject_39 = function createObject() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return {};});
    setObject = ($__.fs.setObject_40 = function setObject(object, key, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], key = arguments[1], value = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
object[key] = value;});
    createMap = ($__.fs.createMap_41 = function createMap() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return map$1();});
    setMap = ($__.fs.setMap_42 = function setMap(map, key, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
map = arguments[0], key = arguments[1], value = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
map.set(key, value);});
    Set = ($__.fs.Set_43 = function Set() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');});
    set = ($__.fs.J$__v2246113107_112_44 = function J$__v2246113107_112(object, f) {
var vvv_return, vvv_switch, set, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
set = new Set();
if (object instanceof Set)
    object.each(function (value) {
    set.add(value);
});
else if (object) {
    i = -1;
    n = object.length;
    if (f == null)
        while (++i < n)
        set.add(object[i]);
    else
        while (++i < n)
        set.add(f(object[i], i, object));
}
return set;});
    keys = ($__.fs.J$__v2246113107_114_45 = function J$__v2246113107_114(map) {
var vvv_return, vvv_switch, keys;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
map = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
keys = [];
for (var key in map)
    keys.push(key);
return keys;});
    values = ($__.fs.J$__v2246113107_116_46 = function J$__v2246113107_116(map) {
var vvv_return, vvv_switch, values;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
map = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
values = [];
for (var key in map)
    values.push(map[key]);
return values;});
    entries = ($__.fs.J$__v2246113107_118_47 = function J$__v2246113107_118(map) {
var vvv_return, vvv_switch, entries;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
map = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
entries = [];
for (var key in map)
    entries.push({
    key: key,
    value: map[key]
});
return entries;});
    uniform = ($__.fs.uniform_48 = function uniform(min, max) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
min = arguments[0], max = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
min = min == null ? 0 : +min;
max = max == null ? 1 : +max;
if (arguments.length === 1)
    max = min, min = 0;
else
    max -= min;
return function () {
    return Math.random() * max + min;
};});
    normal = ($__.fs.normal_49 = function normal(mu, sigma) {
var vvv_return, vvv_switch, x, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
mu = arguments[0], sigma = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
mu = mu == null ? 0 : +mu;
sigma = sigma == null ? 1 : +sigma;
return function () {
    var y;
    if (x != null)
        y = x, x = null;
    else
        do {
        x = Math.random() * 2 - 1;
        y = Math.random() * 2 - 1;
        r = x * x + y * y;
    } while (!r || r > 1);
    return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
};});
    logNormal = ($__.fs.logNormal_50 = function logNormal() {
var vvv_return, vvv_switch, randomNormal;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
randomNormal = normal.apply(this, arguments);
return function () {
    return Math.exp(randomNormal());
};});
    irwinHall = ($__.fs.irwinHall_51 = function irwinHall(n) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
n = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    for (var sum = 0, i = 0; i < n; ++i)
        sum += Math.random();
    return sum;
};});
    bates = ($__.fs.bates_52 = function bates(n) {
var vvv_return, vvv_switch, randomIrwinHall;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
n = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
randomIrwinHall = irwinHall(n);
return function () {
    return randomIrwinHall() / n;
};});
    exponential = ($__.fs.exponential_53 = function exponential(lambda) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return -Math.log(1 - Math.random()) / lambda;
};});
    linear = ($__.fs.linear_54 = function linear(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return +t;});
    quadIn = ($__.fs.quadIn_55 = function quadIn(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t * t;});
    quadOut = ($__.fs.quadOut_56 = function quadOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t * (2 - t);});
    quadInOut = ($__.fs.quadInOut_57 = function quadInOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;});
    cubicIn = ($__.fs.cubicIn_58 = function cubicIn(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t * t * t;});
    cubicOut = ($__.fs.cubicOut_59 = function cubicOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return --t * t * t + 1;});
    easeCubicInOut = ($__.fs.easeCubicInOut_60 = function easeCubicInOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;});
    sinIn = ($__.fs.sinIn_61 = function sinIn(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 - Math.cos(t * halfPi);});
    sinOut = ($__.fs.sinOut_62 = function sinOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.sin(t * halfPi);});
    sinInOut = ($__.fs.sinInOut_63 = function sinInOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (1 - Math.cos(pi * t)) / 2;});
    expIn = ($__.fs.expIn_64 = function expIn(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.pow(2, 10 * t - 10);});
    expOut = ($__.fs.expOut_65 = function expOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 - Math.pow(2, -10 * t);});
    expInOut = ($__.fs.expInOut_66 = function expInOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;});
    circleIn = ($__.fs.circleIn_67 = function circleIn(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 - Math.sqrt(1 - t * t);});
    circleOut = ($__.fs.circleOut_68 = function circleOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.sqrt(1 - --t * t);});
    circleInOut = ($__.fs.circleInOut_69 = function circleInOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;});
    bounceIn = ($__.fs.bounceIn_70 = function bounceIn(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 - bounceOut(1 - t);});
    bounceOut = ($__.fs.bounceOut_71 = function bounceOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;});
    bounceInOut = ($__.fs.bounceInOut_72 = function bounceInOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;});
    area = ($__.fs.J$__v2246113107_187_73 = function J$__v2246113107_187(polygon) {
var vvv_return, vvv_switch, i, n, a, b, area;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
polygon = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = -1;
n = polygon.length;
b = polygon[n - 1];
area = 0;
while (++i < n) {
    a = b;
    b = polygon[i];
    area += a[1] * b[0] - a[0] * b[1];
}
return area / 2;});
    centroid = ($__.fs.centroid_74 = function centroid(polygon) {
var vvv_return, vvv_switch, i, n, x, y, a, b, c, k;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
polygon = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = -1;
n = polygon.length;
x = 0;
y = 0;
b = polygon[n - 1];
k = 0;
while (++i < n) {
    a = b;
    b = polygon[i];
    k += c = a[0] * b[1] - b[0] * a[1];
    x += (a[0] + b[0]) * c;
    y += (a[1] + b[1]) * c;
}
return k *= 3, [
    x / k,
    y / k
];});
    cross = ($__.fs.cross_75 = function cross(a, b, c) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], c = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);});
    lexicographicOrder = ($__.fs.lexicographicOrder_76 = function lexicographicOrder(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a[0] - b[0] || a[1] - b[1];});
    computeUpperHullIndexes = ($__.fs.computeUpperHullIndexes_77 = function computeUpperHullIndexes(points) {
var vvv_return, vvv_switch, n, indexes, size;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
points = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = points.length;
indexes = [
    0,
    1
];
size = 2;
for (var i = 2; i < n; ++i) {
    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0)
        --size;
    indexes[size++] = i;
}
return indexes.slice(0, size);});
    hull = ($__.fs.J$__v2246113107_193_78 = function J$__v2246113107_193(points) {
var vvv_return, vvv_switch, i, n, sortedPoints, flippedPoints, upperIndexes, lowerIndexes, skipLeft, skipRight, hull;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
points = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if ((n = points.length) < 3)
    return null;
sortedPoints = new Array(n);
flippedPoints = new Array(n);
for (i = 0; i < n; ++i)
    sortedPoints[i] = [
    +points[i][0],
    +points[i][1],
    i
];
sortedPoints.sort(lexicographicOrder);
for (i = 0; i < n; ++i)
    flippedPoints[i] = [
    sortedPoints[i][0],
    -sortedPoints[i][1]
];
upperIndexes = computeUpperHullIndexes(sortedPoints);
lowerIndexes = computeUpperHullIndexes(flippedPoints);
skipLeft = lowerIndexes[0] === upperIndexes[0];
skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1];
hull = [];
for (i = upperIndexes.length - 1; i >= 0; --i)
    hull.push(points[sortedPoints[upperIndexes[i]][2]]);
for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i)
    hull.push(points[sortedPoints[lowerIndexes[i]][2]]);
return hull;});
    contains = ($__.fs.contains_79 = function contains(polygon, point) {
var vvv_return, vvv_switch, n, p, x, y, x0, y0, x1, y1, inside;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
polygon = arguments[0], point = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = polygon.length;
p = polygon[n - 1];
x = point[0];
y = point[1];
x0 = p[0];
y0 = p[1];
inside = false;
for (var i = 0; i < n; ++i) {
    p = polygon[i], x1 = p[0], y1 = p[1];
    if (y1 > y !== y0 > y && x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)
        inside = !inside;
    x0 = x1, y0 = y1;
}
return inside;});
    length$1 = ($__.fs.length$1_80 = function length$1(polygon) {
var vvv_return, vvv_switch, i, n, b, xa, ya, xb, yb, perimeter;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
polygon = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = -1;
n = polygon.length;
b = polygon[n - 1];
xb = b[0];
yb = b[1];
perimeter = 0;
while (++i < n) {
    xa = xb;
    ya = yb;
    b = polygon[i];
    xb = b[0];
    yb = b[1];
    xa -= xb;
    ya -= yb;
    perimeter += Math.sqrt(xa * xa + ya * ya);
}
return perimeter;});
    Path = ($__.fs.Path_81 = function Path() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._y0 = this._x1 = this._y1 = null;
this._ = [];});
    path = ($__.fs.path_82 = function path() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Path();});
    tree_add = ($__.fs.tree_add_83 = function tree_add(d) {
var vvv_return, vvv_switch, x, y;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +this._x.call(null, d);
y = +this._y.call(null, d);
return add(this.cover(x, y), x, y, d);});
    add = ($__.fs.add_84 = function add(tree, x, y, d) {
var vvv_return, vvv_switch, parent, node, leaf, x0, y0, x1, y1, xm, ym, xp, yp, right, bottom, i, j;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tree = arguments[0], x = arguments[1], y = arguments[2], d = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (isNaN(x) || isNaN(y))
    return tree;
node = tree._root;
leaf = {
    data: d
};
x0 = tree._x0;
y0 = tree._y0;
x1 = tree._x1;
y1 = tree._y1;
if (!node)
    return tree._root = leaf, tree;
while (node.length) {
    if (right = x >= (xm = (x0 + x1) / 2))
        x0 = xm;
    else
        x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2))
        y0 = ym;
    else
        y1 = ym;
    if (parent = node, !(node = node[i = bottom << 1 | right]))
        return parent[i] = leaf, tree;
}
xp = +tree._x.call(null, node.data);
yp = +tree._y.call(null, node.data);
if (x === xp && y === yp)
    return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
do {
    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
    if (right = x >= (xm = (x0 + x1) / 2))
        x0 = xm;
    else
        x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2))
        y0 = ym;
    else
        y1 = ym;
} while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));
return parent[j] = node, parent[i] = leaf, tree;});
    addAll = ($__.fs.addAll_85 = function addAll(data) {
var vvv_return, vvv_switch, d, i, n, x, y, xz, yz, x0, y0, x1, y1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
data = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = data.length;
xz = new Array(n);
yz = new Array(n);
x0 = Infinity;
y0 = Infinity;
x1 = -Infinity;
y1 = -Infinity;
for (i = 0; i < n; ++i) {
    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d)))
        continue;
    xz[i] = x;
    yz[i] = y;
    if (x < x0)
        x0 = x;
    if (x > x1)
        x1 = x;
    if (y < y0)
        y0 = y;
    if (y > y1)
        y1 = y;
}
if (x1 < x0)
    x0 = this._x0, x1 = this._x1;
if (y1 < y0)
    y0 = this._y0, y1 = this._y1;
this.cover(x0, y0).cover(x1, y1);
for (i = 0; i < n; ++i) {
    add(this, xz[i], yz[i], data[i]);
}
return this;});
    tree_cover = ($__.fs.tree_cover_86 = function tree_cover(x, y) {
var vvv_return, vvv_switch, x0, y0, x1, y1, z, node, parent, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (isNaN(x = +x) || isNaN(y = +y))
    return this;
x0 = this._x0;
y0 = this._y0;
x1 = this._x1;
y1 = this._y1;
if (isNaN(x0)) {
    x1 = (x0 = Math.floor(x)) + 1;
    y1 = (y0 = Math.floor(y)) + 1;
} else if (x0 > x || x > x1 || y0 > y || y > y1) {
    z = x1 - x0;
    node = this._root;
    switch (i = (y < (y0 + y1) / 2) << 1 | x < (x0 + x1) / 2) {
    case 0: {
            do
                parent = new Array(4), parent[i] = node, node = parent;
            while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
            break;
        }
    case 1: {
            do
                parent = new Array(4), parent[i] = node, node = parent;
            while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
            break;
        }
    case 2: {
            do
                parent = new Array(4), parent[i] = node, node = parent;
            while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
            break;
        }
    case 3: {
            do
                parent = new Array(4), parent[i] = node, node = parent;
            while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
            break;
        }
    }
    if (this._root && this._root.length)
        this._root = node;
} else
    return this;
this._x0 = x0;
this._y0 = y0;
this._x1 = x1;
this._y1 = y1;
return this;});
    tree_data = ($__.fs.tree_data_87 = function tree_data() {
var vvv_return, vvv_switch, data;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
data = [];
this.visit(function (node) {
    if (!node.length)
        do
        data.push(node.data);
    while (node = node.next);
});
return data;});
    tree_extent = ($__.fs.tree_extent_88 = function tree_extent(_) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
_ = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1]) : isNaN(this._x0) ? undefined : [
    [
        this._x0,
        this._y0
    ],
    [
        this._x1,
        this._y1
    ]
];});
    Quad = ($__.fs.Quad_89 = function Quad(node, x0, y0, x1, y1) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], x0 = arguments[1], y0 = arguments[2], x1 = arguments[3], y1 = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.node = node;
this.x0 = x0;
this.y0 = y0;
this.x1 = x1;
this.y1 = y1;});
    tree_find = ($__.fs.tree_find_90 = function tree_find(x, y, radius) {
var vvv_return, vvv_switch, data, x0, y0, x1, y1, x2, y2, x3, y3, quads, node, q, i, xm, ym, dx, dy, d2, d;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1], radius = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x0 = this._x0;
y0 = this._y0;
x3 = this._x1;
y3 = this._y1;
quads = [];
node = this._root;
if (node)
    quads.push(new Quad(node, x0, y0, x3, y3));
if (radius == null)
    radius = Infinity;
else {
    x0 = x - radius, y0 = y - radius;
    x3 = x + radius, y3 = y + radius;
    radius *= radius;
}
while (q = quads.pop()) {
    if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0)
        continue;
    if (node.length) {
        xm = (x1 + x2) / 2;
        ym = (y1 + y2) / 2;
        quads.push(new Quad(node[3], xm, ym, x2, y2), new Quad(node[2], x1, ym, xm, y2), new Quad(node[1], xm, y1, x2, ym), new Quad(node[0], x1, y1, xm, ym));
        if (i = (y >= ym) << 1 | x >= xm) {
            q = quads[quads.length - 1];
            quads[quads.length - 1] = quads[quads.length - 1 - i];
            quads[quads.length - 1 - i] = q;
        }
    } else {
        dx = x - +this._x.call(null, node.data);
        dy = y - +this._y.call(null, node.data);
        d2 = dx * dx + dy * dy;
        if (d2 < radius) {
            d = Math.sqrt(radius = d2);
            x0 = x - d, y0 = y - d;
            x3 = x + d, y3 = y + d;
            data = node.data;
        }
    }
}
return data;});
    tree_remove = ($__.fs.tree_remove_91 = function tree_remove(d) {
var vvv_return, vvv_switch, parent, node, retainer, previous, next, x0, y0, x1, y1, x, y, xm, ym, right, bottom, i, j;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d)))
    return this;
node = this._root;
x0 = this._x0;
y0 = this._y0;
x1 = this._x1;
y1 = this._y1;
if (!node)
    return this;
if (node.length)
    while (true) {
    if (right = x >= (xm = (x0 + x1) / 2))
        x0 = xm;
    else
        x1 = xm;
    if (bottom = y >= (ym = (y0 + y1) / 2))
        y0 = ym;
    else
        y1 = ym;
    if (!(parent = node, node = node[i = bottom << 1 | right]))
        return this;
    if (!node.length)
        break;
    if (parent[i + 1 & 3] || parent[i + 2 & 3] || parent[i + 3 & 3])
        retainer = parent, j = i;
}
while (node.data !== d)
    if (!(previous = node, node = node.next))
    return this;
if (next = node.next)
    delete node.next;
if (previous)
    return next ? previous.next = next : delete previous.next, this;
if (!parent)
    return this._root = next, this;
next ? parent[i] = next : delete parent[i];
if ((node = parent[0] || parent[1] || parent[2] || parent[3]) && node === (parent[3] || parent[2] || parent[1] || parent[0]) && !node.length) {
    if (retainer)
        retainer[j] = node;
    else
        this._root = node;
}
return this;});
    removeAll = ($__.fs.removeAll_92 = function removeAll(data) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
data = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var i = 0, n = data.length; i < n; ++i)
    this.remove(data[i]);
return this;});
    tree_root = ($__.fs.tree_root_93 = function tree_root() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._root;});
    tree_size = ($__.fs.tree_size_94 = function tree_size() {
var vvv_return, vvv_switch, size;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
size = 0;
this.visit(function (node) {
    if (!node.length)
        do
        ++size;
    while (node = node.next);
});
return size;});
    tree_visit = ($__.fs.tree_visit_95 = function tree_visit(callback) {
var vvv_return, vvv_switch, quads, q, node, child, x0, y0, x1, y1, xm, ym;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
quads = [];
node = this._root;
if (node)
    quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
while (q = quads.pop()) {
    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
        xm = (x0 + x1) / 2;
        ym = (y0 + y1) / 2;
        if (child = node[3])
            quads.push(new Quad(child, xm, ym, x1, y1));
        if (child = node[2])
            quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[1])
            quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[0])
            quads.push(new Quad(child, x0, y0, xm, ym));
    }
}
return this;});
    tree_visitAfter = ($__.fs.tree_visitAfter_96 = function tree_visitAfter(callback) {
var vvv_return, vvv_switch, quads, next, q, node, child, x0, y0, x1, y1, xm, ym;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
quads = [];
next = [];
if (this._root)
    quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
while (q = quads.pop()) {
    node = q.node;
    if (node.length) {
        x0 = q.x0;
        y0 = q.y0;
        x1 = q.x1;
        y1 = q.y1;
        xm = (x0 + x1) / 2;
        ym = (y0 + y1) / 2;
        if (child = node[0])
            quads.push(new Quad(child, x0, y0, xm, ym));
        if (child = node[1])
            quads.push(new Quad(child, xm, y0, x1, ym));
        if (child = node[2])
            quads.push(new Quad(child, x0, ym, xm, y1));
        if (child = node[3])
            quads.push(new Quad(child, xm, ym, x1, y1));
    }
    next.push(q);
}
while (q = next.pop()) {
    callback(q.node, q.x0, q.y0, q.x1, q.y1);
}
return this;});
    defaultX = ($__.fs.defaultX_97 = function defaultX(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d[0];});
    tree_x = ($__.fs.tree_x_98 = function tree_x(_) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
_ = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length ? (this._x = _, this) : this._x;});
    defaultY = ($__.fs.defaultY_99 = function defaultY(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d[1];});
    tree_y = ($__.fs.tree_y_100 = function tree_y(_) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
_ = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length ? (this._y = _, this) : this._y;});
    quadtree = ($__.fs.quadtree_101 = function quadtree(nodes, x, y) {
var vvv_return, vvv_switch, tree;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
nodes = arguments[0], x = arguments[1], y = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
return nodes == null ? tree : tree.addAll(nodes);});
    Quadtree = ($__.fs.Quadtree_102 = function Quadtree(x, y, x0, y0, x1, y1) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1], x0 = arguments[2], y0 = arguments[3], x1 = arguments[4], y1 = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x = x;
this._y = y;
this._x0 = x0;
this._y0 = y0;
this._x1 = x1;
this._y1 = y1;
this._root = undefined;});
    leaf_copy = ($__.fs.leaf_copy_103 = function leaf_copy(leaf) {
var vvv_return, vvv_switch, copy, next;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
leaf = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
copy = {
    data: leaf.data
};
next = copy;
while (leaf = leaf.next)
    next = next.next = {
    data: leaf.data
};
return copy;});
    Queue = ($__.fs.Queue_104 = function Queue(size) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
size = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!(size >= 1))
    throw new Error();
this._size = size;
this._call = this._error = null;
this._tasks = [];
this._data = [];
this._waiting = this._active = this._ended = this._start = 0;});
    poke = ($__.fs.poke_105 = function poke(q) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
q = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!q._start)
    try {
    start(q);
} catch (e) {
    if (q._tasks[q._ended + q._active - 1])
        abort(q, e);
}});
    start = ($__.fs.start_106 = function start(q) {
var vvv_return, vvv_switch, i, t, j, c;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
q = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
while (q._start = q._waiting && q._active < q._size) {
    i = q._ended + q._active;
    t = q._tasks[i];
    j = t.length - 1;
    c = t[j];
    t[j] = end(q, i);
    --q._waiting, ++q._active;
    t = c.apply(null, t);
    if (!q._tasks[i])
        continue;
    q._tasks[i] = t || noabort;
}});
    end = ($__.fs.end_107 = function end(q, i) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
q = arguments[0], i = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (e, r) {
    if (!q._tasks[i])
        return;
    --q._active, ++q._ended;
    q._tasks[i] = null;
    if (q._error != null)
        return;
    if (e != null) {
        abort(q, e);
    } else {
        q._data[i] = r;
        if (q._waiting)
            poke(q);
        else
            maybeNotify(q);
    }
};});
    abort = ($__.fs.abort_108 = function abort(q, e) {
var vvv_return, vvv_switch, i, t;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
q = arguments[0], e = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = q._tasks.length;
q._error = e;
q._data = undefined;
q._waiting = NaN;
while (--i >= 0) {
    if (t = q._tasks[i]) {
        q._tasks[i] = null;
        if (t.abort)
            try {
            t.abort();
        } catch (e) {
        }
    }
}
q._active = NaN;
maybeNotify(q);});
    maybeNotify = ($__.fs.maybeNotify_109 = function maybeNotify(q) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
q = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!q._active && q._call)
    q._call(q._error, q._data);});
    queue = ($__.fs.queue_110 = function queue(concurrency) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
concurrency = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Queue(arguments.length ? +concurrency : Infinity);});
    constant$1 = ($__.fs.constant$1_111 = function constant$1(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function constant() {
    return x;
};});
    arcInnerRadius = ($__.fs.arcInnerRadius_112 = function arcInnerRadius(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.innerRadius;});
    arcOuterRadius = ($__.fs.arcOuterRadius_113 = function arcOuterRadius(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.outerRadius;});
    arcStartAngle = ($__.fs.arcStartAngle_114 = function arcStartAngle(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.startAngle;});
    arcEndAngle = ($__.fs.arcEndAngle_115 = function arcEndAngle(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.endAngle;});
    arcPadAngle = ($__.fs.arcPadAngle_116 = function arcPadAngle(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d && d.padAngle;});
    asin = ($__.fs.asin_117 = function asin(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x >= 1 ? halfPi$1 : x <= -1 ? -halfPi$1 : Math.asin(x);});
    intersect = ($__.fs.intersect_118 = function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
var vvv_return, vvv_switch, x10, y10, x32, y32, t;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x0 = arguments[0], y0 = arguments[1], x1 = arguments[2], y1 = arguments[3], x2 = arguments[4], y2 = arguments[5], x3 = arguments[6], y3 = arguments[7];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x10 = x1 - x0;
y10 = y1 - y0;
x32 = x3 - x2;
y32 = y3 - y2;
t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
return [
    x0 + t * x10,
    y0 + t * y10
];});
    cornerTangents = ($__.fs.cornerTangents_119 = function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
var vvv_return, vvv_switch, x01, y01, lo, ox, oy, x11, y11, x10, y10, x00, y00, dx, dy, d2, r, D, d, cx0, cy0, cx1, cy1, dx0, dy0, dx1, dy1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x0 = arguments[0], y0 = arguments[1], x1 = arguments[2], y1 = arguments[3], r1 = arguments[4], rc = arguments[5], cw = arguments[6];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x01 = x0 - x1;
y01 = y0 - y1;
lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01);
ox = lo * y01;
oy = -lo * x01;
x11 = x0 + ox;
y11 = y0 + oy;
x10 = x1 + ox;
y10 = y1 + oy;
x00 = (x11 + x10) / 2;
y00 = (y11 + y10) / 2;
dx = x10 - x11;
dy = y10 - y11;
d2 = dx * dx + dy * dy;
r = r1 - rc;
D = x11 * y10 - x10 * y11;
d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D));
cx0 = (D * dy - dx * d) / d2;
cy0 = (-D * dx - dy * d) / d2;
cx1 = (D * dy + dx * d) / d2;
cy1 = (-D * dx + dy * d) / d2;
dx0 = cx0 - x00;
dy0 = cy0 - y00;
dx1 = cx1 - x00;
dy1 = cy1 - y00;
if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
    cx0 = cx1, cy0 = cy1;
return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
};});
    arc = ($__.fs.arc_120 = function arc() {
var vvv_return, vvv_switch, innerRadius, outerRadius, cornerRadius, padRadius, startAngle, endAngle, padAngle, context, arc;
arc = function arc() {
    var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi$1, a1 = endAngle.apply(this, arguments) - halfPi$1, da = Math.abs(a1 - a0), cw = a1 > a0;
    if (!context)
        context = buffer = path();
    if (r1 < r0)
        r = r1, r1 = r0, r0 = r;
    if (!(r1 > epsilon$1))
        context.moveTo(0, 0);
    else if (da > tau$2 - epsilon$1) {
        context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
        context.arc(0, 0, r1, a0, a1, !cw);
        if (r0 > epsilon$1) {
            context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
            context.arc(0, 0, r0, a1, a0, cw);
        }
    } else {
        var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon$1 && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)), rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
        if (rp > epsilon$1) {
            var p0 = asin(rp / r0 * Math.sin(ap)), p1 = asin(rp / r1 * Math.sin(ap));
            if ((da0 -= p0 * 2) > epsilon$1)
                p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
            else
                da0 = 0, a00 = a10 = (a0 + a1) / 2;
            if ((da1 -= p1 * 2) > epsilon$1)
                p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
            else
                da1 = 0, a01 = a11 = (a0 + a1) / 2;
        }
        var x01 = r1 * Math.cos(a01), y01 = r1 * Math.sin(a01), x10 = r0 * Math.cos(a10), y10 = r0 * Math.sin(a10);
        if (rc > epsilon$1) {
            var x11 = r1 * Math.cos(a11), y11 = r1 * Math.sin(a11), x00 = r0 * Math.cos(a00), y00 = r0 * Math.sin(a00);
            if (da < pi$2) {
                var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [
                        x10,
                        y10
                    ], ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
                rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
            }
        }
        if (!(da1 > epsilon$1))
            context.moveTo(x01, y01);
        else if (rc1 > epsilon$1) {
            t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
            t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
            context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
            if (rc1 < rc)
                context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
            else {
                context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
            }
        } else
            context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
        if (!(r0 > epsilon$1) || !(da0 > epsilon$1))
            context.lineTo(x10, y10);
        else if (rc0 > epsilon$1) {
            t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
            t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
            context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
            if (rc0 < rc)
                context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
            else {
                context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
                context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
            }
        } else
            context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer)
        return context = null, buffer + '' || null;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
innerRadius = arcInnerRadius;
outerRadius = arcOuterRadius;
cornerRadius = constant$1(0);
padRadius = null;
startAngle = arcStartAngle;
endAngle = arcEndAngle;
padAngle = arcPadAngle;
context = null;
arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$2 / 2;
    return [
        Math.cos(a) * r,
        Math.sin(a) * r
    ];
};
arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === 'function' ? _ : constant$1(+_), arc) : innerRadius;
};
arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === 'function' ? _ : constant$1(+_), arc) : outerRadius;
};
arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === 'function' ? _ : constant$1(+_), arc) : cornerRadius;
};
arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === 'function' ? _ : constant$1(+_), arc) : padRadius;
};
arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === 'function' ? _ : constant$1(+_), arc) : startAngle;
};
arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === 'function' ? _ : constant$1(+_), arc) : endAngle;
};
arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === 'function' ? _ : constant$1(+_), arc) : padAngle;
};
arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
};
return arc;});
    Linear = ($__.fs.Linear_121 = function Linear(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;});
    curveLinear = ($__.fs.curveLinear_122 = function curveLinear(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Linear(context);});
    x = ($__.fs.x_123 = function x(p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
p = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return p[0];});
    y = ($__.fs.y_124 = function y(p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
p = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return p[1];});
    line = ($__.fs.line_125 = function line() {
var vvv_return, vvv_switch, x$$, y$$, defined, context, curve, output, line;
line = function line(data) {
    var i, n = data.length, d, defined0 = false, buffer;
    if (context == null)
        output = curve(buffer = path());
    for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0)
                output.lineStart();
            else
                output.lineEnd();
        }
        if (defined0)
            output.point(+x$$(d, i, data), +y$$(d, i, data));
    }
    if (buffer)
        return output = null, buffer + '' || null;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x$$ = x;
y$$ = y;
defined = constant$1(true);
context = null;
curve = curveLinear;
output = null;
line.x = function (_) {
    return arguments.length ? (x$$ = typeof _ === 'function' ? _ : constant$1(+_), line) : x$$;
};
line.y = function (_) {
    return arguments.length ? (y$$ = typeof _ === 'function' ? _ : constant$1(+_), line) : y$$;
};
line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === 'function' ? _ : constant$1(!!_), line) : defined;
};
line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
};
line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
};
return line;});
    area$1 = ($__.fs.area$1_126 = function area$1() {
var vvv_return, vvv_switch, x0, x1, y0, y1, defined, context, curve, output, area, arealine;
area = function area(data) {
    var i, j, k, n = data.length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
    if (context == null)
        output = curve(buffer = path());
    for (i = 0; i <= n; ++i) {
        if (!(i < n && defined(d = data[i], i, data)) === defined0) {
            if (defined0 = !defined0) {
                j = i;
                output.areaStart();
                output.lineStart();
            } else {
                output.lineEnd();
                output.lineStart();
                for (k = i - 1; k >= j; --k) {
                    output.point(x0z[k], y0z[k]);
                }
                output.lineEnd();
                output.areaEnd();
            }
        }
        if (defined0) {
            x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
            output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
        }
    }
    if (buffer)
        return output = null, buffer + '' || null;
};
arealine = function arealine() {
    return line().defined(defined).curve(curve).context(context);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x0 = x;
x1 = null;
y0 = constant$1(0);
y1 = y;
defined = constant$1(true);
context = null;
curve = curveLinear;
output = null;
area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === 'function' ? _ : constant$1(+_), x1 = null, area) : x0;
};
area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === 'function' ? _ : constant$1(+_), area) : x0;
};
area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === 'function' ? _ : constant$1(+_), area) : x1;
};
area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === 'function' ? _ : constant$1(+_), y1 = null, area) : y0;
};
area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === 'function' ? _ : constant$1(+_), area) : y0;
};
area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === 'function' ? _ : constant$1(+_), area) : y1;
};
area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
};
area.lineY1 = function () {
    return arealine().x(x0).y(y1);
};
area.lineX1 = function () {
    return arealine().x(x1).y(y0);
};
area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === 'function' ? _ : constant$1(!!_), area) : defined;
};
area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
};
area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
};
return area;});
    descending$1 = ($__.fs.descending$1_127 = function descending$1(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;});
    identity$1 = ($__.fs.identity$1_128 = function identity$1(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d;});
    pie = ($__.fs.pie_129 = function pie() {
var vvv_return, vvv_switch, value, sortValues, sort, startAngle, endAngle, padAngle, pie;
pie = function pie(data) {
    var i, n = data.length, j, k, sum = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau$2, Math.max(-tau$2, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
    for (i = 0; i < n; ++i) {
        if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
            sum += v;
        }
    }
    if (sortValues != null)
        index.sort(function (i, j) {
        return sortValues(arcs[i], arcs[j]);
    });
    else if (sort != null)
        index.sort(function (i, j) {
        return sort(data[i], data[j]);
    });
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
        j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
            data: data[j],
            index: i,
            value: v,
            startAngle: a0,
            endAngle: a1,
            padAngle: p
        };
    }
    return arcs;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
value = identity$1;
sortValues = descending$1;
sort = null;
startAngle = constant$1(0);
endAngle = constant$1(tau$2);
padAngle = constant$1(0);
pie.value = function (_) {
    return arguments.length ? (value = typeof _ === 'function' ? _ : constant$1(+_), pie) : value;
};
pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
};
pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
};
pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === 'function' ? _ : constant$1(+_), pie) : startAngle;
};
pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === 'function' ? _ : constant$1(+_), pie) : endAngle;
};
pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === 'function' ? _ : constant$1(+_), pie) : padAngle;
};
return pie;});
    Radial = ($__.fs.Radial_130 = function Radial(curve) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
curve = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._curve = curve;});
    curveRadial = ($__.fs.curveRadial_131 = function curveRadial(curve) {
var vvv_return, vvv_switch, radial;
radial = function radial(context) {
    return new Radial(curve(context));
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
curve = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    radial = ($__.fs.radial_896 = function radial(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Radial(curve(context));});
    radial._curve = curve;
    return radial;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
radial._curve = curve;
return radial;});
    radialLine = ($__.fs.radialLine_132 = function radialLine(l) {
var vvv_return, vvv_switch, c;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
l = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
c = l.curve;
l.angle = l.x, delete l.x;
l.radius = l.y, delete l.y;
l.curve = function (_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
};
return l;});
    radialLine$1 = ($__.fs.radialLine$1_133 = function radialLine$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return radialLine(line().curve(curveRadialLinear));});
    radialArea = ($__.fs.radialArea_134 = function radialArea() {
var vvv_return, vvv_switch, a, c, x0, x1, y0, y1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
a = area$1().curve(curveRadialLinear);
c = a.curve;
x0 = a.lineX0;
x1 = a.lineX1;
y0 = a.lineY0;
y1 = a.lineY1;
a.angle = a.x, delete a.x;
a.startAngle = a.x0, delete a.x0;
a.endAngle = a.x1, delete a.x1;
a.radius = a.y, delete a.y;
a.innerRadius = a.y0, delete a.y0;
a.outerRadius = a.y1, delete a.y1;
a.lineStartAngle = function () {
    return radialLine(x0());
}, delete a.lineX0;
a.lineEndAngle = function () {
    return radialLine(x1());
}, delete a.lineX1;
a.lineInnerRadius = function () {
    return radialLine(y0());
}, delete a.lineY0;
a.lineOuterRadius = function () {
    return radialLine(y1());
}, delete a.lineY1;
a.curve = function (_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
};
return a;});
    symbol = ($__.fs.symbol_135 = function symbol() {
var vvv_return, vvv_switch, type, size, context, symbol;
symbol = function symbol() {
    var buffer;
    if (!context)
        context = buffer = path();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer)
        return context = null, buffer + '' || null;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
type = constant$1(circle);
size = constant$1(64);
context = null;
symbol.type = function (_) {
    return arguments.length ? (type = typeof _ === 'function' ? _ : constant$1(_), symbol) : type;
};
symbol.size = function (_) {
    return arguments.length ? (size = typeof _ === 'function' ? _ : constant$1(+_), symbol) : size;
};
symbol.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
};
return symbol;});
    noop = ($__.fs.noop_136 = function noop() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');});
    point = ($__.fs.point_137 = function point(that, x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
that = arguments[0], x = arguments[1], y = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);});
    Basis = ($__.fs.Basis_138 = function Basis(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;});
    basis = ($__.fs.basis_139 = function basis(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Basis(context);});
    BasisClosed = ($__.fs.BasisClosed_140 = function BasisClosed(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;});
    basisClosed = ($__.fs.basisClosed_141 = function basisClosed(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new BasisClosed(context);});
    BasisOpen = ($__.fs.BasisOpen_142 = function BasisOpen(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;});
    basisOpen = ($__.fs.basisOpen_143 = function basisOpen(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new BasisOpen(context);});
    Bundle = ($__.fs.Bundle_144 = function Bundle(context, beta) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], beta = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._basis = new Basis(context);
this._beta = beta;});
    point$1 = ($__.fs.point$1_145 = function point$1(that, x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
that = arguments[0], x = arguments[1], y = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);});
    Cardinal = ($__.fs.Cardinal_146 = function Cardinal(context, tension) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], tension = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;
this._k = (1 - tension) / 6;});
    CardinalClosed = ($__.fs.CardinalClosed_147 = function CardinalClosed(context, tension) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], tension = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;
this._k = (1 - tension) / 6;});
    CardinalOpen = ($__.fs.CardinalOpen_148 = function CardinalOpen(context, tension) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], tension = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;
this._k = (1 - tension) / 6;});
    point$2 = ($__.fs.point$2_149 = function point$2(that, x, y) {
var vvv_return, vvv_switch, x1, y1, x2, y2, a, n, b, m;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
that = arguments[0], x = arguments[1], y = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x1 = that._x1;
y1 = that._y1;
x2 = that._x2;
y2 = that._y2;
if (that._l01_a > epsilon$1) {
    a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a;
    n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
}
if (that._l23_a > epsilon$1) {
    b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a;
    m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
}
that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);});
    CatmullRom = ($__.fs.CatmullRom_150 = function CatmullRom(context, alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], alpha = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;
this._alpha = alpha;});
    CatmullRomClosed = ($__.fs.CatmullRomClosed_151 = function CatmullRomClosed(context, alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], alpha = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;
this._alpha = alpha;});
    CatmullRomOpen = ($__.fs.CatmullRomOpen_152 = function CatmullRomOpen(context, alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], alpha = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;
this._alpha = alpha;});
    LinearClosed = ($__.fs.LinearClosed_153 = function LinearClosed(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;});
    linearClosed = ($__.fs.linearClosed_154 = function linearClosed(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new LinearClosed(context);});
    sign = ($__.fs.sign_155 = function sign(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x < 0 ? -1 : 1;});
    slope3 = ($__.fs.slope3_156 = function slope3(that, x2, y2) {
var vvv_return, vvv_switch, h0, h1, s0, s1, p;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
that = arguments[0], x2 = arguments[1], y2 = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h0 = that._x1 - that._x0;
h1 = x2 - that._x1;
s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);
s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);
p = (s0 * h1 + s1 * h0) / (h0 + h1);
return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;});
    slope2 = ($__.fs.slope2_157 = function slope2(that, t) {
var vvv_return, vvv_switch, h;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
that = arguments[0], t = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = that._x1 - that._x0;
return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;});
    point$3 = ($__.fs.point$3_158 = function point$3(that, t0, t1) {
var vvv_return, vvv_switch, x0, y0, x1, y1, dx;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
that = arguments[0], t0 = arguments[1], t1 = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x0 = that._x0;
y0 = that._y0;
x1 = that._x1;
y1 = that._y1;
dx = (x1 - x0) / 3;
that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);});
    MonotoneX = ($__.fs.MonotoneX_159 = function MonotoneX(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;});
    MonotoneY = ($__.fs.MonotoneY_160 = function MonotoneY(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = new ReflectContext(context);});
    ReflectContext = ($__.fs.ReflectContext_161 = function ReflectContext(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;});
    monotoneX = ($__.fs.monotoneX_162 = function monotoneX(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new MonotoneX(context);});
    monotoneY = ($__.fs.monotoneY_163 = function monotoneY(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new MonotoneY(context);});
    Natural = ($__.fs.Natural_164 = function Natural(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;});
    controlPoints = ($__.fs.controlPoints_165 = function controlPoints(x) {
var vvv_return, vvv_switch, i, n, m, a, b, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = x.length - 1;
a = new Array(n);
b = new Array(n);
r = new Array(n);
a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
for (i = 1; i < n - 1; ++i)
    a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
for (i = 1; i < n; ++i)
    m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
a[n - 1] = r[n - 1] / b[n - 1];
for (i = n - 2; i >= 0; --i)
    a[i] = (r[i] - a[i + 1]) / b[i];
b[n - 1] = (x[n] + a[n - 1]) / 2;
for (i = 0; i < n - 1; ++i)
    b[i] = 2 * x[i + 1] - a[i + 1];
return [
    a,
    b
];});
    natural = ($__.fs.natural_166 = function natural(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Natural(context);});
    Step = ($__.fs.Step_167 = function Step(context, t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], t = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context = context;
this._t = t;});
    step = ($__.fs.step_168 = function step(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Step(context, 0.5);});
    stepBefore = ($__.fs.stepBefore_169 = function stepBefore(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Step(context, 0);});
    stepAfter = ($__.fs.stepAfter_170 = function stepAfter(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Step(context, 1);});
    none = ($__.fs.none_171 = function none(series, order) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
series = arguments[0], order = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!((n = series.length) > 1))
    return;
for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (var j = 0; j < m; ++j) {
        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
}});
    none$1 = ($__.fs.none$1_172 = function none$1(series) {
var vvv_return, vvv_switch, n, o;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
series = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = series.length;
o = new Array(n);
while (--n >= 0)
    o[n] = n;
return o;});
    stackValue = ($__.fs.stackValue_173 = function stackValue(d, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], key = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d[key];});
    stack = ($__.fs.stack_174 = function stack() {
var vvv_return, vvv_switch, keys, order, offset, value, stack;
stack = function stack(data) {
    var kz = keys.apply(this, arguments), i, m = data.length, n = kz.length, sz = new Array(n), oz;
    for (i = 0; i < n; ++i) {
        for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
            si[j] = sij = [
                0,
                +value(data[j], ki, j, data)
            ];
            sij.data = data[j];
        }
        si.key = ki;
    }
    for (i = 0, oz = (order(sz)); i < n; ++i) {
        sz[oz[i]].index = i;
    }
    offset(sz, oz);
    return sz;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
keys = constant$1([]);
order = none$1;
offset = none;
value = stackValue;
stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === 'function' ? _ : constant$1(slice$2.call(_)), stack) : keys;
};
stack.value = function (_) {
    return arguments.length ? (value = typeof _ === 'function' ? _ : constant$1(+_), stack) : value;
};
stack.order = function (_) {
    return arguments.length ? (order = _ == null ? none$1 : typeof _ === 'function' ? _ : constant$1(slice$2.call(_)), stack) : order;
};
stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
};
return stack;});
    expand = ($__.fs.expand_175 = function expand(series, order) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
series = arguments[0], order = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!((n = series.length) > 0))
    return;
for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i)
        y += series[i][j][1] || 0;
    if (y)
        for (i = 0; i < n; ++i)
        series[i][j][1] /= y;
}
none(series, order);});
    silhouette = ($__.fs.silhouette_176 = function silhouette(series, order) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
series = arguments[0], order = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!((n = series.length) > 0))
    return;
for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i)
        y += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y / 2;
}
none(series, order);});
    wiggle = ($__.fs.wiggle_177 = function wiggle(series, order) {
var vvv_return, vvv_switch, si, sij0, sij1, s3, sk, skj0, skj1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
series = arguments[0], order = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0))
    return;
for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
        si = series[order[i]];
        sij0 = si[j][1] || 0;
        sij1 = si[j - 1][1] || 0;
        s3 = (sij0 - sij1) / 2;
        for (var k = 0; k < i; ++k) {
            sk = series[order[k]];
            skj0 = sk[j][1] || 0;
            skj1 = sk[j - 1][1] || 0;
            s3 += skj0 - skj1;
        }
        s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1)
        y -= s2 / s1;
}
s0[j - 1][1] += s0[j - 1][0] = y;
none(series, order);});
    ascending$1 = ($__.fs.ascending$1_178 = function ascending$1(series) {
var vvv_return, vvv_switch, sums;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
series = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
sums = series.map(sum$1);
return none$1(series).sort(function (a, b) {
    return sums[a] - sums[b];
});});
    sum$1 = ($__.fs.sum$1_179 = function sum$1(series) {
var vvv_return, vvv_switch, s, i, n, v;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
series = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = 0;
i = -1;
n = series.length;
while (++i < n)
    if (v = +series[i][1])
    s += v;
return s;});
    descending$2 = ($__.fs.descending$2_180 = function descending$2(series) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
series = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ascending$1(series).reverse();});
    insideOut = ($__.fs.insideOut_181 = function insideOut(series) {
var vvv_return, vvv_switch, n, i, j, sums, order, top, bottom, tops, bottoms;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
series = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = series.length;
sums = series.map(sum$1);
order = none$1(series).sort(function (a, b) {
    return sums[b] - sums[a];
});
top = 0;
bottom = 0;
tops = [];
bottoms = [];
for (i = 0; i < n; ++i) {
    j = order[i];
    if (top < bottom) {
        top += sums[j];
        tops.push(j);
    } else {
        bottom += sums[j];
        bottoms.push(j);
    }
}
return bottoms.reverse().concat(tops);});
    reverse = ($__.fs.reverse_182 = function reverse(series) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
series = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return none$1(series).reverse();});
    define = ($__.fs.define_183 = function define(constructor, factory, prototype) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
constructor = arguments[0], factory = arguments[1], prototype = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    constructor.prototype = factory.prototype = prototype;
    (prototype, $__.os.oid32).constructor = constructor;
    return;
case 1:
case 2:
case 3:
case 4:
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(1 <= vvv_switch && vvv_switch <= 5);
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
constructor.prototype = factory.prototype = prototype;
prototype.constructor = constructor;});
    extend = ($__.fs.extend_184 = function extend(parent, definition) {
var vvv_return, vvv_switch, vvv_tmp0, prototype, key;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parent = arguments[0], definition = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    prototype = Object['create']((parent.prototype, $__.os.oid32));
    vvv_tmp0 = definition;
    'brighter' in vvv_tmp0;
    key = 'brighter';
    prototype[key, 'brighter'] = TAJS_restrictToType((definition, $__.os.oid33)[key, 'brighter'], 'function');
    'darker' in vvv_tmp0;
    key = 'darker';
    prototype[key, 'darker'] = TAJS_restrictToType((definition, $__.os.oid33)[key, 'darker'], 'function');
    'rgb' in vvv_tmp0;
    key = 'rgb';
    prototype[key, 'rgb'] = TAJS_restrictToType((definition, $__.os.oid33)[key, 'rgb'], 'function');
    'displayable' in vvv_tmp0;
    key = 'displayable';
    prototype[key, 'displayable'] = TAJS_restrictToType((definition, $__.os.oid33)[key, 'displayable'], 'function');
    'toString' in vvv_tmp0;
    key = 'toString';
    prototype[key, 'toString'] = TAJS_restrictToType((definition, $__.os.oid33)[key, 'toString'], 'function');
    return prototype;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    prototype = Object['create']((parent.prototype, $__.os.oid32));
    vvv_tmp0 = definition;
    'brighter' in vvv_tmp0;
    key = 'brighter';
    prototype[key, 'brighter'] = TAJS_restrictToType((definition, $__.os.oid34)[key, 'brighter'], 'function');
    'darker' in vvv_tmp0;
    key = 'darker';
    prototype[key, 'darker'] = TAJS_restrictToType((definition, $__.os.oid34)[key, 'darker'], 'function');
    'rgb' in vvv_tmp0;
    key = 'rgb';
    prototype[key, 'rgb'] = TAJS_restrictToType((definition, $__.os.oid34)[key, 'rgb'], 'function');
    'displayable' in vvv_tmp0;
    key = 'displayable';
    prototype[key, 'displayable'] = TAJS_restrictToType((definition, $__.os.oid34)[key, 'displayable'], 'function');
    return prototype;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    prototype = Object['create']((parent.prototype, $__.os.oid32));
    vvv_tmp0 = definition;
    'brighter' in vvv_tmp0;
    key = 'brighter';
    prototype[key, 'brighter'] = TAJS_restrictToType((definition, $__.os.oid35)[key, 'brighter'], 'function');
    'darker' in vvv_tmp0;
    key = 'darker';
    prototype[key, 'darker'] = TAJS_restrictToType((definition, $__.os.oid35)[key, 'darker'], 'function');
    'rgb' in vvv_tmp0;
    key = 'rgb';
    prototype[key, 'rgb'] = TAJS_restrictToType((definition, $__.os.oid35)[key, 'rgb'], 'function');
    return prototype;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    prototype = Object['create']((parent.prototype, $__.os.oid32));
    vvv_tmp0 = definition;
    'brighter' in vvv_tmp0;
    key = 'brighter';
    prototype[key, 'brighter'] = TAJS_restrictToType((definition, $__.os.oid36)[key, 'brighter'], 'function');
    'darker' in vvv_tmp0;
    key = 'darker';
    prototype[key, 'darker'] = TAJS_restrictToType((definition, $__.os.oid36)[key, 'darker'], 'function');
    'rgb' in vvv_tmp0;
    key = 'rgb';
    prototype[key, 'rgb'] = TAJS_restrictToType((definition, $__.os.oid36)[key, 'rgb'], 'function');
    return prototype;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    prototype = Object['create']((parent.prototype, $__.os.oid32));
    vvv_tmp0 = definition;
    'brighter' in vvv_tmp0;
    key = 'brighter';
    prototype[key, 'brighter'] = TAJS_restrictToType((definition, $__.os.oid37)[key, 'brighter'], 'function');
    'darker' in vvv_tmp0;
    key = 'darker';
    prototype[key, 'darker'] = TAJS_restrictToType((definition, $__.os.oid37)[key, 'darker'], 'function');
    'rgb' in vvv_tmp0;
    key = 'rgb';
    prototype[key, 'rgb'] = TAJS_restrictToType((definition, $__.os.oid37)[key, 'rgb'], 'function');
    return prototype;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
prototype = Object.create(parent.prototype);
for (var key in definition)
    prototype[key] = definition[key];
return prototype;});
    Color = ($__.fs.Color_185 = function Color() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');});
    color = ($__.fs.color_186 = function color(format) {
var vvv_return, vvv_switch, m;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
format = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
format = (format + '').trim().toLowerCase();
return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1)) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format) ? rgbn(named[format]) : format === 'transparent' ? new Rgb(NaN, NaN, NaN, 0) : null;});
    rgbn = ($__.fs.rgbn_187 = function rgbn(n) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
n = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);});
    rgba = ($__.fs.rgba_188 = function rgba(r, g, b, a) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
r = arguments[0], g = arguments[1], b = arguments[2], a = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (a <= 0)
    r = g = b = NaN;
return new Rgb(r, g, b, a);});
    rgbConvert = ($__.fs.rgbConvert_189 = function rgbConvert(o) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
o = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!(o instanceof Color))
    o = color(o);
if (!o)
    return new Rgb();
o = o.rgb();
return new Rgb(o.r, o.g, o.b, o.opacity);});
    colorRgb = ($__.fs.colorRgb_190 = function colorRgb(r, g, b, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
r = arguments[0], g = arguments[1], b = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);});
    Rgb = ($__.fs.Rgb_191 = function Rgb(r, g, b, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
r = arguments[0], g = arguments[1], b = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.r = +r;
this.g = +g;
this.b = +b;
this.opacity = +opacity;});
    hsla = ($__.fs.hsla_192 = function hsla(h, s, l, a) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
h = arguments[0], s = arguments[1], l = arguments[2], a = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (a <= 0)
    h = s = l = NaN;
else if (l <= 0 || l >= 1)
    h = s = NaN;
else if (s <= 0)
    h = NaN;
return new Hsl(h, s, l, a);});
    hslConvert = ($__.fs.hslConvert_193 = function hslConvert(o) {
var vvv_return, vvv_switch, r, g, b, min, max, h, s, l;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
o = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
if (!(o instanceof Color))
    o = color(o);
if (!o)
    return new Hsl();
if (o instanceof Hsl)
    return o;
o = o.rgb();
r = o.r / 255;
g = o.g / 255;
b = o.b / 255;
min = Math.min(r, g, b);
max = Math.max(r, g, b);
h = NaN;
s = max - min;
l = (max + min) / 2;
if (s) {
    if (r === max)
        h = (g - b) / s + (g < b) * 6;
    else if (g === max)
        h = (b - r) / s + 2;
    else
        h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
} else {
    s = l > 0 && l < 1 ? 0 : h;
}
return new Hsl(h, s, l, o.opacity);});
    colorHsl = ($__.fs.colorHsl_194 = function colorHsl(h, s, l, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
h = arguments[0], s = arguments[1], l = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);});
    Hsl = ($__.fs.Hsl_195 = function Hsl(h, s, l, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
h = arguments[0], s = arguments[1], l = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.h = +h;
this.s = +s;
this.l = +l;
this.opacity = +opacity;});
    hsl2rgb = ($__.fs.hsl2rgb_196 = function hsl2rgb(h, m1, m2) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
h = arguments[0], m1 = arguments[1], m2 = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;});
    labConvert = ($__.fs.labConvert_197 = function labConvert(o) {
var vvv_return, vvv_switch, h, b, a, l, x, y, z;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
o = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (o instanceof Lab)
    return new Lab(o.l, o.a, o.b, o.opacity);
if (o instanceof Hcl) {
    h = o.h * deg2rad;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
if (!(o instanceof Rgb))
    o = rgbConvert(o);
b = rgb2xyz(o.r);
a = rgb2xyz(o.g);
l = rgb2xyz(o.b);
x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn);
y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.072175 * l) / Yn);
z = xyz2lab((0.0193339 * b + 0.119192 * a + 0.9503041 * l) / Zn);
return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);});
    lab = ($__.fs.lab_198 = function lab(l, a, b, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
l = arguments[0], a = arguments[1], b = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);});
    Lab = ($__.fs.Lab_199 = function Lab(l, a, b, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
l = arguments[0], a = arguments[1], b = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.l = +l;
this.a = +a;
this.b = +b;
this.opacity = +opacity;});
    xyz2lab = ($__.fs.xyz2lab_200 = function xyz2lab(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;});
    lab2xyz = ($__.fs.lab2xyz_201 = function lab2xyz(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t > t1 ? t * t * t : t2 * (t - t0);});
    xyz2rgb = ($__.fs.xyz2rgb_202 = function xyz2rgb(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);});
    rgb2xyz = ($__.fs.rgb2xyz_203 = function rgb2xyz(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);});
    hclConvert = ($__.fs.hclConvert_204 = function hclConvert(o) {
var vvv_return, vvv_switch, h;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
o = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (o instanceof Hcl)
    return new Hcl(o.h, o.c, o.l, o.opacity);
if (!(o instanceof Lab))
    o = labConvert(o);
h = Math.atan2(o.b, o.a) * rad2deg;
return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);});
    colorHcl = ($__.fs.colorHcl_205 = function colorHcl(h, c, l, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
h = arguments[0], c = arguments[1], l = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);});
    Hcl = ($__.fs.Hcl_206 = function Hcl(h, c, l, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
h = arguments[0], c = arguments[1], l = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.h = +h;
this.c = +c;
this.l = +l;
this.opacity = +opacity;});
    cubehelixConvert = ($__.fs.cubehelixConvert_207 = function cubehelixConvert(o) {
var vvv_return, vvv_switch, r, g, b, l, bl, k, s, h;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
o = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    o instanceof Cubehelix;
    return new (Cubehelix, $__.fs.Cubehelix_209)((o.h, 300), (o.s, 0.5), (o.l, 0), (o.opacity, 1), 2, true, $__.uid);
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    o instanceof Cubehelix;
    return new (Cubehelix, $__.fs.Cubehelix_209)((o.h, -240), (o.s, 0.5), (o.l, 1), (o.opacity, 1), 3, true, $__.uid);
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    o instanceof Cubehelix;
    return new (Cubehelix, $__.fs.Cubehelix_209)((o.h, -100), (o.s, 0.75), (o.l, 0.35), (o.opacity, 1), 6, true, $__.uid);
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    o instanceof Cubehelix;
    return new (Cubehelix, $__.fs.Cubehelix_209)((o.h, 80), (o.s, 1.5), (o.l, 0.8), (o.opacity, 1), 7, true, $__.uid);
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    o instanceof Cubehelix;
    return new (Cubehelix, $__.fs.Cubehelix_209)((o.h, 260), (o.s, 0.75), (o.l, 0.35), (o.opacity, 1), 10, true, $__.uid);
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    o instanceof Cubehelix;
    return new (Cubehelix, $__.fs.Cubehelix_209)((o.h, 80), (o.s, 1.5), (o.l, 0.8), (o.opacity, 1), 11, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (o instanceof Cubehelix)
    return new Cubehelix(o.h, o.s, o.l, o.opacity);
if (!(o instanceof Rgb))
    o = rgbConvert(o);
r = o.r / 255;
g = o.g / 255;
b = o.b / 255;
l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB);
bl = b - l;
k = (E * (g - l) - C * bl) / D;
s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l));
h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);});
    cubehelix = ($__.fs.cubehelix_208 = function cubehelix(h, s, l, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
h = arguments[0], s = arguments[1], l = arguments[2], opacity = arguments[3];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return (arguments.length, 3) === 1, new (Cubehelix, $__.fs.Cubehelix_209)(h, s, l, (opacity == null, 1), 0, true, $__.uid);
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return (arguments.length, 3) === 1, new (Cubehelix, $__.fs.Cubehelix_209)(h, s, l, (opacity == null, 1), 1, true, $__.uid);
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return (arguments.length, 1) === 1, (cubehelixConvert, $__.fs.cubehelixConvert_207)(h, 0, true, $__.uid);
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return (arguments.length, 1) === 1, (cubehelixConvert, $__.fs.cubehelixConvert_207)(h, 1, true, $__.uid);
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    return (arguments.length, 3) === 1, new (Cubehelix, $__.fs.Cubehelix_209)(h, s, l, (opacity == null, 1), 4, true, $__.uid);
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    return (arguments.length, 3) === 1, new (Cubehelix, $__.fs.Cubehelix_209)(h, s, l, (opacity == null, 1), 5, true, $__.uid);
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    return (arguments.length, 1) === 1, (cubehelixConvert, $__.fs.cubehelixConvert_207)(h, 2, true, $__.uid);
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    return (arguments.length, 1) === 1, (cubehelixConvert, $__.fs.cubehelixConvert_207)(h, 3, true, $__.uid);
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    return (arguments.length, 3) === 1, new (Cubehelix, $__.fs.Cubehelix_209)(h, s, l, (opacity == null, 1), 8, true, $__.uid);
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    return (arguments.length, 3) === 1, new (Cubehelix, $__.fs.Cubehelix_209)(h, s, l, (opacity == null, 1), 9, true, $__.uid);
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    return (arguments.length, 1) === 1, (cubehelixConvert, $__.fs.cubehelixConvert_207)(h, 4, true, $__.uid);
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    return (arguments.length, 1) === 1, (cubehelixConvert, $__.fs.cubehelixConvert_207)(h, 5, true, $__.uid);
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    return (arguments.length, 0) === 1, new (Cubehelix, $__.fs.Cubehelix_209)(h, s, l, (opacity == null, 1), 12, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);});
    Cubehelix = ($__.fs.Cubehelix_209 = function Cubehelix(h, s, l, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
h = arguments[0], s = arguments[1], l = arguments[2], opacity = arguments[3];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 12);
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.h = +h;
this.s = +s;
this.l = +l;
this.opacity = +opacity;});
    basis$1 = ($__.fs.basis$1_210 = function basis$1(t1, v0, v1, v2, v3) {
var vvv_return, vvv_switch, t2, t3;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t1 = arguments[0], v0 = arguments[1], v1 = arguments[2], v2 = arguments[3], v3 = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t2 = t1 * t1;
t3 = t2 * t1;
return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;});
    basis$2 = ($__.fs.basis$2_211 = function basis$2(values) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
values = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = values.length - 1;
return function (t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis$1((t - i / n) * n, v0, v1, v2, v3);
};});
    basisClosed$1 = ($__.fs.basisClosed$1_212 = function basisClosed$1(values) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
values = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = values.length;
return function (t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
    return basis$1((t - i / n) * n, v0, v1, v2, v3);
};});
    constant$2 = ($__.fs.constant$2_213 = function constant$2(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_707_1419 = function J$__v2246113107_707() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x;});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return ($__.fs.J$__v2246113107_707_1421 = function J$__v2246113107_707() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x;});
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return ($__.fs.J$__v2246113107_707_1426 = function J$__v2246113107_707() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x;});
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return ($__.fs.J$__v2246113107_707_1431 = function J$__v2246113107_707() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    linear$1 = ($__.fs.linear$1_214 = function linear$1(a, d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], d = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_710_1418 = function J$__v2246113107_710(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a + t * d;});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return ($__.fs.J$__v2246113107_710_1420 = function J$__v2246113107_710(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a + t * d;});
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return ($__.fs.J$__v2246113107_710_1423 = function J$__v2246113107_710(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a + t * d;});
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return ($__.fs.J$__v2246113107_710_1424 = function J$__v2246113107_710(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a + t * d;});
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    return ($__.fs.J$__v2246113107_710_1425 = function J$__v2246113107_710(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a + t * d;});
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    return ($__.fs.J$__v2246113107_710_1428 = function J$__v2246113107_710(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a + t * d;});
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    return ($__.fs.J$__v2246113107_710_1429 = function J$__v2246113107_710(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a + t * d;});
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    return ($__.fs.J$__v2246113107_710_1430 = function J$__v2246113107_710(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a + t * d;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (t) {
    return a + t * d;
};});
    exponential$1 = ($__.fs.exponential$1_215 = function exponential$1(a, b, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], y = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
};});
    hue = ($__.fs.hue_216 = function hue(a, b) {
var vvv_return, vvv_switch, d;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d = b - a;
return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);});
    gamma = ($__.fs.gamma_217 = function gamma(y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return (y = +y) === 1, nogamma;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential$1(a, b, y) : constant$2(isNaN(a) ? b : a);
};});
    nogamma = ($__.fs.nogamma_218 = function nogamma(a, b) {
var vvv_return, vvv_switch, d;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    d = b - a;
    return d, (linear$1, $__.fs.linear$1_214)(a, d, 0, true, $__.uid);
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    d = b - a;
    return d, (constant$2, $__.fs.constant$2_213)((isNaN(a), a), 0, true, $__.uid);
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    d = b - a;
    return d, (linear$1, $__.fs.linear$1_214)(a, d, 1, true, $__.uid);
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    d = b - a;
    return d, (constant$2, $__.fs.constant$2_213)((isNaN(a), a), 1, true, $__.uid);
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    d = b - a;
    return d, (linear$1, $__.fs.linear$1_214)(a, d, 2, true, $__.uid);
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    d = b - a;
    return d, (linear$1, $__.fs.linear$1_214)(a, d, 3, true, $__.uid);
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    d = b - a;
    return d, (linear$1, $__.fs.linear$1_214)(a, d, 4, true, $__.uid);
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    d = b - a;
    return d, (constant$2, $__.fs.constant$2_213)((isNaN(a), a), 2, true, $__.uid);
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    d = b - a;
    return d, (linear$1, $__.fs.linear$1_214)(a, d, 5, true, $__.uid);
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    d = b - a;
    return d, (linear$1, $__.fs.linear$1_214)(a, d, 6, true, $__.uid);
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    d = b - a;
    return d, (linear$1, $__.fs.linear$1_214)(a, d, 7, true, $__.uid);
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    d = b - a;
    return d, (constant$2, $__.fs.constant$2_213)((isNaN(a), a), 3, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d = b - a;
return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);});
    rgbSpline = ($__.fs.rgbSpline_219 = function rgbSpline(spline) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
spline = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_727_1017 = function J$__v2246113107_727(colors) {
var vvv_return, vvv_switch, n, r, g, b, i, color;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
colors = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = colors.length;
r = new Array(n);
g = new Array(n);
b = new Array(n);
for (i = 0; i < n; ++i) {
    color = colorRgb(colors[i]);
    r[i] = color.r || 0;
    g[i] = color.g || 0;
    b[i] = color.b || 0;
}
r = spline(r);
g = spline(g);
b = spline(b);
color.opacity = 1;
return function (t) {
    color.r = r(t);
    color.g = g(t);
    color.b = b(t);
    return color + '';
};});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return ($__.fs.J$__v2246113107_727_1018 = function J$__v2246113107_727(colors) {
var vvv_return, vvv_switch, n, r, g, b, i, color;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
colors = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = colors.length;
r = new Array(n);
g = new Array(n);
b = new Array(n);
for (i = 0; i < n; ++i) {
    color = colorRgb(colors[i]);
    r[i] = color.r || 0;
    g[i] = color.g || 0;
    b[i] = color.b || 0;
}
r = spline(r);
g = spline(g);
b = spline(b);
color.opacity = 1;
return function (t) {
    color.r = r(t);
    color.g = g(t);
    color.b = b(t);
    return color + '';
};});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (colors) {
    var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color;
    for (i = 0; i < n; ++i) {
        color = colorRgb(colors[i]);
        r[i] = color.r || 0;
        g[i] = color.g || 0;
        b[i] = color.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function (t) {
        color.r = r(t);
        color.g = g(t);
        color.b = b(t);
        return color + '';
    };
};});
    array$1 = ($__.fs.array$1_220 = function array$1(a, b) {
var vvv_return, vvv_switch, nb, na, x, c, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
nb = b ? b.length : 0;
na = a ? Math.min(nb, a.length) : 0;
x = new Array(nb);
c = new Array(nb);
for (i = 0; i < na; ++i)
    x[i] = interpolate(a[i], b[i]);
for (; i < nb; ++i)
    c[i] = b[i];
return function (t) {
    for (i = 0; i < na; ++i)
        c[i] = x[i](t);
    return c;
};});
    date = ($__.fs.date_221 = function date(a, b) {
var vvv_return, vvv_switch, d;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d = new Date();
return a = +a, b -= a, function (t) {
    return d.setTime(a + b * t), d;
};});
    interpolateNumber = ($__.fs.interpolateNumber_222 = function interpolateNumber(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a = +a, b -= a, function (t) {
    return a + b * t;
};});
    object = ($__.fs.object_223 = function object(a, b) {
var vvv_return, vvv_switch, i, c, k;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = {};
c = {};
if (a === null || typeof a !== 'object')
    a = {};
if (b === null || typeof b !== 'object')
    b = {};
for (k in b) {
    if (k in a) {
        i[k] = interpolate(a[k], b[k]);
    } else {
        c[k] = b[k];
    }
}
return function (t) {
    for (k in i)
        c[k] = i[k](t);
    return c;
};});
    zero = ($__.fs.zero_224 = function zero(b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
b = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return b;
};});
    one = ($__.fs.one_225 = function one(b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
b = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (t) {
    return b(t) + '';
};});
    interpolateString = ($__.fs.interpolateString_226 = function interpolateString(a, b) {
var vvv_return, vvv_switch, bi, am, bm, bs, i, s, q;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
bi = reA.lastIndex = reB.lastIndex = 0;
i = -1;
s = [];
q = [];
a = a + '', b = b + '';
while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i])
            s[i] += bs;
        else
            s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
        if (s[i])
            s[i] += bm;
        else
            s[++i] = bm;
    } else {
        s[++i] = null;
        q.push({
            i: i,
            x: interpolateNumber(am, bm)
        });
    }
    bi = reB.lastIndex;
}
if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i])
        s[i] += bs;
    else
        s[++i] = bs;
}
return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i)
        s[(o = q[i]).i] = o.x(t);
    return s.join('');
});});
    interpolate = ($__.fs.interpolate_227 = function interpolate(a, b) {
var vvv_return, vvv_switch, t, c;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t = typeof b;
return b == null || t === 'boolean' ? constant$2(b) : (t === 'number' ? interpolateNumber : t === 'string' ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : Array.isArray(b) ? array$1 : isNaN(b) ? object : interpolateNumber)(a, b);});
    interpolateRound = ($__.fs.interpolateRound_228 = function interpolateRound(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a = +a, b -= a, function (t) {
    return Math.round(a + b * t);
};});
    decompose = ($__.fs.decompose_229 = function decompose(a, b, c, d, e, f) {
var vvv_return, vvv_switch, scaleX, scaleY, skewX;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], c = arguments[2], d = arguments[3], e = arguments[4], f = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (scaleX = Math.sqrt(a * a + b * b))
    a /= scaleX, b /= scaleX;
if (skewX = a * c + b * d)
    c -= a * skewX, d -= b * skewX;
if (scaleY = Math.sqrt(c * c + d * d))
    c /= scaleY, d /= scaleY, skewX /= scaleY;
if (a * d < b * c)
    a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
};});
    parseCss = ($__.fs.parseCss_230 = function parseCss(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (value === 'none')
    return identity$2;
if (!cssNode)
    cssNode = document.createElement('DIV'), cssRoot = document.documentElement, cssView = document.defaultView;
cssNode.style.transform = value;
value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue('transform');
cssRoot.removeChild(cssNode);
value = value.slice(7, -1).split(',');
return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);});
    parseSvg = ($__.fs.parseSvg_231 = function parseSvg(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (value == null)
    return identity$2;
if (!svgNode)
    svgNode = document.createElementNS('http://www.w3.org/2000/svg', 'g');
svgNode.setAttribute('transform', value);
if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity$2;
value = value.matrix;
return decompose(value.a, value.b, value.c, value.d, value.e, value.f);});
    interpolateTransform = ($__.fs.interpolateTransform_232 = function interpolateTransform(parse, pxComma, pxParen, degParen) {
var vvv_return, vvv_switch, pop, translate, rotate, skewX, scale;
pop = function pop(s) {
    return s.length ? s.pop() + ' ' : '';
};
translate = function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
        var i = s.push('translate(', null, pxComma, null, pxParen);
        q.push({
            i: i - 4,
            x: interpolateNumber(xa, xb)
        }, {
            i: i - 2,
            x: interpolateNumber(ya, yb)
        });
    } else if (xb || yb) {
        s.push('translate(' + xb + pxComma + yb + pxParen);
    }
};
rotate = function rotate(a, b, s, q) {
    if (a !== b) {
        if (a - b > 180)
            b += 360;
        else if (b - a > 180)
            a += 360;
        q.push({
            i: s.push(pop(s) + 'rotate(', null, degParen) - 2,
            x: interpolateNumber(a, b)
        });
    } else if (b) {
        s.push(pop(s) + 'rotate(' + b + degParen);
    }
};
skewX = function skewX(a, b, s, q) {
    if (a !== b) {
        q.push({
            i: s.push(pop(s) + 'skewX(', null, degParen) - 2,
            x: interpolateNumber(a, b)
        });
    } else if (b) {
        s.push(pop(s) + 'skewX(' + b + degParen);
    }
};
scale = function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
        var i = s.push(pop(s) + 'scale(', null, ',', null, ')');
        q.push({
            i: i - 4,
            x: interpolateNumber(xa, xb)
        }, {
            i: i - 2,
            x: interpolateNumber(ya, yb)
        });
    } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + 'scale(' + xb + ',' + yb + ')');
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parse = arguments[0], pxComma = arguments[1], pxParen = arguments[2], degParen = arguments[3];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    pop = ($__.fs.pop_1019 = function pop(s) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
s = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return s.length ? s.pop() + ' ' : '';});
    translate = ($__.fs.translate_1020 = function translate(xa, ya, xb, yb, s, q) {
var vvv_return, vvv_switch, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xa = arguments[0], ya = arguments[1], xb = arguments[2], yb = arguments[3], s = arguments[4], q = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (xa !== xb || ya !== yb) {
    i = s.push('translate(', null, pxComma, null, pxParen);
    q.push({
        i: i - 4,
        x: interpolateNumber(xa, xb)
    }, {
        i: i - 2,
        x: interpolateNumber(ya, yb)
    });
} else if (xb || yb) {
    s.push('translate(' + xb + pxComma + yb + pxParen);
}});
    rotate = ($__.fs.rotate_1021 = function rotate(a, b, s, q) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], s = arguments[2], q = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (a !== b) {
    if (a - b > 180)
        b += 360;
    else if (b - a > 180)
        a += 360;
    q.push({
        i: s.push(pop(s) + 'rotate(', null, degParen) - 2,
        x: interpolateNumber(a, b)
    });
} else if (b) {
    s.push(pop(s) + 'rotate(' + b + degParen);
}});
    skewX = ($__.fs.skewX_1022 = function skewX(a, b, s, q) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], s = arguments[2], q = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (a !== b) {
    q.push({
        i: s.push(pop(s) + 'skewX(', null, degParen) - 2,
        x: interpolateNumber(a, b)
    });
} else if (b) {
    s.push(pop(s) + 'skewX(' + b + degParen);
}});
    scale = ($__.fs.scale_1023 = function scale(xa, ya, xb, yb, s, q) {
var vvv_return, vvv_switch, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xa = arguments[0], ya = arguments[1], xb = arguments[2], yb = arguments[3], s = arguments[4], q = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (xa !== xb || ya !== yb) {
    i = s.push(pop(s) + 'scale(', null, ',', null, ')');
    q.push({
        i: i - 4,
        x: interpolateNumber(xa, xb)
    }, {
        i: i - 2,
        x: interpolateNumber(ya, yb)
    });
} else if (xb !== 1 || yb !== 1) {
    s.push(pop(s) + 'scale(' + xb + ',' + yb + ')');
}});
    return ($__.fs.J$__v2246113107_765_1024 = function J$__v2246113107_765(a, b) {
var vvv_return, vvv_switch, s, q;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = [];
q = [];
a = parse(a), b = parse(b);
translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
rotate(a.rotate, b.rotate, s, q);
skewX(a.skewX, b.skewX, s, q);
scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
a = b = null;
return function (t) {
    var i = -1, n = q.length, o;
    while (++i < n)
        s[(o = q[i]).i] = o.x(t);
    return s.join('');
};});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    pop = ($__.fs.pop_1025 = function pop(s) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
s = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return s.length ? s.pop() + ' ' : '';});
    translate = ($__.fs.translate_1026 = function translate(xa, ya, xb, yb, s, q) {
var vvv_return, vvv_switch, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xa = arguments[0], ya = arguments[1], xb = arguments[2], yb = arguments[3], s = arguments[4], q = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (xa !== xb || ya !== yb) {
    i = s.push('translate(', null, pxComma, null, pxParen);
    q.push({
        i: i - 4,
        x: interpolateNumber(xa, xb)
    }, {
        i: i - 2,
        x: interpolateNumber(ya, yb)
    });
} else if (xb || yb) {
    s.push('translate(' + xb + pxComma + yb + pxParen);
}});
    rotate = ($__.fs.rotate_1027 = function rotate(a, b, s, q) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], s = arguments[2], q = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (a !== b) {
    if (a - b > 180)
        b += 360;
    else if (b - a > 180)
        a += 360;
    q.push({
        i: s.push(pop(s) + 'rotate(', null, degParen) - 2,
        x: interpolateNumber(a, b)
    });
} else if (b) {
    s.push(pop(s) + 'rotate(' + b + degParen);
}});
    skewX = ($__.fs.skewX_1028 = function skewX(a, b, s, q) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], s = arguments[2], q = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (a !== b) {
    q.push({
        i: s.push(pop(s) + 'skewX(', null, degParen) - 2,
        x: interpolateNumber(a, b)
    });
} else if (b) {
    s.push(pop(s) + 'skewX(' + b + degParen);
}});
    scale = ($__.fs.scale_1029 = function scale(xa, ya, xb, yb, s, q) {
var vvv_return, vvv_switch, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xa = arguments[0], ya = arguments[1], xb = arguments[2], yb = arguments[3], s = arguments[4], q = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (xa !== xb || ya !== yb) {
    i = s.push(pop(s) + 'scale(', null, ',', null, ')');
    q.push({
        i: i - 4,
        x: interpolateNumber(xa, xb)
    }, {
        i: i - 2,
        x: interpolateNumber(ya, yb)
    });
} else if (xb !== 1 || yb !== 1) {
    s.push(pop(s) + 'scale(' + xb + ',' + yb + ')');
}});
    return ($__.fs.J$__v2246113107_765_1030 = function J$__v2246113107_765(a, b) {
var vvv_return, vvv_switch, s, q;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = [];
q = [];
a = parse(a), b = parse(b);
translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
rotate(a.rotate, b.rotate, s, q);
skewX(a.skewX, b.skewX, s, q);
scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
a = b = null;
return function (t) {
    var i = -1, n = q.length, o;
    while (++i < n)
        s[(o = q[i]).i] = o.x(t);
    return s.join('');
};});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (a, b) {
    var s = [], q = [];
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null;
    return function (t) {
        var i = -1, n = q.length, o;
        while (++i < n)
            s[(o = q[i]).i] = o.x(t);
        return s.join('');
    };
};});
    cosh = ($__.fs.cosh_233 = function cosh(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((x = Math.exp(x)) + 1 / x) / 2;});
    sinh = ($__.fs.sinh_234 = function sinh(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((x = Math.exp(x)) - 1 / x) / 2;});
    tanh = ($__.fs.tanh_235 = function tanh(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((x = Math.exp(2 * x)) - 1) / (x + 1);});
    interpolateZoom = ($__.fs.interpolateZoom_236 = function interpolateZoom(p0, p1) {
var vvv_return, vvv_switch, ux0, uy0, w0, ux1, uy1, w1, dx, dy, d2, i, S, d1, b0, b1, r0, r1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
p0 = arguments[0], p1 = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ux0 = p0[0];
uy0 = p0[1];
w0 = p0[2];
ux1 = p1[0];
uy1 = p1[1];
w1 = p1[2];
dx = ux1 - ux0;
dy = uy1 - uy0;
d2 = dx * dx + dy * dy;
if (d2 < epsilon2) {
    S = Math.log(w1 / w0) / rho;
    i = function (t) {
        return [
            ux0 + t * dx,
            uy0 + t * dy,
            w0 * Math.exp(rho * t * S)
        ];
    };
} else {
    d1 = Math.sqrt(d2);
    b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1);
    b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1);
    r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);
    r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
    S = (r1 - r0) / rho;
    i = function (t) {
        var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
            ux0 + u * dx,
            uy0 + u * dy,
            w0 * coshr0 / cosh(rho * s + r0)
        ];
    };
}
i.duration = S * 1000;
return i;});
    hsl = ($__.fs.hsl_237 = function hsl(hue) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hue = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_778_1031 = function J$__v2246113107_778(start, end) {
var vvv_return, vvv_switch, h, s, l, opacity;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h);
s = nogamma(start.s, end.s);
l = nogamma(start.l, end.l);
opacity = nogamma(start.opacity, end.opacity);
return function (t) {
    start.h = h(t);
    start.s = s(t);
    start.l = l(t);
    start.opacity = opacity(t);
    return start + '';
};});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return ($__.fs.J$__v2246113107_778_1032 = function J$__v2246113107_778(start, end) {
var vvv_return, vvv_switch, h, s, l, opacity;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h);
s = nogamma(start.s, end.s);
l = nogamma(start.l, end.l);
opacity = nogamma(start.opacity, end.opacity);
return function (t) {
    start.h = h(t);
    start.s = s(t);
    start.l = l(t);
    start.opacity = opacity(t);
    return start + '';
};});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (start, end) {
    var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(t);
        start.opacity = opacity(t);
        return start + '';
    };
};});
    lab$1 = ($__.fs.lab$1_238 = function lab$1(start, end) {
var vvv_return, vvv_switch, l, a, b, opacity;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
l = nogamma((start = lab(start)).l, (end = lab(end)).l);
a = nogamma(start.a, end.a);
b = nogamma(start.b, end.b);
opacity = nogamma(start.opacity, end.opacity);
return function (t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + '';
};});
    hcl = ($__.fs.hcl_239 = function hcl(hue) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hue = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_786_1033 = function J$__v2246113107_786(start, end) {
var vvv_return, vvv_switch, h, c, l, opacity;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h);
c = nogamma(start.c, end.c);
l = nogamma(start.l, end.l);
opacity = nogamma(start.opacity, end.opacity);
return function (t) {
    start.h = h(t);
    start.c = c(t);
    start.l = l(t);
    start.opacity = opacity(t);
    return start + '';
};});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return ($__.fs.J$__v2246113107_786_1034 = function J$__v2246113107_786(start, end) {
var vvv_return, vvv_switch, h, c, l, opacity;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h);
c = nogamma(start.c, end.c);
l = nogamma(start.l, end.l);
opacity = nogamma(start.opacity, end.opacity);
return function (t) {
    start.h = h(t);
    start.c = c(t);
    start.l = l(t);
    start.opacity = opacity(t);
    return start + '';
};});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (start, end) {
    var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h), c = nogamma(start.c, end.c), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
        start.h = h(t);
        start.c = c(t);
        start.l = l(t);
        start.opacity = opacity(t);
        return start + '';
    };
};});
    cubehelix$1 = ($__.fs.cubehelix$1_240 = function cubehelix$1(hue) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hue = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return (($__.fs.cubehelixGamma_1035 = function cubehelixGamma(y) {
var vvv_return, vvv_switch, cubehelix$$;
cubehelix$$ = function cubehelix$$(start, end) {
    var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + '';
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    cubehelix$$ = ($__.fs.cubehelix$$_1036 = function cubehelix$$(start, end) {
var vvv_return, vvv_switch, h, s, l, opacity;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h);
s = nogamma(start.s, end.s);
l = nogamma(start.l, end.l);
opacity = nogamma(start.opacity, end.opacity);
return function (t) {
    start.h = h(t);
    start.s = s(t);
    start.l = l(Math.pow(t, y));
    start.opacity = opacity(t);
    return start + '';
};});
    y = +y;
    cubehelix$$.gamma = cubehelixGamma;
    return cubehelix$$;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
y = +y;
cubehelix$$.gamma = cubehelixGamma;
return cubehelix$$;}), $__.fs.cubehelixGamma_1035)(1, 0, true, $__.uid);
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return (($__.fs.cubehelixGamma_1037 = function cubehelixGamma(y) {
var vvv_return, vvv_switch, cubehelix$$;
cubehelix$$ = function cubehelix$$(start, end) {
    var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + '';
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    cubehelix$$ = ($__.fs.cubehelix$$_1038 = function cubehelix$$(start, end) {
var vvv_return, vvv_switch, h, s, l, opacity;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    h = (hue, $__.fs.nogamma_218)(((start = (cubehelix, $__.fs.cubehelix_208)(start, 2, true, $__.uid)).h, 300), ((end = (cubehelix, $__.fs.cubehelix_208)(end, 3, true, $__.uid)).h, -240), 0, true, $__.uid);
    s = (nogamma, $__.fs.nogamma_218)((start.s, 0.5), (end.s, 0.5), 1, true, $__.uid);
    l = (nogamma, $__.fs.nogamma_218)((start.l, 0), (end.l, 1), 2, true, $__.uid);
    opacity = (nogamma, $__.fs.nogamma_218)((start.opacity, 1), (end.opacity, 1), 3, true, $__.uid);
    return ($__.fs.J$__v2246113107_789_1422 = function J$__v2246113107_789(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
start.h = h(t);
start.s = s(t);
start.l = l(Math.pow(t, y));
start.opacity = opacity(t);
return start + '';});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    h = (hue, $__.fs.nogamma_218)(((start = (cubehelix, $__.fs.cubehelix_208)(start, 6, true, $__.uid)).h, -100), ((end = (cubehelix, $__.fs.cubehelix_208)(end, 7, true, $__.uid)).h, 80), 4, true, $__.uid);
    s = (nogamma, $__.fs.nogamma_218)((start.s, 0.75), (end.s, 1.5), 5, true, $__.uid);
    l = (nogamma, $__.fs.nogamma_218)((start.l, 0.35), (end.l, 0.8), 6, true, $__.uid);
    opacity = (nogamma, $__.fs.nogamma_218)((start.opacity, 1), (end.opacity, 1), 7, true, $__.uid);
    return ($__.fs.J$__v2246113107_789_1427 = function J$__v2246113107_789(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
start.h = h(t);
start.s = s(t);
start.l = l(Math.pow(t, y));
start.opacity = opacity(t);
return start + '';});
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    h = (hue, $__.fs.nogamma_218)(((start = (cubehelix, $__.fs.cubehelix_208)(start, 10, true, $__.uid)).h, 260), ((end = (cubehelix, $__.fs.cubehelix_208)(end, 11, true, $__.uid)).h, 80), 8, true, $__.uid);
    s = (nogamma, $__.fs.nogamma_218)((start.s, 0.75), (end.s, 1.5), 9, true, $__.uid);
    l = (nogamma, $__.fs.nogamma_218)((start.l, 0.35), (end.l, 0.8), 10, true, $__.uid);
    opacity = (nogamma, $__.fs.nogamma_218)((start.opacity, 1), (end.opacity, 1), 11, true, $__.uid);
    return ($__.fs.J$__v2246113107_789_1432 = function J$__v2246113107_789(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
start.h = h(t);
start.s = s(t);
start.l = l(Math.pow(t, y));
start.opacity = opacity(t);
return start + '';});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h);
s = nogamma(start.s, end.s);
l = nogamma(start.l, end.l);
opacity = nogamma(start.opacity, end.opacity);
return function (t) {
    start.h = h(t);
    start.s = s(t);
    start.l = l(Math.pow(t, y));
    start.opacity = opacity(t);
    return start + '';
};});
    y = +y;
    cubehelix$$.gamma = cubehelixGamma;
    return cubehelix$$;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
y = +y;
cubehelix$$.gamma = cubehelixGamma;
return cubehelix$$;}), $__.fs.cubehelixGamma_1037)(1, 0, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function cubehelixGamma(y) {
    y = +y;
    function cubehelix$$(start, end) {
        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h), s = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
        return function (t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(Math.pow(t, y));
            start.opacity = opacity(t);
            return start + '';
        };
    }
    cubehelix$$.gamma = cubehelixGamma;
    return cubehelix$$;
}(1);});
    quantize = ($__.fs.quantize_241 = function quantize(interpolator, n) {
var vvv_return, vvv_switch, samples;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
interpolator = arguments[0], n = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
samples = new Array(n);
for (var i = 0; i < n; ++i)
    samples[i] = interpolator(i / (n - 1));
return samples;});
    dispatch = ($__.fs.dispatch_242 = function dispatch() {
var vvv_return, vvv_switch, i, n, _, t;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    i = 0;
    n = (arguments.length, 3);
    _ = $__.os.oid65 = {};
    i < n;
    !(t = TAJS_restrictToType(arguments[i, 0], 'string') + ''), t in _;
    (_, $__.os.oid65)[t, 'start'] = [];
    i = +i + 1;
    i < n;
    !(t = TAJS_restrictToType(arguments[i, 1], 'string') + ''), t in _;
    (_, $__.os.oid65)[t, 'end'] = [];
    i = +i + 1;
    i < n;
    !(t = TAJS_restrictToType(arguments[i, 2], 'string') + ''), t in _;
    (_, $__.os.oid65)[t, 'interrupt'] = [];
    i = +i + 1;
    i < n;
    return new (Dispatch, $__.fs.Dispatch_243)(_, 0, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + '') || t in _)
        throw new Error('illegal type: ' + t);
    _[t] = [];
}
return new Dispatch(_);});
    Dispatch = ($__.fs.Dispatch_243 = function Dispatch(_) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
_ = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this._ = _;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._ = _;});
    parseTypenames = ($__.fs.parseTypenames_244 = function parseTypenames(typenames, types) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
typenames = arguments[0], types = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = '', i = t.indexOf('.');
    if (i >= 0)
        name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t))
        throw new Error('unknown type: ' + t);
    return {
        type: t,
        name: name
    };
});});
    get = ($__.fs.get_245 = function get(type, name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0], name = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var i = 0, n = type.length, c; i < n; ++i) {
    if ((c = type[i]).name === name) {
        return c.value;
    }
}});
    set$1 = ($__.fs.set$1_246 = function set$1(type, name, callback) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0], name = arguments[1], callback = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var i = 0, n = type.length; i < n; ++i) {
    if (type[i].name === name) {
        type[i] = noop$1, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
    }
}
if (callback != null)
    type.push({
    name: name,
    value: callback
});
return type;});
    objectConverter = ($__.fs.objectConverter_247 = function objectConverter(columns) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
columns = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Function('d', 'return {' + columns.map(function (name, i) {
    return JSON.stringify(name) + ': d[' + i + ']';
}).join(',') + '}');});
    customConverter = ($__.fs.customConverter_248 = function customConverter(columns, f) {
var vvv_return, vvv_switch, object;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
columns = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
object = objectConverter(columns);
return function (row, i) {
    return f(object(row), i, columns);
};});
    inferColumns = ($__.fs.inferColumns_249 = function inferColumns(rows) {
var vvv_return, vvv_switch, columnSet, columns;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rows = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
columnSet = Object.create(null);
columns = [];
rows.forEach(function (row) {
    for (var column in row) {
        if (!(column in columnSet)) {
            columns.push(columnSet[column] = column);
        }
    }
});
return columns;});
    dsv = ($__.fs.dsv_250 = function dsv(delimiter) {
var vvv_return, vvv_switch, reFormat, delimiterCode, parse, parseRows, format, formatRows, formatRow, formatValue;
parse = function parse(text, f) {
    var convert, columns, rows = parseRows(text, function (row, i) {
            if (convert)
                return convert(row, i - 1);
            columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
        });
    rows.columns = columns;
    return rows;
};
parseRows = function parseRows(text, f) {
    var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
    function token() {
        if (I >= N)
            return EOF;
        if (eol)
            return eol = false, EOL;
        var j = I, c;
        if (text.charCodeAt(j) === 34) {
            var i = j;
            while (i++ < N) {
                if (text.charCodeAt(i) === 34) {
                    if (text.charCodeAt(i + 1) !== 34)
                        break;
                    ++i;
                }
            }
            I = i + 2;
            c = text.charCodeAt(i + 1);
            if (c === 13) {
                eol = true;
                if (text.charCodeAt(i + 2) === 10)
                    ++I;
            } else if (c === 10) {
                eol = true;
            }
            return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
            var k = 1;
            c = text.charCodeAt(I++);
            if (c === 10)
                eol = true;
            else if (c === 13) {
                eol = true;
                if (text.charCodeAt(I) === 10)
                    ++I, ++k;
            } else if (c !== delimiterCode)
                continue;
            return text.slice(j, I - k);
        }
        return text.slice(j);
    }
    while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
            a.push(t);
            t = token();
        }
        if (f && (a = f(a, n++)) == null)
            continue;
        rows.push(a);
    }
    return rows;
};
format = function format(rows, columns) {
    if (columns == null)
        columns = inferColumns(rows);
    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
        return columns.map(function (column) {
            return formatValue(row[column]);
        }).join(delimiter);
    })).join('\n');
};
formatRows = function formatRows(rows) {
    return rows.map(formatRow).join('\n');
};
formatRow = function formatRow(row) {
    return row.map(formatValue).join(delimiter);
};
formatValue = function formatValue(text) {
    return text == null ? '' : reFormat.test(text += '') ? '"' + text.replace(/\"/g, '""') + '"' : text;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
delimiter = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    parse = ($__.fs.parse_1044 = function parse(text, f) {
var vvv_return, vvv_switch, convert, columns, rows;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
text = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rows = parseRows(text, function (row, i) {
    if (convert)
        return convert(row, i - 1);
    columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
});
rows.columns = columns;
return rows;});
    parseRows = ($__.fs.parseRows_1045 = function parseRows(text, f) {
var vvv_return, vvv_switch, EOL, EOF, rows, N, I, n, t, eol, token, a;
token = function token() {
    if (I >= N)
        return EOF;
    if (eol)
        return eol = false, EOL;
    var j = I, c;
    if (text.charCodeAt(j) === 34) {
        var i = j;
        while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
                if (text.charCodeAt(i + 1) !== 34)
                    break;
                ++i;
            }
        }
        I = i + 2;
        c = text.charCodeAt(i + 1);
        if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10)
                ++I;
        } else if (c === 10) {
            eol = true;
        }
        return text.slice(j + 1, i).replace(/""/g, '"');
    }
    while (I < N) {
        var k = 1;
        c = text.charCodeAt(I++);
        if (c === 10)
            eol = true;
        else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10)
                ++I, ++k;
        } else if (c !== delimiterCode)
            continue;
        return text.slice(j, I - k);
    }
    return text.slice(j);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
text = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
EOL = {};
EOF = {};
rows = [];
N = text.length;
I = 0;
n = 0;
while ((t = token()) !== EOF) {
    a = [];
    while (t !== EOL && t !== EOF) {
        a.push(t);
        t = token();
    }
    if (f && (a = f(a, n++)) == null)
        continue;
    rows.push(a);
}
return rows;});
    format = ($__.fs.format_1046 = function format(rows, columns) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rows = arguments[0], columns = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (columns == null)
    columns = inferColumns(rows);
return [columns.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
    return columns.map(function (column) {
        return formatValue(row[column]);
    }).join(delimiter);
})).join('\n');});
    formatRows = ($__.fs.formatRows_1047 = function formatRows(rows) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rows = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rows.map(formatRow).join('\n');});
    formatRow = ($__.fs.formatRow_1048 = function formatRow(row) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
row = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return row.map(formatValue).join(delimiter);});
    formatValue = ($__.fs.formatValue_1049 = function formatValue(text) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
text = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return text == null ? '' : reFormat.test(text += '') ? '"' + text.replace(/\"/g, '""') + '"' : text;});
    reFormat = new RegExp('["' + delimiter + '\n]');
    delimiterCode = delimiter['charCodeAt'](0);
    return $__.os.oid41 = {
        'parse': parse,
        'parseRows': parseRows,
        'format': format,
        'formatRows': formatRows
    };
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    parse = ($__.fs.parse_1050 = function parse(text, f) {
var vvv_return, vvv_switch, convert, columns, rows;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
text = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rows = parseRows(text, function (row, i) {
    if (convert)
        return convert(row, i - 1);
    columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
});
rows.columns = columns;
return rows;});
    parseRows = ($__.fs.parseRows_1051 = function parseRows(text, f) {
var vvv_return, vvv_switch, EOL, EOF, rows, N, I, n, t, eol, token, a;
token = function token() {
    if (I >= N)
        return EOF;
    if (eol)
        return eol = false, EOL;
    var j = I, c;
    if (text.charCodeAt(j) === 34) {
        var i = j;
        while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
                if (text.charCodeAt(i + 1) !== 34)
                    break;
                ++i;
            }
        }
        I = i + 2;
        c = text.charCodeAt(i + 1);
        if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10)
                ++I;
        } else if (c === 10) {
            eol = true;
        }
        return text.slice(j + 1, i).replace(/""/g, '"');
    }
    while (I < N) {
        var k = 1;
        c = text.charCodeAt(I++);
        if (c === 10)
            eol = true;
        else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10)
                ++I, ++k;
        } else if (c !== delimiterCode)
            continue;
        return text.slice(j, I - k);
    }
    return text.slice(j);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
text = arguments[0], f = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
EOL = {};
EOF = {};
rows = [];
N = text.length;
I = 0;
n = 0;
while ((t = token()) !== EOF) {
    a = [];
    while (t !== EOL && t !== EOF) {
        a.push(t);
        t = token();
    }
    if (f && (a = f(a, n++)) == null)
        continue;
    rows.push(a);
}
return rows;});
    format = ($__.fs.format_1052 = function format(rows, columns) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rows = arguments[0], columns = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (columns == null)
    columns = inferColumns(rows);
return [columns.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
    return columns.map(function (column) {
        return formatValue(row[column]);
    }).join(delimiter);
})).join('\n');});
    formatRows = ($__.fs.formatRows_1053 = function formatRows(rows) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rows = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rows.map(formatRow).join('\n');});
    formatRow = ($__.fs.formatRow_1054 = function formatRow(row) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
row = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return row.map(formatValue).join(delimiter);});
    formatValue = ($__.fs.formatValue_1055 = function formatValue(text) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
text = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return text == null ? '' : reFormat.test(text += '') ? '"' + text.replace(/\"/g, '""') + '"' : text;});
    reFormat = new RegExp('["' + delimiter + '\n]');
    delimiterCode = delimiter['charCodeAt'](0);
    return $__.os.oid42 = {
        'parse': parse,
        'parseRows': parseRows,
        'format': format,
        'formatRows': formatRows
    };
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
reFormat = new RegExp('["' + delimiter + '\n]');
delimiterCode = delimiter.charCodeAt(0);
return {
    parse: parse,
    parseRows: parseRows,
    format: format,
    formatRows: formatRows
};});
    request = ($__.fs.J$__v2246113107_869_251 = function J$__v2246113107_869(url, callback) {
var vvv_return, vvv_switch, request, event, mimeType, headers, xhr, user, password, response, responseType, timeout, respond;
respond = function respond(o) {
    var status = xhr.status, result;
    if (!status && hasResponse(xhr) || status >= 200 && status < 300 || status === 304) {
        if (response) {
            try {
                result = response.call(request, xhr);
            } catch (e) {
                event.call('error', request, e);
                return;
            }
        } else {
            result = xhr;
        }
        event.call('load', request, result);
    } else {
        event.call('error', request, o);
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
url = arguments[0], callback = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
event = dispatch('beforesend', 'progress', 'load', 'error');
headers = map$1();
xhr = new XMLHttpRequest();
user = null;
password = null;
timeout = 0;
if (typeof XDomainRequest !== 'undefined' && !('withCredentials' in xhr) && /^(http(s)?:)?\/\//.test(url))
    xhr = new XDomainRequest();
'onload' in xhr ? xhr.onload = xhr.onerror = xhr.ontimeout = respond : xhr.onreadystatechange = function (o) {
    xhr.readyState > 3 && respond(o);
};
xhr.onprogress = function (e) {
    event.call('progress', request, e);
};
request = {
    header: function (name, value) {
        name = (name + '').toLowerCase();
        if (arguments.length < 2)
            return headers.get(name);
        if (value == null)
            headers.remove(name);
        else
            headers.set(name, value + '');
        return request;
    },
    mimeType: function (value) {
        if (!arguments.length)
            return mimeType;
        mimeType = value == null ? null : value + '';
        return request;
    },
    responseType: function (value) {
        if (!arguments.length)
            return responseType;
        responseType = value;
        return request;
    },
    timeout: function (value) {
        if (!arguments.length)
            return timeout;
        timeout = +value;
        return request;
    },
    user: function (value) {
        return arguments.length < 1 ? user : (user = value == null ? null : value + '', request);
    },
    password: function (value) {
        return arguments.length < 1 ? password : (password = value == null ? null : value + '', request);
    },
    response: function (value) {
        response = value;
        return request;
    },
    get: function (data, callback) {
        return request.send('GET', data, callback);
    },
    post: function (data, callback) {
        return request.send('POST', data, callback);
    },
    send: function (method, data, callback) {
        xhr.open(method, url, true, user, password);
        if (mimeType != null && !headers.has('accept'))
            headers.set('accept', mimeType + ',*/*');
        if (xhr.setRequestHeader)
            headers.each(function (value, name) {
            xhr.setRequestHeader(name, value);
        });
        if (mimeType != null && xhr.overrideMimeType)
            xhr.overrideMimeType(mimeType);
        if (responseType != null)
            xhr.responseType = responseType;
        if (timeout > 0)
            xhr.timeout = timeout;
        if (callback == null && typeof data === 'function')
            callback = data, data = null;
        if (callback != null && callback.length === 1)
            callback = fixCallback(callback);
        if (callback != null)
            request.on('error', callback).on('load', function (xhr) {
            callback(null, xhr);
        });
        event.call('beforesend', request, xhr);
        xhr.send(data == null ? null : data);
        return request;
    },
    abort: function () {
        xhr.abort();
        return request;
    },
    on: function () {
        var value = event.on.apply(event, arguments);
        return value === event ? request : value;
    }
};
if (callback != null) {
    if (typeof callback !== 'function')
        throw new Error('invalid callback: ' + callback);
    return request.get(callback);
}
return request;});
    fixCallback = ($__.fs.fixCallback_252 = function fixCallback(callback) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (error, xhr) {
    callback(error == null ? xhr : null);
};});
    hasResponse = ($__.fs.hasResponse_253 = function hasResponse(xhr) {
var vvv_return, vvv_switch, type;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xhr = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
type = xhr.responseType;
return type && type !== 'text' ? xhr.response : xhr.responseText;});
    type = ($__.fs.type_254 = function type(defaultMimeType, response) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
defaultMimeType = arguments[0], response = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_874_1057 = function J$__v2246113107_874(url, callback) {
var vvv_return, vvv_switch, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
url = arguments[0], callback = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = request(url).mimeType(defaultMimeType).response(response);
if (callback != null) {
    if (typeof callback !== 'function')
        throw new Error('invalid callback: ' + callback);
    return r.get(callback);
}
return r;});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return ($__.fs.J$__v2246113107_874_1059 = function J$__v2246113107_874(url, callback) {
var vvv_return, vvv_switch, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
url = arguments[0], callback = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = request(url).mimeType(defaultMimeType).response(response);
if (callback != null) {
    if (typeof callback !== 'function')
        throw new Error('invalid callback: ' + callback);
    return r.get(callback);
}
return r;});
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return ($__.fs.J$__v2246113107_874_1061 = function J$__v2246113107_874(url, callback) {
var vvv_return, vvv_switch, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
url = arguments[0], callback = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = request(url).mimeType(defaultMimeType).response(response);
if (callback != null) {
    if (typeof callback !== 'function')
        throw new Error('invalid callback: ' + callback);
    return r.get(callback);
}
return r;});
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return ($__.fs.J$__v2246113107_874_1063 = function J$__v2246113107_874(url, callback) {
var vvv_return, vvv_switch, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
url = arguments[0], callback = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = request(url).mimeType(defaultMimeType).response(response);
if (callback != null) {
    if (typeof callback !== 'function')
        throw new Error('invalid callback: ' + callback);
    return r.get(callback);
}
return r;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (url, callback) {
    var r = request(url).mimeType(defaultMimeType).response(response);
    if (callback != null) {
        if (typeof callback !== 'function')
            throw new Error('invalid callback: ' + callback);
        return r.get(callback);
    }
    return r;
};});
    dsv$1 = ($__.fs.dsv$1_255 = function dsv$1(defaultMimeType, parse) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
defaultMimeType = arguments[0], parse = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_887_1064 = function J$__v2246113107_887(url, row, callback) {
var vvv_return, vvv_switch, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
url = arguments[0], row = arguments[1], callback = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (arguments.length < 3)
    callback = row, row = null;
r = request(url).mimeType(defaultMimeType);
r.row = function (_) {
    return arguments.length ? r.response(responseOf(parse, row = _)) : row;
};
r.row(row);
return callback ? r.get(callback) : r;});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return ($__.fs.J$__v2246113107_887_1065 = function J$__v2246113107_887(url, row, callback) {
var vvv_return, vvv_switch, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
url = arguments[0], row = arguments[1], callback = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (arguments.length < 3)
    callback = row, row = null;
r = request(url).mimeType(defaultMimeType);
r.row = function (_) {
    return arguments.length ? r.response(responseOf(parse, row = _)) : row;
};
r.row(row);
return callback ? r.get(callback) : r;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (url, row, callback) {
    if (arguments.length < 3)
        callback = row, row = null;
    var r = request(url).mimeType(defaultMimeType);
    r.row = function (_) {
        return arguments.length ? r.response(responseOf(parse, row = _)) : row;
    };
    r.row(row);
    return callback ? r.get(callback) : r;
};});
    responseOf = ($__.fs.responseOf_256 = function responseOf(parse, row) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parse = arguments[0], row = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (request) {
    return parse(request.responseText, row);
};});
    now = ($__.fs.now_257 = function now() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);});
    clearNow = ($__.fs.clearNow_258 = function clearNow() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
clockNow = 0;});
    Timer = ($__.fs.Timer_259 = function Timer() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._call = this._time = this._next = null;});
    timer = ($__.fs.timer_260 = function timer(callback, delay, time) {
var vvv_return, vvv_switch, t;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0], delay = arguments[1], time = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t = new Timer();
t.restart(callback, delay, time);
return t;});
    timerFlush = ($__.fs.timerFlush_261 = function timerFlush() {
var vvv_return, vvv_switch, t, e;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
now();
++frame;
t = taskHead;
while (t) {
    if ((e = clockNow - t._time) >= 0)
        t._call.call(null, e);
    t = t._next;
}
--frame;});
    wake = ($__.fs.wake_262 = function wake(time) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
time = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
clockNow = (clockLast = time || clock.now()) + clockSkew;
frame = timeout = 0;
try {
    timerFlush();
} finally {
    frame = 0;
    nap();
    clockNow = 0;
}});
    poke$1 = ($__.fs.poke$1_263 = function poke$1() {
var vvv_return, vvv_switch, now, delay;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
now = clock.now();
delay = now - clockLast;
if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now;});
    nap = ($__.fs.nap_264 = function nap() {
var vvv_return, vvv_switch, t0, t1, t2, time;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t1 = taskHead;
time = Infinity;
while (t1) {
    if (t1._call) {
        if (time > t1._time)
            time = t1._time;
        t0 = t1, t1 = t1._next;
    } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
}
taskTail = t0;
sleep(time);});
    sleep = ($__.fs.sleep_265 = function sleep(time) {
var vvv_return, vvv_switch, delay;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
time = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (frame)
    return;
if (timeout)
    timeout = clearTimeout(timeout);
delay = time - clockNow;
if (delay > 24) {
    if (time < Infinity)
        timeout = setTimeout(wake, delay);
    if (interval)
        interval = clearInterval(interval);
} else {
    if (!interval)
        interval = setInterval(poke$1, pokeDelay);
    frame = 1, setFrame(wake);
}});
    timeout$1 = ($__.fs.timeout$1_266 = function timeout$1(callback, delay, time) {
var vvv_return, vvv_switch, t;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0], delay = arguments[1], time = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t = new Timer();
delay = delay == null ? 0 : +delay;
t.restart(function (elapsed) {
    t.stop();
    callback(elapsed + delay);
}, delay, time);
return t;});
    interval$1 = ($__.fs.interval$1_267 = function interval$1(callback, delay, time) {
var vvv_return, vvv_switch, t, total;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0], delay = arguments[1], time = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t = new Timer();
total = delay;
if (delay == null)
    return t.restart(callback, delay, time), t;
delay = +delay, time = time == null ? now() : +time;
t.restart(function tick(elapsed) {
    elapsed += total;
    t.restart(tick, total += delay, time);
    callback(elapsed);
}, delay, time);
return t;});
    newInterval = ($__.fs.newInterval_268 = function newInterval(floori, offseti, count, field) {
var vvv_return, vvv_switch, interval;
interval = function interval(date) {
    return floori(date = new Date(+date)), date;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
floori = arguments[0], offseti = arguments[1], count = arguments[2], field = arguments[3];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    interval = ($__.fs.interval_1071 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1072 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1073 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1074 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1075 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1076 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1077 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1078 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    interval = ($__.fs.interval_1084 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1085 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1086 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1087 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1088 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1089 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1090 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1091 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    interval = ($__.fs.interval_1096 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1097 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1098 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1099 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1100 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1101 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1102 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1103 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    interval = ($__.fs.interval_1108 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1109 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1110 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1111 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1112 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1113 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1114 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1115 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    interval = ($__.fs.interval_1120 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1121 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1122 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1123 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1124 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1125 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1126 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1127 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    interval = ($__.fs.interval_1131 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1132 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1133 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1134 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1135 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1136 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1137 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1138 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    interval = ($__.fs.interval_1142 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1143 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1144 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1145 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1146 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1147 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1148 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1149 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    interval = ($__.fs.interval_1153 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1154 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1155 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1156 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1157 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1158 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1159 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1160 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    interval = ($__.fs.interval_1164 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1165 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1166 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1167 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1168 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1169 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1170 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1171 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    interval = ($__.fs.interval_1175 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1176 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1177 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1178 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1179 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1180 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1181 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1182 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    interval = ($__.fs.interval_1186 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1187 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1188 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1189 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1190 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1191 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1192 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1193 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    interval = ($__.fs.interval_1197 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1198 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1199 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1200 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1201 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1202 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1203 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1204 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    interval = ($__.fs.interval_1209 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1210 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1211 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1212 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1213 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1214 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1215 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1216 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    interval = ($__.fs.interval_1221 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1222 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1223 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1224 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1225 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1226 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1227 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1228 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    interval = ($__.fs.interval_1234 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1235 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1236 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1237 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1238 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1239 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1240 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1241 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    interval = ($__.fs.interval_1246 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1247 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1248 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1249 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1250 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1251 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1252 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1253 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 16:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 16);
    interval = ($__.fs.interval_1258 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1259 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1260 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1261 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1262 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1263 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1264 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1265 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 17:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 17);
    interval = ($__.fs.interval_1269 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1270 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1271 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1272 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1273 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1274 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1275 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1276 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 18:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 18);
    interval = ($__.fs.interval_1280 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1281 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1282 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1283 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1284 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1285 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1286 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1287 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 19);
    interval = ($__.fs.interval_1291 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1292 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1293 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1294 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1295 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1296 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1297 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1298 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 20:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 20);
    interval = ($__.fs.interval_1302 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1303 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1304 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1305 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1306 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1307 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1308 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1309 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 21:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 21);
    interval = ($__.fs.interval_1313 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1314 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1315 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1316 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1317 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1318 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1319 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1320 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 22:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 22);
    interval = ($__.fs.interval_1324 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1325 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1326 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1327 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1328 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1329 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1330 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1331 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 23:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 23);
    interval = ($__.fs.interval_1335 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1336 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1337 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1338 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1339 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1340 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1341 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1342 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 24:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 24);
    interval = ($__.fs.interval_1347 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1348 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1349 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1350 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1351 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1352 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1353 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1354 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
case 25:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 25);
    interval = ($__.fs.interval_1359 = function interval(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(+date)), date;});
    interval.floor = interval;
    interval.ceil = ($__.fs.J$__v2246113107_918_1360 = function J$__v2246113107_918(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;});
    interval.round = ($__.fs.J$__v2246113107_920_1361 = function J$__v2246113107_920(date) {
var vvv_return, vvv_switch, d0, d1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = interval(date);
d1 = interval.ceil(date);
return date - d0 < d1 - date ? d0 : d1;});
    interval.offset = ($__.fs.J$__v2246113107_922_1362 = function J$__v2246113107_922(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;});
    interval.range = ($__.fs.J$__v2246113107_924_1363 = function J$__v2246113107_924(start, stop, step) {
var vvv_return, vvv_switch, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], stop = arguments[1], step = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range = [];
start = interval.ceil(start);
step = step == null ? 1 : Math.floor(step);
if (!(start < stop) || !(step > 0))
    return range;
do
    range.push(new Date(+start));
while (offseti(start, step), floori(start), start < stop);
return range;});
    interval.filter = ($__.fs.J$__v2246113107_930_1364 = function J$__v2246113107_930(test) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
test = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    while (floori(date), !test(date))
        date.setTime(date - 1);
}, function (date, step) {
    while (--step >= 0)
        while (offseti(date, 1), !test(date));
});});
    count;
    interval.count = ($__.fs.J$__v2246113107_932_1365 = function J$__v2246113107_932(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t0$1.setTime(+start), t1$1.setTime(+end);
floori(t0$1), floori(t1$1);
return Math.floor(count(t0$1, t1$1));});
    interval.every = ($__.fs.J$__v2246113107_938_1366 = function J$__v2246113107_938(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.floor(step);
return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
    return field(d) % step === 0;
} : function (d) {
    return interval.count(0, d) % step === 0;
});});
    return interval;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
interval.floor = interval;
interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
};
interval.round = function (date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
};
interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
};
interval.range = function (start, stop, step) {
    var range = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0))
        return range;
    do
        range.push(new Date(+start));
    while (offseti(start, step), floori(start), start < stop);
    return range;
};
interval.filter = function (test) {
    return newInterval(function (date) {
        while (floori(date), !test(date))
            date.setTime(date - 1);
    }, function (date, step) {
        while (--step >= 0)
            while (offseti(date, 1), !test(date));
    });
};
if (count) {
    interval.count = function (start, end) {
        t0$1.setTime(+start), t1$1.setTime(+end);
        floori(t0$1), floori(t1$1);
        return Math.floor(count(t0$1, t1$1));
    };
    interval.every = function (step) {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
            return field(d) % step === 0;
        } : function (d) {
            return interval.count(0, d) % step === 0;
        });
    };
}
return interval;});
    weekday = ($__.fs.weekday_269 = function weekday(i) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
i = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_987_1128 = function J$__v2246113107_987(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
date.setHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_989_1129 = function J$__v2246113107_989(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() + step * 7);}), ($__.fs.J$__v2246113107_991_1130 = function J$__v2246113107_991(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;}), 5, true, $__.uid);
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_987_1139 = function J$__v2246113107_987(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
date.setHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_989_1140 = function J$__v2246113107_989(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() + step * 7);}), ($__.fs.J$__v2246113107_991_1141 = function J$__v2246113107_991(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;}), 6, true, $__.uid);
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_987_1150 = function J$__v2246113107_987(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
date.setHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_989_1151 = function J$__v2246113107_989(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() + step * 7);}), ($__.fs.J$__v2246113107_991_1152 = function J$__v2246113107_991(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;}), 7, true, $__.uid);
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_987_1161 = function J$__v2246113107_987(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
date.setHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_989_1162 = function J$__v2246113107_989(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() + step * 7);}), ($__.fs.J$__v2246113107_991_1163 = function J$__v2246113107_991(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;}), 8, true, $__.uid);
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_987_1172 = function J$__v2246113107_987(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
date.setHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_989_1173 = function J$__v2246113107_989(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() + step * 7);}), ($__.fs.J$__v2246113107_991_1174 = function J$__v2246113107_991(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;}), 9, true, $__.uid);
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_987_1183 = function J$__v2246113107_987(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
date.setHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_989_1184 = function J$__v2246113107_989(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() + step * 7);}), ($__.fs.J$__v2246113107_991_1185 = function J$__v2246113107_991(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;}), 10, true, $__.uid);
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_987_1194 = function J$__v2246113107_987(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
date.setHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_989_1195 = function J$__v2246113107_989(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() + step * 7);}), ($__.fs.J$__v2246113107_991_1196 = function J$__v2246113107_991(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;}), 11, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
}, function (date, step) {
    date.setDate(date.getDate() + step * 7);
}, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
});});
    utcWeekday = ($__.fs.utcWeekday_270 = function utcWeekday(i) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
i = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1040_1266 = function J$__v2246113107_1040(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
date.setUTCHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1042_1267 = function J$__v2246113107_1042(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() + step * 7);}), ($__.fs.J$__v2246113107_1044_1268 = function J$__v2246113107_1044(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationWeek;}), 17, true, $__.uid);
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1040_1277 = function J$__v2246113107_1040(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
date.setUTCHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1042_1278 = function J$__v2246113107_1042(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() + step * 7);}), ($__.fs.J$__v2246113107_1044_1279 = function J$__v2246113107_1044(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationWeek;}), 18, true, $__.uid);
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1040_1288 = function J$__v2246113107_1040(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
date.setUTCHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1042_1289 = function J$__v2246113107_1042(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() + step * 7);}), ($__.fs.J$__v2246113107_1044_1290 = function J$__v2246113107_1044(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationWeek;}), 19, true, $__.uid);
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1040_1299 = function J$__v2246113107_1040(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
date.setUTCHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1042_1300 = function J$__v2246113107_1042(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() + step * 7);}), ($__.fs.J$__v2246113107_1044_1301 = function J$__v2246113107_1044(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationWeek;}), 20, true, $__.uid);
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1040_1310 = function J$__v2246113107_1040(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
date.setUTCHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1042_1311 = function J$__v2246113107_1042(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() + step * 7);}), ($__.fs.J$__v2246113107_1044_1312 = function J$__v2246113107_1044(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationWeek;}), 21, true, $__.uid);
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1040_1321 = function J$__v2246113107_1040(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
date.setUTCHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1042_1322 = function J$__v2246113107_1042(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() + step * 7);}), ($__.fs.J$__v2246113107_1044_1323 = function J$__v2246113107_1044(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationWeek;}), 22, true, $__.uid);
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    return (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1040_1332 = function J$__v2246113107_1040(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
date.setUTCHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1042_1333 = function J$__v2246113107_1042(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() + step * 7);}), ($__.fs.J$__v2246113107_1044_1334 = function J$__v2246113107_1044(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationWeek;}), 23, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return newInterval(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
}, function (start, end) {
    return (end - start) / durationWeek;
});});
    formatDecimal = ($__.fs.formatDecimal_271 = function formatDecimal(x, p) {
var vvv_return, vvv_switch, i, coefficient;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf('e')) < 0)
    return null;
coefficient = x.slice(0, i);
return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
];});
    exponent$1 = ($__.fs.exponent$1_272 = function exponent$1(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;});
    formatGroup = ($__.fs.formatGroup_273 = function formatGroup(grouping, thousands) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
grouping = arguments[0], thousands = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_1071_1382 = function J$__v2246113107_1071(value, width) {
var vvv_return, vvv_switch, i, t, j, g, length;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], width = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = value.length;
t = [];
j = 0;
g = grouping[0];
length = 0;
while (i > 0 && g > 0) {
    if (length + g + 1 > width)
        g = Math.max(1, width - length);
    t.push(value.substring(i -= g, i + g));
    if ((length += g + 1) > width)
        break;
    g = grouping[j = (j + 1) % grouping.length];
}
return t.reverse().join(thousands);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
        if (length + g + 1 > width)
            g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width)
            break;
        g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
};});
    formatDefault = ($__.fs.formatDefault_274 = function formatDefault(x, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = x.toPrecision(p);
out:
    for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
        switch (x[i]) {
        case '.':
            i0 = i1 = i;
            break;
        case '0':
            if (i0 === 0)
                i0 = i;
            i1 = i;
            break;
        case 'e':
            break out;
        default:
            if (i0 > 0)
                i0 = 0;
            break;
        }
    }
return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;});
    formatPrefixAuto = ($__.fs.formatPrefixAuto_275 = function formatPrefixAuto(x, p) {
var vvv_return, vvv_switch, d, coefficient, exponent, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d = formatDecimal(x, p);
if (!d)
    return x + '';
coefficient = d[0];
exponent = d[1];
i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1;
n = coefficient.length;
return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join('0') : i > 0 ? coefficient.slice(0, i) + '.' + coefficient.slice(i) : '0.' + new Array(1 - i).join('0') + formatDecimal(x, Math.max(0, p + i - 1))[0];});
    formatRounded = ($__.fs.formatRounded_276 = function formatRounded(x, p) {
var vvv_return, vvv_switch, d, coefficient, exponent;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d = formatDecimal(x, p);
if (!d)
    return x + '';
coefficient = d[0];
exponent = d[1];
return exponent < 0 ? '0.' + new Array(-exponent).join('0') + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + '.' + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join('0');});
    formatSpecifier = ($__.fs.formatSpecifier_277 = function formatSpecifier(specifier) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
specifier = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new FormatSpecifier(specifier);});
    FormatSpecifier = ($__.fs.FormatSpecifier_278 = function FormatSpecifier(specifier) {
var vvv_return, vvv_switch, match, fill, align, sign, symbol, zero, width, comma, precision, type;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
specifier = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!(match = re.exec(specifier)))
    throw new Error('invalid format: ' + specifier);
fill = match[1] || ' ';
align = match[2] || '>';
sign = match[3] || '-';
symbol = match[4] || '';
zero = !!match[5];
width = match[6] && +match[6];
comma = !!match[7];
precision = match[8] && +match[8].slice(1);
type = match[9] || '';
if (type === 'n')
    comma = true, type = 'g';
else if (!formatTypes[type])
    type = '';
if (zero || fill === '0' && align === '=')
    zero = true, fill = '0', align = '=';
this.fill = fill;
this.align = align;
this.sign = sign;
this.symbol = symbol;
this.zero = zero;
this.width = width;
this.comma = comma;
this.precision = precision;
this.type = type;});
    identity$3 = ($__.fs.identity$3_279 = function identity$3(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x;});
    formatLocale = ($__.fs.formatLocale_280 = function formatLocale(locale) {
var vvv_return, vvv_switch, group, currency, decimal, newFormat, formatPrefix;
newFormat = function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, type = specifier.type;
    var prefix = symbol === '$' ? currency[0] : symbol === '#' && /[boxX]/.test(type) ? '0' + type.toLowerCase() : '', suffix = symbol === '$' ? currency[1] : /[%p]/.test(type) ? '%' : '';
    var formatType = formatTypes[type], maybeSuffix = !type || /[defgprs%]/.test(type);
    precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format(value) {
        var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
        if (type === 'c') {
            valueSuffix = formatType(value) + valueSuffix;
            value = '';
        } else {
            value = +value;
            var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);
            value = formatType(value, precision);
            if (valueNegative) {
                i = -1, n = value.length;
                valueNegative = false;
                while (++i < n) {
                    if (c = value.charCodeAt(i), 48 < c && c < 58 || type === 'x' && 96 < c && c < 103 || type === 'X' && 64 < c && c < 71) {
                        valueNegative = true;
                        break;
                    }
                }
            }
            valuePrefix = (valueNegative ? sign === '(' ? sign : '-' : sign === '-' || sign === '(' ? '' : sign) + valuePrefix;
            valueSuffix = valueSuffix + (type === 's' ? prefixes[8 + prefixExponent / 3] : '') + (valueNegative && sign === '(' ? ')' : '');
            if (maybeSuffix) {
                i = -1, n = value.length;
                while (++i < n) {
                    if (c = value.charCodeAt(i), 48 > c || c > 57) {
                        valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                        value = value.slice(0, i);
                        break;
                    }
                }
            }
        }
        if (comma && !zero)
            value = group(value, Infinity);
        var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : '';
        if (comma && zero)
            value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = '';
        switch (align) {
        case '<':
            return valuePrefix + value + valueSuffix + padding;
        case '=':
            return valuePrefix + padding + value + valueSuffix;
        case '^':
            return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
        }
        return padding + valuePrefix + value + valueSuffix;
    }
    format.toString = function () {
        return specifier + '';
    };
    return format;
};
formatPrefix = function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = 'f', specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function (value) {
        return f(k * value) + prefix;
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
locale = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    newFormat = ($__.fs.newFormat_1380 = function newFormat(specifier) {
var vvv_return, vvv_switch, fill, align, sign, symbol, zero, width, comma, precision, type, prefix, suffix, formatType, maybeSuffix, format;
format = function format(value) {
    var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
    if (type === 'c') {
        valueSuffix = formatType(value) + valueSuffix;
        value = '';
    } else {
        value = +value;
        var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);
        value = formatType(value, precision);
        if (valueNegative) {
            i = -1, n = value.length;
            valueNegative = false;
            while (++i < n) {
                if (c = value.charCodeAt(i), 48 < c && c < 58 || type === 'x' && 96 < c && c < 103 || type === 'X' && 64 < c && c < 71) {
                    valueNegative = true;
                    break;
                }
            }
        }
        valuePrefix = (valueNegative ? sign === '(' ? sign : '-' : sign === '-' || sign === '(' ? '' : sign) + valuePrefix;
        valueSuffix = valueSuffix + (type === 's' ? prefixes[8 + prefixExponent / 3] : '') + (valueNegative && sign === '(' ? ')' : '');
        if (maybeSuffix) {
            i = -1, n = value.length;
            while (++i < n) {
                if (c = value.charCodeAt(i), 48 > c || c > 57) {
                    valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                    value = value.slice(0, i);
                    break;
                }
            }
        }
    }
    if (comma && !zero)
        value = group(value, Infinity);
    var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : '';
    if (comma && zero)
        value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = '';
    switch (align) {
    case '<':
        return valuePrefix + value + valueSuffix + padding;
    case '=':
        return valuePrefix + padding + value + valueSuffix;
    case '^':
        return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
    }
    return padding + valuePrefix + value + valueSuffix;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
specifier = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
specifier = formatSpecifier(specifier);
fill = specifier.fill;
align = specifier.align;
sign = specifier.sign;
symbol = specifier.symbol;
zero = specifier.zero;
width = specifier.width;
comma = specifier.comma;
precision = specifier.precision;
type = specifier.type;
prefix = symbol === '$' ? currency[0] : symbol === '#' && /[boxX]/.test(type) ? '0' + type.toLowerCase() : '';
suffix = symbol === '$' ? currency[1] : /[%p]/.test(type) ? '%' : '';
formatType = formatTypes[type];
maybeSuffix = !type || /[defgprs%]/.test(type);
precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
format.toString = function () {
    return specifier + '';
};
return format;});
    formatPrefix = ($__.fs.formatPrefix_1381 = function formatPrefix(specifier, value) {
var vvv_return, vvv_switch, f, e, k, prefix;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
specifier = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
f = newFormat((specifier = formatSpecifier(specifier), specifier.type = 'f', specifier));
e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3;
k = Math.pow(10, -e);
prefix = prefixes[8 + e / 3];
return function (value) {
    return f(k * value) + prefix;
};});
    group = ((TAJS_restrictToType((locale, $__.os.oid45).grouping, 'object'), TAJS_restrictToType((locale, $__.os.oid45).thousands, 'string')), (formatGroup, $__.fs.formatGroup_273)(TAJS_restrictToType((locale, $__.os.oid45).grouping, 'object'), TAJS_restrictToType((locale, $__.os.oid45).thousands, 'string'), 0, true, $__.uid));
    currency = TAJS_restrictToType((locale, $__.os.oid45).currency, 'object');
    decimal = TAJS_restrictToType((locale, $__.os.oid45).decimal, 'string');
    return $__.os.oid46 = {
        'format': newFormat,
        'formatPrefix': formatPrefix
    };
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3;
currency = locale.currency;
decimal = locale.decimal;
return {
    format: newFormat,
    formatPrefix: formatPrefix
};});
    defaultLocale = ($__.fs.defaultLocale_281 = function defaultLocale(definition) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
definition = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    locale = (formatLocale, $__.fs.formatLocale_280)(definition, 0, true, $__.uid);
    (exports, $__.os.oid0).format = TAJS_restrictToType((locale, $__.os.oid46).format, 'function');
    (exports, $__.os.oid0).formatPrefix = TAJS_restrictToType((locale, $__.os.oid46).formatPrefix, 'function');
    return locale;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
locale = formatLocale(definition);
exports.format = locale.format;
exports.formatPrefix = locale.formatPrefix;
return locale;});
    precisionFixed = ($__.fs.precisionFixed_282 = function precisionFixed(step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.max(0, -exponent$1(Math.abs(step)));});
    precisionPrefix = ($__.fs.precisionPrefix_283 = function precisionPrefix(step, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));});
    precisionRound = ($__.fs.precisionRound_284 = function precisionRound(step, max) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
step = arguments[0], max = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
step = Math.abs(step), max = Math.abs(max) - step;
return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;});
    localDate = ($__.fs.localDate_285 = function localDate(d) {
var vvv_return, vvv_switch, date;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (0 <= d.y && d.y < 100) {
    date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
}
return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);});
    utcDate = ($__.fs.utcDate_286 = function utcDate(d) {
var vvv_return, vvv_switch, date;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (0 <= d.y && d.y < 100) {
    date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
}
return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));});
    newYear = ($__.fs.newYear_287 = function newYear(y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return {
    y: y,
    m: 0,
    d: 1,
    H: 0,
    M: 0,
    S: 0,
    L: 0
};});
    formatLocale$1 = ($__.fs.formatLocale$1_288 = function formatLocale$1(locale) {
var vvv_return, vvv_switch, locale_dateTime, locale_date, locale_time, locale_periods, locale_weekdays, locale_shortWeekdays, locale_months, locale_shortMonths, periodRe, periodLookup, weekdayRe, weekdayLookup, shortWeekdayRe, shortWeekdayLookup, monthRe, monthLookup, shortMonthRe, shortMonthLookup, formats, utcFormats, parses, newFormat, newParse, parseSpecifier, parsePeriod, parseShortWeekday, parseWeekday, parseShortMonth, parseMonth, parseLocaleDateTime, parseLocaleDate, parseLocaleTime, formatShortWeekday, formatWeekday, formatShortMonth, formatMonth, formatPeriod, formatUTCShortWeekday, formatUTCWeekday, formatUTCShortMonth, formatUTCMonth, formatUTCPeriod;
newFormat = function newFormat(specifier, formats) {
    return function (date) {
        var string = [], i = -1, j = 0, n = specifier.length, c, pad, format;
        if (!(date instanceof Date))
            date = new Date(+date);
        while (++i < n) {
            if (specifier.charCodeAt(i) === 37) {
                string.push(specifier.slice(j, i));
                if ((pad = pads[c = specifier.charAt(++i)]) != null)
                    c = specifier.charAt(++i);
                else
                    pad = c === 'e' ? ' ' : '0';
                if (format = formats[c])
                    c = format(date, pad);
                string.push(c);
                j = i + 1;
            }
        }
        string.push(specifier.slice(j, i));
        return string.join('');
    };
};
newParse = function newParse(specifier, newDate) {
    return function (string) {
        var d = newYear(1900), i = parseSpecifier(d, specifier, string += '', 0);
        if (i != string.length)
            return null;
        if ('p' in d)
            d.H = d.H % 12 + d.p * 12;
        if ('W' in d || 'U' in d) {
            if (!('w' in d))
                d.w = 'W' in d ? 1 : 0;
            var day = 'Z' in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
            d.m = 0;
            d.d = 'W' in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
        }
        if ('Z' in d) {
            d.H += d.Z / 100 | 0;
            d.M += d.Z % 100;
            return utcDate(d);
        }
        return newDate(d);
    };
};
parseSpecifier = function parseSpecifier(d, specifier, string, j) {
    var i = 0, n = specifier.length, m = string.length, c, parse;
    while (i < n) {
        if (j >= m)
            return -1;
        c = specifier.charCodeAt(i++);
        if (c === 37) {
            c = specifier.charAt(i++);
            parse = parses[c in pads ? specifier.charAt(i++) : c];
            if (!parse || (j = parse(d, string, j)) < 0)
                return -1;
        } else if (c != string.charCodeAt(j++)) {
            return -1;
        }
    }
    return j;
};
parsePeriod = function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
};
parseShortWeekday = function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
};
parseWeekday = function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
};
parseShortMonth = function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
};
parseMonth = function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
};
parseLocaleDateTime = function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
};
parseLocaleDate = function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
};
parseLocaleTime = function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
};
formatShortWeekday = function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
};
formatWeekday = function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
};
formatShortMonth = function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
};
formatMonth = function formatMonth(d) {
    return locale_months[d.getMonth()];
};
formatPeriod = function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
};
formatUTCShortWeekday = function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
};
formatUTCWeekday = function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
};
formatUTCShortMonth = function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
};
formatUTCMonth = function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
};
formatUTCPeriod = function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
locale = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    newFormat = ($__.fs.newFormat_1383 = function newFormat(specifier, formats) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
specifier = arguments[0], formats = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_1119_1404 = function J$__v2246113107_1119(date) {
var vvv_return, vvv_switch, string, i, j, n, c, pad, format;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
string = [];
i = -1;
j = 0;
n = specifier.length;
if (!(date instanceof Date))
    date = new Date(+date);
while (++i < n) {
    if (specifier.charCodeAt(i) === 37) {
        string.push(specifier.slice(j, i));
        if ((pad = pads[c = specifier.charAt(++i)]) != null)
            c = specifier.charAt(++i);
        else
            pad = c === 'e' ? ' ' : '0';
        if (format = formats[c])
            c = format(date, pad);
        string.push(c);
        j = i + 1;
    }
}
string.push(specifier.slice(j, i));
return string.join('');});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return ($__.fs.J$__v2246113107_1119_1405 = function J$__v2246113107_1119(date) {
var vvv_return, vvv_switch, string, i, j, n, c, pad, format;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
string = [];
i = -1;
j = 0;
n = specifier.length;
if (!(date instanceof Date))
    date = new Date(+date);
while (++i < n) {
    if (specifier.charCodeAt(i) === 37) {
        string.push(specifier.slice(j, i));
        if ((pad = pads[c = specifier.charAt(++i)]) != null)
            c = specifier.charAt(++i);
        else
            pad = c === 'e' ? ' ' : '0';
        if (format = formats[c])
            c = format(date, pad);
        string.push(c);
        j = i + 1;
    }
}
string.push(specifier.slice(j, i));
return string.join('');});
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return ($__.fs.J$__v2246113107_1119_1406 = function J$__v2246113107_1119(date) {
var vvv_return, vvv_switch, string, i, j, n, c, pad, format;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
string = [];
i = -1;
j = 0;
n = specifier.length;
if (!(date instanceof Date))
    date = new Date(+date);
while (++i < n) {
    if (specifier.charCodeAt(i) === 37) {
        string.push(specifier.slice(j, i));
        if ((pad = pads[c = specifier.charAt(++i)]) != null)
            c = specifier.charAt(++i);
        else
            pad = c === 'e' ? ' ' : '0';
        if (format = formats[c])
            c = format(date, pad);
        string.push(c);
        j = i + 1;
    }
}
string.push(specifier.slice(j, i));
return string.join('');});
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return ($__.fs.J$__v2246113107_1119_1407 = function J$__v2246113107_1119(date) {
var vvv_return, vvv_switch, string, i, j, n, c, pad, format;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
string = [];
i = -1;
j = 0;
n = specifier.length;
if (!(date instanceof Date))
    date = new Date(+date);
while (++i < n) {
    if (specifier.charCodeAt(i) === 37) {
        string.push(specifier.slice(j, i));
        if ((pad = pads[c = specifier.charAt(++i)]) != null)
            c = specifier.charAt(++i);
        else
            pad = c === 'e' ? ' ' : '0';
        if (format = formats[c])
            c = format(date, pad);
        string.push(c);
        j = i + 1;
    }
}
string.push(specifier.slice(j, i));
return string.join('');});
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    return ($__.fs.J$__v2246113107_1119_1408 = function J$__v2246113107_1119(date) {
var vvv_return, vvv_switch, string, i, j, n, c, pad, format;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
string = [];
i = -1;
j = 0;
n = specifier.length;
if (!(date instanceof Date))
    date = new Date(+date);
while (++i < n) {
    if (specifier.charCodeAt(i) === 37) {
        string.push(specifier.slice(j, i));
        if ((pad = pads[c = specifier.charAt(++i)]) != null)
            c = specifier.charAt(++i);
        else
            pad = c === 'e' ? ' ' : '0';
        if (format = formats[c])
            c = format(date, pad);
        string.push(c);
        j = i + 1;
    }
}
string.push(specifier.slice(j, i));
return string.join('');});
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    return ($__.fs.J$__v2246113107_1119_1409 = function J$__v2246113107_1119(date) {
var vvv_return, vvv_switch, string, i, j, n, c, pad, format;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
string = [];
i = -1;
j = 0;
n = specifier.length;
if (!(date instanceof Date))
    date = new Date(+date);
while (++i < n) {
    if (specifier.charCodeAt(i) === 37) {
        string.push(specifier.slice(j, i));
        if ((pad = pads[c = specifier.charAt(++i)]) != null)
            c = specifier.charAt(++i);
        else
            pad = c === 'e' ? ' ' : '0';
        if (format = formats[c])
            c = format(date, pad);
        string.push(c);
        j = i + 1;
    }
}
string.push(specifier.slice(j, i));
return string.join('');});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (date) {
    var string = [], i = -1, j = 0, n = specifier.length, c, pad, format;
    if (!(date instanceof Date))
        date = new Date(+date);
    while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
            string.push(specifier.slice(j, i));
            if ((pad = pads[c = specifier.charAt(++i)]) != null)
                c = specifier.charAt(++i);
            else
                pad = c === 'e' ? ' ' : '0';
            if (format = formats[c])
                c = format(date, pad);
            string.push(c);
            j = i + 1;
        }
    }
    string.push(specifier.slice(j, i));
    return string.join('');
};});
    newParse = ($__.fs.newParse_1384 = function newParse(specifier, newDate) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
specifier = arguments[0], newDate = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (string) {
    var d = newYear(1900), i = parseSpecifier(d, specifier, string += '', 0);
    if (i != string.length)
        return null;
    if ('p' in d)
        d.H = d.H % 12 + d.p * 12;
    if ('W' in d || 'U' in d) {
        if (!('w' in d))
            d.w = 'W' in d ? 1 : 0;
        var day = 'Z' in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
        d.m = 0;
        d.d = 'W' in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
    }
    if ('Z' in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
    }
    return newDate(d);
};});
    parseSpecifier = ($__.fs.parseSpecifier_1385 = function parseSpecifier(d, specifier, string, j) {
var vvv_return, vvv_switch, i, n, m, c, parse;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], specifier = arguments[1], string = arguments[2], j = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = 0;
n = specifier.length;
m = string.length;
while (i < n) {
    if (j >= m)
        return -1;
    c = specifier.charCodeAt(i++);
    if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0)
            return -1;
    } else if (c != string.charCodeAt(j++)) {
        return -1;
    }
}
return j;});
    parsePeriod = ($__.fs.parsePeriod_1386 = function parsePeriod(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = periodRe.exec(string.slice(i));
return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;});
    parseShortWeekday = ($__.fs.parseShortWeekday_1387 = function parseShortWeekday(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = shortWeekdayRe.exec(string.slice(i));
return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;});
    parseWeekday = ($__.fs.parseWeekday_1388 = function parseWeekday(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = weekdayRe.exec(string.slice(i));
return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;});
    parseShortMonth = ($__.fs.parseShortMonth_1389 = function parseShortMonth(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = shortMonthRe.exec(string.slice(i));
return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;});
    parseMonth = ($__.fs.parseMonth_1390 = function parseMonth(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = monthRe.exec(string.slice(i));
return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;});
    parseLocaleDateTime = ($__.fs.parseLocaleDateTime_1391 = function parseLocaleDateTime(d, string, i) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return parseSpecifier(d, locale_dateTime, string, i);});
    parseLocaleDate = ($__.fs.parseLocaleDate_1392 = function parseLocaleDate(d, string, i) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return parseSpecifier(d, locale_date, string, i);});
    parseLocaleTime = ($__.fs.parseLocaleTime_1393 = function parseLocaleTime(d, string, i) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return parseSpecifier(d, locale_time, string, i);});
    formatShortWeekday = ($__.fs.formatShortWeekday_1394 = function formatShortWeekday(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return locale_shortWeekdays[d.getDay()];});
    formatWeekday = ($__.fs.formatWeekday_1395 = function formatWeekday(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return locale_weekdays[d.getDay()];});
    formatShortMonth = ($__.fs.formatShortMonth_1396 = function formatShortMonth(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return locale_shortMonths[d.getMonth()];});
    formatMonth = ($__.fs.formatMonth_1397 = function formatMonth(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return locale_months[d.getMonth()];});
    formatPeriod = ($__.fs.formatPeriod_1398 = function formatPeriod(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return locale_periods[+(d.getHours() >= 12)];});
    formatUTCShortWeekday = ($__.fs.formatUTCShortWeekday_1399 = function formatUTCShortWeekday(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return locale_shortWeekdays[d.getUTCDay()];});
    formatUTCWeekday = ($__.fs.formatUTCWeekday_1400 = function formatUTCWeekday(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return locale_weekdays[d.getUTCDay()];});
    formatUTCShortMonth = ($__.fs.formatUTCShortMonth_1401 = function formatUTCShortMonth(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return locale_shortMonths[d.getUTCMonth()];});
    formatUTCMonth = ($__.fs.formatUTCMonth_1402 = function formatUTCMonth(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return locale_months[d.getUTCMonth()];});
    formatUTCPeriod = ($__.fs.formatUTCPeriod_1403 = function formatUTCPeriod(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return locale_periods[+(d.getUTCHours() >= 12)];});
    locale_dateTime = TAJS_restrictToType((locale, $__.os.oid48).dateTime, 'string');
    locale_date = TAJS_restrictToType((locale, $__.os.oid48).date, 'string');
    locale_time = TAJS_restrictToType((locale, $__.os.oid48).time, 'string');
    locale_periods = TAJS_restrictToType((locale, $__.os.oid48).periods, 'object');
    locale_weekdays = TAJS_restrictToType((locale, $__.os.oid48).days, 'object');
    locale_shortWeekdays = TAJS_restrictToType((locale, $__.os.oid48).shortDays, 'object');
    locale_months = TAJS_restrictToType((locale, $__.os.oid48).months, 'object');
    locale_shortMonths = TAJS_restrictToType((locale, $__.os.oid48).shortMonths, 'object');
    periodRe = (formatRe, $__.fs.formatRe_291)(locale_periods, 0, true, $__.uid);
    periodLookup = (formatLookup, $__.fs.formatLookup_292)(locale_periods, 0, true, $__.uid);
    weekdayRe = (formatRe, $__.fs.formatRe_291)(locale_weekdays, 1, true, $__.uid);
    weekdayLookup = (formatLookup, $__.fs.formatLookup_292)(locale_weekdays, 1, true, $__.uid);
    shortWeekdayRe = (formatRe, $__.fs.formatRe_291)(locale_shortWeekdays, 2, true, $__.uid);
    shortWeekdayLookup = (formatLookup, $__.fs.formatLookup_292)(locale_shortWeekdays, 2, true, $__.uid);
    monthRe = (formatRe, $__.fs.formatRe_291)(locale_months, 3, true, $__.uid);
    monthLookup = (formatLookup, $__.fs.formatLookup_292)(locale_months, 3, true, $__.uid);
    shortMonthRe = (formatRe, $__.fs.formatRe_291)(locale_shortMonths, 4, true, $__.uid);
    shortMonthLookup = (formatLookup, $__.fs.formatLookup_292)(locale_shortMonths, 4, true, $__.uid);
    formats = $__.os.oid54 = {
        'a': formatShortWeekday,
        'A': formatWeekday,
        'b': formatShortMonth,
        'B': formatMonth,
        'c': null,
        'd': formatDayOfMonth,
        'e': formatDayOfMonth,
        'H': formatHour24,
        'I': formatHour12,
        'j': formatDayOfYear,
        'L': formatMilliseconds,
        'm': formatMonthNumber,
        'M': formatMinutes,
        'p': formatPeriod,
        'S': formatSeconds,
        'U': formatWeekNumberSunday,
        'w': formatWeekdayNumber,
        'W': formatWeekNumberMonday,
        'x': null,
        'X': null,
        'y': formatYear,
        'Y': formatFullYear,
        'Z': formatZone,
        '%': formatLiteralPercent
    };
    utcFormats = $__.os.oid55 = {
        'a': formatUTCShortWeekday,
        'A': formatUTCWeekday,
        'b': formatUTCShortMonth,
        'B': formatUTCMonth,
        'c': null,
        'd': formatUTCDayOfMonth,
        'e': formatUTCDayOfMonth,
        'H': formatUTCHour24,
        'I': formatUTCHour12,
        'j': formatUTCDayOfYear,
        'L': formatUTCMilliseconds,
        'm': formatUTCMonthNumber,
        'M': formatUTCMinutes,
        'p': formatUTCPeriod,
        'S': formatUTCSeconds,
        'U': formatUTCWeekNumberSunday,
        'w': formatUTCWeekdayNumber,
        'W': formatUTCWeekNumberMonday,
        'x': null,
        'X': null,
        'y': formatUTCYear,
        'Y': formatUTCFullYear,
        'Z': formatUTCZone,
        '%': formatLiteralPercent
    };
    parses = $__.os.oid56 = {
        'a': parseShortWeekday,
        'A': parseWeekday,
        'b': parseShortMonth,
        'B': parseMonth,
        'c': parseLocaleDateTime,
        'd': parseDayOfMonth,
        'e': parseDayOfMonth,
        'H': parseHour24,
        'I': parseHour24,
        'j': parseDayOfYear,
        'L': parseMilliseconds,
        'm': parseMonthNumber,
        'M': parseMinutes,
        'p': parsePeriod,
        'S': parseSeconds,
        'U': parseWeekNumberSunday,
        'w': parseWeekdayNumber,
        'W': parseWeekNumberMonday,
        'x': parseLocaleDate,
        'X': parseLocaleTime,
        'y': parseYear,
        'Y': parseFullYear,
        'Z': parseZone,
        '%': parseLiteralPercent
    };
    (formats, $__.os.oid54).x = (newFormat, $__.fs.newFormat_1383)(locale_date, formats, 0, true, $__.uid);
    (formats, $__.os.oid54).X = (newFormat, $__.fs.newFormat_1383)(locale_time, formats, 1, true, $__.uid);
    (formats, $__.os.oid54).c = (newFormat, $__.fs.newFormat_1383)(locale_dateTime, formats, 2, true, $__.uid);
    (utcFormats, $__.os.oid55).x = (newFormat, $__.fs.newFormat_1383)(locale_date, utcFormats, 3, true, $__.uid);
    (utcFormats, $__.os.oid55).X = (newFormat, $__.fs.newFormat_1383)(locale_time, utcFormats, 4, true, $__.uid);
    (utcFormats, $__.os.oid55).c = (newFormat, $__.fs.newFormat_1383)(locale_dateTime, utcFormats, 5, true, $__.uid);
    return $__.os.oid57 = {
        'format': ($__.fs.J$__v2246113107_1146_1410 = function J$__v2246113107_1146(specifier) {
var vvv_return, vvv_switch, f;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
specifier = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
f = newFormat(specifier += '', formats);
f.toString = function () {
    return specifier;
};
return f;}),
        'parse': ($__.fs.J$__v2246113107_1150_1411 = function J$__v2246113107_1150(specifier) {
var vvv_return, vvv_switch, p;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
specifier = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
p = newParse(specifier += '', localDate);
p.toString = function () {
    return specifier;
};
return p;}),
        'utcFormat': ($__.fs.J$__v2246113107_1154_1412 = function J$__v2246113107_1154(specifier) {
var vvv_return, vvv_switch, f;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
specifier = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
f = newFormat(specifier += '', utcFormats);
f.toString = function () {
    return specifier;
};
return f;}),
        'utcParse': ($__.fs.J$__v2246113107_1158_1413 = function J$__v2246113107_1158(specifier) {
var vvv_return, vvv_switch, p;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
specifier = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
p = newParse(specifier, utcDate);
p.toString = function () {
    return specifier;
};
return p;})
    };
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
locale_dateTime = locale.dateTime;
locale_date = locale.date;
locale_time = locale.time;
locale_periods = locale.periods;
locale_weekdays = locale.days;
locale_shortWeekdays = locale.shortDays;
locale_months = locale.months;
locale_shortMonths = locale.shortMonths;
periodRe = formatRe(locale_periods);
periodLookup = formatLookup(locale_periods);
weekdayRe = formatRe(locale_weekdays);
weekdayLookup = formatLookup(locale_weekdays);
shortWeekdayRe = formatRe(locale_shortWeekdays);
shortWeekdayLookup = formatLookup(locale_shortWeekdays);
monthRe = formatRe(locale_months);
monthLookup = formatLookup(locale_months);
shortMonthRe = formatRe(locale_shortMonths);
shortMonthLookup = formatLookup(locale_shortMonths);
formats = {
    'a': formatShortWeekday,
    'A': formatWeekday,
    'b': formatShortMonth,
    'B': formatMonth,
    'c': null,
    'd': formatDayOfMonth,
    'e': formatDayOfMonth,
    'H': formatHour24,
    'I': formatHour12,
    'j': formatDayOfYear,
    'L': formatMilliseconds,
    'm': formatMonthNumber,
    'M': formatMinutes,
    'p': formatPeriod,
    'S': formatSeconds,
    'U': formatWeekNumberSunday,
    'w': formatWeekdayNumber,
    'W': formatWeekNumberMonday,
    'x': null,
    'X': null,
    'y': formatYear,
    'Y': formatFullYear,
    'Z': formatZone,
    '%': formatLiteralPercent
};
utcFormats = {
    'a': formatUTCShortWeekday,
    'A': formatUTCWeekday,
    'b': formatUTCShortMonth,
    'B': formatUTCMonth,
    'c': null,
    'd': formatUTCDayOfMonth,
    'e': formatUTCDayOfMonth,
    'H': formatUTCHour24,
    'I': formatUTCHour12,
    'j': formatUTCDayOfYear,
    'L': formatUTCMilliseconds,
    'm': formatUTCMonthNumber,
    'M': formatUTCMinutes,
    'p': formatUTCPeriod,
    'S': formatUTCSeconds,
    'U': formatUTCWeekNumberSunday,
    'w': formatUTCWeekdayNumber,
    'W': formatUTCWeekNumberMonday,
    'x': null,
    'X': null,
    'y': formatUTCYear,
    'Y': formatUTCFullYear,
    'Z': formatUTCZone,
    '%': formatLiteralPercent
};
parses = {
    'a': parseShortWeekday,
    'A': parseWeekday,
    'b': parseShortMonth,
    'B': parseMonth,
    'c': parseLocaleDateTime,
    'd': parseDayOfMonth,
    'e': parseDayOfMonth,
    'H': parseHour24,
    'I': parseHour24,
    'j': parseDayOfYear,
    'L': parseMilliseconds,
    'm': parseMonthNumber,
    'M': parseMinutes,
    'p': parsePeriod,
    'S': parseSeconds,
    'U': parseWeekNumberSunday,
    'w': parseWeekdayNumber,
    'W': parseWeekNumberMonday,
    'x': parseLocaleDate,
    'X': parseLocaleTime,
    'y': parseYear,
    'Y': parseFullYear,
    'Z': parseZone,
    '%': parseLiteralPercent
};
formats.x = newFormat(locale_date, formats);
formats.X = newFormat(locale_time, formats);
formats.c = newFormat(locale_dateTime, formats);
utcFormats.x = newFormat(locale_date, utcFormats);
utcFormats.X = newFormat(locale_time, utcFormats);
utcFormats.c = newFormat(locale_dateTime, utcFormats);
return {
    format: function (specifier) {
        var f = newFormat(specifier += '', formats);
        f.toString = function () {
            return specifier;
        };
        return f;
    },
    parse: function (specifier) {
        var p = newParse(specifier += '', localDate);
        p.toString = function () {
            return specifier;
        };
        return p;
    },
    utcFormat: function (specifier) {
        var f = newFormat(specifier += '', utcFormats);
        f.toString = function () {
            return specifier;
        };
        return f;
    },
    utcParse: function (specifier) {
        var p = newParse(specifier, utcDate);
        p.toString = function () {
            return specifier;
        };
        return p;
    }
};});
    pad = ($__.fs.pad_289 = function pad(value, fill, width) {
var vvv_return, vvv_switch, sign, string, length;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], fill = arguments[1], width = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
sign = value < 0 ? '-' : '';
string = (sign ? -value : value) + '';
length = string.length;
return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);});
    requote = ($__.fs.requote_290 = function requote(s) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
s = arguments[0];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 39);
    return s['replace'](requoteRe, '\\$&');
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return s.replace(requoteRe, '\\$&');}, $__.fs.requote_290_0 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function requote(s) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(requote, -2);
    return requote;
})($__.fs.requote_290, [0, 1], false)), $__.fs.requote_290_1 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function requote(s) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(requote, -2);
    return requote;
})($__.fs.requote_290, [2, 3, 4, 5, 6, 7, 8], false)), $__.fs.requote_290_2 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function requote(s) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(requote, -2);
    return requote;
})($__.fs.requote_290, [9, 10, 11, 12, 13, 14, 15], false)), $__.fs.requote_290_3 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function requote(s) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(requote, -2);
    return requote;
})($__.fs.requote_290, [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], false)), $__.fs.requote_290_4 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function requote(s) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(requote, -2);
    return requote;
})($__.fs.requote_290, [28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], false)), $__.fs.requote_290);
    formatRe = ($__.fs.formatRe_291 = function formatRe(names) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
names = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return new RegExp('^(?:' + function $__lt0(res) {
        res.length = 2;
        if (res.length != 2)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt0, -2);
    }(names['map'](((requote, $__.fs.requote_290), $__.fs.requote_290_0)))['join']('|') + ')', 'i');
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return new RegExp('^(?:' + function $__lt1(res) {
        res.length = 7;
        if (res.length != 7)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt1, -2);
    }(names['map'](((requote, $__.fs.requote_290), $__.fs.requote_290_1)))['join']('|') + ')', 'i');
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return new RegExp('^(?:' + function $__lt2(res) {
        res.length = 7;
        if (res.length != 7)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt2, -2);
    }(names['map'](((requote, $__.fs.requote_290), $__.fs.requote_290_2)))['join']('|') + ')', 'i');
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return new RegExp('^(?:' + function $__lt3(res) {
        res.length = 12;
        if (res.length != 12)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt3, -2);
    }(names['map'](((requote, $__.fs.requote_290), $__.fs.requote_290_3)))['join']('|') + ')', 'i');
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    return new RegExp('^(?:' + function $__lt4(res) {
        res.length = 12;
        if (res.length != 12)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt4, -2);
    }(names['map'](((requote, $__.fs.requote_290), $__.fs.requote_290_4)))['join']('|') + ')', 'i');
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new RegExp('^(?:' + names.map(requote).join('|') + ')', 'i');});
    formatLookup = ($__.fs.formatLookup_292 = function formatLookup(names) {
var vvv_return, vvv_switch, map, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
names = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    map = $__.os.oid49 = {};
    i = -1;
    n = (names.length, 2);
    (i = +i + 1) < n;
    (map, $__.os.oid49)[TAJS_restrictToType(names[i, 0], 'string')['toLowerCase'](), 'am'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid49)[TAJS_restrictToType(names[i, 1], 'string')['toLowerCase'](), 'pm'] = i;
    (i = +i + 1) < n;
    return map;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    map = $__.os.oid50 = {};
    i = -1;
    n = (names.length, 7);
    (i = +i + 1) < n;
    (map, $__.os.oid50)[TAJS_restrictToType(names[i, 0], 'string')['toLowerCase'](), 'sunday'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid50)[TAJS_restrictToType(names[i, 1], 'string')['toLowerCase'](), 'monday'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid50)[TAJS_restrictToType(names[i, 2], 'string')['toLowerCase'](), 'tuesday'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid50)[TAJS_restrictToType(names[i, 3], 'string')['toLowerCase'](), 'wednesday'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid50)[TAJS_restrictToType(names[i, 4], 'string')['toLowerCase'](), 'thursday'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid50)[TAJS_restrictToType(names[i, 5], 'string')['toLowerCase'](), 'friday'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid50)[TAJS_restrictToType(names[i, 6], 'string')['toLowerCase'](), 'saturday'] = i;
    (i = +i + 1) < n;
    return map;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    map = $__.os.oid51 = {};
    i = -1;
    n = (names.length, 7);
    (i = +i + 1) < n;
    (map, $__.os.oid51)[TAJS_restrictToType(names[i, 0], 'string')['toLowerCase'](), 'sun'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid51)[TAJS_restrictToType(names[i, 1], 'string')['toLowerCase'](), 'mon'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid51)[TAJS_restrictToType(names[i, 2], 'string')['toLowerCase'](), 'tue'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid51)[TAJS_restrictToType(names[i, 3], 'string')['toLowerCase'](), 'wed'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid51)[TAJS_restrictToType(names[i, 4], 'string')['toLowerCase'](), 'thu'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid51)[TAJS_restrictToType(names[i, 5], 'string')['toLowerCase'](), 'fri'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid51)[TAJS_restrictToType(names[i, 6], 'string')['toLowerCase'](), 'sat'] = i;
    (i = +i + 1) < n;
    return map;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    map = $__.os.oid52 = {};
    i = -1;
    n = (names.length, 12);
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 0], 'string')['toLowerCase'](), 'january'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 1], 'string')['toLowerCase'](), 'february'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 2], 'string')['toLowerCase'](), 'march'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 3], 'string')['toLowerCase'](), 'april'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 4], 'string')['toLowerCase'](), 'may'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 5], 'string')['toLowerCase'](), 'june'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 6], 'string')['toLowerCase'](), 'july'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 7], 'string')['toLowerCase'](), 'august'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 8], 'string')['toLowerCase'](), 'september'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 9], 'string')['toLowerCase'](), 'october'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 10], 'string')['toLowerCase'](), 'november'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid52)[TAJS_restrictToType(names[i, 11], 'string')['toLowerCase'](), 'december'] = i;
    (i = +i + 1) < n;
    return map;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    map = $__.os.oid53 = {};
    i = -1;
    n = (names.length, 12);
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 0], 'string')['toLowerCase'](), 'jan'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 1], 'string')['toLowerCase'](), 'feb'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 2], 'string')['toLowerCase'](), 'mar'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 3], 'string')['toLowerCase'](), 'apr'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 4], 'string')['toLowerCase'](), 'may'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 5], 'string')['toLowerCase'](), 'jun'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 6], 'string')['toLowerCase'](), 'jul'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 7], 'string')['toLowerCase'](), 'aug'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 8], 'string')['toLowerCase'](), 'sep'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 9], 'string')['toLowerCase'](), 'oct'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 10], 'string')['toLowerCase'](), 'nov'] = i;
    (i = +i + 1) < n;
    (map, $__.os.oid53)[TAJS_restrictToType(names[i, 11], 'string')['toLowerCase'](), 'dec'] = i;
    (i = +i + 1) < n;
    return map;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
map = {};
i = -1;
n = names.length;
while (++i < n)
    map[names[i].toLowerCase()] = i;
return map;});
    parseWeekdayNumber = ($__.fs.parseWeekdayNumber_293 = function parseWeekdayNumber(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i, i + 1));
return n ? (d.w = +n[0], i + n[0].length) : -1;});
    parseWeekNumberSunday = ($__.fs.parseWeekNumberSunday_294 = function parseWeekNumberSunday(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i));
return n ? (d.U = +n[0], i + n[0].length) : -1;});
    parseWeekNumberMonday = ($__.fs.parseWeekNumberMonday_295 = function parseWeekNumberMonday(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i));
return n ? (d.W = +n[0], i + n[0].length) : -1;});
    parseFullYear = ($__.fs.parseFullYear_296 = function parseFullYear(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i, i + 4));
return n ? (d.y = +n[0], i + n[0].length) : -1;});
    parseYear = ($__.fs.parseYear_297 = function parseYear(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i, i + 2));
return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;});
    parseZone = ($__.fs.parseZone_298 = function parseZone(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || '00')), i + n[0].length) : -1;});
    parseMonthNumber = ($__.fs.parseMonthNumber_299 = function parseMonthNumber(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i, i + 2));
return n ? (d.m = n[0] - 1, i + n[0].length) : -1;});
    parseDayOfMonth = ($__.fs.parseDayOfMonth_300 = function parseDayOfMonth(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i, i + 2));
return n ? (d.d = +n[0], i + n[0].length) : -1;});
    parseDayOfYear = ($__.fs.parseDayOfYear_301 = function parseDayOfYear(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i, i + 3));
return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;});
    parseHour24 = ($__.fs.parseHour24_302 = function parseHour24(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i, i + 2));
return n ? (d.H = +n[0], i + n[0].length) : -1;});
    parseMinutes = ($__.fs.parseMinutes_303 = function parseMinutes(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i, i + 2));
return n ? (d.M = +n[0], i + n[0].length) : -1;});
    parseSeconds = ($__.fs.parseSeconds_304 = function parseSeconds(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i, i + 2));
return n ? (d.S = +n[0], i + n[0].length) : -1;});
    parseMilliseconds = ($__.fs.parseMilliseconds_305 = function parseMilliseconds(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = numberRe.exec(string.slice(i, i + 3));
return n ? (d.L = +n[0], i + n[0].length) : -1;});
    parseLiteralPercent = ($__.fs.parseLiteralPercent_306 = function parseLiteralPercent(d, string, i) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], string = arguments[1], i = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = percentRe.exec(string.slice(i, i + 1));
return n ? i + n[0].length : -1;});
    formatDayOfMonth = ($__.fs.formatDayOfMonth_307 = function formatDayOfMonth(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getDate(), p, 2);});
    formatHour24 = ($__.fs.formatHour24_308 = function formatHour24(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getHours(), p, 2);});
    formatHour12 = ($__.fs.formatHour12_309 = function formatHour12(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getHours() % 12 || 12, p, 2);});
    formatDayOfYear = ($__.fs.formatDayOfYear_310 = function formatDayOfYear(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(1 + day.count(year(d), d), p, 3);});
    formatMilliseconds = ($__.fs.formatMilliseconds_311 = function formatMilliseconds(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getMilliseconds(), p, 3);});
    formatMonthNumber = ($__.fs.formatMonthNumber_312 = function formatMonthNumber(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getMonth() + 1, p, 2);});
    formatMinutes = ($__.fs.formatMinutes_313 = function formatMinutes(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getMinutes(), p, 2);});
    formatSeconds = ($__.fs.formatSeconds_314 = function formatSeconds(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getSeconds(), p, 2);});
    formatWeekNumberSunday = ($__.fs.formatWeekNumberSunday_315 = function formatWeekNumberSunday(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(timeWeek.count(year(d), d), p, 2);});
    formatWeekdayNumber = ($__.fs.formatWeekdayNumber_316 = function formatWeekdayNumber(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.getDay();});
    formatWeekNumberMonday = ($__.fs.formatWeekNumberMonday_317 = function formatWeekNumberMonday(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(timeMonday.count(year(d), d), p, 2);});
    formatYear = ($__.fs.formatYear_318 = function formatYear(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getFullYear() % 100, p, 2);});
    formatFullYear = ($__.fs.formatFullYear_319 = function formatFullYear(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getFullYear() % 10000, p, 4);});
    formatZone = ($__.fs.formatZone_320 = function formatZone(d) {
var vvv_return, vvv_switch, z;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
z = d.getTimezoneOffset();
return (z > 0 ? '-' : (z *= -1, '+')) + pad(z / 60 | 0, '0', 2) + pad(z % 60, '0', 2);});
    formatUTCDayOfMonth = ($__.fs.formatUTCDayOfMonth_321 = function formatUTCDayOfMonth(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getUTCDate(), p, 2);});
    formatUTCHour24 = ($__.fs.formatUTCHour24_322 = function formatUTCHour24(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getUTCHours(), p, 2);});
    formatUTCHour12 = ($__.fs.formatUTCHour12_323 = function formatUTCHour12(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getUTCHours() % 12 || 12, p, 2);});
    formatUTCDayOfYear = ($__.fs.formatUTCDayOfYear_324 = function formatUTCDayOfYear(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(1 + utcDay.count(utcYear(d), d), p, 3);});
    formatUTCMilliseconds = ($__.fs.formatUTCMilliseconds_325 = function formatUTCMilliseconds(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getUTCMilliseconds(), p, 3);});
    formatUTCMonthNumber = ($__.fs.formatUTCMonthNumber_326 = function formatUTCMonthNumber(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getUTCMonth() + 1, p, 2);});
    formatUTCMinutes = ($__.fs.formatUTCMinutes_327 = function formatUTCMinutes(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getUTCMinutes(), p, 2);});
    formatUTCSeconds = ($__.fs.formatUTCSeconds_328 = function formatUTCSeconds(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getUTCSeconds(), p, 2);});
    formatUTCWeekNumberSunday = ($__.fs.formatUTCWeekNumberSunday_329 = function formatUTCWeekNumberSunday(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(utcWeek.count(utcYear(d), d), p, 2);});
    formatUTCWeekdayNumber = ($__.fs.formatUTCWeekdayNumber_330 = function formatUTCWeekdayNumber(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.getUTCDay();});
    formatUTCWeekNumberMonday = ($__.fs.formatUTCWeekNumberMonday_331 = function formatUTCWeekNumberMonday(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(utcMonday.count(utcYear(d), d), p, 2);});
    formatUTCYear = ($__.fs.formatUTCYear_332 = function formatUTCYear(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getUTCFullYear() % 100, p, 2);});
    formatUTCFullYear = ($__.fs.formatUTCFullYear_333 = function formatUTCFullYear(d, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pad(d.getUTCFullYear() % 10000, p, 4);});
    formatUTCZone = ($__.fs.formatUTCZone_334 = function formatUTCZone() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '+0000';});
    formatLiteralPercent = ($__.fs.formatLiteralPercent_335 = function formatLiteralPercent() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '%';});
    defaultLocale$1 = ($__.fs.defaultLocale$1_336 = function defaultLocale$1(definition) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
definition = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    locale$1 = (formatLocale$1, $__.fs.formatLocale$1_288)(definition, 0, true, $__.uid);
    (exports, $__.os.oid0).timeFormat = TAJS_restrictToType((locale$1, $__.os.oid57).format, 'function');
    (exports, $__.os.oid0).timeParse = TAJS_restrictToType((locale$1, $__.os.oid57).parse, 'function');
    (exports, $__.os.oid0).utcFormat = TAJS_restrictToType((locale$1, $__.os.oid57).utcFormat, 'function');
    (exports, $__.os.oid0).utcParse = TAJS_restrictToType((locale$1, $__.os.oid57).utcParse, 'function');
    return locale$1;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
locale$1 = formatLocale$1(definition);
exports.timeFormat = locale$1.format;
exports.timeParse = locale$1.parse;
exports.utcFormat = locale$1.utcFormat;
exports.utcParse = locale$1.utcParse;
return locale$1;});
    formatIsoNative = ($__.fs.formatIsoNative_337 = function formatIsoNative(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.toISOString();});
    parseIsoNative = ($__.fs.parseIsoNative_338 = function parseIsoNative(string) {
var vvv_return, vvv_switch, date;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
string = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date = new Date(string);
return isNaN(date) ? null : date;});
    ordinal = ($__.fs.ordinal_339 = function ordinal(range) {
var vvv_return, vvv_switch, index, domain, unknown, scale;
scale = function scale(d) {
    var key = d + '', i = index.get(key);
    if (!i) {
        if (unknown !== implicit)
            return unknown;
        index.set(key, i = domain.push(d));
    }
    return range[(i - 1) % range.length];
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
range = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
index = map$1();
domain = [];
unknown = implicit;
range = range == null ? [] : slice$3.call(range);
scale.domain = function (_) {
    if (!arguments.length)
        return domain.slice();
    domain = [], index = map$1();
    var i = -1, n = _.length, d, key;
    while (++i < n)
        if (!index.has(key = (d = _[i]) + ''))
        index.set(key, domain.push(d));
    return scale;
};
scale.range = function (_) {
    return arguments.length ? (range = slice$3.call(_), scale) : range.slice();
};
scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
};
scale.copy = function () {
    return ordinal().domain(domain).range(range).unknown(unknown);
};
return scale;});
    band = ($__.fs.band_340 = function band() {
var vvv_return, vvv_switch, scale, domain, ordinalRange, range$$, step, bandwidth, round, paddingInner, paddingOuter, align, rescale;
rescale = function rescale() {
    var n = domain().length, reverse = range$$[1] < range$$[0], start = range$$[reverse - 0], stop = range$$[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round)
        step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round)
        start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range(n).map(function (i) {
        return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
scale = ordinal().unknown(undefined);
domain = scale.domain;
ordinalRange = scale.range;
range$$ = [
    0,
    1
];
round = false;
paddingInner = 0;
paddingOuter = 0;
align = 0.5;
delete scale.unknown;
scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
};
scale.range = function (_) {
    return arguments.length ? (range$$ = [
        +_[0],
        +_[1]
    ], rescale()) : range$$.slice();
};
scale.rangeRound = function (_) {
    return range$$ = [
        +_[0],
        +_[1]
    ], round = true, rescale();
};
scale.bandwidth = function () {
    return bandwidth;
};
scale.step = function () {
    return step;
};
scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
};
scale.padding = function (_) {
    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
};
scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
};
scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
};
scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
};
scale.copy = function () {
    return band().domain(domain()).range(range$$).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
};
return rescale();});
    pointish = ($__.fs.pointish_341 = function pointish(scale) {
var vvv_return, vvv_switch, copy;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
copy = scale.copy;
scale.padding = scale.paddingOuter;
delete scale.paddingInner;
delete scale.paddingOuter;
scale.copy = function () {
    return pointish(copy());
};
return scale;});
    point$4 = ($__.fs.point$4_342 = function point$4() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pointish(band().paddingInner(1));});
    constant$3 = ($__.fs.constant$3_343 = function constant$3(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    number$1 = ($__.fs.number$1_344 = function number$1(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return +x;});
    deinterpolate = ($__.fs.deinterpolate_345 = function deinterpolate(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (b -= a = +a) ? function (x) {
    return (x - a) / b;
} : constant$3(b);});
    deinterpolateClamp = ($__.fs.deinterpolateClamp_346 = function deinterpolateClamp(deinterpolate) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
deinterpolate = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (a, b) {
    var d = deinterpolate(a = +a, b = +b);
    return function (x) {
        return x <= a ? 0 : x >= b ? 1 : d(x);
    };
};});
    reinterpolateClamp = ($__.fs.reinterpolateClamp_347 = function reinterpolateClamp(reinterpolate) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
reinterpolate = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (a, b) {
    var r = reinterpolate(a = +a, b = +b);
    return function (t) {
        return t <= 0 ? a : t >= 1 ? b : r(t);
    };
};});
    bimap = ($__.fs.bimap_348 = function bimap(domain, range, deinterpolate, reinterpolate) {
var vvv_return, vvv_switch, d0, d1, r0, r1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
domain = arguments[0], range = arguments[1], deinterpolate = arguments[2], reinterpolate = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
d0 = domain[0];
d1 = domain[1];
r0 = range[0];
r1 = range[1];
if (d1 < d0)
    d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
else
    d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
return function (x) {
    return r0(d0(x));
};});
    polymap = ($__.fs.polymap_349 = function polymap(domain, range, deinterpolate, reinterpolate) {
var vvv_return, vvv_switch, j, d, r, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
domain = arguments[0], range = arguments[1], deinterpolate = arguments[2], reinterpolate = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
j = Math.min(domain.length, range.length) - 1;
d = new Array(j);
r = new Array(j);
i = -1;
if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
}
while (++i < j) {
    d[i] = deinterpolate(domain[i], domain[i + 1]);
    r[i] = reinterpolate(range[i], range[i + 1]);
}
return function (x) {
    var i = bisectRight(domain, x, 1, j) - 1;
    return r[i](d[i](x));
};});
    copy = ($__.fs.copy_350 = function copy(source, target) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
source = arguments[0], target = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());});
    continuous = ($__.fs.continuous_351 = function continuous(deinterpolate$$, reinterpolate) {
var vvv_return, vvv_switch, domain, range, interpolate$$, clamp, piecewise, output, input, rescale, scale;
rescale = function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = input = null;
    return scale;
};
scale = function scale(x) {
    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate$$) : deinterpolate$$, interpolate$$)))(+x);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
deinterpolate$$ = arguments[0], reinterpolate = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
domain = unit;
range = unit;
interpolate$$ = interpolate;
clamp = false;
scale.invert = function (y) {
    return (input || (input = piecewise(range, domain, deinterpolate, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
};
scale.domain = function (_) {
    return arguments.length ? (domain = map$2.call(_, number$1), rescale()) : domain.slice();
};
scale.range = function (_) {
    return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();
};
scale.rangeRound = function (_) {
    return range = slice$3.call(_), interpolate$$ = interpolateRound, rescale();
};
scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, rescale()) : clamp;
};
scale.interpolate = function (_) {
    return arguments.length ? (interpolate$$ = _, rescale()) : interpolate$$;
};
return rescale();});
    tickFormat = ($__.fs.tickFormat_352 = function tickFormat(domain, count, specifier) {
var vvv_return, vvv_switch, start, stop, step, precision, value;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
domain = arguments[0], count = arguments[1], specifier = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
start = domain[0];
stop = domain[domain.length - 1];
step = tickStep(start, stop, count == null ? 10 : count);
specifier = formatSpecifier(specifier == null ? ',f' : specifier);
switch (specifier.type) {
case 's': {
        value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value)))
            specifier.precision = precision;
        return exports.formatPrefix(specifier, value);
    }
case '':
case 'e':
case 'g':
case 'p':
case 'r': {
        if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)))))
            specifier.precision = precision - (specifier.type === 'e');
        break;
    }
case 'f':
case '%': {
        if (specifier.precision == null && !isNaN(precision = precisionFixed(step)))
            specifier.precision = precision - (specifier.type === '%') * 2;
        break;
    }
}
return exports.format(specifier);});
    linearish = ($__.fs.linearish_353 = function linearish(scale) {
var vvv_return, vvv_switch, domain;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
domain = scale.domain;
scale.ticks = function (count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
};
scale.tickFormat = function (count, specifier) {
    return tickFormat(domain(), count, specifier);
};
scale.nice = function (count) {
    var d = domain(), i = d.length - 1, n = count == null ? 10 : count, start = d[0], stop = d[i], step = tickStep(start, stop, n);
    if (step) {
        step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
        d[0] = Math.floor(start / step) * step;
        d[i] = Math.ceil(stop / step) * step;
        domain(d);
    }
    return scale;
};
return scale;});
    linear$2 = ($__.fs.linear$2_354 = function linear$2() {
var vvv_return, vvv_switch, scale;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
scale = continuous(deinterpolate, interpolateNumber);
scale.copy = function () {
    return copy(scale, linear$2());
};
return linearish(scale);});
    identity$4 = ($__.fs.identity$4_355 = function identity$4() {
var vvv_return, vvv_switch, domain, scale;
scale = function scale(x) {
    return +x;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
domain = [
    0,
    1
];
scale.invert = scale;
scale.domain = scale.range = function (_) {
    return arguments.length ? (domain = map$2.call(_, number$1), scale) : domain.slice();
};
scale.copy = function () {
    return identity$4().domain(domain);
};
return linearish(scale);});
    nice = ($__.fs.nice_356 = function nice(domain, interval) {
var vvv_return, vvv_switch, i0, i1, x0, x1, t;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
domain = arguments[0], interval = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
domain = domain.slice();
i0 = 0;
i1 = domain.length - 1;
x0 = domain[i0];
x1 = domain[i1];
if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
}
domain[i0] = interval.floor(x0);
domain[i1] = interval.ceil(x1);
return domain;});
    deinterpolate$1 = ($__.fs.deinterpolate$1_357 = function deinterpolate$1(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (b = Math.log(b / a)) ? function (x) {
    return Math.log(x / a) / b;
} : constant$3(b);});
    reinterpolate = ($__.fs.reinterpolate_358 = function reinterpolate(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a < 0 ? function (t) {
    return -Math.pow(-b, t) * Math.pow(-a, 1 - t);
} : function (t) {
    return Math.pow(b, t) * Math.pow(a, 1 - t);
};});
    pow10 = ($__.fs.pow10_359 = function pow10(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return isFinite(x) ? +('1e' + x) : x < 0 ? 0 : x;});
    powp = ($__.fs.powp_360 = function powp(base) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
base = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
    return Math.pow(base, x);
};});
    logp = ($__.fs.logp_361 = function logp(base) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
base = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
    return Math.log(x) / base;
});});
    reflect = ($__.fs.reflect_362 = function reflect(f) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
f = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (x) {
    return -f(-x);
};});
    log = ($__.fs.log_363 = function log() {
var vvv_return, vvv_switch, scale, domain, base, logs, pows, rescale;
rescale = function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0)
        logs = reflect(logs), pows = reflect(pows);
    return scale;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
scale = continuous(deinterpolate$1, reinterpolate).domain([
    1,
    10
]);
domain = scale.domain;
base = 10;
logs = logp(10);
pows = powp(10);
scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
};
scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
};
scale.ticks = function (count) {
    var d = domain(), u = d[0], v = d[d.length - 1], r;
    if (r = v < u)
        i = u, u = v, v = i;
    var i = logs(u), j = logs(v), p, k, t, n = count == null ? 10 : +count, z = [];
    if (!(base % 1) && j - i < n) {
        i = Math.round(i) - 1, j = Math.round(j) + 1;
        if (u > 0)
            for (; i < j; ++i) {
            for (k = 1, p = (pows(i)); k < base; ++k) {
                t = p * k;
                if (t < u)
                    continue;
                if (t > v)
                    break;
                z.push(t);
            }
        }
        else
            for (; i < j; ++i) {
            for (k = base - 1, p = (pows(i)); k >= 1; --k) {
                t = p * k;
                if (t < u)
                    continue;
                if (t > v)
                    break;
                z.push(t);
            }
        }
    } else {
        z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
};
scale.tickFormat = function (count, specifier) {
    if (specifier == null)
        specifier = base === 10 ? '.0e' : ',';
    if (typeof specifier !== 'function')
        specifier = exports.format(specifier);
    if (count === Infinity)
        return specifier;
    if (count == null)
        count = 10;
    var k = Math.max(1, base * count / scale.ticks().length);
    return function (d) {
        var i = d / pows(Math.round(logs(d)));
        if (i * base < base - 0.5)
            i *= base;
        return i <= k ? specifier(d) : '';
    };
};
scale.nice = function () {
    return domain(nice(domain(), {
        floor: function (x) {
            return pows(Math.floor(logs(x)));
        },
        ceil: function (x) {
            return pows(Math.ceil(logs(x)));
        }
    }));
};
scale.copy = function () {
    return copy(scale, log().base(base));
};
return scale;});
    raise = ($__.fs.raise_364 = function raise(x, exponent) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], exponent = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);});
    pow = ($__.fs.pow_365 = function pow() {
var vvv_return, vvv_switch, exponent, scale, domain, deinterpolate, reinterpolate;
deinterpolate = function deinterpolate(a, b) {
    return (b = raise(b, exponent) - (a = raise(a, exponent))) ? function (x) {
        return (raise(x, exponent) - a) / b;
    } : constant$3(b);
};
reinterpolate = function reinterpolate(a, b) {
    b = raise(b, exponent) - (a = raise(a, exponent));
    return function (t) {
        return raise(a + b * t, 1 / exponent);
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
exponent = 1;
scale = continuous(deinterpolate, reinterpolate);
domain = scale.domain;
scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
};
scale.copy = function () {
    return copy(scale, pow().exponent(exponent));
};
return linearish(scale);});
    sqrt = ($__.fs.sqrt_366 = function sqrt() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pow().exponent(0.5);});
    quantile = ($__.fs.quantile_367 = function quantile() {
var vvv_return, vvv_switch, domain, range, thresholds, rescale, scale;
rescale = function rescale() {
    var i = 0, n = Math.max(1, range.length);
    thresholds = new Array(n - 1);
    while (++i < n)
        thresholds[i - 1] = threshold(domain, i / n);
    return scale;
};
scale = function scale(x) {
    if (!isNaN(x = +x))
        return range[bisectRight(thresholds, x)];
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
domain = [];
range = [];
thresholds = [];
scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [
        NaN,
        NaN
    ] : [
        i > 0 ? thresholds[i - 1] : domain[0],
        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
};
scale.domain = function (_) {
    if (!arguments.length)
        return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i)
        if (d = _[i], d != null && !isNaN(d = +d))
        domain.push(d);
    domain.sort(ascending);
    return rescale();
};
scale.range = function (_) {
    return arguments.length ? (range = slice$3.call(_), rescale()) : range.slice();
};
scale.quantiles = function () {
    return thresholds.slice();
};
scale.copy = function () {
    return quantile().domain(domain).range(range);
};
return scale;});
    quantize$1 = ($__.fs.quantize$1_368 = function quantize$1() {
var vvv_return, vvv_switch, x0, x1, n, domain, range, scale, rescale;
scale = function scale(x) {
    if (x <= x)
        return range[bisectRight(domain, x, 0, n)];
};
rescale = function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n)
        domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x0 = 0;
x1 = 1;
n = 1;
domain = [0.5];
range = [
    0,
    1
];
scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [
        x0,
        x1
    ];
};
scale.range = function (_) {
    return arguments.length ? (n = (range = slice$3.call(_)).length - 1, rescale()) : range.slice();
};
scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [
        NaN,
        NaN
    ] : i < 1 ? [
        x0,
        domain[0]
    ] : i >= n ? [
        domain[n - 1],
        x1
    ] : [
        domain[i - 1],
        domain[i]
    ];
};
scale.copy = function () {
    return quantize$1().domain([
        x0,
        x1
    ]).range(range);
};
return linearish(scale);});
    threshold$1 = ($__.fs.threshold$1_369 = function threshold$1() {
var vvv_return, vvv_switch, domain, range, n, scale;
scale = function scale(x) {
    if (x <= x)
        return range[bisectRight(domain, x, 0, n)];
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
domain = [0.5];
range = [
    0,
    1
];
n = 1;
scale.domain = function (_) {
    return arguments.length ? (domain = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
};
scale.range = function (_) {
    return arguments.length ? (range = slice$3.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
};
scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [
        domain[i - 1],
        domain[i]
    ];
};
scale.copy = function () {
    return threshold$1().domain(domain).range(range);
};
return scale;});
    date$1 = ($__.fs.date$1_370 = function date$1(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Date(t);});
    number$2 = ($__.fs.number$2_371 = function number$2(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t instanceof Date ? +t : +new Date(+t);});
    calendar = ($__.fs.calendar_372 = function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
var vvv_return, vvv_switch, scale, invert, domain, formatMillisecond, formatSecond, formatMinute, formatHour, formatDay, formatWeek, formatMonth, formatYear, tickIntervals, tickFormat, tickInterval;
tickFormat = function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
};
tickInterval = function tickInterval(interval, start, stop, step) {
    if (interval == null)
        interval = 10;
    if (typeof interval === 'number') {
        var target = Math.abs(stop - start) / interval, i = bisector(function (i) {
                return i[2];
            }).right(tickIntervals, target);
        if (i === tickIntervals.length) {
            step = tickStep(start / durationYear, stop / durationYear, interval);
            interval = year;
        } else if (i) {
            i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
            step = i[1];
            interval = i[0];
        } else {
            step = tickStep(start, stop, interval);
            interval = millisecond;
        }
    }
    return step == null ? interval : interval.every(step);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
year = arguments[0], month = arguments[1], week = arguments[2], day = arguments[3], hour = arguments[4], minute = arguments[5], second = arguments[6], millisecond = arguments[7], format = arguments[8];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
scale = continuous(deinterpolate, interpolateNumber);
invert = scale.invert;
domain = scale.domain;
formatMillisecond = format('.%L');
formatSecond = format(':%S');
formatMinute = format('%I:%M');
formatHour = format('%I %p');
formatDay = format('%a %d');
formatWeek = format('%b %d');
formatMonth = format('%B');
formatYear = format('%Y');
tickIntervals = [
    [
        second,
        1,
        durationSecond$1
    ],
    [
        second,
        5,
        5 * durationSecond$1
    ],
    [
        second,
        15,
        15 * durationSecond$1
    ],
    [
        second,
        30,
        30 * durationSecond$1
    ],
    [
        minute,
        1,
        durationMinute$1
    ],
    [
        minute,
        5,
        5 * durationMinute$1
    ],
    [
        minute,
        15,
        15 * durationMinute$1
    ],
    [
        minute,
        30,
        30 * durationMinute$1
    ],
    [
        hour,
        1,
        durationHour$1
    ],
    [
        hour,
        3,
        3 * durationHour$1
    ],
    [
        hour,
        6,
        6 * durationHour$1
    ],
    [
        hour,
        12,
        12 * durationHour$1
    ],
    [
        day,
        1,
        durationDay$1
    ],
    [
        day,
        2,
        2 * durationDay$1
    ],
    [
        week,
        1,
        durationWeek$1
    ],
    [
        month,
        1,
        durationMonth
    ],
    [
        month,
        3,
        3 * durationMonth
    ],
    [
        year,
        1,
        durationYear
    ]
];
scale.invert = function (y) {
    return new Date(invert(y));
};
scale.domain = function (_) {
    return arguments.length ? domain(map$2.call(_, number$2)) : domain().map(date$1);
};
scale.ticks = function (interval, step) {
    var d = domain(), t0 = d[0], t1 = d[d.length - 1], r = t1 < t0, t;
    if (r)
        t = t0, t0 = t1, t1 = t;
    t = tickInterval(interval, t0, t1, step);
    t = t ? t.range(t0, t1 + 1) : [];
    return r ? t.reverse() : t;
};
scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
};
scale.nice = function (interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain(nice(d, interval)) : scale;
};
scale.copy = function () {
    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
};
return scale;});
    time = ($__.fs.time_373 = function time() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return calendar(year, month, timeWeek, day, hour, minute, second, millisecond, exports.timeFormat).domain([
    new Date(2000, 0, 1),
    new Date(2000, 0, 2)
]);});
    utcTime = ($__.fs.utcTime_374 = function utcTime() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return calendar(utcYear, utcMonth, utcWeek, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([
    Date.UTC(2000, 0, 1),
    Date.UTC(2000, 0, 2)
]);});
    colors = ($__.fs.colors_375 = function colors(s) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
s = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return function $__lt6(res) {
        res.length = 10;
        if (res.length != 10)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt6, -2);
    }(function $__lt5(res) {
        res.length = 10;
        if (res.length != 10)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt5, -2);
    }(s['match'](/.{6}/g))['map']((($__.fs.J$__v2246113107_1414_1414 = function J$__v2246113107_1414(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 9);
    return '#' + x;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '#' + x;}, $__.fs.J$__v2246113107_1414_1414_5 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v2246113107_1414(x) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v2246113107_1414, -2);
    return J$__v2246113107_1414;
})($__.fs.J$__v2246113107_1414_1414, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], false)), $__.fs.J$__v2246113107_1414_1414), $__.fs.J$__v2246113107_1414_1414_5)));
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return function $__lt8(res) {
        res.length = 20;
        if (res.length != 20)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt8, -2);
    }(function $__lt7(res) {
        res.length = 20;
        if (res.length != 20)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt7, -2);
    }(s['match'](/.{6}/g))['map']((($__.fs.J$__v2246113107_1414_1415 = function J$__v2246113107_1414(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 19);
    return '#' + x;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '#' + x;}, $__.fs.J$__v2246113107_1414_1415_6 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v2246113107_1414(x) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v2246113107_1414, -2);
    return J$__v2246113107_1414;
})($__.fs.J$__v2246113107_1414_1415, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], false)), $__.fs.J$__v2246113107_1414_1415), $__.fs.J$__v2246113107_1414_1415_6)));
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return function $__lt10(res) {
        res.length = 20;
        if (res.length != 20)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt10, -2);
    }(function $__lt9(res) {
        res.length = 20;
        if (res.length != 20)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt9, -2);
    }(s['match'](/.{6}/g))['map']((($__.fs.J$__v2246113107_1414_1416 = function J$__v2246113107_1414(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 19);
    return '#' + x;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '#' + x;}, $__.fs.J$__v2246113107_1414_1416_7 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v2246113107_1414(x) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v2246113107_1414, -2);
    return J$__v2246113107_1414;
})($__.fs.J$__v2246113107_1414_1416, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], false)), $__.fs.J$__v2246113107_1414_1416), $__.fs.J$__v2246113107_1414_1416_7)));
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return function $__lt12(res) {
        res.length = 20;
        if (res.length != 20)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt12, -2);
    }(function $__lt11(res) {
        res.length = 20;
        if (res.length != 20)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt11, -2);
    }(s['match'](/.{6}/g))['map']((($__.fs.J$__v2246113107_1414_1417 = function J$__v2246113107_1414(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 19);
    return '#' + x;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '#' + x;}, $__.fs.J$__v2246113107_1414_1417_8 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v2246113107_1414(x) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v2246113107_1414, -2);
    return J$__v2246113107_1414;
})($__.fs.J$__v2246113107_1414_1417, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], false)), $__.fs.J$__v2246113107_1414_1417), $__.fs.J$__v2246113107_1414_1417_8)));
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    return function $__lt14(res) {
        res.length = 256;
        if (res.length != 256)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt14, -2);
    }(function $__lt13(res) {
        res.length = 256;
        if (res.length != 256)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt13, -2);
    }(s['match'](/.{6}/g))['map']((($__.fs.J$__v2246113107_1414_1433 = function J$__v2246113107_1414(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
case 81:
case 82:
case 83:
case 84:
case 85:
case 86:
case 87:
case 88:
case 89:
case 90:
case 91:
case 92:
case 93:
case 94:
case 95:
case 96:
case 97:
case 98:
case 99:
case 100:
case 101:
case 102:
case 103:
case 104:
case 105:
case 106:
case 107:
case 108:
case 109:
case 110:
case 111:
case 112:
case 113:
case 114:
case 115:
case 116:
case 117:
case 118:
case 119:
case 120:
case 121:
case 122:
case 123:
case 124:
case 125:
case 126:
case 127:
case 128:
case 129:
case 130:
case 131:
case 132:
case 133:
case 134:
case 135:
case 136:
case 137:
case 138:
case 139:
case 140:
case 141:
case 142:
case 143:
case 144:
case 145:
case 146:
case 147:
case 148:
case 149:
case 150:
case 151:
case 152:
case 153:
case 154:
case 155:
case 156:
case 157:
case 158:
case 159:
case 160:
case 161:
case 162:
case 163:
case 164:
case 165:
case 166:
case 167:
case 168:
case 169:
case 170:
case 171:
case 172:
case 173:
case 174:
case 175:
case 176:
case 177:
case 178:
case 179:
case 180:
case 181:
case 182:
case 183:
case 184:
case 185:
case 186:
case 187:
case 188:
case 189:
case 190:
case 191:
case 192:
case 193:
case 194:
case 195:
case 196:
case 197:
case 198:
case 199:
case 200:
case 201:
case 202:
case 203:
case 204:
case 205:
case 206:
case 207:
case 208:
case 209:
case 210:
case 211:
case 212:
case 213:
case 214:
case 215:
case 216:
case 217:
case 218:
case 219:
case 220:
case 221:
case 222:
case 223:
case 224:
case 225:
case 226:
case 227:
case 228:
case 229:
case 230:
case 231:
case 232:
case 233:
case 234:
case 235:
case 236:
case 237:
case 238:
case 239:
case 240:
case 241:
case 242:
case 243:
case 244:
case 245:
case 246:
case 247:
case 248:
case 249:
case 250:
case 251:
case 252:
case 253:
case 254:
case 255:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 255);
    return '#' + x;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '#' + x;}, $__.fs.J$__v2246113107_1414_1433_9 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v2246113107_1414(x) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v2246113107_1414, -2);
    return J$__v2246113107_1414;
})($__.fs.J$__v2246113107_1414_1433, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], false)), $__.fs.J$__v2246113107_1414_1433), $__.fs.J$__v2246113107_1414_1433_9)));
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    return function $__lt16(res) {
        res.length = 256;
        if (res.length != 256)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt16, -2);
    }(function $__lt15(res) {
        res.length = 256;
        if (res.length != 256)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt15, -2);
    }(s['match'](/.{6}/g))['map']((($__.fs.J$__v2246113107_1414_1435 = function J$__v2246113107_1414(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
case 81:
case 82:
case 83:
case 84:
case 85:
case 86:
case 87:
case 88:
case 89:
case 90:
case 91:
case 92:
case 93:
case 94:
case 95:
case 96:
case 97:
case 98:
case 99:
case 100:
case 101:
case 102:
case 103:
case 104:
case 105:
case 106:
case 107:
case 108:
case 109:
case 110:
case 111:
case 112:
case 113:
case 114:
case 115:
case 116:
case 117:
case 118:
case 119:
case 120:
case 121:
case 122:
case 123:
case 124:
case 125:
case 126:
case 127:
case 128:
case 129:
case 130:
case 131:
case 132:
case 133:
case 134:
case 135:
case 136:
case 137:
case 138:
case 139:
case 140:
case 141:
case 142:
case 143:
case 144:
case 145:
case 146:
case 147:
case 148:
case 149:
case 150:
case 151:
case 152:
case 153:
case 154:
case 155:
case 156:
case 157:
case 158:
case 159:
case 160:
case 161:
case 162:
case 163:
case 164:
case 165:
case 166:
case 167:
case 168:
case 169:
case 170:
case 171:
case 172:
case 173:
case 174:
case 175:
case 176:
case 177:
case 178:
case 179:
case 180:
case 181:
case 182:
case 183:
case 184:
case 185:
case 186:
case 187:
case 188:
case 189:
case 190:
case 191:
case 192:
case 193:
case 194:
case 195:
case 196:
case 197:
case 198:
case 199:
case 200:
case 201:
case 202:
case 203:
case 204:
case 205:
case 206:
case 207:
case 208:
case 209:
case 210:
case 211:
case 212:
case 213:
case 214:
case 215:
case 216:
case 217:
case 218:
case 219:
case 220:
case 221:
case 222:
case 223:
case 224:
case 225:
case 226:
case 227:
case 228:
case 229:
case 230:
case 231:
case 232:
case 233:
case 234:
case 235:
case 236:
case 237:
case 238:
case 239:
case 240:
case 241:
case 242:
case 243:
case 244:
case 245:
case 246:
case 247:
case 248:
case 249:
case 250:
case 251:
case 252:
case 253:
case 254:
case 255:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 255);
    return '#' + x;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '#' + x;}, $__.fs.J$__v2246113107_1414_1435_10 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v2246113107_1414(x) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v2246113107_1414, -2);
    return J$__v2246113107_1414;
})($__.fs.J$__v2246113107_1414_1435, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], false)), $__.fs.J$__v2246113107_1414_1435), $__.fs.J$__v2246113107_1414_1435_10)));
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    return function $__lt18(res) {
        res.length = 256;
        if (res.length != 256)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt18, -2);
    }(function $__lt17(res) {
        res.length = 256;
        if (res.length != 256)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt17, -2);
    }(s['match'](/.{6}/g))['map']((($__.fs.J$__v2246113107_1414_1437 = function J$__v2246113107_1414(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
case 81:
case 82:
case 83:
case 84:
case 85:
case 86:
case 87:
case 88:
case 89:
case 90:
case 91:
case 92:
case 93:
case 94:
case 95:
case 96:
case 97:
case 98:
case 99:
case 100:
case 101:
case 102:
case 103:
case 104:
case 105:
case 106:
case 107:
case 108:
case 109:
case 110:
case 111:
case 112:
case 113:
case 114:
case 115:
case 116:
case 117:
case 118:
case 119:
case 120:
case 121:
case 122:
case 123:
case 124:
case 125:
case 126:
case 127:
case 128:
case 129:
case 130:
case 131:
case 132:
case 133:
case 134:
case 135:
case 136:
case 137:
case 138:
case 139:
case 140:
case 141:
case 142:
case 143:
case 144:
case 145:
case 146:
case 147:
case 148:
case 149:
case 150:
case 151:
case 152:
case 153:
case 154:
case 155:
case 156:
case 157:
case 158:
case 159:
case 160:
case 161:
case 162:
case 163:
case 164:
case 165:
case 166:
case 167:
case 168:
case 169:
case 170:
case 171:
case 172:
case 173:
case 174:
case 175:
case 176:
case 177:
case 178:
case 179:
case 180:
case 181:
case 182:
case 183:
case 184:
case 185:
case 186:
case 187:
case 188:
case 189:
case 190:
case 191:
case 192:
case 193:
case 194:
case 195:
case 196:
case 197:
case 198:
case 199:
case 200:
case 201:
case 202:
case 203:
case 204:
case 205:
case 206:
case 207:
case 208:
case 209:
case 210:
case 211:
case 212:
case 213:
case 214:
case 215:
case 216:
case 217:
case 218:
case 219:
case 220:
case 221:
case 222:
case 223:
case 224:
case 225:
case 226:
case 227:
case 228:
case 229:
case 230:
case 231:
case 232:
case 233:
case 234:
case 235:
case 236:
case 237:
case 238:
case 239:
case 240:
case 241:
case 242:
case 243:
case 244:
case 245:
case 246:
case 247:
case 248:
case 249:
case 250:
case 251:
case 252:
case 253:
case 254:
case 255:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 255);
    return '#' + x;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '#' + x;}, $__.fs.J$__v2246113107_1414_1437_11 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v2246113107_1414(x) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v2246113107_1414, -2);
    return J$__v2246113107_1414;
})($__.fs.J$__v2246113107_1414_1437, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], false)), $__.fs.J$__v2246113107_1414_1437), $__.fs.J$__v2246113107_1414_1437_11)));
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    return function $__lt20(res) {
        res.length = 256;
        if (res.length != 256)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt20, -2);
    }(function $__lt19(res) {
        res.length = 256;
        if (res.length != 256)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt19, -2);
    }(s['match'](/.{6}/g))['map']((($__.fs.J$__v2246113107_1414_1439 = function J$__v2246113107_1414(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 23:
case 24:
case 25:
case 26:
case 27:
case 28:
case 29:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 47:
case 48:
case 49:
case 50:
case 51:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
case 81:
case 82:
case 83:
case 84:
case 85:
case 86:
case 87:
case 88:
case 89:
case 90:
case 91:
case 92:
case 93:
case 94:
case 95:
case 96:
case 97:
case 98:
case 99:
case 100:
case 101:
case 102:
case 103:
case 104:
case 105:
case 106:
case 107:
case 108:
case 109:
case 110:
case 111:
case 112:
case 113:
case 114:
case 115:
case 116:
case 117:
case 118:
case 119:
case 120:
case 121:
case 122:
case 123:
case 124:
case 125:
case 126:
case 127:
case 128:
case 129:
case 130:
case 131:
case 132:
case 133:
case 134:
case 135:
case 136:
case 137:
case 138:
case 139:
case 140:
case 141:
case 142:
case 143:
case 144:
case 145:
case 146:
case 147:
case 148:
case 149:
case 150:
case 151:
case 152:
case 153:
case 154:
case 155:
case 156:
case 157:
case 158:
case 159:
case 160:
case 161:
case 162:
case 163:
case 164:
case 165:
case 166:
case 167:
case 168:
case 169:
case 170:
case 171:
case 172:
case 173:
case 174:
case 175:
case 176:
case 177:
case 178:
case 179:
case 180:
case 181:
case 182:
case 183:
case 184:
case 185:
case 186:
case 187:
case 188:
case 189:
case 190:
case 191:
case 192:
case 193:
case 194:
case 195:
case 196:
case 197:
case 198:
case 199:
case 200:
case 201:
case 202:
case 203:
case 204:
case 205:
case 206:
case 207:
case 208:
case 209:
case 210:
case 211:
case 212:
case 213:
case 214:
case 215:
case 216:
case 217:
case 218:
case 219:
case 220:
case 221:
case 222:
case 223:
case 224:
case 225:
case 226:
case 227:
case 228:
case 229:
case 230:
case 231:
case 232:
case 233:
case 234:
case 235:
case 236:
case 237:
case 238:
case 239:
case 240:
case 241:
case 242:
case 243:
case 244:
case 245:
case 246:
case 247:
case 248:
case 249:
case 250:
case 251:
case 252:
case 253:
case 254:
case 255:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 255);
    return '#' + x;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '#' + x;}, $__.fs.J$__v2246113107_1414_1439_12 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v2246113107_1414(x) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v2246113107_1414, -2);
    return J$__v2246113107_1414;
})($__.fs.J$__v2246113107_1414_1439, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255], false)), $__.fs.J$__v2246113107_1414_1439), $__.fs.J$__v2246113107_1414_1439_12)));
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return s.match(/.{6}/g).map(function (x) {
    return '#' + x;
});});
    rainbow$1 = ($__.fs.rainbow$1_376 = function rainbow$1(t) {
var vvv_return, vvv_switch, ts;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (t < 0 || t > 1)
    t -= Math.floor(t);
ts = Math.abs(t - 0.5);
rainbow.h = 360 * t - 100;
rainbow.s = 1.5 - 1.5 * ts;
rainbow.l = 0.8 - 0.9 * ts;
return rainbow + '';});
    ramp = ($__.fs.ramp_377 = function ramp(range) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
range = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    n = (range.length, 256);
    return ($__.fs.J$__v2246113107_1418_1434 = function J$__v2246113107_1418(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    n = (range.length, 256);
    return ($__.fs.J$__v2246113107_1418_1436 = function J$__v2246113107_1418(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];});
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    n = (range.length, 256);
    return ($__.fs.J$__v2246113107_1418_1438 = function J$__v2246113107_1418(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];});
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    n = (range.length, 256);
    return ($__.fs.J$__v2246113107_1418_1440 = function J$__v2246113107_1418(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = range.length;
return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
};});
    sequential = ($__.fs.sequential_378 = function sequential(interpolator) {
var vvv_return, vvv_switch, x0, x1, clamp, scale;
scale = function scale(x) {
    var t = (x - x0) / (x1 - x0);
    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
interpolator = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x0 = 0;
x1 = 1;
clamp = false;
scale.domain = function (_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [
        x0,
        x1
    ];
};
scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
};
scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
};
scale.copy = function () {
    return sequential(interpolator).domain([
        x0,
        x1
    ]).clamp(clamp);
};
return linearish(scale);});
    namespace = ($__.fs.namespace_379 = function namespace(name) {
var vvv_return, vvv_switch, prefix, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
prefix = name += '';
i = prefix.indexOf(':');
if (i >= 0 && (prefix = name.slice(0, i)) !== 'xmlns')
    name = name.slice(i + 1);
return namespaces.hasOwnProperty(prefix) ? {
    space: namespaces[prefix],
    local: name
} : name;});
    creatorInherit = ($__.fs.creatorInherit_380 = function creatorInherit(name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var document = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
};});
    creatorFixed = ($__.fs.creatorFixed_381 = function creatorFixed(fullname) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
fullname = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
};});
    creator = ($__.fs.creator_382 = function creator(name) {
var vvv_return, vvv_switch, fullname;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
fullname = namespace(name);
return (fullname.local ? creatorFixed : creatorInherit)(fullname);});
    local = ($__.fs.local_383 = function local() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Local();});
    Local = ($__.fs.Local_384 = function Local() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._ = '@' + (++nextId).toString(36);});
    filterContextListener = ($__.fs.filterContextListener_385 = function filterContextListener(listener, index, group) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
listener = arguments[0], index = arguments[1], group = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
listener = contextListener(listener, index, group);
return function (event) {
    var related = event.relatedTarget;
    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
        listener.call(this, event);
    }
};});
    contextListener = ($__.fs.contextListener_386 = function contextListener(listener, index, group) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
listener = arguments[0], index = arguments[1], group = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (event1) {
    var event0 = exports.event;
    exports.event = event1;
    try {
        listener.call(this, this.__data__, index, group);
    } finally {
        exports.event = event0;
    }
};});
    parseTypenames$1 = ($__.fs.parseTypenames$1_387 = function parseTypenames$1(typenames) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
typenames = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return typenames.trim().split(/^|\s+/).map(function (t) {
    var name = '', i = t.indexOf('.');
    if (i >= 0)
        name = t.slice(i + 1), t = t.slice(0, i);
    return {
        type: t,
        name: name
    };
});});
    onRemove = ($__.fs.onRemove_388 = function onRemove(typename) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
typename = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var on = this.__on;
    if (!on)
        return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
        if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.capture);
        } else {
            on[++i] = o;
        }
    }
    if (++i)
        on.length = i;
    else
        delete this.__on;
};});
    onAdd = ($__.fs.onAdd_389 = function onAdd(typename, value, capture) {
var vvv_return, vvv_switch, wrap;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
typename = arguments[0], value = arguments[1], capture = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
return function (d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on)
        for (var j = 0, m = on.length; j < m; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
            this.removeEventListener(o.type, o.listener, o.capture);
            this.addEventListener(o.type, o.listener = listener, o.capture = capture);
            o.value = value;
            return;
        }
    }
    this.addEventListener(typename.type, listener, capture);
    o = {
        type: typename.type,
        name: typename.name,
        value: value,
        listener: listener,
        capture: capture
    };
    if (!on)
        this.__on = [o];
    else
        on.push(o);
};});
    selection_on = ($__.fs.selection_on_390 = function selection_on(typename, value, capture) {
var vvv_return, vvv_switch, typenames, i, n, t, on;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
typename = arguments[0], value = arguments[1], capture = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
typenames = parseTypenames$1(typename + '');
n = typenames.length;
if (arguments.length < 2) {
    on = this.node().__on;
    if (on)
        for (var j = 0, m = on.length, o; j < m; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
                return o.value;
            }
        }
    }
    return;
}
on = value ? onAdd : onRemove;
if (capture == null)
    capture = false;
for (i = 0; i < n; ++i)
    this.each(on(typenames[i], value, capture));
return this;});
    customEvent = ($__.fs.customEvent_391 = function customEvent(event1, listener, that, args) {
var vvv_return, vvv_switch, event0;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
event1 = arguments[0], listener = arguments[1], that = arguments[2], args = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
event0 = exports.event;
event1.sourceEvent = exports.event;
exports.event = event1;
try {
    return listener.apply(that, args);
} finally {
    exports.event = event0;
}});
    sourceEvent = ($__.fs.sourceEvent_392 = function sourceEvent() {
var vvv_return, vvv_switch, current, source;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
current = exports.event;
while (source = current.sourceEvent)
    current = source;
return current;});
    point$5 = ($__.fs.point$5_393 = function point$5(node, event) {
var vvv_return, vvv_switch, svg, point, rect;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], event = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
svg = node.ownerSVGElement || node;
if (svg.createSVGPoint) {
    point = svg.createSVGPoint();
    point.x = event.clientX, point.y = event.clientY;
    point = point.matrixTransform(node.getScreenCTM().inverse());
    return [
        point.x,
        point.y
    ];
}
rect = node.getBoundingClientRect();
return [
    event.clientX - rect.left - node.clientLeft,
    event.clientY - rect.top - node.clientTop
];});
    mouse = ($__.fs.mouse_394 = function mouse(node) {
var vvv_return, vvv_switch, event;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
event = sourceEvent();
if (event.changedTouches)
    event = event.changedTouches[0];
return point$5(node, event);});
    none$2 = ($__.fs.none$2_395 = function none$2() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');});
    selector = ($__.fs.J$__v2246113107_1481_396 = function J$__v2246113107_1481(selector) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
selector = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return selector == null ? none$2 : function () {
    return this.querySelector(selector);
};});
    selection_select = ($__.fs.selection_select_397 = function selection_select(select) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
select = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof select !== 'function')
    select = selector(select);
for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ('__data__' in node)
                subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
        }
    }
}
return new Selection(subgroups, this._parents);});
    empty = ($__.fs.empty_398 = function empty() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [];});
    selectorAll = ($__.fs.selectorAll_399 = function selectorAll(selector) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
selector = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return selector == null ? empty : function () {
    return this.querySelectorAll(selector);
};});
    selection_selectAll = ($__.fs.selection_selectAll_400 = function selection_selectAll(select) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
select = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof select !== 'function')
    select = selectorAll(select);
for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
            subgroups.push(select.call(node, node.__data__, i, group));
            parents.push(node);
        }
    }
}
return new Selection(subgroups, parents);});
    selection_filter = ($__.fs.selection_filter_401 = function selection_filter(match) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
match = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof match !== 'function')
    match = matcher$1(match);
for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
        }
    }
}
return new Selection(subgroups, this._parents);});
    sparse = ($__.fs.sparse_402 = function sparse(update) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
update = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Array(update.length);});
    selection_enter = ($__.fs.selection_enter_403 = function selection_enter() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Selection(this._enter || this._groups.map(sparse), this._parents);});
    EnterNode = ($__.fs.EnterNode_404 = function EnterNode(parent, datum) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parent = arguments[0], datum = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.ownerDocument = parent.ownerDocument;
this.namespaceURI = parent.namespaceURI;
this._next = null;
this._parent = parent;
this.__data__ = datum;});
    constant$4 = ($__.fs.constant$4_405 = function constant$4(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    bindIndex = ($__.fs.bindIndex_406 = function bindIndex(parent, group, enter, update, exit, data) {
var vvv_return, vvv_switch, i, node, groupLength, dataLength;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parent = arguments[0], group = arguments[1], enter = arguments[2], update = arguments[3], exit = arguments[4], data = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = 0;
groupLength = group.length;
dataLength = data.length;
for (; i < dataLength; ++i) {
    if (node = group[i]) {
        node.__data__ = data[i];
        update[i] = node;
    } else {
        enter[i] = new EnterNode(parent, data[i]);
    }
}
for (; i < groupLength; ++i) {
    if (node = group[i]) {
        exit[i] = node;
    }
}});
    bindKey = ($__.fs.bindKey_407 = function bindKey(parent, group, enter, update, exit, data, key) {
var vvv_return, vvv_switch, i, node, nodeByKeyValue, groupLength, dataLength, keyValues, keyValue;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parent = arguments[0], group = arguments[1], enter = arguments[2], update = arguments[3], exit = arguments[4], data = arguments[5], key = arguments[6];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
nodeByKeyValue = {};
groupLength = group.length;
dataLength = data.length;
keyValues = new Array(groupLength);
for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
        keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
        if (keyValue in nodeByKeyValue) {
            exit[i] = node;
        } else {
            nodeByKeyValue[keyValue] = node;
        }
    }
}
for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
        update[i] = node;
        node.__data__ = data[i];
        nodeByKeyValue[keyValue] = null;
    } else {
        enter[i] = new EnterNode(parent, data[i]);
    }
}
for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
        exit[i] = node;
    }
}});
    selection_data = ($__.fs.selection_data_408 = function selection_data(value, key) {
var vvv_return, vvv_switch, bind, parents, groups, parent, group, groupLength, data, dataLength, enterGroup, updateGroup, exitGroup;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function (d) {
        data[++j] = d;
    });
    return data;
}
bind = key ? bindKey : bindIndex;
parents = this._parents;
groups = this._groups;
if (typeof value !== 'function')
    value = constant$4(value);
for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    parent = parents[j];
    group = groups[j];
    groupLength = group.length;
    data = value.call(parent, parent && parent.__data__, j, parents);
    dataLength = data.length;
    enterGroup = enter[j] = new Array(dataLength);
    updateGroup = update[j] = new Array(dataLength);
    exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if (previous = enterGroup[i0]) {
            if (i0 >= i1)
                i1 = i0 + 1;
            while (!(next = updateGroup[i1]) && ++i1 < dataLength);
            previous._next = next || null;
        }
    }
}
update = new Selection(update, parents);
update._enter = enter;
update._exit = exit;
return update;});
    selection_exit = ($__.fs.selection_exit_409 = function selection_exit() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Selection(this._exit || this._groups.map(sparse), this._parents);});
    selection_merge = ($__.fs.selection_merge_410 = function selection_merge(selection) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
selection = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
            merge[i] = node;
        }
    }
}
for (; j < m0; ++j) {
    merges[j] = groups0[j];
}
return new Selection(merges, this._parents);});
    selection_order = ($__.fs.selection_order_411 = function selection_order() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
        if (node = group[i]) {
            if (next && next !== node.nextSibling)
                next.parentNode.insertBefore(node, next);
            next = node;
        }
    }
}
return this;});
    selection_sort = ($__.fs.selection_sort_412 = function selection_sort(compare) {
var vvv_return, vvv_switch, compareNode;
compareNode = function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
compare = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!compare)
    compare = ascending$2;
for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group[i]) {
            sortgroup[i] = node;
        }
    }
    sortgroup.sort(compareNode);
}
return new Selection(sortgroups, this._parents).order();});
    ascending$2 = ($__.fs.ascending$2_413 = function ascending$2(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;});
    selection_call = ($__.fs.selection_call_414 = function selection_call() {
var vvv_return, vvv_switch, callback;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
callback = arguments[0];
arguments[0] = this;
callback.apply(null, arguments);
return this;});
    selection_nodes = ($__.fs.selection_nodes_415 = function selection_nodes() {
var vvv_return, vvv_switch, nodes, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
nodes = new Array(this.size());
i = -1;
this.each(function () {
    nodes[++i] = this;
});
return nodes;});
    selection_node = ($__.fs.selection_node_416 = function selection_node() {
var vvv_return, vvv_switch, node;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
        node = group[i];
        if (node)
            return node;
    }
}
return null;});
    selection_size = ($__.fs.selection_size_417 = function selection_size() {
var vvv_return, vvv_switch, size;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
size = 0;
this.each(function () {
    ++size;
});
return size;});
    selection_empty = ($__.fs.selection_empty_418 = function selection_empty() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return !this.node();});
    selection_each = ($__.fs.selection_each_419 = function selection_each(callback) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
        if (node = group[i])
            callback.call(node, node.__data__, i, group);
    }
}
return this;});
    attrRemove = ($__.fs.attrRemove_420 = function attrRemove(name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.removeAttribute(name);
};});
    attrRemoveNS = ($__.fs.attrRemoveNS_421 = function attrRemoveNS(fullname) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
fullname = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
};});
    attrConstant = ($__.fs.attrConstant_422 = function attrConstant(name, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.setAttribute(name, value);
};});
    attrConstantNS = ($__.fs.attrConstantNS_423 = function attrConstantNS(fullname, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
fullname = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.setAttributeNS(fullname.space, fullname.local, value);
};});
    attrFunction = ($__.fs.attrFunction_424 = function attrFunction(name, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var v = value.apply(this, arguments);
    if (v == null)
        this.removeAttribute(name);
    else
        this.setAttribute(name, v);
};});
    attrFunctionNS = ($__.fs.attrFunctionNS_425 = function attrFunctionNS(fullname, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
fullname = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var v = value.apply(this, arguments);
    if (v == null)
        this.removeAttributeNS(fullname.space, fullname.local);
    else
        this.setAttributeNS(fullname.space, fullname.local, v);
};});
    selection_attr = ($__.fs.selection_attr_426 = function selection_attr(name, value) {
var vvv_return, vvv_switch, fullname, node;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
fullname = namespace(name);
if (arguments.length < 2) {
    node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
}
return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === 'function' ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));});
    window = ($__.fs.window_427 = function window(node) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;});
    styleRemove = ($__.fs.styleRemove_428 = function styleRemove(name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.style.removeProperty(name);
};});
    styleConstant = ($__.fs.styleConstant_429 = function styleConstant(name, value, priority) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1], priority = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.style.setProperty(name, value, priority);
};});
    styleFunction = ($__.fs.styleFunction_430 = function styleFunction(name, value, priority) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1], priority = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var v = value.apply(this, arguments);
    if (v == null)
        this.style.removeProperty(name);
    else
        this.style.setProperty(name, v, priority);
};});
    selection_style = ($__.fs.selection_style_431 = function selection_style(name, value, priority) {
var vvv_return, vvv_switch, node;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1], priority = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === 'function' ? styleFunction : styleConstant)(name, value, priority == null ? '' : priority)) : window(node = this.node()).getComputedStyle(node, null).getPropertyValue(name);});
    propertyRemove = ($__.fs.propertyRemove_432 = function propertyRemove(name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    delete this[name];
};});
    propertyConstant = ($__.fs.propertyConstant_433 = function propertyConstant(name, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this[name] = value;
};});
    propertyFunction = ($__.fs.propertyFunction_434 = function propertyFunction(name, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var v = value.apply(this, arguments);
    if (v == null)
        delete this[name];
    else
        this[name] = v;
};});
    selection_property = ($__.fs.selection_property_435 = function selection_property(name, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === 'function' ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];});
    classArray = ($__.fs.classArray_436 = function classArray(string) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
string = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return string.trim().split(/^|\s+/);});
    classList = ($__.fs.classList_437 = function classList(node) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return node.classList || new ClassList(node);});
    ClassList = ($__.fs.ClassList_438 = function ClassList(node) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._node = node;
this._names = classArray(node.getAttribute('class') || '');});
    classedAdd = ($__.fs.classedAdd_439 = function classedAdd(node, names) {
var vvv_return, vvv_switch, list, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], names = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
list = classList(node);
i = -1;
n = names.length;
while (++i < n)
    list.add(names[i]);});
    classedRemove = ($__.fs.classedRemove_440 = function classedRemove(node, names) {
var vvv_return, vvv_switch, list, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], names = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
list = classList(node);
i = -1;
n = names.length;
while (++i < n)
    list.remove(names[i]);});
    classedTrue = ($__.fs.classedTrue_441 = function classedTrue(names) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
names = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    classedAdd(this, names);
};});
    classedFalse = ($__.fs.classedFalse_442 = function classedFalse(names) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
names = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    classedRemove(this, names);
};});
    classedFunction = ($__.fs.classedFunction_443 = function classedFunction(names, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
names = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
};});
    selection_classed = ($__.fs.selection_classed_444 = function selection_classed(name, value) {
var vvv_return, vvv_switch, names, list, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
names = classArray(name + '');
if (arguments.length < 2) {
    list = classList(this.node());
    i = -1;
    n = names.length;
    while (++i < n)
        if (!list.contains(names[i]))
        return false;
    return true;
}
return this.each((typeof value === 'function' ? classedFunction : value ? classedTrue : classedFalse)(names, value));});
    textRemove = ($__.fs.textRemove_445 = function textRemove() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.textContent = '';});
    textConstant = ($__.fs.textConstant_446 = function textConstant(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.textContent = value;
};});
    textFunction = ($__.fs.textFunction_447 = function textFunction(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? '' : v;
};});
    selection_text = ($__.fs.selection_text_448 = function selection_text(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length ? this.each(value == null ? textRemove : (typeof value === 'function' ? textFunction : textConstant)(value)) : this.node().textContent;});
    htmlRemove = ($__.fs.htmlRemove_449 = function htmlRemove() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.innerHTML = '';});
    htmlConstant = ($__.fs.htmlConstant_450 = function htmlConstant(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.innerHTML = value;
};});
    htmlFunction = ($__.fs.htmlFunction_451 = function htmlFunction(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? '' : v;
};});
    selection_html = ($__.fs.selection_html_452 = function selection_html(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === 'function' ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;});
    raise$1 = ($__.fs.raise$1_453 = function raise$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this.nextSibling)
    this.parentNode.appendChild(this);});
    selection_raise = ($__.fs.selection_raise_454 = function selection_raise() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.each(raise$1);});
    lower = ($__.fs.lower_455 = function lower() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);});
    selection_lower = ($__.fs.selection_lower_456 = function selection_lower() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.each(lower);});
    selection_append = ($__.fs.selection_append_457 = function selection_append(name) {
var vvv_return, vvv_switch, create;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
create = typeof name === 'function' ? name : creator(name);
return this.select(function () {
    return this.appendChild(create.apply(this, arguments));
});});
    constantNull = ($__.fs.constantNull_458 = function constantNull() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return null;});
    selection_insert = ($__.fs.selection_insert_459 = function selection_insert(name, before) {
var vvv_return, vvv_switch, create, select;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], before = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
create = typeof name === 'function' ? name : creator(name);
select = before == null ? constantNull : typeof before === 'function' ? before : selector(before);
return this.select(function () {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
});});
    remove = ($__.fs.remove_460 = function remove() {
var vvv_return, vvv_switch, parent;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
parent = this.parentNode;
if (parent)
    parent.removeChild(this);});
    selection_remove = ($__.fs.selection_remove_461 = function selection_remove() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.each(remove);});
    selection_datum = ($__.fs.selection_datum_462 = function selection_datum(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return arguments.length ? this.property('__data__', value) : this.node().__data__;});
    dispatchEvent = ($__.fs.dispatchEvent_463 = function dispatchEvent(node, type, params) {
var vvv_return, vvv_switch, window$$, event;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], type = arguments[1], params = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
window$$ = window(node);
event = window$$.CustomEvent;
if (event) {
    event = new event(type, params);
} else {
    event = window$$.document.createEvent('Event');
    if (params)
        event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else
        event.initEvent(type, false, false);
}
node.dispatchEvent(event);});
    dispatchConstant = ($__.fs.dispatchConstant_464 = function dispatchConstant(type, params) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0], params = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return dispatchEvent(this, type, params);
};});
    dispatchFunction = ($__.fs.dispatchFunction_465 = function dispatchFunction(type, params) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0], params = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return dispatchEvent(this, type, params.apply(this, arguments));
};});
    selection_dispatch = ($__.fs.selection_dispatch_466 = function selection_dispatch(type, params) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0], params = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.each((typeof params === 'function' ? dispatchFunction : dispatchConstant)(type, params));});
    Selection = ($__.fs.Selection_467 = function Selection(groups, parents) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
groups = arguments[0], parents = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._groups = groups;
this._parents = parents;});
    selection = ($__.fs.selection_468 = function selection() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Selection([[document.documentElement]], root);});
    select = ($__.fs.select_469 = function select(selector) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
selector = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return typeof selector === 'string' ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);});
    selectAll = ($__.fs.selectAll_470 = function selectAll(selector) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
selector = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return typeof selector === 'string' ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([selector == null ? [] : selector], root);});
    touch = ($__.fs.J$__v2246113107_1628_471 = function J$__v2246113107_1628(node, touches, identifier) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], touches = arguments[1], identifier = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (arguments.length < 3)
    identifier = touches, touches = sourceEvent().changedTouches;
for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
        return point$5(node, touch);
    }
}
return null;});
    touches = ($__.fs.J$__v2246113107_1630_472 = function J$__v2246113107_1630(node, touches) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], touches = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (touches == null)
    touches = sourceEvent().touches;
for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = point$5(node, touches[i]);
}
return points;});
    schedule = ($__.fs.schedule_473 = function schedule(node, name, id, index, group, timing) {
var vvv_return, vvv_switch, schedules;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], name = arguments[1], id = arguments[2], index = arguments[3], group = arguments[4], timing = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
schedules = node.__transition;
if (!schedules)
    node.__transition = {};
else if (id in schedules)
    return;
create(node, id, {
    name: name,
    index: index,
    group: group,
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
});});
    init = ($__.fs.init_474 = function init(node, id) {
var vvv_return, vvv_switch, schedule;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], id = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
schedule = node.__transition;
if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED)
    throw new Error('too late');
return schedule;});
    set$2 = ($__.fs.set$2_475 = function set$2(node, id) {
var vvv_return, vvv_switch, schedule;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], id = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
schedule = node.__transition;
if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING)
    throw new Error('too late');
return schedule;});
    get$1 = ($__.fs.get$1_476 = function get$1(node, id) {
var vvv_return, vvv_switch, schedule;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], id = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
schedule = node.__transition;
if (!schedule || !(schedule = schedule[id]))
    throw new Error('too late');
return schedule;});
    create = ($__.fs.create_477 = function create(node, id, self) {
var vvv_return, vvv_switch, schedules, tween, schedule, start, tick;
schedule = function schedule(elapsed) {
    self.state = SCHEDULED;
    if (self.delay <= elapsed)
        start(elapsed - self.delay);
    else
        self.timer.restart(start, self.delay, self.time);
};
start = function start(elapsed) {
    var i, j, n, o;
    for (i in schedules) {
        o = schedules[i];
        if (o.name !== self.name)
            continue;
        if (o.state === STARTED) {
            o.state = ENDED;
            o.timer.stop();
            o.on.call('interrupt', node, node.__data__, o.index, o.group);
            delete schedules[i];
        } else if (+i < id) {
            o.state = ENDED;
            o.timer.stop();
            delete schedules[i];
        }
    }
    timeout$1(function () {
        if (self.state === STARTED) {
            self.timer.restart(tick, self.delay, self.time);
            tick(elapsed);
        }
    });
    self.state = STARTING;
    self.on.call('start', node, node.__data__, self.index, self.group);
    if (self.state !== STARTING)
        return;
    self.state = STARTED;
    tween = new Array(n = self.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
        if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
            tween[++j] = o;
        }
    }
    tween.length = j + 1;
};
tick = function tick(elapsed) {
    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
        tween[i].call(null, t);
    }
    if (self.state === ENDING) {
        self.state = ENDED;
        self.timer.stop();
        self.on.call('end', node, node.__data__, self.index, self.group);
        for (i in schedules)
            if (+i !== id)
            return void delete schedules[id];
        delete node.__transition;
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], id = arguments[1], self = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
schedules = node.__transition;
schedules[id] = self;
self.timer = timer(schedule, 0, self.time);});
    interrupt = ($__.fs.interrupt_478 = function interrupt(node, name) {
var vvv_return, vvv_switch, schedules, schedule, active, empty, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], name = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
schedules = node.__transition;
empty = true;
if (!schedules)
    return;
name = name == null ? null : name + '';
for (i in schedules) {
    if ((schedule = schedules[i]).name !== name) {
        empty = false;
        continue;
    }
    active = schedule.state === STARTED;
    schedule.state = ENDED;
    schedule.timer.stop();
    if (active)
        schedule.on.call('interrupt', node, node.__data__, schedule.index, schedule.group);
    delete schedules[i];
}
if (empty)
    delete node.__transition;});
    selection_interrupt = ($__.fs.selection_interrupt_479 = function selection_interrupt(name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.each(function () {
    interrupt(this, name);
});});
    tweenRemove = ($__.fs.tweenRemove_480 = function tweenRemove(id, name) {
var vvv_return, vvv_switch, tween0, tween1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
id = arguments[0], name = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var schedule = set$2(this, id), tween = schedule.tween;
    if (tween !== tween0) {
        tween1 = tween0 = tween;
        for (var i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
                tween1 = tween1.slice();
                tween1.splice(i, 1);
                break;
            }
        }
    }
    schedule.tween = tween1;
};});
    tweenFunction = ($__.fs.tweenFunction_481 = function tweenFunction(id, name, value) {
var vvv_return, vvv_switch, tween0, tween1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
id = arguments[0], name = arguments[1], value = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof value !== 'function')
    throw new Error();
return function () {
    var schedule = set$2(this, id), tween = schedule.tween;
    if (tween !== tween0) {
        tween1 = (tween0 = tween).slice();
        for (var t = {
                    name: name,
                    value: value
                }, i = 0, n = tween1.length; i < n; ++i) {
            if (tween1[i].name === name) {
                tween1[i] = t;
                break;
            }
        }
        if (i === n)
            tween1.push(t);
    }
    schedule.tween = tween1;
};});
    transition_tween = ($__.fs.transition_tween_482 = function transition_tween(name, value) {
var vvv_return, vvv_switch, id, tween;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
id = this._id;
name += '';
if (arguments.length < 2) {
    tween = get$1(this.node(), id).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
        if ((t = tween[i]).name === name) {
            return t.value;
        }
    }
    return null;
}
return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));});
    tweenValue = ($__.fs.tweenValue_483 = function tweenValue(transition, name, value) {
var vvv_return, vvv_switch, id;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
transition = arguments[0], name = arguments[1], value = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
id = transition._id;
transition.each(function () {
    var schedule = set$2(this, id);
    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
});
return function (node) {
    return get$1(node, id).value[name];
};});
    interpolate$1 = ($__.fs.interpolate$1_484 = function interpolate$1(a, b) {
var vvv_return, vvv_switch, c;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (typeof b === 'number' ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);});
    attrRemove$1 = ($__.fs.attrRemove$1_485 = function attrRemove$1(name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.removeAttribute(name);
};});
    attrRemoveNS$1 = ($__.fs.attrRemoveNS$1_486 = function attrRemoveNS$1(fullname) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
fullname = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.removeAttributeNS(fullname.space, fullname.local);
};});
    attrConstant$1 = ($__.fs.attrConstant$1_487 = function attrConstant$1(name, interpolate, value1) {
var vvv_return, vvv_switch, value00, interpolate0;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], interpolate = arguments[1], value1 = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var value0 = this.getAttribute(name);
    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
};});
    attrConstantNS$1 = ($__.fs.attrConstantNS$1_488 = function attrConstantNS$1(fullname, interpolate, value1) {
var vvv_return, vvv_switch, value00, interpolate0;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
fullname = arguments[0], interpolate = arguments[1], value1 = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
};});
    attrFunction$1 = ($__.fs.attrFunction$1_489 = function attrFunction$1(name, interpolate, value) {
var vvv_return, vvv_switch, value00, value10, interpolate0;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], interpolate = arguments[1], value = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var value0, value1 = value(this);
    if (value1 == null)
        return void this.removeAttribute(name);
    value0 = this.getAttribute(name);
    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
};});
    attrFunctionNS$1 = ($__.fs.attrFunctionNS$1_490 = function attrFunctionNS$1(fullname, interpolate, value) {
var vvv_return, vvv_switch, value00, value10, interpolate0;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
fullname = arguments[0], interpolate = arguments[1], value = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var value0, value1 = value(this);
    if (value1 == null)
        return void this.removeAttributeNS(fullname.space, fullname.local);
    value0 = this.getAttributeNS(fullname.space, fullname.local);
    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
};});
    transition_attr = ($__.fs.transition_attr_491 = function transition_attr(name, value) {
var vvv_return, vvv_switch, fullname, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
fullname = namespace(name);
i = fullname === 'transform' ? interpolateTransform$2 : interpolate$1;
return this.attrTween(name, typeof value === 'function' ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, 'attr.' + name, value)) : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname) : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));});
    attrTweenNS = ($__.fs.attrTweenNS_492 = function attrTweenNS(fullname, value) {
var vvv_return, vvv_switch, tween;
tween = function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function (t) {
        node.setAttributeNS(fullname.space, fullname.local, i(t));
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
fullname = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
tween._value = value;
return tween;});
    attrTween = ($__.fs.attrTween_493 = function attrTween(name, value) {
var vvv_return, vvv_switch, tween;
tween = function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function (t) {
        node.setAttribute(name, i(t));
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
tween._value = value;
return tween;});
    transition_attrTween = ($__.fs.transition_attrTween_494 = function transition_attrTween(name, value) {
var vvv_return, vvv_switch, key, fullname;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
key = 'attr.' + name;
if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
if (value == null)
    return this.tween(key, null);
if (typeof value !== 'function')
    throw new Error();
fullname = namespace(name);
return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));});
    delayFunction = ($__.fs.delayFunction_495 = function delayFunction(id, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
id = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    init(this, id).delay = +value.apply(this, arguments);
};});
    delayConstant = ($__.fs.delayConstant_496 = function delayConstant(id, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
id = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return value = +value, function () {
    init(this, id).delay = value;
};});
    transition_delay = ($__.fs.transition_delay_497 = function transition_delay(value) {
var vvv_return, vvv_switch, id;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
id = this._id;
return arguments.length ? this.each((typeof value === 'function' ? delayFunction : delayConstant)(id, value)) : get$1(this.node(), id).delay;});
    durationFunction = ($__.fs.durationFunction_498 = function durationFunction(id, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
id = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    set$2(this, id).duration = +value.apply(this, arguments);
};});
    durationConstant = ($__.fs.durationConstant_499 = function durationConstant(id, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
id = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return value = +value, function () {
    set$2(this, id).duration = value;
};});
    transition_duration = ($__.fs.transition_duration_500 = function transition_duration(value) {
var vvv_return, vvv_switch, id;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
id = this._id;
return arguments.length ? this.each((typeof value === 'function' ? durationFunction : durationConstant)(id, value)) : get$1(this.node(), id).duration;});
    easeConstant = ($__.fs.easeConstant_501 = function easeConstant(id, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
id = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof value !== 'function')
    throw new Error();
return function () {
    set$2(this, id).ease = value;
};});
    transition_ease = ($__.fs.transition_ease_502 = function transition_ease(value) {
var vvv_return, vvv_switch, id;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
id = this._id;
return arguments.length ? this.each(easeConstant(id, value)) : get$1(this.node(), id).ease;});
    transition_filter = ($__.fs.transition_filter_503 = function transition_filter(match) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
match = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof match !== 'function')
    match = matcher$1(match);
for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
            subgroup.push(node);
        }
    }
}
return new Transition(subgroups, this._parents, this._name, this._id);});
    transition_merge = ($__.fs.transition_merge_504 = function transition_merge(transition) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
transition = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (transition._id !== this._id)
    throw new Error();
for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
        if (node = group0[i] || group1[i]) {
            merge[i] = node;
        }
    }
}
for (; j < m0; ++j) {
    merges[j] = groups0[j];
}
return new Transition(merges, this._parents, this._name, this._id);});
    start$1 = ($__.fs.start$1_505 = function start$1(name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (name + '').trim().split(/^|\s+/).every(function (t) {
    var i = t.indexOf('.');
    if (i >= 0)
        t = t.slice(0, i);
    return !t || t === 'start';
});});
    onFunction = ($__.fs.onFunction_506 = function onFunction(id, name, listener) {
var vvv_return, vvv_switch, on0, on1, sit;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
id = arguments[0], name = arguments[1], listener = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
sit = start$1(name) ? init : set$2;
return function () {
    var schedule = sit(this, id), on = schedule.on;
    if (on !== on0)
        (on1 = (on0 = on).copy()).on(name, listener);
    schedule.on = on1;
};});
    transition_on = ($__.fs.transition_on_507 = function transition_on(name, listener) {
var vvv_return, vvv_switch, id;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], listener = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
id = this._id;
return arguments.length < 2 ? get$1(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));});
    removeFunction = ($__.fs.removeFunction_508 = function removeFunction(id) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
id = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var parent = this.parentNode;
    for (var i in this.__transition)
        if (+i !== id)
        return;
    if (parent)
        parent.removeChild(this);
};});
    transition_remove = ($__.fs.transition_remove_509 = function transition_remove() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.on('end.remove', removeFunction(this._id));});
    transition_select = ($__.fs.transition_select_510 = function transition_select(select) {
var vvv_return, vvv_switch, name, id;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
select = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
name = this._name;
id = this._id;
if (typeof select !== 'function')
    select = selector(select);
for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
            if ('__data__' in node)
                subnode.__data__ = node.__data__;
            subgroup[i] = subnode;
            schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
        }
    }
}
return new Transition(subgroups, this._parents, name, id);});
    transition_selectAll = ($__.fs.transition_selectAll_511 = function transition_selectAll(select) {
var vvv_return, vvv_switch, name, id;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
select = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
name = this._name;
id = this._id;
if (typeof select !== 'function')
    select = selectorAll(select);
for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
            for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
                if (child = children[k]) {
                    schedule(child, name, id, k, children, inherit);
                }
            }
            subgroups.push(children);
            parents.push(node);
        }
    }
}
return new Transition(subgroups, parents, name, id);});
    transition_selection = ($__.fs.transition_selection_512 = function transition_selection() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Selection$1(this._groups, this._parents);});
    styleRemove$1 = ($__.fs.styleRemove$1_513 = function styleRemove$1(name, interpolate) {
var vvv_return, vvv_switch, value00, value10, interpolate0;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], interpolate = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var style = window(this).getComputedStyle(this, null), value0 = style.getPropertyValue(name), value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
};});
    styleRemoveEnd = ($__.fs.styleRemoveEnd_514 = function styleRemoveEnd(name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.style.removeProperty(name);
};});
    styleConstant$1 = ($__.fs.styleConstant$1_515 = function styleConstant$1(name, interpolate, value1) {
var vvv_return, vvv_switch, value00, interpolate0;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], interpolate = arguments[1], value1 = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);
    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
};});
    styleFunction$1 = ($__.fs.styleFunction$1_516 = function styleFunction$1(name, interpolate, value) {
var vvv_return, vvv_switch, value00, value10, interpolate0;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], interpolate = arguments[1], value = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var style = window(this).getComputedStyle(this, null), value0 = style.getPropertyValue(name), value1 = value(this);
    if (value1 == null)
        value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
};});
    transition_style = ($__.fs.transition_style_517 = function transition_style(name, value, priority) {
var vvv_return, vvv_switch, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1], priority = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = (name += '') === 'transform' ? interpolateTransform$1 : interpolate$1;
return value == null ? this.styleTween(name, styleRemove$1(name, i)).on('end.style.' + name, styleRemoveEnd(name)) : this.styleTween(name, typeof value === 'function' ? styleFunction$1(name, i, tweenValue(this, 'style.' + name, value)) : styleConstant$1(name, i, value), priority);});
    styleTween = ($__.fs.styleTween_518 = function styleTween(name, value, priority) {
var vvv_return, vvv_switch, tween;
tween = function tween() {
    var node = this, i = value.apply(node, arguments);
    return i && function (t) {
        node.style.setProperty(name, i(t), priority);
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1], priority = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
tween._value = value;
return tween;});
    transition_styleTween = ($__.fs.transition_styleTween_519 = function transition_styleTween(name, value, priority) {
var vvv_return, vvv_switch, key;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0], value = arguments[1], priority = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
key = 'style.' + (name += '');
if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
if (value == null)
    return this.tween(key, null);
if (typeof value !== 'function')
    throw new Error();
return this.tween(key, styleTween(name, value, priority == null ? '' : priority));});
    textConstant$1 = ($__.fs.textConstant$1_520 = function textConstant$1(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    this.textContent = value;
};});
    textFunction$1 = ($__.fs.textFunction$1_521 = function textFunction$1(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    var value1 = value(this);
    this.textContent = value1 == null ? '' : value1;
};});
    transition_text = ($__.fs.transition_text_522 = function transition_text(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.tween('text', typeof value === 'function' ? textFunction$1(tweenValue(this, 'text', value)) : textConstant$1(value == null ? '' : value + ''));});
    transition_transition = ($__.fs.transition_transition_523 = function transition_transition() {
var vvv_return, vvv_switch, name, id0, id1, inherit;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
name = this._name;
id0 = this._id;
id1 = newId();
for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
            inherit = get$1(node, id0);
            schedule(node, name, id1, i, group, {
                time: inherit.time + inherit.delay + inherit.duration,
                delay: 0,
                duration: inherit.duration,
                ease: inherit.ease
            });
        }
    }
}
return new Transition(groups, this._parents, name, id1);});
    Transition = ($__.fs.Transition_524 = function Transition(groups, parents, name, id) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
groups = arguments[0], parents = arguments[1], name = arguments[2], id = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._groups = groups;
this._parents = parents;
this._name = name;
this._id = id;});
    transition = ($__.fs.transition_525 = function transition(name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return selection().transition(name);});
    newId = ($__.fs.newId_526 = function newId() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ++id;});
    inherit = ($__.fs.inherit_527 = function inherit(node, id) {
var vvv_return, vvv_switch, timing;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], id = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
while (!(timing = node.__transition) || !(timing = timing[id])) {
    if (!(node = node.parentNode)) {
        return defaultTiming.time = now(), defaultTiming;
    }
}
return timing;});
    selection_transition = ($__.fs.selection_transition_528 = function selection_transition(name) {
var vvv_return, vvv_switch, id, timing;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (name instanceof Transition) {
    id = name._id, name = name._name;
} else {
    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + '';
}
for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if (node = group[i]) {
            schedule(node, name, id, i, group, timing || inherit(node, id));
        }
    }
}
return new Transition(groups, this._parents, name, id);});
    active = ($__.fs.active_529 = function active(node, name) {
var vvv_return, vvv_switch, schedules, schedule, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], name = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
schedules = node.__transition;
if (schedules) {
    name = name == null ? null : name + '';
    for (i in schedules) {
        if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
            return new Transition([[node]], root$1, name, +i);
        }
    }
}
return null;});
    identity$5 = ($__.fs.identity$5_530 = function identity$5(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x;});
    translateX = ($__.fs.translateX_531 = function translateX(scale0, scale1, d) {
var vvv_return, vvv_switch, x;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale0 = arguments[0], scale1 = arguments[1], d = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = scale0(d);
return 'translate(' + (isFinite(x) ? x : scale1(d)) + ',0)';});
    translateY = ($__.fs.translateY_532 = function translateY(scale0, scale1, d) {
var vvv_return, vvv_switch, y;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale0 = arguments[0], scale1 = arguments[1], d = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
y = scale0(d);
return 'translate(0,' + (isFinite(y) ? y : scale1(d)) + ')';});
    center = ($__.fs.center_533 = function center(scale) {
var vvv_return, vvv_switch, offset;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
offset = scale.bandwidth() / 2;
if (scale.round())
    offset = Math.round(offset);
return function (d) {
    return scale(d) + offset;
};});
    entering = ($__.fs.entering_534 = function entering() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return !this.__axis;});
    axis = ($__.fs.axis_535 = function axis(orient, scale) {
var vvv_return, vvv_switch, tickArguments, tickValues, tickFormat, tickSizeInner, tickSizeOuter, tickPadding, axis;
axis = function axis(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$5 : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, transform = orient === top || orient === bottom ? translateX : translateY, range = scale.range(), range0 = range[0] + 0.5, range1 = range[range.length - 1] + 0.5, position = (scale.bandwidth ? center : identity$5)(scale.copy()), selection = context.selection ? context.selection() : context, path = selection.selectAll('.domain').data([null]), tick = selection.selectAll('.tick').data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append('g').attr('class', 'tick'), line = tick.select('line'), text = tick.select('text'), k = orient === top || orient === left ? -1 : 1, x, y = orient === left || orient === right ? (x = 'x', 'y') : (x = 'y', 'x');
    path = path.merge(path.enter().insert('path', '.tick').attr('class', 'domain').attr('stroke', '#000'));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append('line').attr('stroke', '#000').attr(x + '2', k * tickSizeInner).attr(y + '1', 0.5).attr(y + '2', 0.5));
    text = text.merge(tickEnter.append('text').attr('fill', '#000').attr(x, k * spacing).attr(y, 0.5).attr('dy', orient === top ? '0em' : orient === bottom ? '0.71em' : '0.32em'));
    if (context !== selection) {
        path = path.transition(context);
        tick = tick.transition(context);
        line = line.transition(context);
        text = text.transition(context);
        tickExit = tickExit.transition(context).attr('opacity', epsilon$2).attr('transform', function (d) {
            return transform(position, this.parentNode.__axis || position, d);
        });
        tickEnter.attr('opacity', epsilon$2).attr('transform', function (d) {
            return transform(this.parentNode.__axis || position, position, d);
        });
    }
    tickExit.remove();
    path.attr('d', orient === left || orient == right ? 'M' + k * tickSizeOuter + ',' + range0 + 'H0.5V' + range1 + 'H' + k * tickSizeOuter : 'M' + range0 + ',' + k * tickSizeOuter + 'V0.5H' + range1 + 'V' + k * tickSizeOuter);
    tick.attr('opacity', 1).attr('transform', function (d) {
        return transform(position, position, d);
    });
    line.attr(x + '2', k * tickSizeInner);
    text.attr(x, k * spacing).text(format);
    selection.filter(entering).attr('fill', 'none').attr('font-size', 10).attr('font-family', 'sans-serif').attr('text-anchor', orient === right ? 'start' : orient === left ? 'end' : 'middle');
    selection.each(function () {
        this.__axis = position;
    });
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
orient = arguments[0], scale = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
tickArguments = [];
tickValues = null;
tickFormat = null;
tickSizeInner = 6;
tickSizeOuter = 6;
tickPadding = 3;
axis.scale = function (_) {
    return arguments.length ? (scale = _, axis) : scale;
};
axis.ticks = function () {
    return tickArguments = slice$4.call(arguments), axis;
};
axis.tickArguments = function (_) {
    return arguments.length ? (tickArguments = _ == null ? [] : slice$4.call(_), axis) : tickArguments.slice();
};
axis.tickValues = function (_) {
    return arguments.length ? (tickValues = _ == null ? null : slice$4.call(_), axis) : tickValues && tickValues.slice();
};
axis.tickFormat = function (_) {
    return arguments.length ? (tickFormat = _, axis) : tickFormat;
};
axis.tickSize = function (_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
};
axis.tickSizeInner = function (_) {
    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
};
axis.tickSizeOuter = function (_) {
    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
};
axis.tickPadding = function (_) {
    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
};
return axis;});
    axisTop = ($__.fs.axisTop_536 = function axisTop(scale) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return axis(top, scale);});
    axisRight = ($__.fs.axisRight_537 = function axisRight(scale) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return axis(right, scale);});
    axisBottom = ($__.fs.axisBottom_538 = function axisBottom(scale) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return axis(bottom, scale);});
    axisLeft = ($__.fs.axisLeft_539 = function axisLeft(scale) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return axis(left, scale);});
    defaultSeparation = ($__.fs.defaultSeparation_540 = function defaultSeparation(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a.parent === b.parent ? 1 : 2;});
    meanX = ($__.fs.meanX_541 = function meanX(children) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
children = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return children.reduce(meanXReduce, 0) / children.length;});
    meanXReduce = ($__.fs.meanXReduce_542 = function meanXReduce(x, c) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], c = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x + c.x;});
    maxY = ($__.fs.maxY_543 = function maxY(children) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
children = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 + children.reduce(maxYReduce, 0);});
    maxYReduce = ($__.fs.maxYReduce_544 = function maxYReduce(y, c) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0], c = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.max(y, c.y);});
    leafLeft = ($__.fs.leafLeft_545 = function leafLeft(node) {
var vvv_return, vvv_switch, children;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
while (children = node.children)
    node = children[0];
return node;});
    leafRight = ($__.fs.leafRight_546 = function leafRight(node) {
var vvv_return, vvv_switch, children;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
while (children = node.children)
    node = children[children.length - 1];
return node;});
    cluster = ($__.fs.cluster_547 = function cluster() {
var vvv_return, vvv_switch, separation, dx, dy, nodeSize, cluster;
cluster = function cluster(root) {
    var previousNode, x = 0;
    root.eachAfter(function (node) {
        var children = node.children;
        if (children) {
            node.x = meanX(children);
            node.y = maxY(children);
        } else {
            node.x = previousNode ? x += separation(node, previousNode) : 0;
            node.y = 0;
            previousNode = node;
        }
    });
    var left = leafLeft(root), right = leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
    return root.eachAfter(nodeSize ? function (node) {
        node.x = (node.x - root.x) * dx;
        node.y = (root.y - node.y) * dy;
    } : function (node) {
        node.x = (node.x - x0) / (x1 - x0) * dx;
        node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
    });
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
separation = defaultSeparation;
dx = 1;
dy = 1;
nodeSize = false;
cluster.separation = function (x) {
    return arguments.length ? (separation = x, cluster) : separation;
};
cluster.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [
        dx,
        dy
    ];
};
cluster.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [
        dx,
        dy
    ] : null;
};
return cluster;});
    node_each = ($__.fs.node_each_548 = function node_each(callback) {
var vvv_return, vvv_switch, node, current, next, children, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
node = this;
next = [node];
do {
    current = next.reverse(), next = [];
    while (node = current.pop()) {
        callback(node), children = node.children;
        if (children)
            for (i = 0, n = children.length; i < n; ++i) {
            next.push(children[i]);
        }
    }
} while (next.length);
return this;});
    node_eachBefore = ($__.fs.node_eachBefore_549 = function node_eachBefore(callback) {
var vvv_return, vvv_switch, node, nodes, children, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
node = this;
nodes = [node];
while (node = nodes.pop()) {
    callback(node), children = node.children;
    if (children)
        for (i = children.length - 1; i >= 0; --i) {
        nodes.push(children[i]);
    }
}
return this;});
    node_eachAfter = ($__.fs.node_eachAfter_550 = function node_eachAfter(callback) {
var vvv_return, vvv_switch, node, nodes, next, children, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
node = this;
nodes = [node];
next = [];
while (node = nodes.pop()) {
    next.push(node), children = node.children;
    if (children)
        for (i = 0, n = children.length; i < n; ++i) {
        nodes.push(children[i]);
    }
}
while (node = next.pop()) {
    callback(node);
}
return this;});
    node_sum = ($__.fs.node_sum_551 = function node_sum(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.eachAfter(function (node) {
    var sum = +value(node.data) || 0, children = node.children, i = children && children.length;
    while (--i >= 0)
        sum += children[i].value;
    node.value = sum;
});});
    node_sort = ($__.fs.node_sort_552 = function node_sort(compare) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
compare = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.eachBefore(function (node) {
    if (node.children) {
        node.children.sort(compare);
    }
});});
    node_path = ($__.fs.node_path_553 = function node_path(end) {
var vvv_return, vvv_switch, start, ancestor, nodes, k;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
end = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
start = this;
ancestor = leastCommonAncestor(start, end);
nodes = [start];
while (start !== ancestor) {
    start = start.parent;
    nodes.push(start);
}
k = nodes.length;
while (end !== ancestor) {
    nodes.splice(k, 0, end);
    end = end.parent;
}
return nodes;});
    leastCommonAncestor = ($__.fs.leastCommonAncestor_554 = function leastCommonAncestor(a, b) {
var vvv_return, vvv_switch, aNodes, bNodes, c;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (a === b)
    return a;
aNodes = a.ancestors();
bNodes = b.ancestors();
c = null;
a = aNodes.pop();
b = bNodes.pop();
while (a === b) {
    c = a;
    a = aNodes.pop();
    b = bNodes.pop();
}
return c;});
    node_ancestors = ($__.fs.node_ancestors_555 = function node_ancestors() {
var vvv_return, vvv_switch, node, nodes;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
node = this;
nodes = [node];
while (node = node.parent) {
    nodes.push(node);
}
return nodes;});
    node_descendants = ($__.fs.node_descendants_556 = function node_descendants() {
var vvv_return, vvv_switch, nodes;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
nodes = [];
this.each(function (node) {
    nodes.push(node);
});
return nodes;});
    node_leaves = ($__.fs.node_leaves_557 = function node_leaves() {
var vvv_return, vvv_switch, leaves;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
leaves = [];
this.eachBefore(function (node) {
    if (!node.children) {
        leaves.push(node);
    }
});
return leaves;});
    node_links = ($__.fs.node_links_558 = function node_links() {
var vvv_return, vvv_switch, root, links;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
root = this;
links = [];
root.each(function (node) {
    if (node !== root) {
        links.push({
            source: node.parent,
            target: node
        });
    }
});
return links;});
    hierarchy = ($__.fs.hierarchy_559 = function hierarchy(data, children) {
var vvv_return, vvv_switch, root, valued, node, nodes, child, childs, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
data = arguments[0], children = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
root = new Node(data);
valued = +data.value && (root.value = data.value);
nodes = [root];
if (children == null)
    children = defaultChildren;
while (node = nodes.pop()) {
    if (valued)
        node.value = +node.data.value;
    if ((childs = children(node.data)) && (n = childs.length)) {
        node.children = new Array(n);
        for (i = n - 1; i >= 0; --i) {
            nodes.push(child = node.children[i] = new Node(childs[i]));
            child.parent = node;
            child.depth = node.depth + 1;
        }
    }
}
return root.eachBefore(computeHeight);});
    node_copy = ($__.fs.node_copy_560 = function node_copy() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return hierarchy(this).eachBefore(copyData);});
    defaultChildren = ($__.fs.defaultChildren_561 = function defaultChildren(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.children;});
    copyData = ($__.fs.copyData_562 = function copyData(node) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
node.data = node.data.data;});
    computeHeight = ($__.fs.computeHeight_563 = function computeHeight(node) {
var vvv_return, vvv_switch, height;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
height = 0;
do
    node.height = height;
while ((node = node.parent) && node.height < ++height);});
    Node = ($__.fs.Node_564 = function Node(data) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
data = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.data = data;
this.depth = this.height = 0;
this.parent = null;});
    Node$2 = ($__.fs.Node$2_565 = function Node$2(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._ = value;
this.next = null;});
    shuffle$1 = ($__.fs.shuffle$1_566 = function shuffle$1(array) {
var vvv_return, vvv_switch, i, n, head, node, next;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = (array = array.slice()).length;
head = null;
node = head;
while (n) {
    next = new Node$2(array[n - 1]);
    if (node)
        node = node.next = next;
    else
        node = head = next;
    array[i] = array[--n];
}
return {
    head: head,
    tail: node
};});
    enclose = ($__.fs.enclose_567 = function enclose(circles) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
circles = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return encloseN(shuffle$1(circles), []);});
    encloses = ($__.fs.encloses_568 = function encloses(a, b) {
var vvv_return, vvv_switch, dx, dy, dr;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dx = b.x - a.x;
dy = b.y - a.y;
dr = a.r - b.r;
return dr * dr + 0.000001 > dx * dx + dy * dy;});
    encloseN = ($__.fs.encloseN_569 = function encloseN(L, B) {
var vvv_return, vvv_switch, circle, l0, l1, l2, p1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
L = arguments[0], B = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
l0 = null;
l1 = L.head;
switch (B.length) {
case 1:
    circle = enclose1(B[0]);
    break;
case 2:
    circle = enclose2(B[0], B[1]);
    break;
case 3:
    circle = enclose3(B[0], B[1], B[2]);
    break;
}
while (l1) {
    p1 = l1._, l2 = l1.next;
    if (!circle || !encloses(circle, p1)) {
        if (l0)
            L.tail = l0, l0.next = null;
        else
            L.head = L.tail = null;
        B.push(p1);
        circle = encloseN(L, B);
        B.pop();
        if (L.head)
            l1.next = L.head, L.head = l1;
        else
            l1.next = null, L.head = L.tail = l1;
        l0 = L.tail, l0.next = l2;
    } else {
        l0 = l1;
    }
    l1 = l2;
}
L.tail = l0;
return circle;});
    enclose1 = ($__.fs.enclose1_570 = function enclose1(a) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return {
    x: a.x,
    y: a.y,
    r: a.r
};});
    enclose2 = ($__.fs.enclose2_571 = function enclose2(a, b) {
var vvv_return, vvv_switch, x1, y1, r1, x2, y2, r2, x21, y21, r21, l;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x1 = a.x;
y1 = a.y;
r1 = a.r;
x2 = b.x;
y2 = b.y;
r2 = b.r;
x21 = x2 - x1;
y21 = y2 - y1;
r21 = r2 - r1;
l = Math.sqrt(x21 * x21 + y21 * y21);
return {
    x: (x1 + x2 + x21 / l * r21) / 2,
    y: (y1 + y2 + y21 / l * r21) / 2,
    r: (l + r1 + r2) / 2
};});
    enclose3 = ($__.fs.enclose3_572 = function enclose3(a, b, c) {
var vvv_return, vvv_switch, x1, y1, r1, x2, y2, r2, x3, y3, r3, a2, b2, c2, d2, a3, b3, c3, d3, ab, xa, xb, ya, yb, A, B, C, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], c = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x1 = a.x;
y1 = a.y;
r1 = a.r;
x2 = b.x;
y2 = b.y;
r2 = b.r;
x3 = c.x;
y3 = c.y;
r3 = c.r;
a2 = 2 * (x1 - x2);
b2 = 2 * (y1 - y2);
c2 = 2 * (r2 - r1);
d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2;
a3 = 2 * (x1 - x3);
b3 = 2 * (y1 - y3);
c3 = 2 * (r3 - r1);
d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3;
ab = a3 * b2 - a2 * b3;
xa = (b2 * d3 - b3 * d2) / ab - x1;
xb = (b3 * c2 - b2 * c3) / ab;
ya = (a3 * d2 - a2 * d3) / ab - y1;
yb = (a2 * c3 - a3 * c2) / ab;
A = xb * xb + yb * yb - 1;
B = 2 * (xa * xb + ya * yb + r1);
C = xa * xa + ya * ya - r1 * r1;
r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
return {
    x: xa + xb * r + x1,
    y: ya + yb * r + y1,
    r: r
};});
    place = ($__.fs.place_573 = function place(a, b, c) {
var vvv_return, vvv_switch, ax, ay, da, db, dx, dy, dc, x, y;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], c = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ax = a.x;
ay = a.y;
da = b.r + c.r;
db = a.r + c.r;
dx = b.x - ax;
dy = b.y - ay;
dc = dx * dx + dy * dy;
if (dc) {
    x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc);
    y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
    c.x = ax + x * dx + y * dy;
    c.y = ay + x * dy - y * dx;
} else {
    c.x = ax + db;
    c.y = ay;
}});
    intersects = ($__.fs.intersects_574 = function intersects(a, b) {
var vvv_return, vvv_switch, dx, dy, dr;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dx = b.x - a.x;
dy = b.y - a.y;
dr = a.r + b.r;
return dr * dr > dx * dx + dy * dy;});
    distance2 = ($__.fs.distance2_575 = function distance2(circle, x, y) {
var vvv_return, vvv_switch, dx, dy;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
circle = arguments[0], x = arguments[1], y = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dx = circle.x - x;
dy = circle.y - y;
return dx * dx + dy * dy;});
    Node$1 = ($__.fs.Node$1_576 = function Node$1(circle) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
circle = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._ = circle;
this.next = null;
this.previous = null;});
    packEnclose = ($__.fs.packEnclose_577 = function packEnclose(circles) {
var vvv_return, vvv_switch, a, b, c, n, aa, ba, ca, oa, ox, oy, cx, cy, i, j, k, sj, sk;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
circles = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!(n = circles.length))
    return 0;
a = circles[0], a.x = 0, a.y = 0;
if (!(n > 1))
    return a.r;
b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
if (!(n > 2))
    return a.r + b.r;
place(b, a, c = circles[2]);
aa = a.r * a.r;
ba = b.r * b.r;
ca = c.r * c.r;
oa = aa + ba + ca;
ox = aa * a.x + ba * b.x + ca * c.x;
oy = aa * a.y + ba * b.y + ca * c.y;
a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
a.next = c.previous = b;
b.next = a.previous = c;
c.next = b.previous = a;
pack:
    for (i = 3; i < n; ++i) {
        place(a._, b._, c = circles[i]), c = new Node$1(c);
        if ((k = a.previous) === (j = b.next)) {
            if (intersects(j._, c._)) {
                a = b, b = j, --i;
                continue pack;
            }
        } else {
            sj = j._.r, sk = k._.r;
            do {
                if (sj <= sk) {
                    if (intersects(j._, c._)) {
                        b = j, a.next = b, b.previous = a, --i;
                        continue pack;
                    }
                    j = j.next, sj += j._.r;
                } else {
                    if (intersects(k._, c._)) {
                        a = k, a.next = b, b.previous = a, --i;
                        continue pack;
                    }
                    k = k.previous, sk += k._.r;
                }
            } while (j !== k.next);
        }
        c.previous = a, c.next = b, a.next = b.previous = b = c;
        oa += ca = c._.r * c._.r;
        ox += ca * c._.x;
        oy += ca * c._.y;
        aa = distance2(a._, cx = ox / oa, cy = oy / oa);
        while ((c = c.next) !== b) {
            if ((ca = distance2(c._, cx, cy)) < aa) {
                a = c, aa = ca;
            }
        }
        b = a.next;
    }
a = [b._], c = b;
while ((c = c.next) !== b)
    a.push(c._);
c = enclose(a);
for (i = 0; i < n; ++i)
    a = circles[i], a.x -= c.x, a.y -= c.y;
return c.r;});
    siblings = ($__.fs.siblings_578 = function siblings(circles) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
circles = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
packEnclose(circles);
return circles;});
    optional = ($__.fs.optional_579 = function optional(f) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
f = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return f == null ? null : required(f);});
    required = ($__.fs.required_580 = function required(f) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
f = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof f !== 'function')
    throw new Error();
return f;});
    constantZero = ($__.fs.constantZero_581 = function constantZero() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 0;});
    constant$5 = ($__.fs.constant$5_582 = function constant$5(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    defaultRadius = ($__.fs.defaultRadius_583 = function defaultRadius(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.sqrt(d.value);});
    index = ($__.fs.index_584 = function index() {
var vvv_return, vvv_switch, radius, dx, dy, padding, pack;
pack = function pack(root) {
    root.x = dx / 2, root.y = dy / 2;
    if (radius) {
        root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1));
    } else {
        root.eachBefore(radiusLeaf(defaultRadius)).eachAfter(packChildren(constantZero, 1)).eachAfter(packChildren(padding, root.r / Math.min(dx, dy))).eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
    }
    return root;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
radius = null;
dx = 1;
dy = 1;
padding = constantZero;
pack.radius = function (x) {
    return arguments.length ? (radius = optional(x), pack) : radius;
};
pack.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [
        dx,
        dy
    ];
};
pack.padding = function (x) {
    return arguments.length ? (padding = typeof x === 'function' ? x : constant$5(+x), pack) : padding;
};
return pack;});
    radiusLeaf = ($__.fs.radiusLeaf_585 = function radiusLeaf(radius) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
radius = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (node) {
    if (!node.children) {
        node.r = Math.max(0, +radius(node) || 0);
    }
};});
    packChildren = ($__.fs.packChildren_586 = function packChildren(padding, k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
padding = arguments[0], k = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (node) {
    if (children = node.children) {
        var children, i, n = children.length, r = padding(node) * k || 0, e;
        if (r)
            for (i = 0; i < n; ++i)
            children[i].r += r;
        e = packEnclose(children);
        if (r)
            for (i = 0; i < n; ++i)
            children[i].r -= r;
        node.r = e + r;
    }
};});
    translateChild = ($__.fs.translateChild_587 = function translateChild(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (node) {
    var parent = node.parent;
    node.r *= k;
    if (parent) {
        node.x = parent.x + k * node.x;
        node.y = parent.y + k * node.y;
    }
};});
    roundNode = ($__.fs.roundNode_588 = function roundNode(node) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
node.x0 = Math.round(node.x0);
node.y0 = Math.round(node.y0);
node.x1 = Math.round(node.x1);
node.y1 = Math.round(node.y1);});
    treemapDice = ($__.fs.treemapDice_589 = function treemapDice(parent, x0, y0, x1, y1) {
var vvv_return, vvv_switch, nodes, node, i, n, k;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parent = arguments[0], x0 = arguments[1], y0 = arguments[2], x1 = arguments[3], y1 = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
nodes = parent.children;
i = -1;
n = nodes.length;
k = parent.value && (x1 - x0) / parent.value;
while (++i < n) {
    node = nodes[i], node.y0 = y0, node.y1 = y1;
    node.x0 = x0, node.x1 = x0 += node.value * k;
}});
    partition = ($__.fs.partition_590 = function partition() {
var vvv_return, vvv_switch, dx, dy, padding, round, partition, positionNode;
partition = function partition(root) {
    var n = root.height + 1;
    root.x0 = root.y0 = padding;
    root.x1 = dx;
    root.y1 = dy / n;
    root.eachBefore(positionNode(dy, n));
    if (round)
        root.eachBefore(roundNode);
    return root;
};
positionNode = function positionNode(dy, n) {
    return function (node) {
        if (node.children) {
            treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
        }
        var x0 = node.x0, y0 = node.y0, x1 = node.x1 - padding, y1 = node.y1 - padding;
        if (x1 < x0)
            x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0)
            y0 = y1 = (y0 + y1) / 2;
        node.x0 = x0;
        node.y0 = y0;
        node.x1 = x1;
        node.y1 = y1;
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dx = 1;
dy = 1;
padding = 0;
round = false;
partition.round = function (x) {
    return arguments.length ? (round = !!x, partition) : round;
};
partition.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [
        dx,
        dy
    ];
};
partition.padding = function (x) {
    return arguments.length ? (padding = +x, partition) : padding;
};
return partition;});
    defaultId = ($__.fs.defaultId_591 = function defaultId(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.id;});
    defaultParentId = ($__.fs.defaultParentId_592 = function defaultParentId(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.parentId;});
    stratify = ($__.fs.stratify_593 = function stratify() {
var vvv_return, vvv_switch, id, parentId, stratify;
stratify = function stratify(data) {
    var d, i, n = data.length, root, parent, node, nodes = new Array(n), nodeId, nodeKey, nodeByKey = {};
    for (i = 0; i < n; ++i) {
        d = data[i], node = nodes[i] = new Node(d);
        if ((nodeId = id(d, i, data)) != null && (nodeId += '')) {
            nodeKey = keyPrefix$1 + (node.id = nodeId);
            nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
        }
    }
    for (i = 0; i < n; ++i) {
        node = nodes[i], nodeId = parentId(data[i], i, data);
        if (nodeId == null || !(nodeId += '')) {
            if (root)
                throw new Error('multiple roots');
            root = node;
        } else {
            parent = nodeByKey[keyPrefix$1 + nodeId];
            if (!parent)
                throw new Error('missing: ' + nodeId);
            if (parent === ambiguous)
                throw new Error('ambiguous: ' + nodeId);
            if (parent.children)
                parent.children.push(node);
            else
                parent.children = [node];
            node.parent = parent;
        }
    }
    if (!root)
        throw new Error('no root');
    root.parent = preroot;
    root.eachBefore(function (node) {
        node.depth = node.parent.depth + 1;
        --n;
    }).eachBefore(computeHeight);
    root.parent = null;
    if (n > 0)
        throw new Error('cycle');
    return root;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
id = defaultId;
parentId = defaultParentId;
stratify.id = function (x) {
    return arguments.length ? (id = required(x), stratify) : id;
};
stratify.parentId = function (x) {
    return arguments.length ? (parentId = required(x), stratify) : parentId;
};
return stratify;});
    defaultSeparation$1 = ($__.fs.defaultSeparation$1_594 = function defaultSeparation$1(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a.parent === b.parent ? 1 : 2;});
    nextLeft = ($__.fs.nextLeft_595 = function nextLeft(v) {
var vvv_return, vvv_switch, children;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
v = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
children = v.children;
return children ? children[0] : v.t;});
    nextRight = ($__.fs.nextRight_596 = function nextRight(v) {
var vvv_return, vvv_switch, children;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
v = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
children = v.children;
return children ? children[children.length - 1] : v.t;});
    moveSubtree = ($__.fs.moveSubtree_597 = function moveSubtree(wm, wp, shift) {
var vvv_return, vvv_switch, change;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
wm = arguments[0], wp = arguments[1], shift = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
change = shift / (wp.i - wm.i);
wp.c -= change;
wp.s += shift;
wm.c += change;
wp.z += shift;
wp.m += shift;});
    executeShifts = ($__.fs.executeShifts_598 = function executeShifts(v) {
var vvv_return, vvv_switch, shift, change, children, i, w;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
v = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
shift = 0;
change = 0;
children = v.children;
i = children.length;
while (--i >= 0) {
    w = children[i];
    w.z += shift;
    w.m += shift;
    shift += w.s + (change += w.c);
}});
    nextAncestor = ($__.fs.nextAncestor_599 = function nextAncestor(vim, v, ancestor) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
vim = arguments[0], v = arguments[1], ancestor = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return vim.a.parent === v.parent ? vim.a : ancestor;});
    TreeNode = ($__.fs.TreeNode_600 = function TreeNode(node, i) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], i = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._ = node;
this.parent = null;
this.children = null;
this.A = null;
this.a = this;
this.z = 0;
this.m = 0;
this.c = 0;
this.s = 0;
this.t = null;
this.i = i;});
    treeRoot = ($__.fs.treeRoot_601 = function treeRoot(root) {
var vvv_return, vvv_switch, tree, node, nodes, child, children, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
root = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
tree = new TreeNode(root, 0);
nodes = [tree];
while (node = nodes.pop()) {
    if (children = node._.children) {
        node.children = new Array(n = children.length);
        for (i = n - 1; i >= 0; --i) {
            nodes.push(child = node.children[i] = new TreeNode(children[i], i));
            child.parent = node;
        }
    }
}
(tree.parent = new TreeNode(null, 0)).children = [tree];
return tree;});
    tree = ($__.fs.tree_602 = function tree() {
var vvv_return, vvv_switch, separation, dx, dy, nodeSize, tree, firstWalk, secondWalk, apportion, sizeNode;
tree = function tree(root) {
    var t = treeRoot(root);
    t.eachAfter(firstWalk), t.parent.m = -t.z;
    t.eachBefore(secondWalk);
    if (nodeSize)
        root.eachBefore(sizeNode);
    else {
        var left = root, right = root, bottom = root;
        root.eachBefore(function (node) {
            if (node.x < left.x)
                left = node;
            if (node.x > right.x)
                right = node;
            if (node.depth > bottom.depth)
                bottom = node;
        });
        var s = left === right ? 1 : separation(left, right) / 2, tx = s - left.x, kx = dx / (right.x + s + tx), ky = dy / (bottom.depth || 1);
        root.eachBefore(function (node) {
            node.x = (node.x + tx) * kx;
            node.y = node.depth * ky;
        });
    }
    return root;
};
firstWalk = function firstWalk(v) {
    var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
    if (children) {
        executeShifts(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
            v.z = w.z + separation(v._, w._);
            v.m = v.z - midpoint;
        } else {
            v.z = midpoint;
        }
    } else if (w) {
        v.z = w.z + separation(v._, w._);
    }
    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
};
secondWalk = function secondWalk(v) {
    v._.x = v.z + v.parent.m;
    v.m += v.parent.m;
};
apportion = function apportion(v, w, ancestor) {
    if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
            vom = nextLeft(vom);
            vop = nextRight(vop);
            vop.a = v;
            shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
            if (shift > 0) {
                moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
                sip += shift;
                sop += shift;
            }
            sim += vim.m;
            sip += vip.m;
            som += vom.m;
            sop += vop.m;
        }
        if (vim && !nextRight(vop)) {
            vop.t = vim;
            vop.m += sim - sop;
        }
        if (vip && !nextLeft(vom)) {
            vom.t = vip;
            vom.m += sip - som;
            ancestor = v;
        }
    }
    return ancestor;
};
sizeNode = function sizeNode(node) {
    node.x *= dx;
    node.y = node.depth * dy;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
separation = defaultSeparation$1;
dx = 1;
dy = 1;
nodeSize = null;
tree.separation = function (x) {
    return arguments.length ? (separation = x, tree) : separation;
};
tree.size = function (x) {
    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : nodeSize ? null : [
        dx,
        dy
    ];
};
tree.nodeSize = function (x) {
    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : nodeSize ? [
        dx,
        dy
    ] : null;
};
return tree;});
    treemapSlice = ($__.fs.treemapSlice_603 = function treemapSlice(parent, x0, y0, x1, y1) {
var vvv_return, vvv_switch, nodes, node, i, n, k;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parent = arguments[0], x0 = arguments[1], y0 = arguments[2], x1 = arguments[3], y1 = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
nodes = parent.children;
i = -1;
n = nodes.length;
k = parent.value && (y1 - y0) / parent.value;
while (++i < n) {
    node = nodes[i], node.x0 = x0, node.x1 = x1;
    node.y0 = y0, node.y1 = y0 += node.value * k;
}});
    squarifyRatio = ($__.fs.squarifyRatio_604 = function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
var vvv_return, vvv_switch, rows, nodes, row, nodeValue, i0, i1, n, dx, dy, value, sumValue, minValue, maxValue, newRatio, minRatio, alpha, beta;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0], parent = arguments[1], x0 = arguments[2], y0 = arguments[3], x1 = arguments[4], y1 = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rows = [];
nodes = parent.children;
i0 = 0;
n = nodes.length;
value = parent.value;
while (i0 < n) {
    dx = x1 - x0, dy = y1 - y0;
    minValue = maxValue = sumValue = nodes[i0].value;
    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
    beta = sumValue * sumValue * alpha;
    minRatio = Math.max(maxValue / beta, beta / minValue);
    for (i1 = i0 + 1; i1 < n; ++i1) {
        sumValue += nodeValue = nodes[i1].value;
        if (nodeValue < minValue)
            minValue = nodeValue;
        if (nodeValue > maxValue)
            maxValue = nodeValue;
        beta = sumValue * sumValue * alpha;
        newRatio = Math.max(maxValue / beta, beta / minValue);
        if (newRatio > minRatio) {
            sumValue -= nodeValue;
            break;
        }
        minRatio = newRatio;
    }
    rows.push(row = {
        value: sumValue,
        dice: dx < dy,
        children: nodes.slice(i0, i1)
    });
    if (row.dice)
        treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
    else
        treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
    value -= sumValue, i0 = i1;
}
return rows;});
    index$1 = ($__.fs.index$1_605 = function index$1() {
var vvv_return, vvv_switch, tile, round, dx, dy, paddingStack, paddingInner, paddingTop, paddingRight, paddingBottom, paddingLeft, treemap, positionNode;
treemap = function treemap(root) {
    root.x0 = root.y0 = 0;
    root.x1 = dx;
    root.y1 = dy;
    root.eachBefore(positionNode);
    paddingStack = [0];
    if (round)
        root.eachBefore(roundNode);
    return root;
};
positionNode = function positionNode(node) {
    var p = paddingStack[node.depth], x0 = node.x0 + p, y0 = node.y0 + p, x1 = node.x1 - p, y1 = node.y1 - p;
    if (x1 < x0)
        x0 = x1 = (x0 + x1) / 2;
    if (y1 < y0)
        y0 = y1 = (y0 + y1) / 2;
    node.x0 = x0;
    node.y0 = y0;
    node.x1 = x1;
    node.y1 = y1;
    if (node.children) {
        p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
        x0 += paddingLeft(node) - p;
        y0 += paddingTop(node) - p;
        x1 -= paddingRight(node) - p;
        y1 -= paddingBottom(node) - p;
        if (x1 < x0)
            x0 = x1 = (x0 + x1) / 2;
        if (y1 < y0)
            y0 = y1 = (y0 + y1) / 2;
        tile(node, x0, y0, x1, y1);
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
tile = squarify;
round = false;
dx = 1;
dy = 1;
paddingStack = [0];
paddingInner = constantZero;
paddingTop = constantZero;
paddingRight = constantZero;
paddingBottom = constantZero;
paddingLeft = constantZero;
treemap.round = function (x) {
    return arguments.length ? (round = !!x, treemap) : round;
};
treemap.size = function (x) {
    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [
        dx,
        dy
    ];
};
treemap.tile = function (x) {
    return arguments.length ? (tile = required(x), treemap) : tile;
};
treemap.padding = function (x) {
    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
};
treemap.paddingInner = function (x) {
    return arguments.length ? (paddingInner = typeof x === 'function' ? x : constant$5(+x), treemap) : paddingInner;
};
treemap.paddingOuter = function (x) {
    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
};
treemap.paddingTop = function (x) {
    return arguments.length ? (paddingTop = typeof x === 'function' ? x : constant$5(+x), treemap) : paddingTop;
};
treemap.paddingRight = function (x) {
    return arguments.length ? (paddingRight = typeof x === 'function' ? x : constant$5(+x), treemap) : paddingRight;
};
treemap.paddingBottom = function (x) {
    return arguments.length ? (paddingBottom = typeof x === 'function' ? x : constant$5(+x), treemap) : paddingBottom;
};
treemap.paddingLeft = function (x) {
    return arguments.length ? (paddingLeft = typeof x === 'function' ? x : constant$5(+x), treemap) : paddingLeft;
};
return treemap;});
    binary = ($__.fs.binary_606 = function binary(parent, x0, y0, x1, y1) {
var vvv_return, vvv_switch, nodes, i, n, sum, sums, partition;
partition = function partition(i, j, value, x0, y0, x1, y1) {
    if (i >= j - 1) {
        var node = nodes[i];
        node.x0 = x0, node.y0 = y0;
        node.x1 = x1, node.y1 = y1;
        return;
    }
    var valueOffset = sums[i], valueTarget = value / 2 + valueOffset, k = i + 1, hi = j - 1;
    while (k < hi) {
        var mid = k + hi >>> 1;
        if (sums[mid] < valueTarget)
            k = mid + 1;
        else
            hi = mid;
    }
    var valueLeft = sums[k] - valueOffset, valueRight = value - valueLeft;
    if (y1 - y0 > x1 - x0) {
        var yk = (y0 * valueRight + y1 * valueLeft) / value;
        partition(i, k, valueLeft, x0, y0, x1, yk);
        partition(k, j, valueRight, x0, yk, x1, y1);
    } else {
        var xk = (x0 * valueRight + x1 * valueLeft) / value;
        partition(i, k, valueLeft, x0, y0, xk, y1);
        partition(k, j, valueRight, xk, y0, x1, y1);
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parent = arguments[0], x0 = arguments[1], y0 = arguments[2], x1 = arguments[3], y1 = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
nodes = parent.children;
n = nodes.length;
sums = new Array(n + 1);
for (sums[0] = sum = i = 0; i < n; ++i) {
    sums[i + 1] = sum += nodes[i].value;
}
partition(0, n, parent.value, x0, y0, x1, y1);});
    sliceDice = ($__.fs.sliceDice_607 = function sliceDice(parent, x0, y0, x1, y1) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parent = arguments[0], x0 = arguments[1], y0 = arguments[2], x1 = arguments[3], y1 = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
(parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);});
    center$1 = ($__.fs.center$1_608 = function center$1(x, y) {
var vvv_return, vvv_switch, nodes, force;
force = function force() {
    var i, n = nodes.length, node, sx = 0, sy = 0;
    for (i = 0; i < n; ++i) {
        node = nodes[i], sx += node.x, sy += node.y;
    }
    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
        node = nodes[i], node.x -= sx, node.y -= sy;
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (x == null)
    x = 0;
if (y == null)
    y = 0;
force.initialize = function (_) {
    nodes = _;
};
force.x = function (_) {
    return arguments.length ? (x = +_, force) : x;
};
force.y = function (_) {
    return arguments.length ? (y = +_, force) : y;
};
return force;});
    constant$6 = ($__.fs.constant$6_609 = function constant$6(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    jiggle = ($__.fs.jiggle_610 = function jiggle() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (Math.random() - 0.5) * 0.000001;});
    x$1 = ($__.fs.x$1_611 = function x$1(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.x + d.vx;});
    y$1 = ($__.fs.y$1_612 = function y$1(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.y + d.vy;});
    collide = ($__.fs.collide_613 = function collide(radius) {
var vvv_return, vvv_switch, nodes, radii, strength, iterations, force, prepare;
force = function force() {
    var i, n = nodes.length, tree, node, xi, yi, ri, ri2;
    for (var k = 0; k < iterations; ++k) {
        tree = quadtree(nodes, x$1, y$1).visitAfter(prepare);
        for (i = 0; i < n; ++i) {
            node = nodes[i];
            ri = radii[i], ri2 = ri * ri;
            xi = node.x + node.vx;
            yi = node.y + node.vy;
            tree.visit(apply);
        }
    }
    function apply(quad, x0, y0, x1, y1) {
        var data = quad.data, rj = quad.r, r = ri + rj;
        if (data) {
            if (data.index > i) {
                var x = xi - data.x - data.vx, y = yi - data.y - data.vy, l = x * x + y * y;
                if (l < r * r) {
                    if (x === 0)
                        x = jiggle(), l += x * x;
                    if (y === 0)
                        y = jiggle(), l += y * y;
                    l = (r - (l = Math.sqrt(l))) / l * strength;
                    node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
                    node.vy += (y *= l) * r;
                    data.vx -= x * (r = 1 - r);
                    data.vy -= y * r;
                }
            }
            return;
        }
        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
    }
};
prepare = function prepare(quad) {
    if (quad.data)
        return quad.r = radii[quad.data.index];
    for (var i = quad.r = 0; i < 4; ++i) {
        if (quad[i] && quad[i].r > quad.r) {
            quad.r = quad[i].r;
        }
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
radius = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
strength = 1;
iterations = 1;
if (typeof radius !== 'function')
    radius = constant$6(radius == null ? 1 : +radius);
force.initialize = function (_) {
    var i, n = (nodes = _).length;
    radii = new Array(n);
    for (i = 0; i < n; ++i)
        radii[i] = +radius(nodes[i], i, nodes);
};
force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
};
force.strength = function (_) {
    return arguments.length ? (strength = +_, force) : strength;
};
force.radius = function (_) {
    return arguments.length ? (radius = typeof _ === 'function' ? _ : constant$6(+_), force) : radius;
};
return force;});
    index$2 = ($__.fs.index$2_614 = function index$2(d, i) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0], i = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return i;});
    link = ($__.fs.link_615 = function link(links) {
var vvv_return, vvv_switch, id, strength, strengths, distance, distances, nodes, count, bias, iterations, defaultStrength, force, initialize, initializeStrength, initializeDistance;
defaultStrength = function defaultStrength(link) {
    return 1 / Math.min(count[link.source.index], count[link.target.index]);
};
force = function force(alpha) {
    for (var k = 0, n = links.length; k < iterations; ++k) {
        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
            link = links[i], source = link.source, target = link.target;
            x = target.x + target.vx - source.x - source.vx || jiggle();
            y = target.y + target.vy - source.y - source.vy || jiggle();
            l = Math.sqrt(x * x + y * y);
            l = (l - distances[i]) / l * alpha * strengths[i];
            x *= l, y *= l;
            target.vx -= x * (b = bias[i]);
            target.vy -= y * b;
            source.vx += x * (b = 1 - b);
            source.vy += y * b;
        }
    }
};
initialize = function initialize() {
    if (!nodes)
        return;
    var i, n = nodes.length, m = links.length, nodeById = map$1(nodes, id), link;
    for (i = 0, count = new Array(n); i < n; ++i) {
        count[i] = 0;
    }
    for (i = 0; i < m; ++i) {
        link = links[i], link.index = i;
        if (typeof link.source !== 'object')
            link.source = nodeById.get(link.source);
        if (typeof link.target !== 'object')
            link.target = nodeById.get(link.target);
        ++count[link.source.index], ++count[link.target.index];
    }
    for (i = 0, bias = new Array(m); i < m; ++i) {
        link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
    }
    strengths = new Array(m), initializeStrength();
    distances = new Array(m), initializeDistance();
};
initializeStrength = function initializeStrength() {
    if (!nodes)
        return;
    for (var i = 0, n = links.length; i < n; ++i) {
        strengths[i] = +strength(links[i], i, links);
    }
};
initializeDistance = function initializeDistance() {
    if (!nodes)
        return;
    for (var i = 0, n = links.length; i < n; ++i) {
        distances[i] = +distance(links[i], i, links);
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
links = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
id = index$2;
strength = defaultStrength;
distance = constant$6(30);
iterations = 1;
if (links == null)
    links = [];
force.initialize = function (_) {
    nodes = _;
    initialize();
};
force.links = function (_) {
    return arguments.length ? (links = _, initialize(), force) : links;
};
force.id = function (_) {
    return arguments.length ? (id = _, force) : id;
};
force.iterations = function (_) {
    return arguments.length ? (iterations = +_, force) : iterations;
};
force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initializeStrength(), force) : strength;
};
force.distance = function (_) {
    return arguments.length ? (distance = typeof _ === 'function' ? _ : constant$6(+_), initializeDistance(), force) : distance;
};
return force;});
    x$2 = ($__.fs.x$2_616 = function x$2(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.x;});
    y$2 = ($__.fs.y$2_617 = function y$2(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.y;});
    simulation = ($__.fs.J$__v2246113107_2036_618 = function J$__v2246113107_2036(nodes) {
var vvv_return, vvv_switch, simulation, alpha, alphaMin, alphaDecay, alphaTarget, velocityDecay, forces, stepper, event, step, tick, initializeNodes, initializeForce;
step = function step() {
    tick();
    event.call('tick', simulation);
    if (alpha < alphaMin) {
        stepper.stop();
        event.call('end', simulation);
    }
};
tick = function tick() {
    var i, n = nodes.length, node;
    alpha += (alphaTarget - alpha) * alphaDecay;
    forces.each(function (force) {
        force(alpha);
    });
    for (i = 0; i < n; ++i) {
        node = nodes[i];
        if (node.fx == null)
            node.x += node.vx *= velocityDecay;
        else
            node.x = node.fx, node.vx = 0;
        if (node.fy == null)
            node.y += node.vy *= velocityDecay;
        else
            node.y = node.fy, node.vy = 0;
    }
};
initializeNodes = function initializeNodes() {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.index = i;
        if (isNaN(node.x) || isNaN(node.y)) {
            var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
            node.x = radius * Math.cos(angle);
            node.y = radius * Math.sin(angle);
        }
        if (isNaN(node.vx) || isNaN(node.vy)) {
            node.vx = node.vy = 0;
        }
    }
};
initializeForce = function initializeForce(force) {
    if (force.initialize)
        force.initialize(nodes);
    return force;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
nodes = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
alpha = 1;
alphaMin = 0.001;
alphaDecay = 1 - Math.pow(alphaMin, 1 / 300);
alphaTarget = 0;
velocityDecay = 0.6;
forces = map$1();
stepper = timer(step);
event = dispatch('tick', 'end');
if (nodes == null)
    nodes = [];
initializeNodes();
return simulation = {
    tick: tick,
    restart: function () {
        return stepper.restart(step), simulation;
    },
    stop: function () {
        return stepper.stop(), simulation;
    },
    nodes: function (_) {
        return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
    },
    alpha: function (_) {
        return arguments.length ? (alpha = +_, simulation) : alpha;
    },
    alphaMin: function (_) {
        return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
    },
    alphaDecay: function (_) {
        return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
    },
    alphaTarget: function (_) {
        return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
    },
    velocityDecay: function (_) {
        return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
    },
    force: function (name, _) {
        return arguments.length > 1 ? (_ == null ? forces.remove(name) : forces.set(name, initializeForce(_)), simulation) : forces.get(name);
    },
    find: function (x, y, radius) {
        var i = 0, n = nodes.length, dx, dy, d2, node, closest;
        if (radius == null)
            radius = Infinity;
        else
            radius *= radius;
        for (i = 0; i < n; ++i) {
            node = nodes[i];
            dx = x - node.x;
            dy = y - node.y;
            d2 = dx * dx + dy * dy;
            if (d2 < radius)
                closest = node, radius = d2;
        }
        return closest;
    },
    on: function (name, _) {
        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
    }
};});
    manyBody = ($__.fs.manyBody_619 = function manyBody() {
var vvv_return, vvv_switch, nodes, node, alpha, strength, strengths, distanceMin2, distanceMax2, theta2, force, initialize, accumulate, apply;
force = function force(_) {
    var i, n = nodes.length, tree = quadtree(nodes, x$2, y$2).visitAfter(accumulate);
    for (alpha = _, i = 0; i < n; ++i)
        node = nodes[i], tree.visit(apply);
};
initialize = function initialize() {
    if (!nodes)
        return;
    var i, n = nodes.length;
    strengths = new Array(n);
    for (i = 0; i < n; ++i)
        strengths[i] = +strength(nodes[i], i, nodes);
};
accumulate = function accumulate(quad) {
    var strength = 0, q, c, x, y, i;
    if (quad.length) {
        for (x = y = i = 0; i < 4; ++i) {
            if ((q = quad[i]) && (c = q.value)) {
                strength += c, x += c * q.x, y += c * q.y;
            }
        }
        quad.x = x / strength;
        quad.y = y / strength;
    } else {
        q = quad;
        q.x = q.data.x;
        q.y = q.data.y;
        do
            strength += strengths[q.data.index];
        while (q = q.next);
    }
    quad.value = strength;
};
apply = function apply(quad, x1, _, x2) {
    if (!quad.value)
        return true;
    var x = quad.x - node.x, y = quad.y - node.y, w = x2 - x1, l = x * x + y * y;
    if (w * w / theta2 < l) {
        if (l < distanceMax2) {
            if (x === 0)
                x = jiggle(), l += x * x;
            if (y === 0)
                y = jiggle(), l += y * y;
            if (l < distanceMin2)
                l = Math.sqrt(distanceMin2 * l);
            node.vx += x * quad.value * alpha / l;
            node.vy += y * quad.value * alpha / l;
        }
        return true;
    } else if (quad.length || l >= distanceMax2)
        return;
    if (quad.data !== node || quad.next) {
        if (x === 0)
            x = jiggle(), l += x * x;
        if (y === 0)
            y = jiggle(), l += y * y;
        if (l < distanceMin2)
            l = Math.sqrt(distanceMin2 * l);
    }
    do
        if (quad.data !== node) {
        w = strengths[quad.data.index] * alpha / l;
        node.vx += x * w;
        node.vy += y * w;
    }
    while (quad = quad.next);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
strength = constant$6(-30);
distanceMin2 = 1;
distanceMax2 = Infinity;
theta2 = 0.81;
force.initialize = function (_) {
    nodes = _;
    initialize();
};
force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : strength;
};
force.distanceMin = function (_) {
    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
};
force.distanceMax = function (_) {
    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
};
force.theta = function (_) {
    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
};
return force;});
    x$3 = ($__.fs.x$3_620 = function x$3(x) {
var vvv_return, vvv_switch, strength, nodes, strengths, xz, force, initialize;
force = function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
    }
};
initialize = function initialize() {
    if (!nodes)
        return;
    var i, n = nodes.length;
    strengths = new Array(n);
    xz = new Array(n);
    for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
strength = constant$6(0.1);
if (typeof x !== 'function')
    x = constant$6(x == null ? 0 : +x);
force.initialize = function (_) {
    nodes = _;
    initialize();
};
force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : strength;
};
force.x = function (_) {
    return arguments.length ? (x = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : x;
};
return force;});
    y$3 = ($__.fs.y$3_621 = function y$3(y) {
var vvv_return, vvv_switch, strength, nodes, strengths, yz, force, initialize;
force = function force(alpha) {
    for (var i = 0, n = nodes.length, node; i < n; ++i) {
        node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
    }
};
initialize = function initialize() {
    if (!nodes)
        return;
    var i, n = nodes.length;
    strengths = new Array(n);
    yz = new Array(n);
    for (i = 0; i < n; ++i) {
        strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
strength = constant$6(0.1);
if (typeof y !== 'function')
    y = constant$6(y == null ? 0 : +y);
force.initialize = function (_) {
    nodes = _;
    initialize();
};
force.strength = function (_) {
    return arguments.length ? (strength = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : strength;
};
force.y = function (_) {
    return arguments.length ? (y = typeof _ === 'function' ? _ : constant$6(+_), initialize(), force) : y;
};
return force;});
    nopropagation = ($__.fs.nopropagation_622 = function nopropagation() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
exports.event.stopImmediatePropagation();});
    noevent = ($__.fs.noevent_623 = function noevent() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
exports.event.preventDefault();
exports.event.stopImmediatePropagation();});
    dragDisable = ($__.fs.dragDisable_624 = function dragDisable(view) {
var vvv_return, vvv_switch, root, selection;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
view = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
root = view.document.documentElement;
selection = select(view).on('dragstart.drag', noevent, true);
if ('onselectstart' in root) {
    selection.on('selectstart.drag', noevent, true);
} else {
    root.__noselect = root.style.MozUserSelect;
    root.style.MozUserSelect = 'none';
}});
    dragEnable = ($__.fs.dragEnable_625 = function dragEnable(view, noclick) {
var vvv_return, vvv_switch, root, selection;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
view = arguments[0], noclick = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
root = view.document.documentElement;
selection = select(view).on('dragstart.drag', null);
if (noclick) {
    selection.on('click.drag', noevent, true);
    setTimeout(function () {
        selection.on('click.drag', null);
    }, 0);
}
if ('onselectstart' in root) {
    selection.on('selectstart.drag', null);
} else {
    root.style.MozUserSelect = root.__noselect;
    delete root.__noselect;
}});
    constant$7 = ($__.fs.constant$7_626 = function constant$7(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    DragEvent = ($__.fs.DragEvent_627 = function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
target = arguments[0], type = arguments[1], subject = arguments[2], id = arguments[3], active = arguments[4], x = arguments[5], y = arguments[6], dx = arguments[7], dy = arguments[8], dispatch = arguments[9];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.target = target;
this.type = type;
this.subject = subject;
this.identifier = id;
this.active = active;
this.x = x;
this.y = y;
this.dx = dx;
this.dy = dy;
this._ = dispatch;});
    defaultFilter = ($__.fs.defaultFilter_628 = function defaultFilter() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return !exports.event.button;});
    defaultContainer = ($__.fs.defaultContainer_629 = function defaultContainer() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.parentNode;});
    defaultSubject = ($__.fs.defaultSubject_630 = function defaultSubject(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d == null ? {
    x: exports.event.x,
    y: exports.event.y
} : d;});
    drag = ($__.fs.drag_631 = function drag() {
var vvv_return, vvv_switch, filter, container, subject, gestures, listeners, active, mousemoving, touchending, drag, mousedowned, mousemoved, mouseupped, touchstarted, touchmoved, touchended, beforestart;
drag = function drag(selection) {
    selection.on('mousedown.drag', mousedowned).on('touchstart.drag', touchstarted).on('touchmove.drag', touchmoved).on('touchend.drag touchcancel.drag', touchended).style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)');
};
mousedowned = function mousedowned() {
    if (touchending || !filter.apply(this, arguments))
        return;
    var gesture = beforestart('mouse', container.apply(this, arguments), mouse, this, arguments);
    if (!gesture)
        return;
    select(exports.event.view).on('mousemove.drag', mousemoved, true).on('mouseup.drag', mouseupped, true);
    dragDisable(exports.event.view);
    nopropagation();
    mousemoving = false;
    gesture('start');
};
mousemoved = function mousemoved() {
    noevent();
    mousemoving = true;
    gestures.mouse('drag');
};
mouseupped = function mouseupped() {
    select(exports.event.view).on('mousemove.drag mouseup.drag', null);
    dragEnable(exports.event.view, mousemoving);
    noevent();
    gestures.mouse('end');
};
touchstarted = function touchstarted() {
    if (!filter.apply(this, arguments))
        return;
    var touches = exports.event.changedTouches, c = container.apply(this, arguments), n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
        if (gesture = beforestart(touches[i].identifier, c, touch, this, arguments)) {
            nopropagation();
            gesture('start');
        }
    }
};
touchmoved = function touchmoved() {
    var touches = exports.event.changedTouches, n = touches.length, i, gesture;
    for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
            noevent();
            gesture('drag');
        }
    }
};
touchended = function touchended() {
    var touches = exports.event.changedTouches, n = touches.length, i, gesture;
    if (touchending)
        clearTimeout(touchending);
    touchending = setTimeout(function () {
        touchending = null;
    }, 500);
    for (i = 0; i < n; ++i) {
        if (gesture = gestures[touches[i].identifier]) {
            nopropagation();
            gesture('end');
        }
    }
};
beforestart = function beforestart(id, container, point, that, args) {
    var p = point(container, id), s, dx, dy, sublisteners = listeners.copy();
    if (!customEvent(new DragEvent(drag, 'beforestart', s, id, active, p[0], p[1], 0, 0, sublisteners), function () {
            if ((exports.event.subject = s = subject.apply(that, args)) == null)
                return false;
            dx = s.x - p[0] || 0;
            dy = s.y - p[1] || 0;
            return true;
        }))
        return;
    return function gesture(type) {
        var p0 = p, n;
        switch (type) {
        case 'start':
            gestures[id] = gesture, n = active++;
            break;
        case 'end':
            delete gestures[id], --active;
        case 'drag':
            p = point(container, id), n = active;
            break;
        }
        customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [
            type,
            that,
            args
        ]);
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
filter = defaultFilter;
container = defaultContainer;
subject = defaultSubject;
gestures = {};
listeners = dispatch('start', 'drag', 'end');
active = 0;
drag.filter = function (_) {
    return arguments.length ? (filter = typeof _ === 'function' ? _ : constant$7(!!_), drag) : filter;
};
drag.container = function (_) {
    return arguments.length ? (container = typeof _ === 'function' ? _ : constant$7(_), drag) : container;
};
drag.subject = function (_) {
    return arguments.length ? (subject = typeof _ === 'function' ? _ : constant$7(_), drag) : subject;
};
drag.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? drag : value;
};
return drag;});
    constant$8 = ($__.fs.constant$8_632 = function constant$8(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    x$4 = ($__.fs.x$4_633 = function x$4(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d[0];});
    y$4 = ($__.fs.y$4_634 = function y$4(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d[1];});
    RedBlackTree = ($__.fs.RedBlackTree_635 = function RedBlackTree() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._ = null;});
    RedBlackNode = ($__.fs.RedBlackNode_636 = function RedBlackNode(node) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
node.U = node.C = node.L = node.R = node.P = node.N = null;});
    RedBlackRotateLeft = ($__.fs.RedBlackRotateLeft_637 = function RedBlackRotateLeft(tree, node) {
var vvv_return, vvv_switch, p, q, parent;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tree = arguments[0], node = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
p = node;
q = node.R;
parent = p.U;
if (parent) {
    if (parent.L === p)
        parent.L = q;
    else
        parent.R = q;
} else {
    tree._ = q;
}
q.U = parent;
p.U = q;
p.R = q.L;
if (p.R)
    p.R.U = p;
q.L = p;});
    RedBlackRotateRight = ($__.fs.RedBlackRotateRight_638 = function RedBlackRotateRight(tree, node) {
var vvv_return, vvv_switch, p, q, parent;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tree = arguments[0], node = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
p = node;
q = node.L;
parent = p.U;
if (parent) {
    if (parent.L === p)
        parent.L = q;
    else
        parent.R = q;
} else {
    tree._ = q;
}
q.U = parent;
p.U = q;
p.L = q.R;
if (p.L)
    p.L.U = p;
q.R = p;});
    RedBlackFirst = ($__.fs.RedBlackFirst_639 = function RedBlackFirst(node) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
while (node.L)
    node = node.L;
return node;});
    createEdge = ($__.fs.createEdge_640 = function createEdge(left, right, v0, v1) {
var vvv_return, vvv_switch, edge, index;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
left = arguments[0], right = arguments[1], v0 = arguments[2], v1 = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
edge = [
    null,
    null
];
index = edges.push(edge) - 1;
edge.left = left;
edge.right = right;
if (v0)
    setEdgeEnd(edge, left, right, v0);
if (v1)
    setEdgeEnd(edge, right, left, v1);
cells[left.index].halfedges.push(index);
cells[right.index].halfedges.push(index);
return edge;});
    createBorderEdge = ($__.fs.createBorderEdge_641 = function createBorderEdge(left, v0, v1) {
var vvv_return, vvv_switch, edge;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
left = arguments[0], v0 = arguments[1], v1 = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
edge = [
    v0,
    v1
];
edge.left = left;
return edge;});
    setEdgeEnd = ($__.fs.setEdgeEnd_642 = function setEdgeEnd(edge, left, right, vertex) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
edge = arguments[0], left = arguments[1], right = arguments[2], vertex = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
} else if (edge.left === right) {
    edge[1] = vertex;
} else {
    edge[0] = vertex;
}});
    clipEdge = ($__.fs.clipEdge_643 = function clipEdge(edge, x0, y0, x1, y1) {
var vvv_return, vvv_switch, a, b, ax, ay, bx, by, t0, t1, dx, dy, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
edge = arguments[0], x0 = arguments[1], y0 = arguments[2], x1 = arguments[3], y1 = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
a = edge[0];
b = edge[1];
ax = a[0];
ay = a[1];
bx = b[0];
by = b[1];
t0 = 0;
t1 = 1;
dx = bx - ax;
dy = by - ay;
r = x0 - ax;
if (!dx && r > 0)
    return;
r /= dx;
if (dx < 0) {
    if (r < t0)
        return;
    if (r < t1)
        t1 = r;
} else if (dx > 0) {
    if (r > t1)
        return;
    if (r > t0)
        t0 = r;
}
r = x1 - ax;
if (!dx && r < 0)
    return;
r /= dx;
if (dx < 0) {
    if (r > t1)
        return;
    if (r > t0)
        t0 = r;
} else if (dx > 0) {
    if (r < t0)
        return;
    if (r < t1)
        t1 = r;
}
r = y0 - ay;
if (!dy && r > 0)
    return;
r /= dy;
if (dy < 0) {
    if (r < t0)
        return;
    if (r < t1)
        t1 = r;
} else if (dy > 0) {
    if (r > t1)
        return;
    if (r > t0)
        t0 = r;
}
r = y1 - ay;
if (!dy && r < 0)
    return;
r /= dy;
if (dy < 0) {
    if (r > t1)
        return;
    if (r > t0)
        t0 = r;
} else if (dy > 0) {
    if (r < t0)
        return;
    if (r < t1)
        t1 = r;
}
if (!(t0 > 0) && !(t1 < 1))
    return true;
if (t0 > 0)
    edge[0] = [
    ax + t0 * dx,
    ay + t0 * dy
];
if (t1 < 1)
    edge[1] = [
    ax + t1 * dx,
    ay + t1 * dy
];
return true;});
    connectEdge = ($__.fs.connectEdge_644 = function connectEdge(edge, x0, y0, x1, y1) {
var vvv_return, vvv_switch, v1, v0, left, right, lx, ly, rx, ry, fx, fy, fm, fb;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
edge = arguments[0], x0 = arguments[1], y0 = arguments[2], x1 = arguments[3], y1 = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
v1 = edge[1];
if (v1)
    return true;
v0 = edge[0];
left = edge.left;
right = edge.right;
lx = left[0];
ly = left[1];
rx = right[0];
ry = right[1];
fx = (lx + rx) / 2;
fy = (ly + ry) / 2;
if (ry === ly) {
    if (fx < x0 || fx >= x1)
        return;
    if (lx > rx) {
        if (!v0)
            v0 = [
            fx,
            y0
        ];
        else if (v0[1] >= y1)
            return;
        v1 = [
            fx,
            y1
        ];
    } else {
        if (!v0)
            v0 = [
            fx,
            y1
        ];
        else if (v0[1] < y0)
            return;
        v1 = [
            fx,
            y0
        ];
    }
} else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;
    if (fm < -1 || fm > 1) {
        if (lx > rx) {
            if (!v0)
                v0 = [
                (y0 - fb) / fm,
                y0
            ];
            else if (v0[1] >= y1)
                return;
            v1 = [
                (y1 - fb) / fm,
                y1
            ];
        } else {
            if (!v0)
                v0 = [
                (y1 - fb) / fm,
                y1
            ];
            else if (v0[1] < y0)
                return;
            v1 = [
                (y0 - fb) / fm,
                y0
            ];
        }
    } else {
        if (ly < ry) {
            if (!v0)
                v0 = [
                x0,
                fm * x0 + fb
            ];
            else if (v0[0] >= x1)
                return;
            v1 = [
                x1,
                fm * x1 + fb
            ];
        } else {
            if (!v0)
                v0 = [
                x1,
                fm * x1 + fb
            ];
            else if (v0[0] < x0)
                return;
            v1 = [
                x0,
                fm * x0 + fb
            ];
        }
    }
}
edge[0] = v0;
edge[1] = v1;
return true;});
    clipEdges = ($__.fs.clipEdges_645 = function clipEdges(x0, y0, x1, y1) {
var vvv_return, vvv_switch, i, edge;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x0 = arguments[0], y0 = arguments[1], x1 = arguments[2], y1 = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = edges.length;
while (i--) {
    if (!connectEdge(edge = edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$3 || Math.abs(edge[0][1] - edge[1][1]) > epsilon$3)) {
        delete edges[i];
    }
}});
    createCell = ($__.fs.createCell_646 = function createCell(site) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
site = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return cells[site.index] = {
    site: site,
    halfedges: []
};});
    cellHalfedgeAngle = ($__.fs.cellHalfedgeAngle_647 = function cellHalfedgeAngle(cell, edge) {
var vvv_return, vvv_switch, site, va, vb;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
cell = arguments[0], edge = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
site = cell.site;
va = edge.left;
vb = edge.right;
if (site === vb)
    vb = va, va = site;
if (vb)
    return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
if (site === va)
    va = edge[1], vb = edge[0];
else
    va = edge[0], vb = edge[1];
return Math.atan2(va[0] - vb[0], vb[1] - va[1]);});
    cellHalfedgeStart = ($__.fs.cellHalfedgeStart_648 = function cellHalfedgeStart(cell, edge) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
cell = arguments[0], edge = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return edge[+(edge.left !== cell.site)];});
    cellHalfedgeEnd = ($__.fs.cellHalfedgeEnd_649 = function cellHalfedgeEnd(cell, edge) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
cell = arguments[0], edge = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return edge[+(edge.left === cell.site)];});
    sortCellHalfedges = ($__.fs.sortCellHalfedges_650 = function sortCellHalfedges() {
var vvv_return, vvv_switch, index, array;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
        index = new Array(m);
        array = new Array(m);
        for (j = 0; j < m; ++j)
            index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
        index.sort(function (i, j) {
            return array[j] - array[i];
        });
        for (j = 0; j < m; ++j)
            array[j] = halfedges[index[j]];
        for (j = 0; j < m; ++j)
            halfedges[j] = array[j];
    }
}});
    clipCells = ($__.fs.clipCells_651 = function clipCells(x0, y0, x1, y1) {
var vvv_return, vvv_switch, nCells, iCell, cell, site, iHalfedge, halfedges, nHalfedges, start, startX, startY, end, endX, endY, cover, dx, dy, d2, dc, v00, v01, v11, v10;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x0 = arguments[0], y0 = arguments[1], x1 = arguments[2], y1 = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
nCells = cells.length;
cover = true;
for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
        site = cell.site;
        halfedges = cell.halfedges;
        iHalfedge = halfedges.length;
        while (iHalfedge--) {
            if (!edges[halfedges[iHalfedge]]) {
                halfedges.splice(iHalfedge, 1);
            }
        }
        iHalfedge = 0, nHalfedges = halfedges.length;
        while (iHalfedge < nHalfedges) {
            end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
            start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
            if (Math.abs(endX - startX) > epsilon$3 || Math.abs(endY - startY) > epsilon$3) {
                halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end, Math.abs(endX - x0) < epsilon$3 && y1 - endY > epsilon$3 ? [
                    x0,
                    Math.abs(startX - x0) < epsilon$3 ? startY : y1
                ] : Math.abs(endY - y1) < epsilon$3 && x1 - endX > epsilon$3 ? [
                    Math.abs(startY - y1) < epsilon$3 ? startX : x1,
                    y1
                ] : Math.abs(endX - x1) < epsilon$3 && endY - y0 > epsilon$3 ? [
                    x1,
                    Math.abs(startX - x1) < epsilon$3 ? startY : y0
                ] : Math.abs(endY - y0) < epsilon$3 && endX - x0 > epsilon$3 ? [
                    Math.abs(startY - y0) < epsilon$3 ? startX : x0,
                    y0
                ] : null)) - 1);
                ++nHalfedges;
            }
        }
        if (nHalfedges)
            cover = false;
    }
}
if (cover) {
    dc = Infinity;
    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
        if (cell = cells[iCell]) {
            site = cell.site;
            dx = site[0] - x0;
            dy = site[1] - y0;
            d2 = dx * dx + dy * dy;
            if (d2 < dc)
                dc = d2, cover = cell;
        }
    }
    if (cover) {
        v00 = [
            x0,
            y0
        ];
        v01 = [
            x0,
            y1
        ];
        v11 = [
            x1,
            y1
        ];
        v10 = [
            x1,
            y0
        ];
        cover.halfedges.push(edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1, edges.push(createBorderEdge(site, v01, v11)) - 1, edges.push(createBorderEdge(site, v11, v10)) - 1, edges.push(createBorderEdge(site, v10, v00)) - 1);
    }
}
for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = cells[iCell]) {
        if (!cell.halfedges.length) {
            delete cells[iCell];
        }
    }
}});
    Circle = ($__.fs.Circle_652 = function Circle() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
RedBlackNode(this);
this.x = this.y = this.arc = this.site = this.cy = null;});
    attachCircle = ($__.fs.attachCircle_653 = function attachCircle(arc) {
var vvv_return, vvv_switch, lArc, rArc, lSite, cSite, rSite, bx, by, ax, ay, cx, cy, d, ha, hc, x, y, circle, before, node;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arc = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lArc = arc.P;
rArc = arc.N;
if (!lArc || !rArc)
    return;
lSite = lArc.site;
cSite = arc.site;
rSite = rArc.site;
if (lSite === rSite)
    return;
bx = cSite[0];
by = cSite[1];
ax = lSite[0] - bx;
ay = lSite[1] - by;
cx = rSite[0] - bx;
cy = rSite[1] - by;
d = 2 * (ax * cy - ay * cx);
if (d >= -epsilon2$1)
    return;
ha = ax * ax + ay * ay;
hc = cx * cx + cy * cy;
x = (cy * ha - ay * hc) / d;
y = (ax * hc - cx * ha) / d;
circle = circlePool.pop() || new Circle();
circle.arc = arc;
circle.site = cSite;
circle.x = x + bx;
circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y);
arc.circle = circle;
before = null;
node = circles._;
while (node) {
    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L)
            node = node.L;
        else {
            before = node.P;
            break;
        }
    } else {
        if (node.R)
            node = node.R;
        else {
            before = node;
            break;
        }
    }
}
circles.insert(before, circle);
if (!before)
    firstCircle = circle;});
    detachCircle = ($__.fs.detachCircle_654 = function detachCircle(arc) {
var vvv_return, vvv_switch, circle;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arc = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
circle = arc.circle;
if (circle) {
    if (!circle.P)
        firstCircle = circle.N;
    circles.remove(circle);
    circlePool.push(circle);
    RedBlackNode(circle);
    arc.circle = null;
}});
    Beach = ($__.fs.Beach_655 = function Beach() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
RedBlackNode(this);
this.edge = this.site = this.circle = null;});
    createBeach = ($__.fs.createBeach_656 = function createBeach(site) {
var vvv_return, vvv_switch, beach;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
site = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
beach = beachPool.pop() || new Beach();
beach.site = site;
return beach;});
    detachBeach = ($__.fs.detachBeach_657 = function detachBeach(beach) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
beach = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
detachCircle(beach);
beaches.remove(beach);
beachPool.push(beach);
RedBlackNode(beach);});
    removeBeach = ($__.fs.removeBeach_658 = function removeBeach(beach) {
var vvv_return, vvv_switch, circle, x, y, vertex, previous, next, disappearing, lArc, rArc, nArcs, iArc;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
beach = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
circle = beach.circle;
x = circle.x;
y = circle.cy;
vertex = [
    x,
    y
];
previous = beach.P;
next = beach.N;
disappearing = [beach];
detachBeach(beach);
lArc = previous;
while (lArc.circle && Math.abs(x - lArc.circle.x) < epsilon$3 && Math.abs(y - lArc.circle.cy) < epsilon$3) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
}
disappearing.unshift(lArc);
detachCircle(lArc);
rArc = next;
while (rArc.circle && Math.abs(x - rArc.circle.x) < epsilon$3 && Math.abs(y - rArc.circle.cy) < epsilon$3) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
}
disappearing.push(rArc);
detachCircle(rArc);
nArcs = disappearing.length;
for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
}
lArc = disappearing[0];
rArc = disappearing[nArcs - 1];
rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);
attachCircle(lArc);
attachCircle(rArc);});
    addBeach = ($__.fs.addBeach_659 = function addBeach(site) {
var vvv_return, vvv_switch, x, directrix, lArc, rArc, dxl, dxr, node, newArc, lSite, ax, ay, bx, by, rSite, cx, cy, d, hb, hc, vertex;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
site = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = site[0];
directrix = site[1];
node = beaches._;
while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > epsilon$3)
        node = node.L;
    else {
        dxr = x - rightBreakPoint(node, directrix);
        if (dxr > epsilon$3) {
            if (!node.R) {
                lArc = node;
                break;
            }
            node = node.R;
        } else {
            if (dxl > -epsilon$3) {
                lArc = node.P;
                rArc = node;
            } else if (dxr > -epsilon$3) {
                lArc = node;
                rArc = node.N;
            } else {
                lArc = rArc = node;
            }
            break;
        }
    }
}
createCell(site);
newArc = createBeach(site);
beaches.insert(lArc, newArc);
if (!lArc && !rArc)
    return;
if (lArc === rArc) {
    detachCircle(lArc);
    rArc = createBeach(lArc.site);
    beaches.insert(newArc, rArc);
    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
    attachCircle(lArc);
    attachCircle(rArc);
    return;
}
if (!rArc) {
    newArc.edge = createEdge(lArc.site, newArc.site);
    return;
}
detachCircle(lArc);
detachCircle(rArc);
lSite = lArc.site;
ax = lSite[0];
ay = lSite[1];
bx = site[0] - ax;
by = site[1] - ay;
rSite = rArc.site;
cx = rSite[0] - ax;
cy = rSite[1] - ay;
d = 2 * (bx * cy - by * cx);
hb = bx * bx + by * by;
hc = cx * cx + cy * cy;
vertex = [
    (cy * hb - by * hc) / d + ax,
    (bx * hc - cx * hb) / d + ay
];
setEdgeEnd(rArc.edge, lSite, rSite, vertex);
newArc.edge = createEdge(lSite, site, null, vertex);
rArc.edge = createEdge(site, rSite, null, vertex);
attachCircle(lArc);
attachCircle(rArc);});
    leftBreakPoint = ($__.fs.leftBreakPoint_660 = function leftBreakPoint(arc, directrix) {
var vvv_return, vvv_switch, site, rfocx, rfocy, pby2, lArc, lfocx, lfocy, plby2, hl, aby2, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arc = arguments[0], directrix = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
site = arc.site;
rfocx = site[0];
rfocy = site[1];
pby2 = rfocy - directrix;
if (!pby2)
    return rfocx;
lArc = arc.P;
if (!lArc)
    return -Infinity;
site = lArc.site;
lfocx = site[0];
lfocy = site[1];
plby2 = lfocy - directrix;
if (!plby2)
    return lfocx;
hl = lfocx - rfocx;
aby2 = 1 / pby2 - 1 / plby2;
b = hl / plby2;
if (aby2)
    return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
return (rfocx + lfocx) / 2;});
    rightBreakPoint = ($__.fs.rightBreakPoint_661 = function rightBreakPoint(arc, directrix) {
var vvv_return, vvv_switch, rArc, site;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arc = arguments[0], directrix = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rArc = arc.N;
if (rArc)
    return leftBreakPoint(rArc, directrix);
site = arc.site;
return site[1] === directrix ? site[0] : Infinity;});
    triangleArea = ($__.fs.triangleArea_662 = function triangleArea(a, b, c) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], c = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);});
    lexicographic = ($__.fs.lexicographic_663 = function lexicographic(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return b[1] - a[1] || b[0] - a[0];});
    Diagram = ($__.fs.Diagram_664 = function Diagram(sites, extent) {
var vvv_return, vvv_switch, site, x, y, circle, x0, y0, x1, y1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
sites = arguments[0], extent = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
site = sites.sort(lexicographic).pop();
edges = [];
cells = new Array(sites.length);
beaches = new RedBlackTree();
circles = new RedBlackTree();
while (true) {
    circle = firstCircle;
    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
        if (site[0] !== x || site[1] !== y) {
            addBeach(site);
            x = site[0], y = site[1];
        }
        site = sites.pop();
    } else if (circle) {
        removeBeach(circle.arc);
    } else {
        break;
    }
}
sortCellHalfedges();
if (extent) {
    x0 = +extent[0][0];
    y0 = +extent[0][1];
    x1 = +extent[1][0];
    y1 = +extent[1][1];
    clipEdges(x0, y0, x1, y1);
    clipCells(x0, y0, x1, y1);
}
this.edges = edges;
this.cells = cells;
beaches = circles = edges = cells = null;});
    voronoi = ($__.fs.voronoi_665 = function voronoi() {
var vvv_return, vvv_switch, x, y, extent, voronoi;
voronoi = function voronoi(data) {
    return new Diagram(data.map(function (d, i) {
        var s = [
            Math.round(x(d, i, data) / epsilon$3) * epsilon$3,
            Math.round(y(d, i, data) / epsilon$3) * epsilon$3
        ];
        s.index = i;
        s.data = d;
        return s;
    }), extent);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = x$4;
y = y$4;
extent = null;
voronoi.polygons = function (data) {
    return voronoi(data).polygons();
};
voronoi.links = function (data) {
    return voronoi(data).links();
};
voronoi.triangles = function (data) {
    return voronoi(data).triangles();
};
voronoi.x = function (_) {
    return arguments.length ? (x = typeof _ === 'function' ? _ : constant$8(+_), voronoi) : x;
};
voronoi.y = function (_) {
    return arguments.length ? (y = typeof _ === 'function' ? _ : constant$8(+_), voronoi) : y;
};
voronoi.extent = function (_) {
    return arguments.length ? (extent = _ == null ? null : [
        [
            +_[0][0],
            +_[0][1]
        ],
        [
            +_[1][0],
            +_[1][1]
        ]
    ], voronoi) : extent && [
        [
            extent[0][0],
            extent[0][1]
        ],
        [
            extent[1][0],
            extent[1][1]
        ]
    ];
};
voronoi.size = function (_) {
    return arguments.length ? (extent = _ == null ? null : [
        [
            0,
            0
        ],
        [
            +_[0],
            +_[1]
        ]
    ], voronoi) : extent && [
        extent[1][0] - extent[0][0],
        extent[1][1] - extent[0][1]
    ];
};
return voronoi;});
    constant$9 = ($__.fs.constant$9_666 = function constant$9(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    ZoomEvent = ($__.fs.ZoomEvent_667 = function ZoomEvent(target, type, transform) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
target = arguments[0], type = arguments[1], transform = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.target = target;
this.type = type;
this.transform = transform;});
    Transform = ($__.fs.Transform_668 = function Transform(k, x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0], x = arguments[1], y = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.k = k;
    this.x = x;
    this.y = y;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.k = k;
this.x = x;
this.y = y;});
    transform = ($__.fs.transform_669 = function transform(node) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return node.__zoom || identity$6;});
    nopropagation$1 = ($__.fs.nopropagation$1_670 = function nopropagation$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
exports.event.stopImmediatePropagation();});
    noevent$1 = ($__.fs.noevent$1_671 = function noevent$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
exports.event.preventDefault();
exports.event.stopImmediatePropagation();});
    defaultFilter$1 = ($__.fs.defaultFilter$1_672 = function defaultFilter$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return !exports.event.button;});
    defaultExtent = ($__.fs.defaultExtent_673 = function defaultExtent() {
var vvv_return, vvv_switch, e, w, h;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
e = this;
if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    w = e.width.baseVal.value;
    h = e.height.baseVal.value;
} else {
    w = e.clientWidth;
    h = e.clientHeight;
}
return [
    [
        0,
        0
    ],
    [
        w,
        h
    ]
];});
    defaultTransform = ($__.fs.defaultTransform_674 = function defaultTransform() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.__zoom || identity$6;});
    zoom = ($__.fs.zoom_675 = function zoom() {
var vvv_return, vvv_switch, filter, extent, k0, k1, x0, x1, y0, y1, duration, gestures, listeners, touchstarting, touchending, touchDelay, wheelDelay, zoom, scale, translate, constrain, centroid, schedule, gesture, Gesture, wheeled, mousedowned, dblclicked, touchstarted, touchmoved, touchended;
zoom = function zoom(selection) {
    selection.on('wheel.zoom', wheeled).on('mousedown.zoom', mousedowned).on('dblclick.zoom', dblclicked).on('touchstart.zoom', touchstarted).on('touchmove.zoom', touchmoved).on('touchend.zoom touchcancel.zoom', touchended).style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)').property('__zoom', defaultTransform);
};
scale = function scale(transform, k) {
    k = Math.max(k0, Math.min(k1, k));
    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
};
translate = function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
};
constrain = function constrain(transform, extent) {
    var dx = Math.min(0, transform.invertX(extent[0][0]) - x0) || Math.max(0, transform.invertX(extent[1][0]) - x1), dy = Math.min(0, transform.invertY(extent[0][1]) - y0) || Math.max(0, transform.invertY(extent[1][1]) - y1);
    return dx || dy ? transform.translate(dx, dy) : transform;
};
centroid = function centroid(extent) {
    return [
        (+extent[0][0] + +extent[1][0]) / 2,
        (+extent[0][1] + +extent[1][1]) / 2
    ];
};
schedule = function schedule(transition, transform, center) {
    transition.on('start.zoom', function () {
        gesture(this, arguments).start();
    }).on('interrupt.zoom end.zoom', function () {
        gesture(this, arguments).end();
    }).tween('zoom', function () {
        var that = this, args = arguments, g = gesture(that, args), e = extent.apply(that, args), p = center || centroid(e), w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform === 'function' ? transform.apply(that, args) : transform, i = interpolateZoom(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
        return function (t) {
            if (t === 1)
                t = b;
            else {
                var l = i(t), k = w / l[2];
                t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
            }
            g.zoom(null, t);
        };
    });
};
gesture = function gesture(that, args) {
    for (var i = 0, n = gestures.length, g; i < n; ++i) {
        if ((g = gestures[i]).that === that) {
            return g;
        }
    }
    return new Gesture(that, args);
};
Gesture = function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.index = -1;
    this.active = 0;
    this.extent = extent.apply(that, args);
};
wheeled = function wheeled() {
    if (!filter.apply(this, arguments))
        return;
    var g = gesture(this, arguments), t = this.__zoom, k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))), p = mouse(this);
    if (g.wheel) {
        if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
            g.mouse[1] = t.invert(g.mouse[0] = p);
        }
        clearTimeout(g.wheel);
    } else if (t.k === k)
        return;
    else {
        g.mouse = [
            p,
            t.invert(p)
        ];
        interrupt(this);
        g.start();
    }
    noevent$1();
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom('mouse', constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));
    function wheelidled() {
        g.wheel = null;
        g.end();
    }
};
mousedowned = function mousedowned() {
    if (touchending || !filter.apply(this, arguments))
        return;
    var g = gesture(this, arguments), v = select(exports.event.view).on('mousemove.zoom', mousemoved, true).on('mouseup.zoom', mouseupped, true), p = mouse(this);
    dragDisable(exports.event.view);
    nopropagation$1();
    g.mouse = [
        p,
        this.__zoom.invert(p)
    ];
    interrupt(this);
    g.start();
    function mousemoved() {
        noevent$1();
        g.moved = true;
        g.zoom('mouse', constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));
    }
    function mouseupped() {
        v.on('mousemove.zoom mouseup.zoom', null);
        dragEnable(exports.event.view, g.moved);
        noevent$1();
        g.end();
    }
};
dblclicked = function dblclicked() {
    if (!filter.apply(this, arguments))
        return;
    var t0 = this.__zoom, p0 = mouse(this), p1 = t0.invert(p0), k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));
    noevent$1();
    if (duration > 0)
        select(this).transition().duration(duration).call(schedule, t1, p0);
    else
        select(this).call(zoom.transform, t1);
};
touchstarted = function touchstarted() {
    if (!filter.apply(this, arguments))
        return;
    var g = gesture(this, arguments), touches = exports.event.changedTouches, n = touches.length, i, t, p;
    nopropagation$1();
    for (i = 0; i < n; ++i) {
        t = touches[i], p = touch(this, touches, t.identifier);
        p = [
            p,
            this.__zoom.invert(p),
            t.identifier
        ];
        if (!g.touch0)
            g.touch0 = p;
        else if (!g.touch1)
            g.touch1 = p;
    }
    if (touchstarting) {
        touchstarting = clearTimeout(touchstarting);
        if (!g.touch1)
            return g.end(), dblclicked.apply(this, arguments);
    }
    if (exports.event.touches.length === n) {
        touchstarting = setTimeout(function () {
            touchstarting = null;
        }, touchDelay);
        interrupt(this);
        g.start();
    }
};
touchmoved = function touchmoved() {
    var g = gesture(this, arguments), touches = exports.event.changedTouches, n = touches.length, i, t, p, l;
    noevent$1();
    if (touchstarting)
        touchstarting = clearTimeout(touchstarting);
    for (i = 0; i < n; ++i) {
        t = touches[i], p = touch(this, touches, t.identifier);
        if (g.touch0 && g.touch0[2] === t.identifier)
            g.touch0[0] = p;
        else if (g.touch1 && g.touch1[2] === t.identifier)
            g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
        var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
        t = scale(t, Math.sqrt(dp / dl));
        p = [
            (p0[0] + p1[0]) / 2,
            (p0[1] + p1[1]) / 2
        ];
        l = [
            (l0[0] + l1[0]) / 2,
            (l0[1] + l1[1]) / 2
        ];
    } else if (g.touch0)
        p = g.touch0[0], l = g.touch0[1];
    else
        return;
    g.zoom('touch', constrain(translate(t, p, l), g.extent));
};
touchended = function touchended() {
    var g = gesture(this, arguments), touches = exports.event.changedTouches, n = touches.length, i, t;
    nopropagation$1();
    if (touchending)
        clearTimeout(touchending);
    touchending = setTimeout(function () {
        touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
        t = touches[i];
        if (g.touch0 && g.touch0[2] === t.identifier)
            delete g.touch0;
        else if (g.touch1 && g.touch1[2] === t.identifier)
            delete g.touch1;
    }
    if (g.touch1 && !g.touch0)
        g.touch0 = g.touch1, delete g.touch1;
    if (!g.touch0)
        g.end();
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
filter = defaultFilter$1;
extent = defaultExtent;
k0 = 0;
k1 = Infinity;
x0 = -k1;
x1 = k1;
y0 = x0;
y1 = x1;
duration = 250;
gestures = [];
listeners = dispatch('start', 'zoom', 'end');
touchDelay = 500;
wheelDelay = 150;
zoom.transform = function (collection, transform) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property('__zoom', defaultTransform);
    if (collection !== selection) {
        schedule(collection, transform);
    } else {
        selection.interrupt().each(function () {
            gesture(this, arguments).start().zoom(null, typeof transform === 'function' ? transform.apply(this, arguments) : transform).end();
        });
    }
};
zoom.scaleBy = function (selection, k) {
    zoom.scaleTo(selection, function () {
        var k0 = this.__zoom.k, k1 = typeof k === 'function' ? k.apply(this, arguments) : k;
        return k0 * k1;
    });
};
zoom.scaleTo = function (selection, k) {
    zoom.transform(selection, function () {
        var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = centroid(e), p1 = t0.invert(p0), k1 = typeof k === 'function' ? k.apply(this, arguments) : k;
        return constrain(translate(scale(t0, k1), p0, p1), e);
    });
};
zoom.translateBy = function (selection, x, y) {
    zoom.transform(selection, function () {
        return constrain(this.__zoom.translate(typeof x === 'function' ? x.apply(this, arguments) : x, typeof y === 'function' ? y.apply(this, arguments) : y), extent.apply(this, arguments));
    });
};
Gesture.prototype = {
    start: function () {
        if (++this.active === 1) {
            this.index = gestures.push(this) - 1;
            this.emit('start');
        }
        return this;
    },
    zoom: function (key, transform) {
        if (this.mouse && key !== 'mouse')
            this.mouse[1] = transform.invert(this.mouse[0]);
        if (this.touch0 && key !== 'touch')
            this.touch0[1] = transform.invert(this.touch0[0]);
        if (this.touch1 && key !== 'touch')
            this.touch1[1] = transform.invert(this.touch1[0]);
        this.that.__zoom = transform;
        this.emit('zoom');
        return this;
    },
    end: function () {
        if (--this.active === 0) {
            gestures.splice(this.index, 1);
            this.index = -1;
            this.emit('end');
        }
        return this;
    },
    emit: function (type) {
        customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [
            type,
            this.that,
            this.args
        ]);
    }
};
zoom.filter = function (_) {
    return arguments.length ? (filter = typeof _ === 'function' ? _ : constant$9(!!_), zoom) : filter;
};
zoom.extent = function (_) {
    return arguments.length ? (extent = typeof _ === 'function' ? _ : constant$9([
        [
            +_[0][0],
            +_[0][1]
        ],
        [
            +_[1][0],
            +_[1][1]
        ]
    ]), zoom) : extent;
};
zoom.scaleExtent = function (_) {
    return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [
        k0,
        k1
    ];
};
zoom.translateExtent = function (_) {
    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [
        [
            x0,
            y0
        ],
        [
            x1,
            y1
        ]
    ];
};
zoom.duration = function (_) {
    return arguments.length ? (duration = +_, zoom) : duration;
};
zoom.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
};
return zoom;});
    constant$10 = ($__.fs.constant$10_676 = function constant$10(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    BrushEvent = ($__.fs.BrushEvent_677 = function BrushEvent(target, type, selection) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
target = arguments[0], type = arguments[1], selection = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.target = target;
this.type = type;
this.selection = selection;});
    nopropagation$2 = ($__.fs.nopropagation$2_678 = function nopropagation$2() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
exports.event.stopImmediatePropagation();});
    noevent$2 = ($__.fs.noevent$2_679 = function noevent$2() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
exports.event.preventDefault();
exports.event.stopImmediatePropagation();});
    type$1 = ($__.fs.type$1_680 = function type$1(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return $__.os.oid78 = {
        'type': t
    };
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return $__.os.oid79 = {
        'type': t
    };
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return $__.os.oid81 = {
        'type': t
    };
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return $__.os.oid82 = {
        'type': t
    };
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    return $__.os.oid84 = {
        'type': t
    };
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    return $__.os.oid85 = {
        'type': t
    };
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    return $__.os.oid86 = {
        'type': t
    };
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    return $__.os.oid87 = {
        'type': t
    };
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    return $__.os.oid88 = {
        'type': t
    };
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    return $__.os.oid89 = {
        'type': t
    };
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    return $__.os.oid90 = {
        'type': t
    };
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    return $__.os.oid91 = {
        'type': t
    };
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return {
    type: t
};}, $__.fs.type$1_680_13 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function type$1(t) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(type$1, -2);
    return type$1;
})($__.fs.type$1_680, [0, 1], false)), $__.fs.type$1_680_14 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function type$1(t) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(type$1, -2);
    return type$1;
})($__.fs.type$1_680, [2, 3], false)), $__.fs.type$1_680_15 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function type$1(t) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(type$1, -2);
    return type$1;
})($__.fs.type$1_680, [4, 5, 6, 7, 8, 9, 10, 11], false)), $__.fs.type$1_680);
    defaultFilter$2 = ($__.fs.defaultFilter$2_681 = function defaultFilter$2() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return !exports.event.button;});
    defaultExtent$1 = ($__.fs.defaultExtent$1_682 = function defaultExtent$1() {
var vvv_return, vvv_switch, svg;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
svg = this.ownerSVGElement || this;
return [
    [
        0,
        0
    ],
    [
        svg.width.baseVal.value,
        svg.height.baseVal.value
    ]
];});
    local$1 = ($__.fs.local$1_683 = function local$1(node) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
while (!node.__brush)
    if (!(node = node.parentNode))
    return;
return node.__brush;});
    empty$1 = ($__.fs.empty$1_684 = function empty$1(extent) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
extent = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];});
    brushSelection = ($__.fs.brushSelection_685 = function brushSelection(node) {
var vvv_return, vvv_switch, state;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
state = node.__brush;
return state ? state.dim.output(state.selection) : null;});
    brushX = ($__.fs.brushX_686 = function brushX() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return brush$1(X);});
    brushY = ($__.fs.brushY_687 = function brushY() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return brush$1(Y);});
    brush = ($__.fs.brush_688 = function brush() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return brush$1(XY);});
    brush$1 = ($__.fs.brush$1_689 = function brush$1(dim) {
var vvv_return, vvv_switch, extent, filter, listeners, handleSize, touchending, brush, redraw, emitter, Emitter, started, initialize;
brush = function brush(group) {
    var overlay = group.property('__brush', initialize).selectAll('.overlay').data([type$1('overlay')]);
    overlay.enter().append('rect').attr('class', 'overlay').attr('pointer-events', 'all').attr('cursor', cursors.overlay).merge(overlay).each(function () {
        var extent = local$1(this).extent;
        select(this).attr('x', extent[0][0]).attr('y', extent[0][1]).attr('width', extent[1][0] - extent[0][0]).attr('height', extent[1][1] - extent[0][1]);
    });
    group.selectAll('.selection').data([type$1('selection')]).enter().append('rect').attr('class', 'selection').attr('cursor', cursors.selection).attr('fill', '#777').attr('fill-opacity', 0.3).attr('stroke', '#fff').attr('shape-rendering', 'crispEdges');
    var handle = group.selectAll('.handle').data(dim.handles, function (d) {
        return d.type;
    });
    handle.exit().remove();
    handle.enter().append('rect').attr('class', function (d) {
        return 'handle handle--' + d.type;
    }).attr('cursor', function (d) {
        return cursors[d.type];
    });
    group.each(redraw).attr('fill', 'none').attr('pointer-events', 'all').style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)').on('mousedown.brush touchstart.brush', started);
};
redraw = function redraw() {
    var group = select(this), selection = local$1(this).selection;
    if (selection) {
        group.selectAll('.selection').style('display', null).attr('x', selection[0][0]).attr('y', selection[0][1]).attr('width', selection[1][0] - selection[0][0]).attr('height', selection[1][1] - selection[0][1]);
        group.selectAll('.handle').style('display', null).attr('x', function (d) {
            return d.type[d.type.length - 1] === 'e' ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
        }).attr('y', function (d) {
            return d.type[0] === 's' ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
        }).attr('width', function (d) {
            return d.type === 'n' || d.type === 's' ? selection[1][0] - selection[0][0] + handleSize : handleSize;
        }).attr('height', function (d) {
            return d.type === 'e' || d.type === 'w' ? selection[1][1] - selection[0][1] + handleSize : handleSize;
        });
    } else {
        group.selectAll('.selection,.handle').style('display', 'none').attr('x', null).attr('y', null).attr('width', null).attr('height', null);
    }
};
emitter = function emitter(that, args) {
    return that.__brush.emitter || new Emitter(that, args);
};
Emitter = function Emitter(that, args) {
    this.that = that;
    this.args = args;
    this.state = that.__brush;
    this.active = 0;
};
started = function started() {
    if (exports.event.touches) {
        if (exports.event.changedTouches.length < exports.event.touches.length)
            return noevent$2();
    } else if (touchending)
        return;
    if (!filter.apply(this, arguments))
        return;
    var that = this, type = exports.event.target.__data__.type, mode = (exports.event.metaKey ? type = 'overlay' : type) === 'selection' ? MODE_DRAG : exports.event.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y ? null : signsX[type], signY = dim === X ? null : signsY[type], state = local$1(that), extent = state.extent, selection = state.selection, W = extent[0][0], w0, w1, N = extent[0][1], n0, n1, E = extent[1][0], e0, e1, S = extent[1][1], s0, s1, dx, dy, moving, shifting = signX && signY && exports.event.shiftKey, lockX, lockY, point0 = mouse(that), point = point0, emit = emitter(that, arguments).beforestart();
    if (type === 'overlay') {
        state.selection = selection = [
            [
                w0 = dim === Y ? W : point0[0],
                n0 = dim === X ? N : point0[1]
            ],
            [
                e0 = dim === Y ? E : w0,
                s0 = dim === X ? S : n0
            ]
        ];
    } else {
        w0 = selection[0][0];
        n0 = selection[0][1];
        e0 = selection[1][0];
        s0 = selection[1][1];
    }
    w1 = w0;
    n1 = n0;
    e1 = e0;
    s1 = s0;
    var group = select(that).attr('pointer-events', 'none');
    var overlay = group.selectAll('.overlay').attr('cursor', cursors[type]);
    if (exports.event.touches) {
        group.on('touchmove.brush', moved, true).on('touchend.brush touchcancel.brush', ended, true);
    } else {
        var view = select(exports.event.view).on('keydown.brush', keydowned, true).on('keyup.brush', keyupped, true).on('mousemove.brush', moved, true).on('mouseup.brush', ended, true);
        dragDisable(exports.event.view);
    }
    nopropagation$2();
    interrupt(that);
    redraw.call(that);
    emit.start();
    function moved() {
        var point1 = mouse(that);
        if (shifting && !lockX && !lockY) {
            if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1]))
                lockY = true;
            else
                lockX = true;
        }
        point = point1;
        moving = true;
        noevent$2();
        move();
    }
    function move() {
        var t;
        dx = point[0] - point0[0];
        dy = point[1] - point0[1];
        switch (mode) {
        case MODE_SPACE:
        case MODE_DRAG: {
                if (signX)
                    dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
                if (signY)
                    dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
                break;
            }
        case MODE_HANDLE: {
                if (signX < 0)
                    dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                else if (signX > 0)
                    dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                if (signY < 0)
                    dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                else if (signY > 0)
                    dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
                break;
            }
        case MODE_CENTER: {
                if (signX)
                    w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
                if (signY)
                    n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
                break;
            }
        }
        if (e1 < w1) {
            signX *= -1;
            t = w0, w0 = e0, e0 = t;
            t = w1, w1 = e1, e1 = t;
            if (type in flipX)
                overlay.attr('cursor', cursors[type = flipX[type]]);
        }
        if (s1 < n1) {
            signY *= -1;
            t = n0, n0 = s0, s0 = t;
            t = n1, n1 = s1, s1 = t;
            if (type in flipY)
                overlay.attr('cursor', cursors[type = flipY[type]]);
        }
        selection = state.selection;
        if (lockX)
            w1 = selection[0][0], e1 = selection[1][0];
        if (lockY)
            n1 = selection[0][1], s1 = selection[1][1];
        if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
            state.selection = [
                [
                    w1,
                    n1
                ],
                [
                    e1,
                    s1
                ]
            ];
            redraw.call(that);
            emit.brush();
        }
    }
    function ended() {
        nopropagation$2();
        if (exports.event.touches) {
            if (exports.event.touches.length)
                return;
            if (touchending)
                clearTimeout(touchending);
            touchending = setTimeout(function () {
                touchending = null;
            }, 500);
            group.on('touchmove.brush touchend.brush touchcancel.brush', null);
        } else {
            dragEnable(exports.event.view, moving);
            view.on('keydown.brush keyup.brush mousemove.brush mouseup.brush', null);
        }
        group.attr('pointer-events', 'all');
        overlay.attr('cursor', cursors.overlay);
        if (empty$1(selection))
            state.selection = null, redraw.call(that);
        emit.end();
    }
    function keydowned() {
        switch (exports.event.keyCode) {
        case 16: {
                shifting = signX && signY;
                break;
            }
        case 18: {
                if (mode === MODE_HANDLE) {
                    if (signX)
                        e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                    if (signY)
                        s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                    mode = MODE_CENTER;
                    move();
                }
                break;
            }
        case 32: {
                if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                    if (signX < 0)
                        e0 = e1 - dx;
                    else if (signX > 0)
                        w0 = w1 - dx;
                    if (signY < 0)
                        s0 = s1 - dy;
                    else if (signY > 0)
                        n0 = n1 - dy;
                    mode = MODE_SPACE;
                    overlay.attr('cursor', cursors.selection);
                    move();
                }
                break;
            }
        default:
            return;
        }
        noevent$2();
    }
    function keyupped() {
        switch (exports.event.keyCode) {
        case 16: {
                if (shifting) {
                    lockX = lockY = shifting = false;
                    move();
                }
                break;
            }
        case 18: {
                if (mode === MODE_CENTER) {
                    if (signX < 0)
                        e0 = e1;
                    else if (signX > 0)
                        w0 = w1;
                    if (signY < 0)
                        s0 = s1;
                    else if (signY > 0)
                        n0 = n1;
                    mode = MODE_HANDLE;
                    move();
                }
                break;
            }
        case 32: {
                if (mode === MODE_SPACE) {
                    if (exports.event.altKey) {
                        if (signX)
                            e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                        if (signY)
                            s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                        mode = MODE_CENTER;
                    } else {
                        if (signX < 0)
                            e0 = e1;
                        else if (signX > 0)
                            w0 = w1;
                        if (signY < 0)
                            s0 = s1;
                        else if (signY > 0)
                            n0 = n1;
                        mode = MODE_HANDLE;
                    }
                    overlay.attr('cursor', cursors[type]);
                    move();
                }
                break;
            }
        default:
            return;
        }
        noevent$2();
    }
};
initialize = function initialize() {
    var state = this.__brush || {
        selection: null
    };
    state.extent = extent.apply(this, arguments);
    state.dim = dim;
    return state;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
dim = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
extent = defaultExtent$1;
filter = defaultFilter$2;
listeners = dispatch(brush, 'start', 'brush', 'end');
handleSize = 6;
brush.move = function (group, selection) {
    if (group.selection) {
        group.on('start.brush', function () {
            emitter(this, arguments).beforestart().start();
        }).on('interrupt.brush end.brush', function () {
            emitter(this, arguments).end();
        }).tween('brush', function () {
            var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection === 'function' ? selection.apply(this, arguments) : selection, state.extent), i = interpolate(selection0, selection1);
            function tween(t) {
                state.selection = t === 1 && empty$1(selection1) ? null : i(t);
                redraw.call(that);
                emit.brush();
            }
            return selection0 && selection1 ? tween : tween(1);
        });
    } else {
        group.each(function () {
            var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection === 'function' ? selection.apply(that, args) : selection, state.extent), emit = emitter(that, args).beforestart();
            interrupt(that);
            state.selection = selection1 == null || empty$1(selection1) ? null : selection1;
            redraw.call(that);
            emit.start().brush().end();
        });
    }
};
Emitter.prototype = {
    beforestart: function () {
        if (++this.active === 1)
            this.state.emitter = this, this.starting = true;
        return this;
    },
    start: function () {
        if (this.starting)
            this.starting = false, this.emit('start');
        return this;
    },
    brush: function () {
        this.emit('brush');
        return this;
    },
    end: function () {
        if (--this.active === 0)
            delete this.state.emitter, this.emit('end');
        return this;
    },
    emit: function (type) {
        customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [
            type,
            this.that,
            this.args
        ]);
    }
};
brush.extent = function (_) {
    return arguments.length ? (extent = typeof _ === 'function' ? _ : constant$10([
        [
            +_[0][0],
            +_[0][1]
        ],
        [
            +_[1][0],
            +_[1][1]
        ]
    ]), brush) : extent;
};
brush.filter = function (_) {
    return arguments.length ? (filter = typeof _ === 'function' ? _ : constant$10(!!_), brush) : filter;
};
brush.handleSize = function (_) {
    return arguments.length ? (handleSize = +_, brush) : handleSize;
};
brush.on = function () {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? brush : value;
};
return brush;});
    compareValue = ($__.fs.compareValue_690 = function compareValue(compare) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
compare = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (a, b) {
    return compare(a.source.value + a.target.value, b.source.value + b.target.value);
};});
    chord = ($__.fs.chord_691 = function chord() {
var vvv_return, vvv_switch, padAngle, sortGroups, sortSubgroups, sortChords, chord;
chord = function chord(matrix) {
    var n = matrix.length, groupSums = [], groupIndex = range(n), subgroupIndex = [], chords = [], groups = chords.groups = new Array(n), subgroups = new Array(n * n), k, x, x0, dx, i, j;
    k = 0, i = -1;
    while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
            x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(range(n));
        k += x;
    }
    if (sortGroups)
        groupIndex.sort(function (a, b) {
        return sortGroups(groupSums[a], groupSums[b]);
    });
    if (sortSubgroups)
        subgroupIndex.forEach(function (d, i) {
        d.sort(function (a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
        });
    });
    k = max$1(0, tau$3 - padAngle * n) / k;
    dx = k ? padAngle : tau$3 / n;
    x = 0, i = -1;
    while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
            var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
            subgroups[dj * n + di] = {
                index: di,
                subindex: dj,
                startAngle: a0,
                endAngle: a1,
                value: v
            };
        }
        groups[di] = {
            index: di,
            startAngle: x0,
            endAngle: x,
            value: groupSums[di]
        };
        x += dx;
    }
    i = -1;
    while (++i < n) {
        j = i - 1;
        while (++j < n) {
            var source = subgroups[j * n + i], target = subgroups[i * n + j];
            if (source.value || target.value) {
                chords.push(source.value < target.value ? {
                    source: target,
                    target: source
                } : {
                    source: source,
                    target: target
                });
            }
        }
    }
    return sortChords ? chords.sort(sortChords) : chords;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
padAngle = 0;
sortGroups = null;
sortSubgroups = null;
sortChords = null;
chord.padAngle = function (_) {
    return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
};
chord.sortGroups = function (_) {
    return arguments.length ? (sortGroups = _, chord) : sortGroups;
};
chord.sortSubgroups = function (_) {
    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
};
chord.sortChords = function (_) {
    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
};
return chord;});
    constant$11 = ($__.fs.constant$11_692 = function constant$11(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    defaultSource = ($__.fs.defaultSource_693 = function defaultSource(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.source;});
    defaultTarget = ($__.fs.defaultTarget_694 = function defaultTarget(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.target;});
    defaultRadius$1 = ($__.fs.defaultRadius$1_695 = function defaultRadius$1(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.radius;});
    defaultStartAngle = ($__.fs.defaultStartAngle_696 = function defaultStartAngle(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.startAngle;});
    defaultEndAngle = ($__.fs.defaultEndAngle_697 = function defaultEndAngle(d) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return d.endAngle;});
    ribbon = ($__.fs.ribbon_698 = function ribbon() {
var vvv_return, vvv_switch, source, target, radius, startAngle, endAngle, context, ribbon;
ribbon = function ribbon() {
    var buffer, argv = slice$5.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv), sr = +radius.apply(this, (argv[0] = s, argv)), sa0 = startAngle.apply(this, argv) - halfPi$2, sa1 = endAngle.apply(this, argv) - halfPi$2, sx0 = sr * cos(sa0), sy0 = sr * sin(sa0), tr = +radius.apply(this, (argv[0] = t, argv)), ta0 = startAngle.apply(this, argv) - halfPi$2, ta1 = endAngle.apply(this, argv) - halfPi$2;
    if (!context)
        context = buffer = path();
    context.moveTo(sx0, sy0);
    context.arc(0, 0, sr, sa0, sa1);
    if (sa0 !== ta0 || sa1 !== ta1) {
        context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
        context.arc(0, 0, tr, ta0, ta1);
    }
    context.quadraticCurveTo(0, 0, sx0, sy0);
    context.closePath();
    if (buffer)
        return context = null, buffer + '' || null;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
source = defaultSource;
target = defaultTarget;
radius = defaultRadius$1;
startAngle = defaultStartAngle;
endAngle = defaultEndAngle;
context = null;
ribbon.radius = function (_) {
    return arguments.length ? (radius = typeof _ === 'function' ? _ : constant$11(+_), ribbon) : radius;
};
ribbon.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === 'function' ? _ : constant$11(+_), ribbon) : startAngle;
};
ribbon.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === 'function' ? _ : constant$11(+_), ribbon) : endAngle;
};
ribbon.source = function (_) {
    return arguments.length ? (source = _, ribbon) : source;
};
ribbon.target = function (_) {
    return arguments.length ? (target = _, ribbon) : target;
};
ribbon.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, ribbon) : context;
};
return ribbon;});
    adder = ($__.fs.adder_699 = function adder() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return new (Adder, $__.fs.Adder_700)(1, true, $__.uid);
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return new (Adder, $__.fs.Adder_700)(2, true, $__.uid);
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return new (Adder, $__.fs.Adder_700)(3, true, $__.uid);
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return new (Adder, $__.fs.Adder_700)(4, true, $__.uid);
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    return new (Adder, $__.fs.Adder_700)(5, true, $__.uid);
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    return new (Adder, $__.fs.Adder_700)(6, true, $__.uid);
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    return new (Adder, $__.fs.Adder_700)(7, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Adder();});
    Adder = ($__.fs.Adder_700 = function Adder() {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = this, 'reset', $__.fs.J$__v2246113107_2410_1482.call(vvv_tmp0, 0, true, $__.uid);
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = this, 'reset', $__.fs.J$__v2246113107_2410_1482.call(vvv_tmp0, 1, true, $__.uid);
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    vvv_tmp0 = this, 'reset', $__.fs.J$__v2246113107_2410_1482.call(vvv_tmp0, 2, true, $__.uid);
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    vvv_tmp0 = this, 'reset', $__.fs.J$__v2246113107_2410_1482.call(vvv_tmp0, 3, true, $__.uid);
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    vvv_tmp0 = this, 'reset', $__.fs.J$__v2246113107_2410_1482.call(vvv_tmp0, 4, true, $__.uid);
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    vvv_tmp0 = this, 'reset', $__.fs.J$__v2246113107_2410_1482.call(vvv_tmp0, 5, true, $__.uid);
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    vvv_tmp0 = this, 'reset', $__.fs.J$__v2246113107_2410_1482.call(vvv_tmp0, 6, true, $__.uid);
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    vvv_tmp0 = this, 'reset', $__.fs.J$__v2246113107_2410_1482.call(vvv_tmp0, 7, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.reset();});
    add$1 = ($__.fs.add$1_701 = function add$1(adder, a, b) {
var vvv_return, vvv_switch, x, bv, av;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
adder = arguments[0], a = arguments[1], b = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = adder.s = a + b;
bv = x - a;
av = x - bv;
adder.t = a - av + (b - bv);});
    acos = ($__.fs.acos_702 = function acos(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);});
    asin$1 = ($__.fs.asin$1_703 = function asin$1(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x > 1 ? halfPi$3 : x < -1 ? -halfPi$3 : Math.asin(x);});
    haversin = ($__.fs.haversin_704 = function haversin(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (x = sin$1(x / 2)) * x;});
    noop$2 = ($__.fs.noop$2_705 = function noop$2() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');});
    streamGeometry = ($__.fs.streamGeometry_706 = function streamGeometry(geometry, stream) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
geometry = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
}});
    streamLine = ($__.fs.streamLine_707 = function streamLine(coordinates, stream, closed) {
var vvv_return, vvv_switch, i, n, coordinate;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
coordinates = arguments[0], stream = arguments[1], closed = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = -1;
n = coordinates.length - closed;
stream.lineStart();
while (++i < n)
    coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
stream.lineEnd();});
    streamPolygon = ($__.fs.streamPolygon_708 = function streamPolygon(coordinates, stream) {
var vvv_return, vvv_switch, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
coordinates = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = -1;
n = coordinates.length;
stream.polygonStart();
while (++i < n)
    streamLine(coordinates[i], stream, 1);
stream.polygonEnd();});
    geoStream = ($__.fs.geoStream_709 = function geoStream(object, stream) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (object && streamObjectType.hasOwnProperty(object.type)) {
    streamObjectType[object.type](object, stream);
} else {
    streamGeometry(object, stream);
}});
    areaRingStart = ($__.fs.areaRingStart_710 = function areaRingStart() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaStream.point = areaPointFirst;});
    areaRingEnd = ($__.fs.areaRingEnd_711 = function areaRingEnd() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaPoint(lambda00, phi00);});
    areaPointFirst = ($__.fs.areaPointFirst_712 = function areaPointFirst(lambda, phi) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaStream.point = areaPoint;
lambda00 = lambda, phi00 = phi;
lambda *= radians, phi *= radians;
lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);});
    areaPoint = ($__.fs.areaPoint_713 = function areaPoint(lambda, phi) {
var vvv_return, vvv_switch, dLambda, sdLambda, adLambda, cosPhi, sinPhi, k, u, v;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda *= radians, phi *= radians;
phi = phi / 2 + quarterPi;
dLambda = lambda - lambda0;
sdLambda = dLambda >= 0 ? 1 : -1;
adLambda = sdLambda * dLambda;
cosPhi = cos$1(phi);
sinPhi = sin$1(phi);
k = sinPhi0 * sinPhi;
u = cosPhi0 * cosPhi + k * cos$1(adLambda);
v = k * sdLambda * sin$1(adLambda);
areaRingSum.add(atan2(v, u));
lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;});
    area$2 = ($__.fs.area$2_714 = function area$2(object) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaSum.reset();
geoStream(object, areaStream);
return areaSum * 2;});
    spherical = ($__.fs.spherical_715 = function spherical(cartesian) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
cartesian = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    atan2(cartesian[1], cartesian[0]),
    asin$1(cartesian[2])
];});
    cartesian = ($__.fs.cartesian_716 = function cartesian(spherical) {
var vvv_return, vvv_switch, lambda, phi, cosPhi;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
spherical = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda = spherical[0];
phi = spherical[1];
cosPhi = cos$1(phi);
return [
    cosPhi * cos$1(lambda),
    cosPhi * sin$1(lambda),
    sin$1(phi)
];});
    cartesianDot = ($__.fs.cartesianDot_717 = function cartesianDot(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];});
    cartesianCross = ($__.fs.cartesianCross_718 = function cartesianCross(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    a[1] * b[2] - a[2] * b[1],
    a[2] * b[0] - a[0] * b[2],
    a[0] * b[1] - a[1] * b[0]
];});
    cartesianAddInPlace = ($__.fs.cartesianAddInPlace_719 = function cartesianAddInPlace(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
a[0] += b[0], a[1] += b[1], a[2] += b[2];});
    cartesianScale = ($__.fs.cartesianScale_720 = function cartesianScale(vector, k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
vector = arguments[0], k = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    vector[0] * k,
    vector[1] * k,
    vector[2] * k
];});
    cartesianNormalizeInPlace = ($__.fs.cartesianNormalizeInPlace_721 = function cartesianNormalizeInPlace(d) {
var vvv_return, vvv_switch, l;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
d = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
l = sqrt$1(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
d[0] /= l, d[1] /= l, d[2] /= l;});
    boundsPoint = ($__.fs.boundsPoint_722 = function boundsPoint(lambda, phi) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ranges.push(range$1 = [
    lambda0$1 = lambda,
    lambda1 = lambda
]);
if (phi < phi0)
    phi0 = phi;
if (phi > phi1)
    phi1 = phi;});
    linePoint = ($__.fs.linePoint_723 = function linePoint(lambda, phi) {
var vvv_return, vvv_switch, p, normal, equatorial, inflection, delta, sign, lambdai, phii, antimeridian;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
p = cartesian([
    lambda * radians,
    phi * radians
]);
if (p0) {
    normal = cartesianCross(p0, p);
    equatorial = [
        normal[1],
        -normal[0],
        0
    ];
    inflection = cartesianCross(equatorial, normal);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    delta = lambda - lambda2;
    sign = delta > 0 ? 1 : -1;
    lambdai = inflection[0] * degrees$1 * sign;
    antimeridian = abs(delta) > 180;
    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
        phii = inflection[1] * degrees$1;
        if (phii > phi1)
            phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
        phii = -inflection[1] * degrees$1;
        if (phii < phi0)
            phi0 = phii;
    } else {
        if (phi < phi0)
            phi0 = phi;
        if (phi > phi1)
            phi1 = phi;
    }
    if (antimeridian) {
        if (lambda < lambda2) {
            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1))
                lambda1 = lambda;
        } else {
            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1))
                lambda0$1 = lambda;
        }
    } else {
        if (lambda1 >= lambda0$1) {
            if (lambda < lambda0$1)
                lambda0$1 = lambda;
            if (lambda > lambda1)
                lambda1 = lambda;
        } else {
            if (lambda > lambda2) {
                if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1))
                    lambda1 = lambda;
            } else {
                if (angle(lambda, lambda1) > angle(lambda0$1, lambda1))
                    lambda0$1 = lambda;
            }
        }
    }
} else {
    boundsPoint(lambda, phi);
}
p0 = p, lambda2 = lambda;});
    boundsLineStart = ($__.fs.boundsLineStart_724 = function boundsLineStart() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
boundsStream.point = linePoint;});
    boundsLineEnd = ($__.fs.boundsLineEnd_725 = function boundsLineEnd() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
range$1[0] = lambda0$1, range$1[1] = lambda1;
boundsStream.point = boundsPoint;
p0 = null;});
    boundsRingPoint = ($__.fs.boundsRingPoint_726 = function boundsRingPoint(lambda, phi) {
var vvv_return, vvv_switch, delta;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (p0) {
    delta = lambda - lambda2;
    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
} else {
    lambda00$1 = lambda, phi00$1 = phi;
}
areaStream.point(lambda, phi);
linePoint(lambda, phi);});
    boundsRingStart = ($__.fs.boundsRingStart_727 = function boundsRingStart() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaStream.lineStart();});
    boundsRingEnd = ($__.fs.boundsRingEnd_728 = function boundsRingEnd() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
boundsRingPoint(lambda00$1, phi00$1);
areaStream.lineEnd();
if (abs(deltaSum) > epsilon$4)
    lambda0$1 = -(lambda1 = 180);
range$1[0] = lambda0$1, range$1[1] = lambda1;
p0 = null;});
    angle = ($__.fs.angle_729 = function angle(lambda0, lambda1) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda0 = arguments[0], lambda1 = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;});
    rangeCompare = ($__.fs.rangeCompare_730 = function rangeCompare(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a[0] - b[0];});
    rangeContains = ($__.fs.rangeContains_731 = function rangeContains(range, x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
range = arguments[0], x = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;});
    bounds = ($__.fs.bounds_732 = function bounds(feature) {
var vvv_return, vvv_switch, i, n, a, b, merged, deltaMax, delta;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
feature = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
ranges = [];
geoStream(feature, boundsStream);
if (n = ranges.length) {
    ranges.sort(rangeCompare);
    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
        b = ranges[i];
        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
            if (angle(a[0], b[1]) > angle(a[0], a[1]))
                a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1]))
                a[0] = b[0];
        } else {
            merged.push(a = b);
        }
    }
    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
        b = merged[i];
        if ((delta = angle(a[1], b[0])) > deltaMax)
            deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
    }
}
ranges = range$1 = null;
return lambda0$1 === Infinity || phi0 === Infinity ? [
    [
        NaN,
        NaN
    ],
    [
        NaN,
        NaN
    ]
] : [
    [
        lambda0$1,
        phi0
    ],
    [
        lambda1,
        phi1
    ]
];});
    centroidPoint = ($__.fs.centroidPoint_733 = function centroidPoint(lambda, phi) {
var vvv_return, vvv_switch, cosPhi;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda *= radians, phi *= radians;
cosPhi = cos$1(phi);
centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));});
    centroidPointCartesian = ($__.fs.centroidPointCartesian_734 = function centroidPointCartesian(x, y, z) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1], z = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
++W0;
X0 += (x - X0) / W0;
Y0 += (y - Y0) / W0;
Z0 += (z - Z0) / W0;});
    centroidLineStart = ($__.fs.centroidLineStart_735 = function centroidLineStart() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream.point = centroidLinePointFirst;});
    centroidLinePointFirst = ($__.fs.centroidLinePointFirst_736 = function centroidLinePointFirst(lambda, phi) {
var vvv_return, vvv_switch, cosPhi;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda *= radians, phi *= radians;
cosPhi = cos$1(phi);
x0 = cosPhi * cos$1(lambda);
y0 = cosPhi * sin$1(lambda);
z0 = sin$1(phi);
centroidStream.point = centroidLinePoint;
centroidPointCartesian(x0, y0, z0);});
    centroidLinePoint = ($__.fs.centroidLinePoint_737 = function centroidLinePoint(lambda, phi) {
var vvv_return, vvv_switch, cosPhi, x, y, z, w;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda *= radians, phi *= radians;
cosPhi = cos$1(phi);
x = cosPhi * cos$1(lambda);
y = cosPhi * sin$1(lambda);
z = sin$1(phi);
w = atan2(sqrt$1((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
W1 += w;
X1 += w * (x0 + (x0 = x));
Y1 += w * (y0 + (y0 = y));
Z1 += w * (z0 + (z0 = z));
centroidPointCartesian(x0, y0, z0);});
    centroidLineEnd = ($__.fs.centroidLineEnd_738 = function centroidLineEnd() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream.point = centroidPoint;});
    centroidRingStart = ($__.fs.centroidRingStart_739 = function centroidRingStart() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream.point = centroidRingPointFirst;});
    centroidRingEnd = ($__.fs.centroidRingEnd_740 = function centroidRingEnd() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidRingPoint(lambda00$2, phi00$2);
centroidStream.point = centroidPoint;});
    centroidRingPointFirst = ($__.fs.centroidRingPointFirst_741 = function centroidRingPointFirst(lambda, phi) {
var vvv_return, vvv_switch, cosPhi;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda00$2 = lambda, phi00$2 = phi;
lambda *= radians, phi *= radians;
centroidStream.point = centroidRingPoint;
cosPhi = cos$1(phi);
x0 = cosPhi * cos$1(lambda);
y0 = cosPhi * sin$1(lambda);
z0 = sin$1(phi);
centroidPointCartesian(x0, y0, z0);});
    centroidRingPoint = ($__.fs.centroidRingPoint_742 = function centroidRingPoint(lambda, phi) {
var vvv_return, vvv_switch, cosPhi, x, y, z, cx, cy, cz, m, u, v, w;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda *= radians, phi *= radians;
cosPhi = cos$1(phi);
x = cosPhi * cos$1(lambda);
y = cosPhi * sin$1(lambda);
z = sin$1(phi);
cx = y0 * z - z0 * y;
cy = z0 * x - x0 * z;
cz = x0 * y - y0 * x;
m = sqrt$1(cx * cx + cy * cy + cz * cz);
u = x0 * x + y0 * y + z0 * z;
v = m && -acos(u) / m;
w = atan2(m, u);
X2 += v * cx;
Y2 += v * cy;
Z2 += v * cz;
W1 += w;
X1 += w * (x0 + (x0 = x));
Y1 += w * (y0 + (y0 = y));
Z1 += w * (z0 + (z0 = z));
centroidPointCartesian(x0, y0, z0);});
    centroid$1 = ($__.fs.centroid$1_743 = function centroid$1(object) {
var vvv_return, vvv_switch, x, y, z, m;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
geoStream(object, centroidStream);
x = X2;
y = Y2;
z = Z2;
m = x * x + y * y + z * z;
if (m < epsilon2$2) {
    x = X1, y = Y1, z = Z1;
    if (W1 < epsilon$4)
        x = X0, y = Y0, z = Z0;
    m = x * x + y * y + z * z;
    if (m < epsilon2$2)
        return [
        NaN,
        NaN
    ];
}
return [
    atan2(y, x) * degrees$1,
    asin$1(z / sqrt$1(m)) * degrees$1
];});
    constant$12 = ($__.fs.constant$12_744 = function constant$12(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return x;
};});
    compose = ($__.fs.compose_745 = function compose(a, b) {
var vvv_return, vvv_switch, compose;
compose = function compose(x, y) {
    return x = a(x, y), b(x[0], x[1]);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (a.invert && b.invert)
    compose.invert = function (x, y) {
    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
};
return compose;});
    rotationIdentity = ($__.fs.rotationIdentity_746 = function rotationIdentity(lambda, phi) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda,
    phi
];});
    rotateRadians = ($__.fs.rotateRadians_747 = function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
deltaLambda = arguments[0], deltaPhi = arguments[1], deltaGamma = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (deltaLambda %= tau$4) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;});
    forwardRotationLambda = ($__.fs.forwardRotationLambda_748 = function forwardRotationLambda(deltaLambda) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
deltaLambda = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (lambda, phi) {
    return lambda += deltaLambda, [
        lambda > pi$4 ? lambda - tau$4 : lambda < -pi$4 ? lambda + tau$4 : lambda,
        phi
    ];
};});
    rotationLambda = ($__.fs.rotationLambda_749 = function rotationLambda(deltaLambda) {
var vvv_return, vvv_switch, rotation;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
deltaLambda = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rotation = forwardRotationLambda(deltaLambda);
rotation.invert = forwardRotationLambda(-deltaLambda);
return rotation;});
    rotationPhiGamma = ($__.fs.rotationPhiGamma_750 = function rotationPhiGamma(deltaPhi, deltaGamma) {
var vvv_return, vvv_switch, cosDeltaPhi, sinDeltaPhi, cosDeltaGamma, sinDeltaGamma, rotation;
rotation = function rotation(lambda, phi) {
    var cosPhi = cos$1(phi), x = cos$1(lambda) * cosPhi, y = sin$1(lambda) * cosPhi, z = sin$1(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
    return [
        atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
        asin$1(k * cosDeltaGamma + y * sinDeltaGamma)
    ];
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
deltaPhi = arguments[0], deltaGamma = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cosDeltaPhi = cos$1(deltaPhi);
sinDeltaPhi = sin$1(deltaPhi);
cosDeltaGamma = cos$1(deltaGamma);
sinDeltaGamma = sin$1(deltaGamma);
rotation.invert = function (lambda, phi) {
    var cosPhi = cos$1(phi), x = cos$1(lambda) * cosPhi, y = sin$1(lambda) * cosPhi, z = sin$1(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
    return [
        atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
        asin$1(k * cosDeltaPhi - x * sinDeltaPhi)
    ];
};
return rotation;});
    rotation = ($__.fs.rotation_751 = function rotation(rotate) {
var vvv_return, vvv_switch, forward;
forward = function forward(coordinates) {
    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rotate = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
forward.invert = function (coordinates) {
    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
};
return forward;});
    circleStream = ($__.fs.circleStream_752 = function circleStream(stream, radius, delta, direction, t0, t1) {
var vvv_return, vvv_switch, cosRadius, sinRadius, step;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
stream = arguments[0], radius = arguments[1], delta = arguments[2], direction = arguments[3], t0 = arguments[4], t1 = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!delta)
    return;
cosRadius = cos$1(radius);
sinRadius = sin$1(radius);
step = direction * delta;
if (t0 == null) {
    t0 = radius + direction * tau$4;
    t1 = radius - step / 2;
} else {
    t0 = circleRadius(cosRadius, t0);
    t1 = circleRadius(cosRadius, t1);
    if (direction > 0 ? t0 < t1 : t0 > t1)
        t0 += direction * tau$4;
}
for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
    point = spherical([
        cosRadius,
        -sinRadius * cos$1(t),
        -sinRadius * sin$1(t)
    ]);
    stream.point(point[0], point[1]);
}});
    circleRadius = ($__.fs.circleRadius_753 = function circleRadius(cosRadius, point) {
var vvv_return, vvv_switch, radius;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
cosRadius = arguments[0], point = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
point = cartesian(point), point[0] -= cosRadius;
cartesianNormalizeInPlace(point);
radius = acos(-point[1]);
return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$4) % tau$4;});
    circle$1 = ($__.fs.circle$1_754 = function circle$1() {
var vvv_return, vvv_switch, center, radius, precision, ring, rotate, stream, point, circle;
point = function point(x, y) {
    ring.push(x = rotate(x, y));
    x[0] *= degrees$1, x[1] *= degrees$1;
};
circle = function circle() {
    var c = center.apply(this, arguments), r = radius.apply(this, arguments) * radians, p = precision.apply(this, arguments) * radians;
    ring = [];
    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
    circleStream(stream, r, p, 1);
    c = {
        type: 'Polygon',
        coordinates: [ring]
    };
    ring = rotate = null;
    return c;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
center = constant$12([
    0,
    0
]);
radius = constant$12(90);
precision = constant$12(6);
stream = {
    point: point
};
circle.center = function (_) {
    return arguments.length ? (center = typeof _ === 'function' ? _ : constant$12([
        +_[0],
        +_[1]
    ]), circle) : center;
};
circle.radius = function (_) {
    return arguments.length ? (radius = typeof _ === 'function' ? _ : constant$12(+_), circle) : radius;
};
circle.precision = function (_) {
    return arguments.length ? (precision = typeof _ === 'function' ? _ : constant$12(+_), circle) : precision;
};
return circle;});
    clipBuffer = ($__.fs.clipBuffer_755 = function clipBuffer() {
var vvv_return, vvv_switch, lines, line;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lines = [];
return {
    point: function (x, y) {
        line.push([
            x,
            y
        ]);
    },
    lineStart: function () {
        lines.push(line = []);
    },
    lineEnd: noop$2,
    rejoin: function () {
        if (lines.length > 1)
            lines.push(lines.pop().concat(lines.shift()));
    },
    result: function () {
        var result = lines;
        lines = [];
        line = null;
        return result;
    }
};});
    clipLine = ($__.fs.clipLine_756 = function clipLine(a, b, x0, y0, x1, y1) {
var vvv_return, vvv_switch, ax, ay, bx, by, t0, t1, dx, dy, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1], x0 = arguments[2], y0 = arguments[3], x1 = arguments[4], y1 = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ax = a[0];
ay = a[1];
bx = b[0];
by = b[1];
t0 = 0;
t1 = 1;
dx = bx - ax;
dy = by - ay;
r = x0 - ax;
if (!dx && r > 0)
    return;
r /= dx;
if (dx < 0) {
    if (r < t0)
        return;
    if (r < t1)
        t1 = r;
} else if (dx > 0) {
    if (r > t1)
        return;
    if (r > t0)
        t0 = r;
}
r = x1 - ax;
if (!dx && r < 0)
    return;
r /= dx;
if (dx < 0) {
    if (r > t1)
        return;
    if (r > t0)
        t0 = r;
} else if (dx > 0) {
    if (r < t0)
        return;
    if (r < t1)
        t1 = r;
}
r = y0 - ay;
if (!dy && r > 0)
    return;
r /= dy;
if (dy < 0) {
    if (r < t0)
        return;
    if (r < t1)
        t1 = r;
} else if (dy > 0) {
    if (r > t1)
        return;
    if (r > t0)
        t0 = r;
}
r = y1 - ay;
if (!dy && r < 0)
    return;
r /= dy;
if (dy < 0) {
    if (r > t1)
        return;
    if (r > t0)
        t0 = r;
} else if (dy > 0) {
    if (r < t0)
        return;
    if (r < t1)
        t1 = r;
}
if (t0 > 0)
    a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
if (t1 < 1)
    b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
return true;});
    pointEqual = ($__.fs.pointEqual_757 = function pointEqual(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return abs(a[0] - b[0]) < epsilon$4 && abs(a[1] - b[1]) < epsilon$4;});
    Intersection = ($__.fs.Intersection_758 = function Intersection(point, points, other, entry) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0], points = arguments[1], other = arguments[2], entry = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.x = point;
this.z = points;
this.o = other;
this.e = entry;
this.v = false;
this.n = this.p = null;});
    clipPolygon = ($__.fs.clipPolygon_759 = function clipPolygon(segments, compareIntersection, startInside, interpolate, stream) {
var vvv_return, vvv_switch, subject, clip, i, n, start, points, point, current, isSubject;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
segments = arguments[0], compareIntersection = arguments[1], startInside = arguments[2], interpolate = arguments[3], stream = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
subject = [];
clip = [];
segments.forEach(function (segment) {
    if ((n = segment.length - 1) <= 0)
        return;
    var n, p0 = segment[0], p1 = segment[n], x;
    if (pointEqual(p0, p1)) {
        stream.lineStart();
        for (i = 0; i < n; ++i)
            stream.point((p0 = segment[i])[0], p0[1]);
        stream.lineEnd();
        return;
    }
    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
});
if (!subject.length)
    return;
clip.sort(compareIntersection);
link$1(subject);
link$1(clip);
for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
}
start = subject[0];
while (1) {
    current = start;
    isSubject = true;
    while (current.v)
        if ((current = current.n) === start)
        return;
    points = current.z;
    stream.lineStart();
    do {
        current.v = current.o.v = true;
        if (current.e) {
            if (isSubject) {
                for (i = 0, n = points.length; i < n; ++i)
                    stream.point((point = points[i])[0], point[1]);
            } else {
                interpolate(current.x, current.n.x, 1, stream);
            }
            current = current.n;
        } else {
            if (isSubject) {
                points = current.p.z;
                for (i = points.length - 1; i >= 0; --i)
                    stream.point((point = points[i])[0], point[1]);
            } else {
                interpolate(current.x, current.p.x, -1, stream);
            }
            current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
}});
    link$1 = ($__.fs.link$1_760 = function link$1(array) {
var vvv_return, vvv_switch, n, i, a, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!(n = array.length))
    return;
i = 0;
a = array[0];
while (++i < n) {
    a.n = b = array[i];
    b.p = a;
    a = b;
}
a.n = b = array[0];
b.p = a;});
    clipExtent = ($__.fs.clipExtent_761 = function clipExtent(x0, y0, x1, y1) {
var vvv_return, vvv_switch, visible, interpolate, corner, compareIntersection, comparePoint;
visible = function visible(x, y) {
    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
};
interpolate = function interpolate(from, to, direction, stream) {
    var a = 0, a1 = 0;
    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
        do
            stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
        while ((a = (a + direction + 4) % 4) !== a1);
    } else {
        stream.point(to[0], to[1]);
    }
};
corner = function corner(p, direction) {
    return abs(p[0] - x0) < epsilon$4 ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon$4 ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon$4 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
};
compareIntersection = function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
};
comparePoint = function comparePoint(a, b) {
    var ca = corner(a, 1), cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x0 = arguments[0], y0 = arguments[1], x1 = arguments[2], y1 = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (stream) {
    var activeStream = stream, bufferStream = clipBuffer(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
    var clipStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: polygonStart,
        polygonEnd: polygonEnd
    };
    function point(x, y) {
        if (visible(x, y))
            activeStream.point(x, y);
    }
    function polygonInside() {
        var winding = 0;
        for (var i = 0, n = polygon.length; i < n; ++i) {
            for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
                a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
                if (a1 <= y1) {
                    if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0))
                        ++winding;
                } else {
                    if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0))
                        --winding;
                }
            }
        }
        return winding;
    }
    function polygonStart() {
        activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }
    function polygonEnd() {
        var startInside = polygonInside(), cleanInside = clean && startInside, visible = (segments = merge(segments)).length;
        if (cleanInside || visible) {
            stream.polygonStart();
            if (cleanInside) {
                stream.lineStart();
                interpolate(null, null, 1, stream);
                stream.lineEnd();
            }
            if (visible) {
                clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
            }
            stream.polygonEnd();
        }
        activeStream = stream, segments = polygon = ring = null;
    }
    function lineStart() {
        clipStream.point = linePoint;
        if (polygon)
            polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
    }
    function lineEnd() {
        if (segments) {
            linePoint(x__, y__);
            if (v__ && v_)
                bufferStream.rejoin();
            segments.push(bufferStream.result());
        }
        clipStream.point = point;
        if (v_)
            activeStream.lineEnd();
    }
    function linePoint(x, y) {
        var v = visible(x, y);
        if (polygon)
            ring.push([
            x,
            y
        ]);
        if (first) {
            x__ = x, y__ = y, v__ = v;
            first = false;
            if (v) {
                activeStream.lineStart();
                activeStream.point(x, y);
            }
        } else {
            if (v && v_)
                activeStream.point(x, y);
            else {
                var a = [
                        x_ = Math.max(clipMin, Math.min(clipMax, x_)),
                        y_ = Math.max(clipMin, Math.min(clipMax, y_))
                    ], b = [
                        x = Math.max(clipMin, Math.min(clipMax, x)),
                        y = Math.max(clipMin, Math.min(clipMax, y))
                    ];
                if (clipLine(a, b, x0, y0, x1, y1)) {
                    if (!v_) {
                        activeStream.lineStart();
                        activeStream.point(a[0], a[1]);
                    }
                    activeStream.point(b[0], b[1]);
                    if (!v)
                        activeStream.lineEnd();
                    clean = false;
                } else if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                    clean = false;
                }
            }
        }
        x_ = x, y_ = y, v_ = v;
    }
    return clipStream;
};});
    extent$1 = ($__.fs.extent$1_762 = function extent$1() {
var vvv_return, vvv_switch, x0, y0, x1, y1, cache, cacheStream, clip;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x0 = 0;
y0 = 0;
x1 = 960;
y1 = 500;
return clip = {
    stream: function (stream) {
        return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
    },
    extent: function (_) {
        return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    }
};});
    lengthLineStart = ($__.fs.lengthLineStart_763 = function lengthLineStart() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lengthStream.point = lengthPointFirst;
lengthStream.lineEnd = lengthLineEnd;});
    lengthLineEnd = ($__.fs.lengthLineEnd_764 = function lengthLineEnd() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lengthStream.point = lengthStream.lineEnd = noop$2;});
    lengthPointFirst = ($__.fs.lengthPointFirst_765 = function lengthPointFirst(lambda, phi) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda *= radians, phi *= radians;
lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
lengthStream.point = lengthPoint;});
    lengthPoint = ($__.fs.lengthPoint_766 = function lengthPoint(lambda, phi) {
var vvv_return, vvv_switch, sinPhi, cosPhi, delta, cosDelta, sinDelta, x, y, z;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda *= radians, phi *= radians;
sinPhi = sin$1(phi);
cosPhi = cos$1(phi);
delta = abs(lambda - lambda0$2);
cosDelta = cos$1(delta);
sinDelta = sin$1(delta);
x = cosPhi * sinDelta;
y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta;
z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
lengthSum.add(atan2(sqrt$1(x * x + y * y), z));
lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;});
    length$2 = ($__.fs.length$2_767 = function length$2(object) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lengthSum.reset();
geoStream(object, lengthStream);
return +lengthSum;});
    distance = ($__.fs.distance_768 = function distance(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
coordinates[0] = a;
coordinates[1] = b;
return length$2(object$1);});
    graticuleX = ($__.fs.graticuleX_769 = function graticuleX(y0, y1, dy) {
var vvv_return, vvv_switch, y;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y0 = arguments[0], y1 = arguments[1], dy = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
y = range(y0, y1 - epsilon$4, dy).concat(y1);
return function (x) {
    return y.map(function (y) {
        return [
            x,
            y
        ];
    });
};});
    graticuleY = ($__.fs.graticuleY_770 = function graticuleY(x0, x1, dx) {
var vvv_return, vvv_switch, x;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x0 = arguments[0], x1 = arguments[1], dx = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = range(x0, x1 - epsilon$4, dx).concat(x1);
return function (y) {
    return x.map(function (x) {
        return [
            x,
            y
        ];
    });
};});
    graticule = ($__.fs.graticule_771 = function graticule() {
var vvv_return, vvv_switch, x1, x0, X1, X0, y1, y0, Y1, Y0, dx, dy, DX, DY, x, y, X, Y, precision, graticule, lines;
graticule = function graticule() {
    return {
        type: 'MultiLineString',
        coordinates: lines()
    };
};
lines = function lines() {
    return range(ceil(X0 / DX) * DX, X1, DX).map(X).concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
        return abs(x % DX) > epsilon$4;
    }).map(x)).concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
        return abs(y % DY) > epsilon$4;
    }).map(y));
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dx = 10;
dy = dx;
DX = 90;
DY = 360;
precision = 2.5;
graticule.lines = function () {
    return lines().map(function (coordinates) {
        return {
            type: 'LineString',
            coordinates: coordinates
        };
    });
};
graticule.outline = function () {
    return {
        type: 'Polygon',
        coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
    };
};
graticule.extent = function (_) {
    if (!arguments.length)
        return graticule.extentMinor();
    return graticule.extentMajor(_).extentMinor(_);
};
graticule.extentMajor = function (_) {
    if (!arguments.length)
        return [
        [
            X0,
            Y0
        ],
        [
            X1,
            Y1
        ]
    ];
    X0 = +_[0][0], X1 = +_[1][0];
    Y0 = +_[0][1], Y1 = +_[1][1];
    if (X0 > X1)
        _ = X0, X0 = X1, X1 = _;
    if (Y0 > Y1)
        _ = Y0, Y0 = Y1, Y1 = _;
    return graticule.precision(precision);
};
graticule.extentMinor = function (_) {
    if (!arguments.length)
        return [
        [
            x0,
            y0
        ],
        [
            x1,
            y1
        ]
    ];
    x0 = +_[0][0], x1 = +_[1][0];
    y0 = +_[0][1], y1 = +_[1][1];
    if (x0 > x1)
        _ = x0, x0 = x1, x1 = _;
    if (y0 > y1)
        _ = y0, y0 = y1, y1 = _;
    return graticule.precision(precision);
};
graticule.step = function (_) {
    if (!arguments.length)
        return graticule.stepMinor();
    return graticule.stepMajor(_).stepMinor(_);
};
graticule.stepMajor = function (_) {
    if (!arguments.length)
        return [
        DX,
        DY
    ];
    DX = +_[0], DY = +_[1];
    return graticule;
};
graticule.stepMinor = function (_) {
    if (!arguments.length)
        return [
        dx,
        dy
    ];
    dx = +_[0], dy = +_[1];
    return graticule;
};
graticule.precision = function (_) {
    if (!arguments.length)
        return precision;
    precision = +_;
    x = graticuleX(y0, y1, 90);
    y = graticuleY(x0, x1, precision);
    X = graticuleX(Y0, Y1, 90);
    Y = graticuleY(X0, X1, precision);
    return graticule;
};
return graticule.extentMajor([
    [
        -180,
        -90 + epsilon$4
    ],
    [
        180,
        90 - epsilon$4
    ]
]).extentMinor([
    [
        -180,
        -80 - epsilon$4
    ],
    [
        180,
        80 + epsilon$4
    ]
]);});
    interpolate$2 = ($__.fs.interpolate$2_772 = function interpolate$2(a, b) {
var vvv_return, vvv_switch, x0, y0, x1, y1, cy0, sy0, cy1, sy1, kx0, ky0, kx1, ky1, d, k, interpolate;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x0 = a[0] * radians;
y0 = a[1] * radians;
x1 = b[0] * radians;
y1 = b[1] * radians;
cy0 = cos$1(y0);
sy0 = sin$1(y0);
cy1 = cos$1(y1);
sy1 = sin$1(y1);
kx0 = cy0 * cos$1(x0);
ky0 = cy0 * sin$1(x0);
kx1 = cy1 * cos$1(x1);
ky1 = cy1 * sin$1(x1);
d = 2 * asin$1(sqrt$1(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0)));
k = sin$1(d);
interpolate = d ? function (t) {
    var B = sin$1(t *= d) / k, A = sin$1(d - t) / k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
    return [
        atan2(y, x) * degrees$1,
        atan2(z, sqrt$1(x * x + y * y)) * degrees$1
    ];
} : function () {
    return [
        x0 * degrees$1,
        y0 * degrees$1
    ];
};
interpolate.distance = d;
return interpolate;});
    identity$7 = ($__.fs.identity$7_773 = function identity$7(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x;});
    areaRingStart$1 = ($__.fs.areaRingStart$1_774 = function areaRingStart$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaStream$1.point = areaPointFirst$1;});
    areaPointFirst$1 = ($__.fs.areaPointFirst$1_775 = function areaPointFirst$1(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaStream$1.point = areaPoint$1;
x00 = x0$1 = x, y00 = y0$1 = y;});
    areaPoint$1 = ($__.fs.areaPoint$1_776 = function areaPoint$1(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaRingSum$1.add(y0$1 * x - x0$1 * y);
x0$1 = x, y0$1 = y;});
    areaRingEnd$1 = ($__.fs.areaRingEnd$1_777 = function areaRingEnd$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaPoint$1(x00, y00);});
    boundsPoint$1 = ($__.fs.boundsPoint$1_778 = function boundsPoint$1(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (x < x0$2)
    x0$2 = x;
if (x > x1)
    x1 = x;
if (y < y0$2)
    y0$2 = y;
if (y > y1)
    y1 = y;});
    centroidPoint$1 = ($__.fs.centroidPoint$1_779 = function centroidPoint$1(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
X0$1 += x;
Y0$1 += y;
++Z0$1;});
    centroidLineStart$1 = ($__.fs.centroidLineStart$1_780 = function centroidLineStart$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream$1.point = centroidPointFirstLine;});
    centroidPointFirstLine = ($__.fs.centroidPointFirstLine_781 = function centroidPointFirstLine(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream$1.point = centroidPointLine;
centroidPoint$1(x0$3 = x, y0$3 = y);});
    centroidPointLine = ($__.fs.centroidPointLine_782 = function centroidPointLine(x, y) {
var vvv_return, vvv_switch, dx, dy, z;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dx = x - x0$3;
dy = y - y0$3;
z = sqrt$1(dx * dx + dy * dy);
X1$1 += z * (x0$3 + x) / 2;
Y1$1 += z * (y0$3 + y) / 2;
Z1$1 += z;
centroidPoint$1(x0$3 = x, y0$3 = y);});
    centroidLineEnd$1 = ($__.fs.centroidLineEnd$1_783 = function centroidLineEnd$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream$1.point = centroidPoint$1;});
    centroidRingStart$1 = ($__.fs.centroidRingStart$1_784 = function centroidRingStart$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream$1.point = centroidPointFirstRing;});
    centroidRingEnd$1 = ($__.fs.centroidRingEnd$1_785 = function centroidRingEnd$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidPointRing(x00$1, y00$1);});
    centroidPointFirstRing = ($__.fs.centroidPointFirstRing_786 = function centroidPointFirstRing(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream$1.point = centroidPointRing;
centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);});
    centroidPointRing = ($__.fs.centroidPointRing_787 = function centroidPointRing(x, y) {
var vvv_return, vvv_switch, dx, dy, z;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dx = x - x0$3;
dy = y - y0$3;
z = sqrt$1(dx * dx + dy * dy);
X1$1 += z * (x0$3 + x) / 2;
Y1$1 += z * (y0$3 + y) / 2;
Z1$1 += z;
z = y0$3 * x - x0$3 * y;
X2$1 += z * (x0$3 + x);
Y2$1 += z * (y0$3 + y);
Z2$1 += z * 3;
centroidPoint$1(x0$3 = x, y0$3 = y);});
    PathContext = ($__.fs.PathContext_788 = function PathContext(context) {
var vvv_return, vvv_switch, pointRadius, stream, point, pointLineStart, pointLine, lineEnd, lineEndPolygon;
point = function point(x, y) {
    context.moveTo(x + pointRadius, y);
    context.arc(x, y, pointRadius, 0, tau$4);
};
pointLineStart = function pointLineStart(x, y) {
    context.moveTo(x, y);
    stream.point = pointLine;
};
pointLine = function pointLine(x, y) {
    context.lineTo(x, y);
};
lineEnd = function lineEnd() {
    stream.point = point;
};
lineEndPolygon = function lineEndPolygon() {
    context.closePath();
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
pointRadius = 4.5;
stream = {
    point: point,
    lineStart: function () {
        stream.point = pointLineStart;
    },
    lineEnd: lineEnd,
    polygonStart: function () {
        stream.lineEnd = lineEndPolygon;
    },
    polygonEnd: function () {
        stream.lineEnd = lineEnd;
        stream.point = point;
    },
    pointRadius: function (_) {
        pointRadius = _;
        return stream;
    },
    result: noop$2
};
return stream;});
    PathString = ($__.fs.PathString_789 = function PathString() {
var vvv_return, vvv_switch, pointCircle, string, stream, point, pointLineStart, pointLine, lineStart, lineEnd, lineEndPolygon;
point = function point(x, y) {
    string.push('M', x, ',', y, pointCircle);
};
pointLineStart = function pointLineStart(x, y) {
    string.push('M', x, ',', y);
    stream.point = pointLine;
};
pointLine = function pointLine(x, y) {
    string.push('L', x, ',', y);
};
lineStart = function lineStart() {
    stream.point = pointLineStart;
};
lineEnd = function lineEnd() {
    stream.point = point;
};
lineEndPolygon = function lineEndPolygon() {
    string.push('Z');
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
pointCircle = circle$2(4.5);
string = [];
stream = {
    point: point,
    lineStart: lineStart,
    lineEnd: lineEnd,
    polygonStart: function () {
        stream.lineEnd = lineEndPolygon;
    },
    polygonEnd: function () {
        stream.lineEnd = lineEnd;
        stream.point = point;
    },
    pointRadius: function (_) {
        pointCircle = circle$2(_);
        return stream;
    },
    result: function () {
        if (string.length) {
            var result = string.join('');
            string = [];
            return result;
        }
    }
};
return stream;});
    circle$2 = ($__.fs.circle$2_790 = function circle$2(radius) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
radius = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 'm0,' + radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + -2 * radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + 2 * radius + 'z';});
    index$3 = ($__.fs.index$3_791 = function index$3() {
var vvv_return, vvv_switch, pointRadius, projection, projectionStream, context, contextStream, path;
path = function path(object) {
    if (object) {
        if (typeof pointRadius === 'function')
            contextStream.pointRadius(+pointRadius.apply(this, arguments));
        geoStream(object, projectionStream(contextStream));
    }
    return contextStream.result();
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
pointRadius = 4.5;
path.area = function (object) {
    geoStream(object, projectionStream(areaStream$1));
    return areaStream$1.result();
};
path.bounds = function (object) {
    geoStream(object, projectionStream(boundsStream$1));
    return boundsStream$1.result();
};
path.centroid = function (object) {
    geoStream(object, projectionStream(centroidStream$1));
    return centroidStream$1.result();
};
path.projection = function (_) {
    return arguments.length ? (projectionStream = (projection = _) == null ? identity$7 : _.stream, path) : projection;
};
path.context = function (_) {
    if (!arguments.length)
        return context;
    contextStream = (context = _) == null ? new PathString() : new PathContext(_);
    if (typeof pointRadius !== 'function')
        contextStream.pointRadius(pointRadius);
    return path;
};
path.pointRadius = function (_) {
    if (!arguments.length)
        return pointRadius;
    pointRadius = typeof _ === 'function' ? _ : (contextStream.pointRadius(+_), +_);
    return path;
};
return path.projection(null).context(null);});
    polygonContains = ($__.fs.polygonContains_792 = function polygonContains(polygon, point) {
var vvv_return, vvv_switch, lambda, phi, normal, angle, winding, ring, m, point0, lambda0, phi0, sinPhi0, cosPhi0, point1, lambda1, phi1, sinPhi1, cosPhi1, delta, sign, absDelta, antimeridian, k, arc, intersection, phiArc;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
polygon = arguments[0], point = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda = point[0];
phi = point[1];
normal = [
    sin$1(lambda),
    -cos$1(lambda),
    0
];
angle = 0;
winding = 0;
sum$2.reset();
for (var i = 0, n = polygon.length; i < n; ++i) {
    if (!(m = (ring = polygon[i]).length))
        continue;
    point0 = ring[m - 1];
    lambda0 = point0[0];
    phi0 = point0[1] / 2 + quarterPi;
    sinPhi0 = sin$1(phi0);
    cosPhi0 = cos$1(phi0);
    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
        point1 = ring[j];
        lambda1 = point1[0];
        phi1 = point1[1] / 2 + quarterPi;
        sinPhi1 = sin$1(phi1);
        cosPhi1 = cos$1(phi1);
        delta = lambda1 - lambda0;
        sign = delta >= 0 ? 1 : -1;
        absDelta = sign * delta;
        antimeridian = absDelta > pi$4;
        k = sinPhi0 * sinPhi1;
        sum$2.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
        angle += antimeridian ? delta + sign * tau$4 : delta;
        if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
            arc = cartesianCross(cartesian(point0), cartesian(point1));
            cartesianNormalizeInPlace(arc);
            intersection = cartesianCross(normal, arc);
            cartesianNormalizeInPlace(intersection);
            phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin$1(intersection[2]);
            if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
                winding += antimeridian ^ delta >= 0 ? 1 : -1;
            }
        }
    }
}
return (angle < -epsilon$4 || angle < epsilon$4 && sum$2 < -epsilon$4) ^ winding & 1;});
    clip = ($__.fs.clip_793 = function clip(pointVisible, clipLine, interpolate, start) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pointVisible = arguments[0], clipLine = arguments[1], interpolate = arguments[2], start = arguments[3];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_2699_1510 = function J$__v2246113107_2699(rotate, sink) {
var vvv_return, vvv_switch, line, rotatedStart, ringBuffer, ringSink, polygonStarted, polygon, segments, ring, clip, point, pointLine, lineStart, lineEnd, pointRing, ringStart, ringEnd;
point = function point(lambda, phi) {
    var point = rotate(lambda, phi);
    if (pointVisible(lambda = point[0], phi = point[1]))
        sink.point(lambda, phi);
};
pointLine = function pointLine(lambda, phi) {
    var point = rotate(lambda, phi);
    line.point(point[0], point[1]);
};
lineStart = function lineStart() {
    clip.point = pointLine;
    line.lineStart();
};
lineEnd = function lineEnd() {
    clip.point = point;
    line.lineEnd();
};
pointRing = function pointRing(lambda, phi) {
    ring.push([
        lambda,
        phi
    ]);
    var point = rotate(lambda, phi);
    ringSink.point(point[0], point[1]);
};
ringStart = function ringStart() {
    ringSink.lineStart();
    ring = [];
};
ringEnd = function ringEnd() {
    pointRing(ring[0][0], ring[0][1]);
    ringSink.lineEnd();
    var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point;
    ring.pop();
    polygon.push(ring);
    ring = null;
    if (!n)
        return;
    if (clean & 1) {
        segment = ringSegments[0];
        if ((m = segment.length - 1) > 0) {
            if (!polygonStarted)
                sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            for (i = 0; i < m; ++i)
                sink.point((point = segment[i])[0], point[1]);
            sink.lineEnd();
        }
        return;
    }
    if (n > 1 && clean & 2)
        ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
    segments.push(ringSegments.filter(validSegment));
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rotate = arguments[0], sink = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
line = clipLine(sink);
rotatedStart = rotate.invert(start[0], start[1]);
ringBuffer = clipBuffer();
ringSink = clipLine(ringBuffer);
polygonStarted = false;
clip = {
    point: point,
    lineStart: lineStart,
    lineEnd: lineEnd,
    polygonStart: function () {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
    },
    polygonEnd: function () {
        clip.point = point;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge(segments);
        var startInside = polygonContains(polygon, rotatedStart);
        if (segments.length) {
            if (!polygonStarted)
                sink.polygonStart(), polygonStarted = true;
            clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
            if (!polygonStarted)
                sink.polygonStart(), polygonStarted = true;
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
        }
        if (polygonStarted)
            sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
    },
    sphere: function () {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
    }
};
return clip;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (rotate, sink) {
    var line = clipLine(sink), rotatedStart = rotate.invert(start[0], start[1]), ringBuffer = clipBuffer(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
    var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
            clip.point = pointRing;
            clip.lineStart = ringStart;
            clip.lineEnd = ringEnd;
            segments = [];
            polygon = [];
        },
        polygonEnd: function () {
            clip.point = point;
            clip.lineStart = lineStart;
            clip.lineEnd = lineEnd;
            segments = merge(segments);
            var startInside = polygonContains(polygon, rotatedStart);
            if (segments.length) {
                if (!polygonStarted)
                    sink.polygonStart(), polygonStarted = true;
                clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
            } else if (startInside) {
                if (!polygonStarted)
                    sink.polygonStart(), polygonStarted = true;
                sink.lineStart();
                interpolate(null, null, 1, sink);
                sink.lineEnd();
            }
            if (polygonStarted)
                sink.polygonEnd(), polygonStarted = false;
            segments = polygon = null;
        },
        sphere: function () {
            sink.polygonStart();
            sink.lineStart();
            interpolate(null, null, 1, sink);
            sink.lineEnd();
            sink.polygonEnd();
        }
    };
    function point(lambda, phi) {
        var point = rotate(lambda, phi);
        if (pointVisible(lambda = point[0], phi = point[1]))
            sink.point(lambda, phi);
    }
    function pointLine(lambda, phi) {
        var point = rotate(lambda, phi);
        line.point(point[0], point[1]);
    }
    function lineStart() {
        clip.point = pointLine;
        line.lineStart();
    }
    function lineEnd() {
        clip.point = point;
        line.lineEnd();
    }
    function pointRing(lambda, phi) {
        ring.push([
            lambda,
            phi
        ]);
        var point = rotate(lambda, phi);
        ringSink.point(point[0], point[1]);
    }
    function ringStart() {
        ringSink.lineStart();
        ring = [];
    }
    function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringSink.lineEnd();
        var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n)
            return;
        if (clean & 1) {
            segment = ringSegments[0];
            if ((m = segment.length - 1) > 0) {
                if (!polygonStarted)
                    sink.polygonStart(), polygonStarted = true;
                sink.lineStart();
                for (i = 0; i < m; ++i)
                    sink.point((point = segment[i])[0], point[1]);
                sink.lineEnd();
            }
            return;
        }
        if (n > 1 && clean & 2)
            ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(validSegment));
    }
    return clip;
};});
    validSegment = ($__.fs.validSegment_794 = function validSegment(segment) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
segment = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return segment.length > 1;});
    compareIntersection = ($__.fs.compareIntersection_795 = function compareIntersection(a, b) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], b = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((a = a.x)[0] < 0 ? a[1] - halfPi$3 - epsilon$4 : halfPi$3 - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi$3 - epsilon$4 : halfPi$3 - b[1]);});
    clipAntimeridianLine = ($__.fs.clipAntimeridianLine_796 = function clipAntimeridianLine(stream) {
var vvv_return, vvv_switch, lambda0, phi0, sign0, clean;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
stream = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lambda0 = NaN;
phi0 = NaN;
sign0 = NaN;
return {
    lineStart: function () {
        stream.lineStart();
        clean = 1;
    },
    point: function (lambda1, phi1) {
        var sign1 = lambda1 > 0 ? pi$4 : -pi$4, delta = abs(lambda1 - lambda0);
        if (abs(delta - pi$4) < epsilon$4) {
            stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$3 : -halfPi$3);
            stream.point(sign0, phi0);
            stream.lineEnd();
            stream.lineStart();
            stream.point(sign1, phi0);
            stream.point(lambda1, phi0);
            clean = 0;
        } else if (sign0 !== sign1 && delta >= pi$4) {
            if (abs(lambda0 - sign0) < epsilon$4)
                lambda0 -= sign0 * epsilon$4;
            if (abs(lambda1 - sign1) < epsilon$4)
                lambda1 -= sign1 * epsilon$4;
            phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
            stream.point(sign0, phi0);
            stream.lineEnd();
            stream.lineStart();
            stream.point(sign1, phi0);
            clean = 0;
        }
        stream.point(lambda0 = lambda1, phi0 = phi1);
        sign0 = sign1;
    },
    lineEnd: function () {
        stream.lineEnd();
        lambda0 = phi0 = NaN;
    },
    clean: function () {
        return 2 - clean;
    }
};});
    clipAntimeridianIntersect = ($__.fs.clipAntimeridianIntersect_797 = function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
var vvv_return, vvv_switch, cosPhi0, cosPhi1, sinLambda0Lambda1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda0 = arguments[0], phi0 = arguments[1], lambda1 = arguments[2], phi1 = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
return abs(sinLambda0Lambda1) > epsilon$4 ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1) - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;});
    clipAntimeridianInterpolate = ($__.fs.clipAntimeridianInterpolate_798 = function clipAntimeridianInterpolate(from, to, direction, stream) {
var vvv_return, vvv_switch, phi, lambda;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
from = arguments[0], to = arguments[1], direction = arguments[2], stream = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (from == null) {
    phi = direction * halfPi$3;
    stream.point(-pi$4, phi);
    stream.point(0, phi);
    stream.point(pi$4, phi);
    stream.point(pi$4, 0);
    stream.point(pi$4, -phi);
    stream.point(0, -phi);
    stream.point(-pi$4, -phi);
    stream.point(-pi$4, 0);
    stream.point(-pi$4, phi);
} else if (abs(from[0] - to[0]) > epsilon$4) {
    lambda = from[0] < to[0] ? pi$4 : -pi$4;
    phi = direction * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
} else {
    stream.point(to[0], to[1]);
}});
    clipCircle = ($__.fs.clipCircle_799 = function clipCircle(radius, delta) {
var vvv_return, vvv_switch, cr, smallRadius, notHemisphere, interpolate, visible, clipLine, intersect, code;
interpolate = function interpolate(from, to, direction, stream) {
    circleStream(stream, radius, delta, direction, from, to);
};
visible = function visible(lambda, phi) {
    return cos$1(lambda) * cos$1(phi) > cr;
};
clipLine = function clipLine(stream) {
    var point0, c0, v0, v00, clean;
    return {
        lineStart: function () {
            v00 = v0 = false;
            clean = 1;
        },
        point: function (lambda, phi) {
            var point1 = [
                    lambda,
                    phi
                ], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi$4 : -pi$4), phi) : 0;
            if (!point0 && (v00 = v0 = v))
                stream.lineStart();
            if (v !== v0) {
                point2 = intersect(point0, point1);
                if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
                    point1[0] += epsilon$4;
                    point1[1] += epsilon$4;
                    v = visible(point1[0], point1[1]);
                }
            }
            if (v !== v0) {
                clean = 0;
                if (v) {
                    stream.lineStart();
                    point2 = intersect(point1, point0);
                    stream.point(point2[0], point2[1]);
                } else {
                    point2 = intersect(point0, point1);
                    stream.point(point2[0], point2[1]);
                    stream.lineEnd();
                }
                point0 = point2;
            } else if (notHemisphere && point0 && smallRadius ^ v) {
                var t;
                if (!(c & c0) && (t = intersect(point1, point0, true))) {
                    clean = 0;
                    if (smallRadius) {
                        stream.lineStart();
                        stream.point(t[0][0], t[0][1]);
                        stream.point(t[1][0], t[1][1]);
                        stream.lineEnd();
                    } else {
                        stream.point(t[1][0], t[1][1]);
                        stream.lineEnd();
                        stream.lineStart();
                        stream.point(t[0][0], t[0][1]);
                    }
                }
            }
            if (v && (!point0 || !pointEqual(point0, point1))) {
                stream.point(point1[0], point1[1]);
            }
            point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function () {
            if (v0)
                stream.lineEnd();
            point0 = null;
        },
        clean: function () {
            return clean | (v00 && v0) << 1;
        }
    };
};
intersect = function intersect(a, b, two) {
    var pa = cartesian(a), pb = cartesian(b);
    var n1 = [
            1,
            0,
            0
        ], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
    if (!determinant)
        return !two && a;
    var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A = cartesianScale(n1, c1), B = cartesianScale(n2, c2);
    cartesianAddInPlace(A, B);
    var u = n1xn2, w = cartesianDot(A, u), uu = cartesianDot(u, u), t2 = w * w - uu * (cartesianDot(A, A) - 1);
    if (t2 < 0)
        return;
    var t = sqrt$1(t2), q = cartesianScale(u, (-w - t) / uu);
    cartesianAddInPlace(q, A);
    q = spherical(q);
    if (!two)
        return q;
    var lambda0 = a[0], lambda1 = b[0], phi0 = a[1], phi1 = b[1], z;
    if (lambda1 < lambda0)
        z = lambda0, lambda0 = lambda1, lambda1 = z;
    var delta = lambda1 - lambda0, polar = abs(delta - pi$4) < epsilon$4, meridian = polar || delta < epsilon$4;
    if (!polar && phi1 < phi0)
        z = phi0, phi0 = phi1, phi1 = z;
    if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$4 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi$4 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
        var q1 = cartesianScale(u, (-w + t) / uu);
        cartesianAddInPlace(q1, A);
        return [
            q,
            spherical(q1)
        ];
    }
};
code = function code(lambda, phi) {
    var r = smallRadius ? radius : pi$4 - radius, code = 0;
    if (lambda < -r)
        code |= 1;
    else if (lambda > r)
        code |= 2;
    if (phi < -r)
        code |= 4;
    else if (phi > r)
        code |= 8;
    return code;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
radius = arguments[0], delta = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cr = cos$1(radius);
smallRadius = cr > 0;
notHemisphere = abs(cr) > epsilon$4;
return clip(visible, clipLine, interpolate, smallRadius ? [
    0,
    -radius
] : [
    -pi$4,
    radius - pi$4
]);});
    transform$1 = ($__.fs.transform$1_800 = function transform$1(prototype) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
prototype = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return {
    stream: transform$2(prototype)
};});
    transform$2 = ($__.fs.transform$2_801 = function transform$2(prototype) {
var vvv_return, vvv_switch, vvv_tmp0, T, p, k;
T = function T() {
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
prototype = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    T = ($__.fs.T_1518 = function T() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');});
    p = T.prototype = Object['create']((Transform$1.prototype, $__.os.oid109));
    vvv_tmp0 = prototype;
    'point' in vvv_tmp0;
    k = 'point';
    p[k, 'point'] = TAJS_restrictToType((prototype, $__.os.oid110)[k, 'point'], 'function');
    return ($__.fs.J$__v2246113107_2734_1519 = function J$__v2246113107_2734(stream) {
var vvv_return, vvv_switch, t;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
stream = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t = new T();
t.stream = stream;
return t;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
p = T.prototype = Object.create(Transform$1.prototype);
for (var k in prototype)
    p[k] = prototype[k];
return function (stream) {
    var t = new T();
    t.stream = stream;
    return t;
};});
    Transform$1 = ($__.fs.Transform$1_802 = function Transform$1() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');});
    fit = ($__.fs.fit_803 = function fit(project, extent, object) {
var vvv_return, vvv_switch, w, h, clip, b, k, x, y;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
project = arguments[0], extent = arguments[1], object = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
w = extent[1][0] - extent[0][0];
h = extent[1][1] - extent[0][1];
clip = project.clipExtent && project.clipExtent();
project.scale(150).translate([
    0,
    0
]);
if (clip != null)
    project.clipExtent(null);
geoStream(object, project.stream(boundsStream$1));
b = boundsStream$1.result();
k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1]));
x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2;
y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
if (clip != null)
    project.clipExtent(clip);
return project.scale(k * 150).translate([
    x,
    y
]);});
    fitSize = ($__.fs.fitSize_804 = function fitSize(project) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
project = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (size, object) {
    return fit(project, [
        [
            0,
            0
        ],
        size
    ], object);
};});
    fitExtent = ($__.fs.fitExtent_805 = function fitExtent(project) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
project = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (extent, object) {
    return fit(project, extent, object);
};});
    resample = ($__.fs.resample_806 = function resample(project, delta2) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
project = arguments[0], delta2 = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return +delta2 ? resample$1(project, delta2) : resampleNone(project);});
    resampleNone = ($__.fs.resampleNone_807 = function resampleNone(project) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
project = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return transform$2({
    point: function (x, y) {
        x = project(x, y);
        this.stream.point(x[0], x[1]);
    }
});});
    resample$1 = ($__.fs.resample$1_808 = function resample$1(project, delta2) {
var vvv_return, vvv_switch, resampleLineTo;
resampleLineTo = function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
    var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = sqrt$1(a * a + b * b + c * c), phi2 = asin$1(c /= m), lambda2 = abs(abs(c) - 1) < epsilon$4 || abs(lambda0 - lambda1) < epsilon$4 ? (lambda0 + lambda1) / 2 : atan2(b, a), p = project(lambda2, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > delta2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
            stream.point(x2, y2);
            resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
        }
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
project = arguments[0], delta2 = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (stream) {
    var lambda00, x00, y00, a00, b00, c00, lambda0, x0, y0, a0, b0, c0;
    var resampleStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
            stream.polygonStart();
            resampleStream.lineStart = ringStart;
        },
        polygonEnd: function () {
            stream.polygonEnd();
            resampleStream.lineStart = lineStart;
        }
    };
    function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
    }
    function lineStart() {
        x0 = NaN;
        resampleStream.point = linePoint;
        stream.lineStart();
    }
    function linePoint(lambda, phi) {
        var c = cartesian([
                lambda,
                phi
            ]), p = project(lambda, phi);
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
    }
    function lineEnd() {
        resampleStream.point = point;
        stream.lineEnd();
    }
    function ringStart() {
        lineStart();
        resampleStream.point = ringPoint;
        resampleStream.lineEnd = ringEnd;
    }
    function ringPoint(lambda, phi) {
        linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resampleStream.point = linePoint;
    }
    function ringEnd() {
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
        resampleStream.lineEnd = lineEnd;
        lineEnd();
    }
    return resampleStream;
};});
    projection = ($__.fs.projection_809 = function projection(project) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
project = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return projectionMutator(function () {
    return project;
})();});
    projectionMutator = ($__.fs.projectionMutator_810 = function projectionMutator(projectAt) {
var vvv_return, vvv_switch, project, k, x, y, dx, dy, lambda, phi, deltaLambda, deltaPhi, deltaGamma, rotate, projectRotate, theta, preclip, x0, y0, x1, y1, postclip, delta2, projectResample, cache, cacheStream, projection, invert, projectTransform, recenter, reset;
projection = function projection(point) {
    point = projectRotate(point[0] * radians, point[1] * radians);
    return [
        point[0] * k + dx,
        dy - point[1] * k
    ];
};
invert = function invert(point) {
    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
    return point && [
        point[0] * degrees$1,
        point[1] * degrees$1
    ];
};
projectTransform = function projectTransform(x, y) {
    return x = project(x, y), [
        x[0] * k + dx,
        dy - x[1] * k
    ];
};
recenter = function recenter() {
    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
    var center = project(lambda, phi);
    dx = x - center[0] * k;
    dy = y + center[1] * k;
    return reset();
};
reset = function reset() {
    cache = cacheStream = null;
    return projection;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
projectAt = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
k = 150;
x = 480;
y = 250;
lambda = 0;
phi = 0;
deltaLambda = 0;
deltaPhi = 0;
deltaGamma = 0;
theta = null;
preclip = clipAntimeridian;
x0 = null;
postclip = identity$7;
delta2 = 0.5;
projectResample = resample(projectTransform, delta2);
projection.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
};
projection.clipAngle = function (_) {
    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
};
projection.clipExtent = function (_) {
    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$7) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
        [
            x0,
            y0
        ],
        [
            x1,
            y1
        ]
    ];
};
projection.scale = function (_) {
    return arguments.length ? (k = +_, recenter()) : k;
};
projection.translate = function (_) {
    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [
        x,
        y
    ];
};
projection.center = function (_) {
    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [
        lambda * degrees$1,
        phi * degrees$1
    ];
};
projection.rotate = function (_) {
    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [
        deltaLambda * degrees$1,
        deltaPhi * degrees$1,
        deltaGamma * degrees$1
    ];
};
projection.precision = function (_) {
    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt$1(delta2);
};
projection.fitExtent = fitExtent(projection);
projection.fitSize = fitSize(projection);
return function () {
    project = projectAt.apply(this, arguments);
    projection.invert = project.invert && invert;
    return recenter();
};});
    conicProjection = ($__.fs.conicProjection_811 = function conicProjection(projectAt) {
var vvv_return, vvv_switch, phi0, phi1, m, p;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
projectAt = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
phi0 = 0;
phi1 = pi$4 / 3;
m = projectionMutator(projectAt);
p = m(phi0, phi1);
p.parallels = function (_) {
    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [
        phi0 * degrees$1,
        phi1 * degrees$1
    ];
};
return p;});
    conicEqualAreaRaw = ($__.fs.conicEqualAreaRaw_812 = function conicEqualAreaRaw(y0, y1) {
var vvv_return, vvv_switch, sy0, n, c, r0, project;
project = function project(x, y) {
    var r = sqrt$1(c - 2 * n * sin$1(y)) / n;
    return [
        r * sin$1(x *= n),
        r0 - r * cos$1(x)
    ];
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y0 = arguments[0], y1 = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
sy0 = sin$1(y0);
n = (sy0 + sin$1(y1)) / 2;
c = 1 + sy0 * (2 * n - sy0);
r0 = sqrt$1(c) / n;
project.invert = function (x, y) {
    var r0y = r0 - y;
    return [
        atan2(x, r0y) / n,
        asin$1((c - (x * x + r0y * r0y) * n * n) / (2 * n))
    ];
};
return project;});
    conicEqualArea = ($__.fs.conicEqualArea_813 = function conicEqualArea() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return conicProjection(conicEqualAreaRaw).scale(155.424).center([
    0,
    33.6442
]);});
    albers = ($__.fs.albers_814 = function albers() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return conicEqualArea().parallels([
    29.5,
    45.5
]).scale(1070).translate([
    480,
    250
]).rotate([
    96,
    0
]).center([
    -0.6,
    38.7
]);});
    multiplex = ($__.fs.multiplex_815 = function multiplex(streams) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
streams = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = streams.length;
return {
    point: function (x, y) {
        var i = -1;
        while (++i < n)
            streams[i].point(x, y);
    },
    sphere: function () {
        var i = -1;
        while (++i < n)
            streams[i].sphere();
    },
    lineStart: function () {
        var i = -1;
        while (++i < n)
            streams[i].lineStart();
    },
    lineEnd: function () {
        var i = -1;
        while (++i < n)
            streams[i].lineEnd();
    },
    polygonStart: function () {
        var i = -1;
        while (++i < n)
            streams[i].polygonStart();
    },
    polygonEnd: function () {
        var i = -1;
        while (++i < n)
            streams[i].polygonEnd();
    }
};});
    albersUsa = ($__.fs.albersUsa_816 = function albersUsa() {
var vvv_return, vvv_switch, cache, cacheStream, lower48, lower48Point, alaska, alaskaPoint, hawaii, hawaiiPoint, point, pointStream, albersUsa;
albersUsa = function albersUsa(coordinates) {
    var x = coordinates[0], y = coordinates[1];
    return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lower48 = albers();
alaska = conicEqualArea().rotate([
    154,
    0
]).center([
    -2,
    58.5
]).parallels([
    55,
    65
]);
hawaii = conicEqualArea().rotate([
    157,
    0
]).center([
    -3,
    19.9
]).parallels([
    8,
    18
]);
pointStream = {
    point: function (x, y) {
        point = [
            x,
            y
        ];
    }
};
albersUsa.invert = function (coordinates) {
    var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
    return (y >= 0.12 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
};
albersUsa.stream = function (stream) {
    return cache && cacheStream === stream ? cache : cache = multiplex([
        lower48.stream(cacheStream = stream),
        alaska.stream(stream),
        hawaii.stream(stream)
    ]);
};
albersUsa.precision = function (_) {
    if (!arguments.length)
        return lower48.precision();
    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
    return albersUsa;
};
albersUsa.scale = function (_) {
    if (!arguments.length)
        return lower48.scale();
    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
    return albersUsa.translate(lower48.translate());
};
albersUsa.translate = function (_) {
    if (!arguments.length)
        return lower48.translate();
    var k = lower48.scale(), x = +_[0], y = +_[1];
    lower48Point = lower48.translate(_).clipExtent([
        [
            x - 0.455 * k,
            y - 0.238 * k
        ],
        [
            x + 0.455 * k,
            y + 0.238 * k
        ]
    ]).stream(pointStream);
    alaskaPoint = alaska.translate([
        x - 0.307 * k,
        y + 0.201 * k
    ]).clipExtent([
        [
            x - 0.425 * k + epsilon$4,
            y + 0.12 * k + epsilon$4
        ],
        [
            x - 0.214 * k - epsilon$4,
            y + 0.234 * k - epsilon$4
        ]
    ]).stream(pointStream);
    hawaiiPoint = hawaii.translate([
        x - 0.205 * k,
        y + 0.212 * k
    ]).clipExtent([
        [
            x - 0.214 * k + epsilon$4,
            y + 0.166 * k + epsilon$4
        ],
        [
            x - 0.115 * k - epsilon$4,
            y + 0.234 * k - epsilon$4
        ]
    ]).stream(pointStream);
    return albersUsa;
};
albersUsa.fitExtent = fitExtent(albersUsa);
albersUsa.fitSize = fitSize(albersUsa);
return albersUsa.scale(1070);});
    azimuthalRaw = ($__.fs.azimuthalRaw_817 = function azimuthalRaw(scale) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_2841_1521 = function J$__v2246113107_2841(x, y) {
var vvv_return, vvv_switch, cx, cy, k;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cx = cos$1(x);
cy = cos$1(y);
k = scale(cx * cy);
return [
    k * cy * sin$1(x),
    k * sin$1(y)
];});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return ($__.fs.J$__v2246113107_2841_1525 = function J$__v2246113107_2841(x, y) {
var vvv_return, vvv_switch, cx, cy, k;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cx = cos$1(x);
cy = cos$1(y);
k = scale(cx * cy);
return [
    k * cy * sin$1(x),
    k * sin$1(y)
];});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (x, y) {
    var cx = cos$1(x), cy = cos$1(y), k = scale(cx * cy);
    return [
        k * cy * sin$1(x),
        k * sin$1(y)
    ];
};});
    azimuthalInvert = ($__.fs.azimuthalInvert_818 = function azimuthalInvert(angle) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
angle = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v2246113107_2844_1523 = function J$__v2246113107_2844(x, y) {
var vvv_return, vvv_switch, z, c, sc, cc;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
z = sqrt$1(x * x + y * y);
c = angle(z);
sc = sin$1(c);
cc = cos$1(c);
return [
    atan2(x * sc, z * cc),
    asin$1(z && y * sc / z)
];});
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    return ($__.fs.J$__v2246113107_2844_1527 = function J$__v2246113107_2844(x, y) {
var vvv_return, vvv_switch, z, c, sc, cc;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
z = sqrt$1(x * x + y * y);
c = angle(z);
sc = sin$1(c);
cc = cos$1(c);
return [
    atan2(x * sc, z * cc),
    asin$1(z && y * sc / z)
];});
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    return ($__.fs.J$__v2246113107_2844_1529 = function J$__v2246113107_2844(x, y) {
var vvv_return, vvv_switch, z, c, sc, cc;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
z = sqrt$1(x * x + y * y);
c = angle(z);
sc = sin$1(c);
cc = cos$1(c);
return [
    atan2(x * sc, z * cc),
    asin$1(z && y * sc / z)
];});
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    return ($__.fs.J$__v2246113107_2844_1530 = function J$__v2246113107_2844(x, y) {
var vvv_return, vvv_switch, z, c, sc, cc;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
z = sqrt$1(x * x + y * y);
c = angle(z);
sc = sin$1(c);
cc = cos$1(c);
return [
    atan2(x * sc, z * cc),
    asin$1(z && y * sc / z)
];});
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    return ($__.fs.J$__v2246113107_2844_1532 = function J$__v2246113107_2844(x, y) {
var vvv_return, vvv_switch, z, c, sc, cc;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
z = sqrt$1(x * x + y * y);
c = angle(z);
sc = sin$1(c);
cc = cos$1(c);
return [
    atan2(x * sc, z * cc),
    asin$1(z && y * sc / z)
];});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (x, y) {
    var z = sqrt$1(x * x + y * y), c = angle(z), sc = sin$1(c), cc = cos$1(c);
    return [
        atan2(x * sc, z * cc),
        asin$1(z && y * sc / z)
    ];
};});
    azimuthalEqualArea = ($__.fs.azimuthalEqualArea_819 = function azimuthalEqualArea() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 0.001);});
    azimuthalEquidistant = ($__.fs.azimuthalEquidistant_820 = function azimuthalEquidistant() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 0.001);});
    mercatorRaw = ($__.fs.mercatorRaw_821 = function mercatorRaw(lambda, phi) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    lambda,
    log$1(tan((halfPi$3 + phi) / 2))
];});
    mercator = ($__.fs.mercator_822 = function mercator() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return mercatorProjection(mercatorRaw).scale(961 / tau$4);});
    mercatorProjection = ($__.fs.mercatorProjection_823 = function mercatorProjection(project) {
var vvv_return, vvv_switch, m, scale, translate, clipExtent, clipAuto;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
project = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
m = projection(project);
scale = m.scale;
translate = m.translate;
clipExtent = m.clipExtent;
m.scale = function (_) {
    return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();
};
m.translate = function (_) {
    return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();
};
m.clipExtent = function (_) {
    if (!arguments.length)
        return clipAuto ? null : clipExtent();
    if (clipAuto = _ == null) {
        var k = pi$4 * scale(), t = translate();
        _ = [
            [
                t[0] - k,
                t[1] - k
            ],
            [
                t[0] + k,
                t[1] + k
            ]
        ];
    }
    clipExtent(_);
    return m;
};
return m.clipExtent(null);});
    tany = ($__.fs.tany_824 = function tany(y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return tan((halfPi$3 + y) / 2);});
    conicConformalRaw = ($__.fs.conicConformalRaw_825 = function conicConformalRaw(y0, y1) {
var vvv_return, vvv_switch, cy0, n, f, project;
project = function project(x, y) {
    if (f > 0) {
        if (y < -halfPi$3 + epsilon$4)
            y = -halfPi$3 + epsilon$4;
    } else {
        if (y > halfPi$3 - epsilon$4)
            y = halfPi$3 - epsilon$4;
    }
    var r = f / pow$1(tany(y), n);
    return [
        r * sin$1(n * x),
        f - r * cos$1(n * x)
    ];
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y0 = arguments[0], y1 = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cy0 = cos$1(y0);
n = y0 === y1 ? sin$1(y0) : log$1(cy0 / cos$1(y1)) / log$1(tany(y1) / tany(y0));
f = cy0 * pow$1(tany(y0), n) / n;
if (!n)
    return mercatorRaw;
project.invert = function (x, y) {
    var fy = f - y, r = sign$1(n) * sqrt$1(x * x + fy * fy);
    return [
        atan2(x, fy) / n,
        2 * atan(pow$1(f / r, 1 / n)) - halfPi$3
    ];
};
return project;});
    conicConformal = ($__.fs.conicConformal_826 = function conicConformal() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return conicProjection(conicConformalRaw).scale(109.5).parallels([
    30,
    30
]);});
    equirectangularRaw = ($__.fs.equirectangularRaw_827 = function equirectangularRaw(lambda, phi) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    lambda,
    phi
];});
    equirectangular = ($__.fs.equirectangular_828 = function equirectangular() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return projection(equirectangularRaw).scale(152.63);});
    conicEquidistantRaw = ($__.fs.conicEquidistantRaw_829 = function conicEquidistantRaw(y0, y1) {
var vvv_return, vvv_switch, cy0, n, g, project;
project = function project(x, y) {
    var gy = g - y, nx = n * x;
    return [
        gy * sin$1(nx),
        g - gy * cos$1(nx)
    ];
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y0 = arguments[0], y1 = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cy0 = cos$1(y0);
n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0);
g = cy0 / n + y0;
if (abs(n) < epsilon$4)
    return equirectangularRaw;
project.invert = function (x, y) {
    var gy = g - y;
    return [
        atan2(x, gy) / n,
        g - sign$1(n) * sqrt$1(x * x + gy * gy)
    ];
};
return project;});
    conicEquidistant = ($__.fs.conicEquidistant_830 = function conicEquidistant() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return conicProjection(conicEquidistantRaw).scale(131.154).center([
    0,
    13.9389
]);});
    gnomonicRaw = ($__.fs.gnomonicRaw_831 = function gnomonicRaw(x, y) {
var vvv_return, vvv_switch, cy, k;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cy = cos$1(y);
k = cos$1(x) * cy;
return [
    cy * sin$1(x) / k,
    sin$1(y) / k
];});
    gnomonic = ($__.fs.gnomonic_832 = function gnomonic() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return projection(gnomonicRaw).scale(144.049).clipAngle(60);});
    orthographicRaw = ($__.fs.orthographicRaw_833 = function orthographicRaw(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    cos$1(y) * sin$1(x),
    sin$1(y)
];});
    orthographic = ($__.fs.orthographic_834 = function orthographic() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon$4);});
    stereographicRaw = ($__.fs.stereographicRaw_835 = function stereographicRaw(x, y) {
var vvv_return, vvv_switch, cy, k;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cy = cos$1(y);
k = 1 + cos$1(x) * cy;
return [
    cy * sin$1(x) / k,
    sin$1(y) / k
];});
    stereographic = ($__.fs.stereographic_836 = function stereographic() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return projection(stereographicRaw).scale(250).clipAngle(142);});
    transverseMercatorRaw = ($__.fs.transverseMercatorRaw_837 = function transverseMercatorRaw(lambda, phi) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lambda = arguments[0], phi = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    log$1(tan((halfPi$3 + phi) / 2)),
    -lambda
];});
    transverseMercator = ($__.fs.transverseMercator_838 = function transverseMercator() {
var vvv_return, vvv_switch, m, center, rotate;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
m = mercatorProjection(transverseMercatorRaw);
center = m.center;
rotate = m.rotate;
m.center = function (_) {
    return arguments.length ? center([
        -_[1],
        _[0]
    ]) : (_ = center(), [
        _[1],
        -_[0]
    ]);
};
m.rotate = function (_) {
    return arguments.length ? rotate([
        _[0],
        _[1],
        _.length > 2 ? _[2] + 90 : 90
    ]) : (_ = rotate(), [
        _[0],
        _[1],
        _[2] - 90
    ]);
};
return rotate([
    0,
    0,
    90
]).scale(159.155);});
    version = '4.2.2';
    ascendingBisect = (bisector, $__.fs.bisector_6)((ascending, $__.fs.ascending_5), 0, true, $__.uid);
    bisectRight = TAJS_restrictToType((ascendingBisect, $__.os.oid1).right, 'function');
    bisectLeft = TAJS_restrictToType((ascendingBisect, $__.os.oid1).left, 'function');
    array = TAJS_restrictToType(Array.prototype, 'object');
    slice = TAJS_restrictToType(array.slice, 'function');
    map = TAJS_restrictToType(array.map, 'function');
    e10 = Math['sqrt'](50);
    e5 = Math['sqrt'](10);
    e2 = Math['sqrt'](2);
    prefix = '$';
    Map.prototype = map$1.prototype = $__.os.oid2 = {
        'constructor': Map,
        'has': ($__.fs.J$__v2246113107_53_841 = function J$__v2246113107_53(key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
key = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return prefix + key in this;}),
        'get': ($__.fs.J$__v2246113107_55_842 = function J$__v2246113107_55(key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
key = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this[prefix + key];}),
        'set': ($__.fs.J$__v2246113107_57_843 = function J$__v2246113107_57(key, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
key = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this[prefix + key] = value;
return this;}),
        'remove': ($__.fs.J$__v2246113107_59_844 = function J$__v2246113107_59(key) {
var vvv_return, vvv_switch, property;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
key = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
property = prefix + key;
return property in this && delete this[property];}),
        'clear': ($__.fs.J$__v2246113107_61_845 = function J$__v2246113107_61() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var property in this)
    if (property[0] === prefix)
    delete this[property];}),
        'keys': ($__.fs.J$__v2246113107_63_846 = function J$__v2246113107_63() {
var vvv_return, vvv_switch, keys;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
keys = [];
for (var property in this)
    if (property[0] === prefix)
    keys.push(property.slice(1));
return keys;}),
        'values': ($__.fs.J$__v2246113107_65_847 = function J$__v2246113107_65() {
var vvv_return, vvv_switch, values;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
values = [];
for (var property in this)
    if (property[0] === prefix)
    values.push(this[property]);
return values;}),
        'entries': ($__.fs.J$__v2246113107_67_848 = function J$__v2246113107_67() {
var vvv_return, vvv_switch, entries;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
entries = [];
for (var property in this)
    if (property[0] === prefix)
    entries.push({
    key: property.slice(1),
    value: this[property]
});
return entries;}),
        'size': ($__.fs.J$__v2246113107_69_849 = function J$__v2246113107_69() {
var vvv_return, vvv_switch, size;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
size = 0;
for (var property in this)
    if (property[0] === prefix)
    ++size;
return size;}),
        'empty': ($__.fs.J$__v2246113107_71_850 = function J$__v2246113107_71() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var property in this)
    if (property[0] === prefix)
    return false;
return true;}),
        'each': ($__.fs.J$__v2246113107_73_851 = function J$__v2246113107_73(f) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
f = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var property in this)
    if (property[0] === prefix)
    f(this[property], property.slice(1), this);})
    };
    proto = (map$1.prototype, $__.os.oid2);
    Set.prototype = set.prototype = $__.os.oid3 = {
        'constructor': Set,
        'has': TAJS_restrictToType((proto, $__.os.oid2).has, 'function'),
        'add': ($__.fs.J$__v2246113107_107_852 = function J$__v2246113107_107(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
value += '';
this[prefix + value] = value;
return this;}),
        'remove': TAJS_restrictToType((proto, $__.os.oid2).remove, 'function'),
        'clear': TAJS_restrictToType((proto, $__.os.oid2).clear, 'function'),
        'values': TAJS_restrictToType((proto, $__.os.oid2).keys, 'function'),
        'size': TAJS_restrictToType((proto, $__.os.oid2).size, 'function'),
        'empty': TAJS_restrictToType((proto, $__.os.oid2).empty, 'function'),
        'each': TAJS_restrictToType((proto, $__.os.oid2).each, 'function')
    };
    exponent = 3;
    polyIn = (($__.fs.custom_853 = function custom(e) {
var vvv_return, vvv_switch, polyIn;
polyIn = function polyIn(t) {
    return Math.pow(t, e);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    polyIn = ($__.fs.polyIn_854 = function polyIn(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.pow(t, e);});
    e = +e;
    polyIn.exponent = custom;
    return polyIn;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
e = +e;
polyIn.exponent = custom;
return polyIn;}), $__.fs.custom_853)(exponent, 0, true, $__.uid);
    polyOut = (($__.fs.custom_855 = function custom(e) {
var vvv_return, vvv_switch, polyOut;
polyOut = function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    polyOut = ($__.fs.polyOut_856 = function polyOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 - Math.pow(1 - t, e);});
    e = +e;
    polyOut.exponent = custom;
    return polyOut;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
e = +e;
polyOut.exponent = custom;
return polyOut;}), $__.fs.custom_855)(exponent, 0, true, $__.uid);
    polyInOut = (($__.fs.custom_857 = function custom(e) {
var vvv_return, vvv_switch, polyInOut;
polyInOut = function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    polyInOut = ($__.fs.polyInOut_858 = function polyInOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;});
    e = +e;
    polyInOut.exponent = custom;
    return polyInOut;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
e = +e;
polyInOut.exponent = custom;
return polyInOut;}), $__.fs.custom_857)(exponent, 0, true, $__.uid);
    pi = (Math.PI, 3.141592653589793);
    halfPi = pi / 2;
    b1 = 4 / 11;
    b2 = 6 / 11;
    b3 = 8 / 11;
    b4 = 3 / 4;
    b5 = 9 / 11;
    b6 = 10 / 11;
    b7 = 15 / 16;
    b8 = 21 / 22;
    b9 = 63 / 64;
    b0 = 1 / b1 / b1;
    overshoot = 1.70158;
    backIn = (($__.fs.custom_859 = function custom(s) {
var vvv_return, vvv_switch, backIn;
backIn = function backIn(t) {
    return t * t * ((s + 1) * t - s);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
s = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    backIn = ($__.fs.backIn_860 = function backIn(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t * t * ((s + 1) * t - s);});
    s = +s;
    backIn.overshoot = custom;
    return backIn;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = +s;
backIn.overshoot = custom;
return backIn;}), $__.fs.custom_859)(overshoot, 0, true, $__.uid);
    backOut = (($__.fs.custom_861 = function custom(s) {
var vvv_return, vvv_switch, backOut;
backOut = function backOut(t) {
    return --t * t * ((s + 1) * t + s) + 1;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
s = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    backOut = ($__.fs.backOut_862 = function backOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return --t * t * ((s + 1) * t + s) + 1;});
    s = +s;
    backOut.overshoot = custom;
    return backOut;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = +s;
backOut.overshoot = custom;
return backOut;}), $__.fs.custom_861)(overshoot, 0, true, $__.uid);
    backInOut = (($__.fs.custom_863 = function custom(s) {
var vvv_return, vvv_switch, backInOut;
backInOut = function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
s = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    backInOut = ($__.fs.backInOut_864 = function backInOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;});
    s = +s;
    backInOut.overshoot = custom;
    return backInOut;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = +s;
backInOut.overshoot = custom;
return backInOut;}), $__.fs.custom_863)(overshoot, 0, true, $__.uid);
    tau = 2 * (Math.PI, 3.141592653589793);
    amplitude = 1;
    period = 0.3;
    elasticIn = (($__.fs.custom_865 = function custom(a, p) {
var vvv_return, vvv_switch, s, elasticIn;
elasticIn = function elasticIn(t) {
    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], p = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    elasticIn = ($__.fs.elasticIn_866 = function elasticIn(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);});
    s = Math['asin'](1 / (a = Math['max'](1, a))) * (p = p / tau);
    elasticIn.amplitude = ($__.fs.J$__v2246113107_169_867 = function J$__v2246113107_169(a) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(a, p * tau);});
    elasticIn.period = ($__.fs.J$__v2246113107_171_868 = function J$__v2246113107_171(p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
p = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(a, p);});
    return elasticIn;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
elasticIn.amplitude = function (a) {
    return custom(a, p * tau);
};
elasticIn.period = function (p) {
    return custom(a, p);
};
return elasticIn;}), $__.fs.custom_865)(amplitude, period, 0, true, $__.uid);
    elasticOut = (($__.fs.custom_869 = function custom(a, p) {
var vvv_return, vvv_switch, s, elasticOut;
elasticOut = function elasticOut(t) {
    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], p = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    elasticOut = ($__.fs.elasticOut_870 = function elasticOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);});
    s = Math['asin'](1 / (a = Math['max'](1, a))) * (p = p / tau);
    elasticOut.amplitude = ($__.fs.J$__v2246113107_175_871 = function J$__v2246113107_175(a) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(a, p * tau);});
    elasticOut.period = ($__.fs.J$__v2246113107_177_872 = function J$__v2246113107_177(p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
p = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(a, p);});
    return elasticOut;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
elasticOut.amplitude = function (a) {
    return custom(a, p * tau);
};
elasticOut.period = function (p) {
    return custom(a, p);
};
return elasticOut;}), $__.fs.custom_869)(amplitude, period, 0, true, $__.uid);
    elasticInOut = (($__.fs.custom_873 = function custom(a, p) {
var vvv_return, vvv_switch, s, elasticInOut;
elasticInOut = function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], p = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    elasticInOut = ($__.fs.elasticInOut_874 = function elasticInOut(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;});
    s = Math['asin'](1 / (a = Math['max'](1, a))) * (p = p / tau);
    elasticInOut.amplitude = ($__.fs.J$__v2246113107_181_875 = function J$__v2246113107_181(a) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(a, p * tau);});
    elasticInOut.period = ($__.fs.J$__v2246113107_183_876 = function J$__v2246113107_183(p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
p = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(a, p);});
    return elasticInOut;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
elasticInOut.amplitude = function (a) {
    return custom(a, p * tau);
};
elasticInOut.period = function (p) {
    return custom(a, p);
};
return elasticInOut;}), $__.fs.custom_873)(amplitude, period, 0, true, $__.uid);
    pi$1 = (Math.PI, 3.141592653589793);
    tau$1 = 2 * pi$1;
    epsilon = 0.000001;
    tauEpsilon = tau$1 - epsilon;
    Path.prototype = path.prototype = $__.os.oid4 = {
        'constructor': Path,
        'moveTo': ($__.fs.J$__v2246113107_198_877 = function J$__v2246113107_198(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._.push('M', this._x0 = this._x1 = +x, ',', this._y0 = this._y1 = +y);}),
        'closePath': ($__.fs.J$__v2246113107_200_878 = function J$__v2246113107_200() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this._x1 !== null) {
    this._x1 = this._x0, this._y1 = this._y0;
    this._.push('Z');
}}),
        'lineTo': ($__.fs.J$__v2246113107_202_879 = function J$__v2246113107_202(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._.push('L', this._x1 = +x, ',', this._y1 = +y);}),
        'quadraticCurveTo': ($__.fs.J$__v2246113107_204_880 = function J$__v2246113107_204(x1, y1, x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x1 = arguments[0], y1 = arguments[1], x = arguments[2], y = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._.push('Q', +x1, ',', +y1, ',', this._x1 = +x, ',', this._y1 = +y);}),
        'bezierCurveTo': ($__.fs.J$__v2246113107_206_881 = function J$__v2246113107_206(x1, y1, x2, y2, x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x1 = arguments[0], y1 = arguments[1], x2 = arguments[2], y2 = arguments[3], x = arguments[4], y = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._.push('C', +x1, ',', +y1, ',', +x2, ',', +y2, ',', this._x1 = +x, ',', this._y1 = +y);}),
        'arcTo': ($__.fs.J$__v2246113107_208_882 = function J$__v2246113107_208(x1, y1, x2, y2, r) {
var vvv_return, vvv_switch, x0, y0, x21, y21, x01, y01, l01_2, x20, y20, l21_2, l20_2, l21, l01, l, t01, t21;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x1 = arguments[0], y1 = arguments[1], x2 = arguments[2], y2 = arguments[3], r = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
x0 = this._x1;
y0 = this._y1;
x21 = x2 - x1;
y21 = y2 - y1;
x01 = x0 - x1;
y01 = y0 - y1;
l01_2 = x01 * x01 + y01 * y01;
if (r < 0)
    throw new Error('negative radius: ' + r);
if (this._x1 === null) {
    this._.push('M', this._x1 = x1, ',', this._y1 = y1);
} else if (!(l01_2 > epsilon));
else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
    this._.push('L', this._x1 = x1, ',', this._y1 = y1);
} else {
    x20 = x2 - x0;
    y20 = y2 - y0;
    l21_2 = x21 * x21 + y21 * y21;
    l20_2 = x20 * x20 + y20 * y20;
    l21 = Math.sqrt(l21_2);
    l01 = Math.sqrt(l01_2);
    l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2);
    t01 = l / l01;
    t21 = l / l21;
    if (Math.abs(t01 - 1) > epsilon) {
        this._.push('L', x1 + t01 * x01, ',', y1 + t01 * y01);
    }
    this._.push('A', r, ',', r, ',0,0,', +(y01 * x20 > x01 * y20), ',', this._x1 = x1 + t21 * x21, ',', this._y1 = y1 + t21 * y21);
}}),
        'arc': ($__.fs.J$__v2246113107_210_883 = function J$__v2246113107_210(x, y, r, a0, a1, ccw) {
var vvv_return, vvv_switch, dx, dy, x0, y0, cw, da;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1], r = arguments[2], a0 = arguments[3], a1 = arguments[4], ccw = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y, r = +r;
dx = r * Math.cos(a0);
dy = r * Math.sin(a0);
x0 = x + dx;
y0 = y + dy;
cw = 1 ^ ccw;
da = ccw ? a0 - a1 : a1 - a0;
if (r < 0)
    throw new Error('negative radius: ' + r);
if (this._x1 === null) {
    this._.push('M', x0, ',', y0);
} else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
    this._.push('L', x0, ',', y0);
}
if (!r)
    return;
if (da > tauEpsilon) {
    this._.push('A', r, ',', r, ',0,1,', cw, ',', x - dx, ',', y - dy, 'A', r, ',', r, ',0,1,', cw, ',', this._x1 = x0, ',', this._y1 = y0);
} else {
    if (da < 0)
        da = da % tau$1 + tau$1;
    this._.push('A', r, ',', r, ',0,', +(da >= pi$1), ',', cw, ',', this._x1 = x + r * Math.cos(a1), ',', this._y1 = y + r * Math.sin(a1));
}}),
        'rect': ($__.fs.J$__v2246113107_212_884 = function J$__v2246113107_212(x, y, w, h) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1], w = arguments[2], h = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._.push('M', this._x0 = this._x1 = +x, ',', this._y0 = this._y1 = +y, 'h', +w, 'v', +h, 'h', -w, 'Z');}),
        'toString': ($__.fs.J$__v2246113107_214_885 = function J$__v2246113107_214() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._.join('');})
    };
    treeProto = quadtree.prototype = TAJS_restrictToType(Quadtree.prototype, 'object');
    treeProto.copy = ($__.fs.J$__v2246113107_241_886 = function J$__v2246113107_241() {
var vvv_return, vvv_switch, copy, node, nodes, child;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1);
node = this._root;
if (!node)
    return copy;
if (!node.length)
    return copy._root = leaf_copy(node), copy;
nodes = [{
        source: node,
        target: copy._root = new Array(4)
    }];
while (node = nodes.pop()) {
    for (var i = 0; i < 4; ++i) {
        if (child = node.source[i]) {
            if (child.length)
                nodes.push({
                source: child,
                target: node.target[i] = new Array(4)
            });
            else
                node.target[i] = leaf_copy(child);
        }
    }
}
return copy;});
    treeProto.add = tree_add;
    treeProto.addAll = addAll;
    treeProto.cover = tree_cover;
    treeProto.data = tree_data;
    treeProto.extent = tree_extent;
    treeProto.find = tree_find;
    treeProto.remove = tree_remove;
    treeProto.removeAll = removeAll;
    treeProto.root = tree_root;
    treeProto.size = tree_size;
    treeProto.visit = tree_visit;
    treeProto.visitAfter = tree_visitAfter;
    treeProto.x = tree_x;
    treeProto.y = tree_y;
    slice$1 = TAJS_restrictToType([].slice, 'function');
    noabort = $__.os.oid5 = {};
    Queue.prototype = queue.prototype = $__.os.oid6 = {
        'constructor': Queue,
        'defer': ($__.fs.J$__v2246113107_244_887 = function J$__v2246113107_244(callback) {
var vvv_return, vvv_switch, t;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof callback !== 'function' || this._call)
    throw new Error();
if (this._error != null)
    return this;
t = slice$1.call(arguments, 1);
t.push(callback);
++this._waiting, this._tasks.push(t);
poke(this);
return this;}),
        'abort': ($__.fs.J$__v2246113107_246_888 = function J$__v2246113107_246() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this._error == null)
    abort(this, new Error('abort'));
return this;}),
        'await': ($__.fs.J$__v2246113107_250_889 = function J$__v2246113107_250(callback) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof callback !== 'function' || this._call)
    throw new Error();
this._call = function (error, results) {
    callback.apply(null, [error].concat(results));
};
maybeNotify(this);
return this;}),
        'awaitAll': ($__.fs.J$__v2246113107_252_890 = function J$__v2246113107_252(callback) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof callback !== 'function' || this._call)
    throw new Error();
this._call = callback;
maybeNotify(this);
return this;})
    };
    epsilon$1 = 1e-12;
    pi$2 = (Math.PI, 3.141592653589793);
    halfPi$1 = pi$2 / 2;
    tau$2 = 2 * pi$2;
    Linear.prototype = $__.os.oid7 = {
        'areaStart': ($__.fs.J$__v2246113107_293_891 = function J$__v2246113107_293() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = 0;}),
        'areaEnd': ($__.fs.J$__v2246113107_295_892 = function J$__v2246113107_295() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = NaN;}),
        'lineStart': ($__.fs.J$__v2246113107_297_893 = function J$__v2246113107_297() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_299_894 = function J$__v2246113107_299() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this._line || this._line !== 0 && this._point === 1)
    this._context.closePath();
this._line = 1 - this._line;}),
        'point': ($__.fs.J$__v2246113107_301_895 = function J$__v2246113107_301(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
switch (this._point) {
case 0:
    this._point = 1;
    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
    break;
case 1:
    this._point = 2;
default:
    this._context.lineTo(x, y);
    break;
}})
    };
    curveRadialLinear = (curveRadial, $__.fs.curveRadial_131)((curveLinear, $__.fs.curveLinear_122), 0, true, $__.uid);
    Radial.prototype = $__.os.oid8 = {
        'areaStart': ($__.fs.J$__v2246113107_366_897 = function J$__v2246113107_366() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._curve.areaStart();}),
        'areaEnd': ($__.fs.J$__v2246113107_368_898 = function J$__v2246113107_368() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._curve.areaEnd();}),
        'lineStart': ($__.fs.J$__v2246113107_370_899 = function J$__v2246113107_370() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._curve.lineStart();}),
        'lineEnd': ($__.fs.J$__v2246113107_372_900 = function J$__v2246113107_372() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._curve.lineEnd();}),
        'point': ($__.fs.J$__v2246113107_374_901 = function J$__v2246113107_374(a, r) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a = arguments[0], r = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._curve.point(r * Math.sin(a), r * -Math.cos(a));})
    };
    circle = $__.os.oid9 = {
        'draw': ($__.fs.J$__v2246113107_393_902 = function J$__v2246113107_393(context, size) {
var vvv_return, vvv_switch, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], size = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = Math.sqrt(size / pi$2);
context.moveTo(r, 0);
context.arc(0, 0, r, 0, tau$2);})
    };
    cross$1 = $__.os.oid10 = {
        'draw': ($__.fs.J$__v2246113107_395_903 = function J$__v2246113107_395(context, size) {
var vvv_return, vvv_switch, r;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], size = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = Math.sqrt(size / 5) / 2;
context.moveTo(-3 * r, -r);
context.lineTo(-r, -r);
context.lineTo(-r, -3 * r);
context.lineTo(r, -3 * r);
context.lineTo(r, -r);
context.lineTo(3 * r, -r);
context.lineTo(3 * r, r);
context.lineTo(r, r);
context.lineTo(r, 3 * r);
context.lineTo(-r, 3 * r);
context.lineTo(-r, r);
context.lineTo(-3 * r, r);
context.closePath();})
    };
    tan30 = Math['sqrt'](1 / 3);
    tan30_2 = tan30 * 2;
    diamond = $__.os.oid11 = {
        'draw': ($__.fs.J$__v2246113107_397_904 = function J$__v2246113107_397(context, size) {
var vvv_return, vvv_switch, y, x;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], size = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
y = Math.sqrt(size / tan30_2);
x = y * tan30;
context.moveTo(0, -y);
context.lineTo(x, 0);
context.lineTo(0, y);
context.lineTo(-x, 0);
context.closePath();})
    };
    ka = 0.8908130915292852;
    kr = Math['sin'](pi$2 / 10) / Math['sin'](7 * pi$2 / 10);
    kx = Math['sin'](tau$2 / 10) * kr;
    ky = -Math['cos'](tau$2 / 10) * kr;
    star = $__.os.oid12 = {
        'draw': ($__.fs.J$__v2246113107_399_905 = function J$__v2246113107_399(context, size) {
var vvv_return, vvv_switch, r, x, y, a, c, s;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], size = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = Math.sqrt(size * ka);
x = kx * r;
y = ky * r;
context.moveTo(0, -r);
context.lineTo(x, y);
for (var i = 1; i < 5; ++i) {
    a = tau$2 * i / 5;
    c = Math.cos(a);
    s = Math.sin(a);
    context.lineTo(s * r, -c * r);
    context.lineTo(c * x - s * y, s * x + c * y);
}
context.closePath();})
    };
    square = $__.os.oid13 = {
        'draw': ($__.fs.J$__v2246113107_401_906 = function J$__v2246113107_401(context, size) {
var vvv_return, vvv_switch, w, x;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], size = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
w = Math.sqrt(size);
x = -w / 2;
context.rect(x, x, w, w);})
    };
    sqrt3 = Math['sqrt'](3);
    triangle = $__.os.oid14 = {
        'draw': ($__.fs.J$__v2246113107_403_907 = function J$__v2246113107_403(context, size) {
var vvv_return, vvv_switch, y;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], size = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
y = -Math.sqrt(size / (sqrt3 * 3));
context.moveTo(0, y * 2);
context.lineTo(-sqrt3 * y, -y);
context.lineTo(sqrt3 * y, -y);
context.closePath();})
    };
    c = -0.5;
    s = Math['sqrt'](3) / 2;
    k = 1 / Math['sqrt'](12);
    a = (k / 2 + 1) * 3;
    wye = $__.os.oid15 = {
        'draw': ($__.fs.J$__v2246113107_405_908 = function J$__v2246113107_405(context, size) {
var vvv_return, vvv_switch, r, x0, y0, x1, y1, x2, y2;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], size = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = Math.sqrt(size / a);
x0 = r / 2;
y0 = r * k;
x1 = x0;
y1 = r * k + r;
x2 = -x1;
y2 = y1;
context.moveTo(x0, y0);
context.lineTo(x1, y1);
context.lineTo(x2, y2);
context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
context.closePath();})
    };
    symbols = [
        circle,
        cross$1,
        diamond,
        square,
        star,
        triangle,
        wye
    ];
    Basis.prototype = $__.os.oid16 = {
        'areaStart': ($__.fs.J$__v2246113107_418_909 = function J$__v2246113107_418() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = 0;}),
        'areaEnd': ($__.fs.J$__v2246113107_420_910 = function J$__v2246113107_420() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = NaN;}),
        'lineStart': ($__.fs.J$__v2246113107_422_911 = function J$__v2246113107_422() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._x1 = this._y0 = this._y1 = NaN;
this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_424_912 = function J$__v2246113107_424() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
switch (this._point) {
case 3:
    point(this, this._x1, this._y1);
case 2:
    this._context.lineTo(this._x1, this._y1);
    break;
}
if (this._line || this._line !== 0 && this._point === 1)
    this._context.closePath();
this._line = 1 - this._line;}),
        'point': ($__.fs.J$__v2246113107_426_913 = function J$__v2246113107_426(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
switch (this._point) {
case 0:
    this._point = 1;
    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
    break;
case 1:
    this._point = 2;
    break;
case 2:
    this._point = 3;
    this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
default:
    point(this, x, y);
    break;
}
this._x0 = this._x1, this._x1 = x;
this._y0 = this._y1, this._y1 = y;})
    };
    BasisClosed.prototype = $__.os.oid17 = {
        'areaStart': noop,
        'areaEnd': noop,
        'lineStart': ($__.fs.J$__v2246113107_430_914 = function J$__v2246113107_430() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_432_915 = function J$__v2246113107_432() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
switch (this._point) {
case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
    }
case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
    }
case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
    }
}}),
        'point': ($__.fs.J$__v2246113107_434_916 = function J$__v2246113107_434(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
switch (this._point) {
case 0:
    this._point = 1;
    this._x2 = x, this._y2 = y;
    break;
case 1:
    this._point = 2;
    this._x3 = x, this._y3 = y;
    break;
case 2:
    this._point = 3;
    this._x4 = x, this._y4 = y;
    this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
    break;
default:
    point(this, x, y);
    break;
}
this._x0 = this._x1, this._x1 = x;
this._y0 = this._y1, this._y1 = y;})
    };
    BasisOpen.prototype = $__.os.oid18 = {
        'areaStart': ($__.fs.J$__v2246113107_438_917 = function J$__v2246113107_438() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = 0;}),
        'areaEnd': ($__.fs.J$__v2246113107_440_918 = function J$__v2246113107_440() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = NaN;}),
        'lineStart': ($__.fs.J$__v2246113107_442_919 = function J$__v2246113107_442() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._x1 = this._y0 = this._y1 = NaN;
this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_444_920 = function J$__v2246113107_444() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this._line || this._line !== 0 && this._point === 3)
    this._context.closePath();
this._line = 1 - this._line;}),
        'point': ($__.fs.J$__v2246113107_446_921 = function J$__v2246113107_446(x, y) {
var vvv_return, vvv_switch, x0, y0;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
switch (this._point) {
case 0:
    this._point = 1;
    break;
case 1:
    this._point = 2;
    break;
case 2:
    this._point = 3;
    x0 = (this._x0 + 4 * this._x1 + x) / 6;
    y0 = (this._y0 + 4 * this._y1 + y) / 6;
    this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
    break;
case 3:
    this._point = 4;
default:
    point(this, x, y);
    break;
}
this._x0 = this._x1, this._x1 = x;
this._y0 = this._y1, this._y1 = y;})
    };
    Bundle.prototype = $__.os.oid19 = {
        'lineStart': ($__.fs.J$__v2246113107_450_922 = function J$__v2246113107_450() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x = [];
this._y = [];
this._basis.lineStart();}),
        'lineEnd': ($__.fs.J$__v2246113107_452_923 = function J$__v2246113107_452() {
var vvv_return, vvv_switch, x, y, j, x0, y0, dx, dy, i, t;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = this._x;
y = this._y;
j = x.length - 1;
if (j > 0) {
    x0 = x[0];
    y0 = y[0];
    dx = x[j] - x0;
    dy = y[j] - y0;
    i = -1;
    while (++i <= j) {
        t = i / j;
        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
    }
}
this._x = this._y = null;
this._basis.lineEnd();}),
        'point': ($__.fs.J$__v2246113107_454_924 = function J$__v2246113107_454(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x.push(+x);
this._y.push(+y);})
    };
    bundle = (($__.fs.custom_925 = function custom(beta) {
var vvv_return, vvv_switch, bundle;
bundle = function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
beta = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    bundle = ($__.fs.bundle_926 = function bundle(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return beta === 1 ? new Basis(context) : new Bundle(context, beta);});
    bundle.beta = ($__.fs.J$__v2246113107_457_927 = function J$__v2246113107_457(beta) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
beta = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(+beta);});
    return bundle;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
bundle.beta = function (beta) {
    return custom(+beta);
};
return bundle;}), $__.fs.custom_925)(0.85, 0, true, $__.uid);
    Cardinal.prototype = $__.os.oid20 = {
        'areaStart': ($__.fs.J$__v2246113107_462_928 = function J$__v2246113107_462() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = 0;}),
        'areaEnd': ($__.fs.J$__v2246113107_464_929 = function J$__v2246113107_464() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = NaN;}),
        'lineStart': ($__.fs.J$__v2246113107_466_930 = function J$__v2246113107_466() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_468_931 = function J$__v2246113107_468() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
switch (this._point) {
case 2:
    this._context.lineTo(this._x2, this._y2);
    break;
case 3:
    point$1(this, this._x1, this._y1);
    break;
}
if (this._line || this._line !== 0 && this._point === 1)
    this._context.closePath();
this._line = 1 - this._line;}),
        'point': ($__.fs.J$__v2246113107_470_932 = function J$__v2246113107_470(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
switch (this._point) {
case 0:
    this._point = 1;
    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
    break;
case 1:
    this._point = 2;
    this._x1 = x, this._y1 = y;
    break;
case 2:
    this._point = 3;
default:
    point$1(this, x, y);
    break;
}
this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;})
    };
    cardinal = (($__.fs.custom_933 = function custom(tension) {
var vvv_return, vvv_switch, cardinal;
cardinal = function cardinal(context) {
    return new Cardinal(context, tension);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tension = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    cardinal = ($__.fs.cardinal_934 = function cardinal(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Cardinal(context, tension);});
    cardinal.tension = ($__.fs.J$__v2246113107_473_935 = function J$__v2246113107_473(tension) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tension = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(+tension);});
    return cardinal;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cardinal.tension = function (tension) {
    return custom(+tension);
};
return cardinal;}), $__.fs.custom_933)(0, 0, true, $__.uid);
    CardinalClosed.prototype = $__.os.oid21 = {
        'areaStart': noop,
        'areaEnd': noop,
        'lineStart': ($__.fs.J$__v2246113107_477_936 = function J$__v2246113107_477() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_479_937 = function J$__v2246113107_479() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
switch (this._point) {
case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
    }
case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
    }
case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
    }
}}),
        'point': ($__.fs.J$__v2246113107_481_938 = function J$__v2246113107_481(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
switch (this._point) {
case 0:
    this._point = 1;
    this._x3 = x, this._y3 = y;
    break;
case 1:
    this._point = 2;
    this._context.moveTo(this._x4 = x, this._y4 = y);
    break;
case 2:
    this._point = 3;
    this._x5 = x, this._y5 = y;
    break;
default:
    point$1(this, x, y);
    break;
}
this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;})
    };
    cardinalClosed = (($__.fs.custom_939 = function custom(tension) {
var vvv_return, vvv_switch, cardinal;
cardinal = function cardinal(context) {
    return new CardinalClosed(context, tension);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tension = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    cardinal = ($__.fs.cardinal_940 = function cardinal(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new CardinalClosed(context, tension);});
    cardinal.tension = ($__.fs.J$__v2246113107_484_941 = function J$__v2246113107_484(tension) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tension = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(+tension);});
    return cardinal;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cardinal.tension = function (tension) {
    return custom(+tension);
};
return cardinal;}), $__.fs.custom_939)(0, 0, true, $__.uid);
    CardinalOpen.prototype = $__.os.oid22 = {
        'areaStart': ($__.fs.J$__v2246113107_488_942 = function J$__v2246113107_488() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = 0;}),
        'areaEnd': ($__.fs.J$__v2246113107_490_943 = function J$__v2246113107_490() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = NaN;}),
        'lineStart': ($__.fs.J$__v2246113107_492_944 = function J$__v2246113107_492() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_494_945 = function J$__v2246113107_494() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this._line || this._line !== 0 && this._point === 3)
    this._context.closePath();
this._line = 1 - this._line;}),
        'point': ($__.fs.J$__v2246113107_496_946 = function J$__v2246113107_496(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
switch (this._point) {
case 0:
    this._point = 1;
    break;
case 1:
    this._point = 2;
    break;
case 2:
    this._point = 3;
    this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
    break;
case 3:
    this._point = 4;
default:
    point$1(this, x, y);
    break;
}
this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;})
    };
    cardinalOpen = (($__.fs.custom_947 = function custom(tension) {
var vvv_return, vvv_switch, cardinal;
cardinal = function cardinal(context) {
    return new CardinalOpen(context, tension);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tension = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    cardinal = ($__.fs.cardinal_948 = function cardinal(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new CardinalOpen(context, tension);});
    cardinal.tension = ($__.fs.J$__v2246113107_499_949 = function J$__v2246113107_499(tension) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tension = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(+tension);});
    return cardinal;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cardinal.tension = function (tension) {
    return custom(+tension);
};
return cardinal;}), $__.fs.custom_947)(0, 0, true, $__.uid);
    CatmullRom.prototype = $__.os.oid23 = {
        'areaStart': ($__.fs.J$__v2246113107_504_950 = function J$__v2246113107_504() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = 0;}),
        'areaEnd': ($__.fs.J$__v2246113107_506_951 = function J$__v2246113107_506() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = NaN;}),
        'lineStart': ($__.fs.J$__v2246113107_508_952 = function J$__v2246113107_508() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_510_953 = function J$__v2246113107_510() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
switch (this._point) {
case 2:
    this._context.lineTo(this._x2, this._y2);
    break;
case 3:
    this.point(this, this._x2, this._y2);
    break;
}
if (this._line || this._line !== 0 && this._point === 1)
    this._context.closePath();
this._line = 1 - this._line;}),
        'point': ($__.fs.J$__v2246113107_512_954 = function J$__v2246113107_512(x, y) {
var vvv_return, vvv_switch, x23, y23;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
if (this._point) {
    x23 = this._x2 - x;
    y23 = this._y2 - y;
    this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
}
switch (this._point) {
case 0:
    this._point = 1;
    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
    break;
case 1:
    this._point = 2;
    break;
case 2:
    this._point = 3;
default:
    point$2(this, x, y);
    break;
}
this._l01_a = this._l12_a, this._l12_a = this._l23_a;
this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;})
    };
    catmullRom = (($__.fs.custom_955 = function custom(alpha) {
var vvv_return, vvv_switch, catmullRom;
catmullRom = function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
alpha = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    catmullRom = ($__.fs.catmullRom_956 = function catmullRom(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);});
    catmullRom.alpha = ($__.fs.J$__v2246113107_515_957 = function J$__v2246113107_515(alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
alpha = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(+alpha);});
    return catmullRom;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
catmullRom.alpha = function (alpha) {
    return custom(+alpha);
};
return catmullRom;}), $__.fs.custom_955)(0.5, 0, true, $__.uid);
    CatmullRomClosed.prototype = $__.os.oid24 = {
        'areaStart': noop,
        'areaEnd': noop,
        'lineStart': ($__.fs.J$__v2246113107_519_958 = function J$__v2246113107_519() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_521_959 = function J$__v2246113107_521() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
switch (this._point) {
case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
    }
case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
    }
case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
    }
}}),
        'point': ($__.fs.J$__v2246113107_523_960 = function J$__v2246113107_523(x, y) {
var vvv_return, vvv_switch, x23, y23;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
if (this._point) {
    x23 = this._x2 - x;
    y23 = this._y2 - y;
    this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
}
switch (this._point) {
case 0:
    this._point = 1;
    this._x3 = x, this._y3 = y;
    break;
case 1:
    this._point = 2;
    this._context.moveTo(this._x4 = x, this._y4 = y);
    break;
case 2:
    this._point = 3;
    this._x5 = x, this._y5 = y;
    break;
default:
    point$2(this, x, y);
    break;
}
this._l01_a = this._l12_a, this._l12_a = this._l23_a;
this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;})
    };
    catmullRomClosed = (($__.fs.custom_961 = function custom(alpha) {
var vvv_return, vvv_switch, catmullRom;
catmullRom = function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
alpha = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    catmullRom = ($__.fs.catmullRom_962 = function catmullRom(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);});
    catmullRom.alpha = ($__.fs.J$__v2246113107_526_963 = function J$__v2246113107_526(alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
alpha = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(+alpha);});
    return catmullRom;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
catmullRom.alpha = function (alpha) {
    return custom(+alpha);
};
return catmullRom;}), $__.fs.custom_961)(0.5, 0, true, $__.uid);
    CatmullRomOpen.prototype = $__.os.oid25 = {
        'areaStart': ($__.fs.J$__v2246113107_530_964 = function J$__v2246113107_530() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = 0;}),
        'areaEnd': ($__.fs.J$__v2246113107_532_965 = function J$__v2246113107_532() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = NaN;}),
        'lineStart': ($__.fs.J$__v2246113107_534_966 = function J$__v2246113107_534() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_536_967 = function J$__v2246113107_536() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this._line || this._line !== 0 && this._point === 3)
    this._context.closePath();
this._line = 1 - this._line;}),
        'point': ($__.fs.J$__v2246113107_538_968 = function J$__v2246113107_538(x, y) {
var vvv_return, vvv_switch, x23, y23;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
if (this._point) {
    x23 = this._x2 - x;
    y23 = this._y2 - y;
    this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
}
switch (this._point) {
case 0:
    this._point = 1;
    break;
case 1:
    this._point = 2;
    break;
case 2:
    this._point = 3;
    this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
    break;
case 3:
    this._point = 4;
default:
    point$2(this, x, y);
    break;
}
this._l01_a = this._l12_a, this._l12_a = this._l23_a;
this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;})
    };
    catmullRomOpen = (($__.fs.custom_969 = function custom(alpha) {
var vvv_return, vvv_switch, catmullRom;
catmullRom = function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
alpha = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    catmullRom = ($__.fs.catmullRom_970 = function catmullRom(context) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);});
    catmullRom.alpha = ($__.fs.J$__v2246113107_541_971 = function J$__v2246113107_541(alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
alpha = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom(+alpha);});
    return catmullRom;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
catmullRom.alpha = function (alpha) {
    return custom(+alpha);
};
return catmullRom;}), $__.fs.custom_969)(0.5, 0, true, $__.uid);
    LinearClosed.prototype = $__.os.oid26 = {
        'areaStart': noop,
        'areaEnd': noop,
        'lineStart': ($__.fs.J$__v2246113107_545_972 = function J$__v2246113107_545() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_547_973 = function J$__v2246113107_547() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this._point)
    this._context.closePath();}),
        'point': ($__.fs.J$__v2246113107_549_974 = function J$__v2246113107_549(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
if (this._point)
    this._context.lineTo(x, y);
else
    this._point = 1, this._context.moveTo(x, y);})
    };
    MonotoneX.prototype = $__.os.oid27 = {
        'areaStart': ($__.fs.J$__v2246113107_557_975 = function J$__v2246113107_557() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = 0;}),
        'areaEnd': ($__.fs.J$__v2246113107_559_976 = function J$__v2246113107_559() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = NaN;}),
        'lineStart': ($__.fs.J$__v2246113107_561_977 = function J$__v2246113107_561() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_563_978 = function J$__v2246113107_563() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
switch (this._point) {
case 2:
    this._context.lineTo(this._x1, this._y1);
    break;
case 3:
    point$3(this, this._t0, slope2(this, this._t0));
    break;
}
if (this._line || this._line !== 0 && this._point === 1)
    this._context.closePath();
this._line = 1 - this._line;}),
        'point': ($__.fs.J$__v2246113107_565_979 = function J$__v2246113107_565(x, y) {
var vvv_return, vvv_switch, t1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
t1 = NaN;
x = +x, y = +y;
if (x === this._x1 && y === this._y1)
    return;
switch (this._point) {
case 0:
    this._point = 1;
    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
    break;
case 1:
    this._point = 2;
    break;
case 2:
    this._point = 3;
    point$3(this, slope2(this, t1 = slope3(this, x, y)), t1);
    break;
default:
    point$3(this, this._t0, t1 = slope3(this, x, y));
    break;
}
this._x0 = this._x1, this._x1 = x;
this._y0 = this._y1, this._y1 = y;
this._t0 = t1;})
    };
    (MonotoneY.prototype = Object['create']((MonotoneX.prototype, $__.os.oid27))).point = ($__.fs.J$__v2246113107_568_980 = function J$__v2246113107_568(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
MonotoneX.prototype.point.call(this, y, x);});
    ReflectContext.prototype = $__.os.oid28 = {
        'moveTo': ($__.fs.J$__v2246113107_571_981 = function J$__v2246113107_571(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context.moveTo(y, x);}),
        'closePath': ($__.fs.J$__v2246113107_573_982 = function J$__v2246113107_573() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context.closePath();}),
        'lineTo': ($__.fs.J$__v2246113107_575_983 = function J$__v2246113107_575(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context.lineTo(y, x);}),
        'bezierCurveTo': ($__.fs.J$__v2246113107_577_984 = function J$__v2246113107_577(x1, y1, x2, y2, x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x1 = arguments[0], y1 = arguments[1], x2 = arguments[2], y2 = arguments[3], x = arguments[4], y = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._context.bezierCurveTo(y1, x1, y2, x2, y, x);})
    };
    Natural.prototype = $__.os.oid29 = {
        'areaStart': ($__.fs.J$__v2246113107_582_985 = function J$__v2246113107_582() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = 0;}),
        'areaEnd': ($__.fs.J$__v2246113107_584_986 = function J$__v2246113107_584() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = NaN;}),
        'lineStart': ($__.fs.J$__v2246113107_586_987 = function J$__v2246113107_586() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x = [];
this._y = [];}),
        'lineEnd': ($__.fs.J$__v2246113107_588_988 = function J$__v2246113107_588() {
var vvv_return, vvv_switch, x, y, n, px, py;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = this._x;
y = this._y;
n = x.length;
if (n) {
    this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
    if (n === 2) {
        this._context.lineTo(x[1], y[1]);
    } else {
        px = controlPoints(x);
        py = controlPoints(y);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
    }
}
if (this._line || this._line !== 0 && n === 1)
    this._context.closePath();
this._line = 1 - this._line;
this._x = this._y = null;}),
        'point': ($__.fs.J$__v2246113107_590_989 = function J$__v2246113107_590(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x.push(+x);
this._y.push(+y);})
    };
    Step.prototype = $__.os.oid30 = {
        'areaStart': ($__.fs.J$__v2246113107_595_990 = function J$__v2246113107_595() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = 0;}),
        'areaEnd': ($__.fs.J$__v2246113107_597_991 = function J$__v2246113107_597() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._line = NaN;}),
        'lineStart': ($__.fs.J$__v2246113107_599_992 = function J$__v2246113107_599() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._x = this._y = NaN;
this._point = 0;}),
        'lineEnd': ($__.fs.J$__v2246113107_601_993 = function J$__v2246113107_601() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (0 < this._t && this._t < 1 && this._point === 2)
    this._context.lineTo(this._x, this._y);
if (this._line || this._line !== 0 && this._point === 1)
    this._context.closePath();
if (this._line >= 0)
    this._t = 1 - this._t, this._line = 1 - this._line;}),
        'point': ($__.fs.J$__v2246113107_603_994 = function J$__v2246113107_603(x, y) {
var vvv_return, vvv_switch, x1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = +x, y = +y;
switch (this._point) {
case 0:
    this._point = 1;
    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
    break;
case 1:
    this._point = 2;
default: {
        if (this._t <= 0) {
            this._context.lineTo(this._x, y);
            this._context.lineTo(x, y);
        } else {
            x1 = this._x * (1 - this._t) + x * this._t;
            this._context.lineTo(x1, this._y);
            this._context.lineTo(x1, y);
        }
        break;
    }
}
this._x = x, this._y = y;})
    };
    slice$2 = TAJS_restrictToType(TAJS_restrictToType(Array.prototype, 'object').slice, 'function');
    darker = 0.7;
    brighter = 1 / darker;
    reHex3 = /^#([0-9a-f]{3})$/;
    reHex6 = /^#([0-9a-f]{6})$/;
    reRgbInteger = /^rgb\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*\)$/;
    reRgbPercent = /^rgb\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
    reRgbaInteger = /^rgba\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
    reRgbaPercent = /^rgba\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
    reHslPercent = /^hsl\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
    reHslaPercent = /^hsla\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
    named = $__.os.oid31 = {
        'aliceblue': 15792383,
        'antiquewhite': 16444375,
        'aqua': 65535,
        'aquamarine': 8388564,
        'azure': 15794175,
        'beige': 16119260,
        'bisque': 16770244,
        'black': 0,
        'blanchedalmond': 16772045,
        'blue': 255,
        'blueviolet': 9055202,
        'brown': 10824234,
        'burlywood': 14596231,
        'cadetblue': 6266528,
        'chartreuse': 8388352,
        'chocolate': 13789470,
        'coral': 16744272,
        'cornflowerblue': 6591981,
        'cornsilk': 16775388,
        'crimson': 14423100,
        'cyan': 65535,
        'darkblue': 139,
        'darkcyan': 35723,
        'darkgoldenrod': 12092939,
        'darkgray': 11119017,
        'darkgreen': 25600,
        'darkgrey': 11119017,
        'darkkhaki': 12433259,
        'darkmagenta': 9109643,
        'darkolivegreen': 5597999,
        'darkorange': 16747520,
        'darkorchid': 10040012,
        'darkred': 9109504,
        'darksalmon': 15308410,
        'darkseagreen': 9419919,
        'darkslateblue': 4734347,
        'darkslategray': 3100495,
        'darkslategrey': 3100495,
        'darkturquoise': 52945,
        'darkviolet': 9699539,
        'deeppink': 16716947,
        'deepskyblue': 49151,
        'dimgray': 6908265,
        'dimgrey': 6908265,
        'dodgerblue': 2003199,
        'firebrick': 11674146,
        'floralwhite': 16775920,
        'forestgreen': 2263842,
        'fuchsia': 16711935,
        'gainsboro': 14474460,
        'ghostwhite': 16316671,
        'gold': 16766720,
        'goldenrod': 14329120,
        'gray': 8421504,
        'green': 32768,
        'greenyellow': 11403055,
        'grey': 8421504,
        'honeydew': 15794160,
        'hotpink': 16738740,
        'indianred': 13458524,
        'indigo': 4915330,
        'ivory': 16777200,
        'khaki': 15787660,
        'lavender': 15132410,
        'lavenderblush': 16773365,
        'lawngreen': 8190976,
        'lemonchiffon': 16775885,
        'lightblue': 11393254,
        'lightcoral': 15761536,
        'lightcyan': 14745599,
        'lightgoldenrodyellow': 16448210,
        'lightgray': 13882323,
        'lightgreen': 9498256,
        'lightgrey': 13882323,
        'lightpink': 16758465,
        'lightsalmon': 16752762,
        'lightseagreen': 2142890,
        'lightskyblue': 8900346,
        'lightslategray': 7833753,
        'lightslategrey': 7833753,
        'lightsteelblue': 11584734,
        'lightyellow': 16777184,
        'lime': 65280,
        'limegreen': 3329330,
        'linen': 16445670,
        'magenta': 16711935,
        'maroon': 8388608,
        'mediumaquamarine': 6737322,
        'mediumblue': 205,
        'mediumorchid': 12211667,
        'mediumpurple': 9662683,
        'mediumseagreen': 3978097,
        'mediumslateblue': 8087790,
        'mediumspringgreen': 64154,
        'mediumturquoise': 4772300,
        'mediumvioletred': 13047173,
        'midnightblue': 1644912,
        'mintcream': 16121850,
        'mistyrose': 16770273,
        'moccasin': 16770229,
        'navajowhite': 16768685,
        'navy': 128,
        'oldlace': 16643558,
        'olive': 8421376,
        'olivedrab': 7048739,
        'orange': 16753920,
        'orangered': 16729344,
        'orchid': 14315734,
        'palegoldenrod': 15657130,
        'palegreen': 10025880,
        'paleturquoise': 11529966,
        'palevioletred': 14381203,
        'papayawhip': 16773077,
        'peachpuff': 16767673,
        'peru': 13468991,
        'pink': 16761035,
        'plum': 14524637,
        'powderblue': 11591910,
        'purple': 8388736,
        'rebeccapurple': 6697881,
        'red': 16711680,
        'rosybrown': 12357519,
        'royalblue': 4286945,
        'saddlebrown': 9127187,
        'salmon': 16416882,
        'sandybrown': 16032864,
        'seagreen': 3050327,
        'seashell': 16774638,
        'sienna': 10506797,
        'silver': 12632256,
        'skyblue': 8900331,
        'slateblue': 6970061,
        'slategray': 7372944,
        'slategrey': 7372944,
        'snow': 16775930,
        'springgreen': 65407,
        'steelblue': 4620980,
        'tan': 13808780,
        'teal': 32896,
        'thistle': 14204888,
        'tomato': 16737095,
        'turquoise': 4251856,
        'violet': 15631086,
        'wheat': 16113331,
        'white': 16777215,
        'whitesmoke': 16119285,
        'yellow': 16776960,
        'yellowgreen': 10145074
    };
    (define, $__.fs.define_183)((Color, $__.fs.Color_185), (color, $__.fs.color_186), $__.os.oid32 = {
        'displayable': ($__.fs.J$__v2246113107_636_995 = function J$__v2246113107_636() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.rgb().displayable();}),
        'toString': ($__.fs.J$__v2246113107_638_996 = function J$__v2246113107_638() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.rgb() + '';})
    }, 0, true, $__.uid);
    (define, $__.fs.define_183)((Rgb, $__.fs.Rgb_191), (colorRgb, $__.fs.colorRgb_190), (extend, $__.fs.extend_184)((Color, $__.fs.Color_185), $__.os.oid33 = {
        'brighter': ($__.fs.J$__v2246113107_646_997 = function J$__v2246113107_646(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
k = k == null ? brighter : Math.pow(brighter, k);
return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);}),
        'darker': ($__.fs.J$__v2246113107_648_998 = function J$__v2246113107_648(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
k = k == null ? darker : Math.pow(darker, k);
return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);}),
        'rgb': ($__.fs.J$__v2246113107_650_999 = function J$__v2246113107_650() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this;}),
        'displayable': ($__.fs.J$__v2246113107_652_1000 = function J$__v2246113107_652() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 0 <= this.r && this.r <= 255 && (0 <= this.g && this.g <= 255) && (0 <= this.b && this.b <= 255) && (0 <= this.opacity && this.opacity <= 1);}),
        'toString': ($__.fs.J$__v2246113107_654_1001 = function J$__v2246113107_654() {
var vvv_return, vvv_switch, a;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
a = this.opacity;
a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
return (a === 1 ? 'rgb(' : 'rgba(') + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ', ' + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ', ' + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ')' : ', ' + a + ')');})
    }, 0, true, $__.uid), 1, true, $__.uid);
    (define, $__.fs.define_183)((Hsl, $__.fs.Hsl_195), (colorHsl, $__.fs.colorHsl_194), (extend, $__.fs.extend_184)((Color, $__.fs.Color_185), $__.os.oid34 = {
        'brighter': ($__.fs.J$__v2246113107_660_1002 = function J$__v2246113107_660(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
k = k == null ? brighter : Math.pow(brighter, k);
return new Hsl(this.h, this.s, this.l * k, this.opacity);}),
        'darker': ($__.fs.J$__v2246113107_662_1003 = function J$__v2246113107_662(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
k = k == null ? darker : Math.pow(darker, k);
return new Hsl(this.h, this.s, this.l * k, this.opacity);}),
        'rgb': ($__.fs.J$__v2246113107_664_1004 = function J$__v2246113107_664() {
var vvv_return, vvv_switch, h, s, l, m2, m1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = this.h % 360 + (this.h < 0) * 360;
s = isNaN(h) || isNaN(this.s) ? 0 : this.s;
l = this.l;
m2 = l + (l < 0.5 ? l : 1 - l) * s;
m1 = 2 * l - m2;
return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);}),
        'displayable': ($__.fs.J$__v2246113107_666_1005 = function J$__v2246113107_666() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);})
    }, 1, true, $__.uid), 2, true, $__.uid);
    deg2rad = (Math.PI, 3.141592653589793) / 180;
    rad2deg = 180 / (Math.PI, 3.141592653589793);
    Kn = 18;
    Xn = 0.95047;
    Yn = 1;
    Zn = 1.08883;
    t0 = 4 / 29;
    t1 = 6 / 29;
    t2 = 3 * t1 * t1;
    t3 = t1 * t1 * t1;
    (define, $__.fs.define_183)((Lab, $__.fs.Lab_199), (lab, $__.fs.lab_198), (extend, $__.fs.extend_184)((Color, $__.fs.Color_185), $__.os.oid35 = {
        'brighter': ($__.fs.J$__v2246113107_672_1006 = function J$__v2246113107_672(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);}),
        'darker': ($__.fs.J$__v2246113107_674_1007 = function J$__v2246113107_674(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);}),
        'rgb': ($__.fs.J$__v2246113107_676_1008 = function J$__v2246113107_676() {
var vvv_return, vvv_switch, y, x, z;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
y = (this.l + 16) / 116;
x = isNaN(this.a) ? y : y + this.a / 500;
z = isNaN(this.b) ? y : y - this.b / 200;
y = Yn * lab2xyz(y);
x = Xn * lab2xyz(x);
z = Zn * lab2xyz(z);
return new Rgb(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), xyz2rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity);})
    }, 2, true, $__.uid), 3, true, $__.uid);
    (define, $__.fs.define_183)((Hcl, $__.fs.Hcl_206), (colorHcl, $__.fs.colorHcl_205), (extend, $__.fs.extend_184)((Color, $__.fs.Color_185), $__.os.oid36 = {
        'brighter': ($__.fs.J$__v2246113107_685_1009 = function J$__v2246113107_685(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);}),
        'darker': ($__.fs.J$__v2246113107_687_1010 = function J$__v2246113107_687(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);}),
        'rgb': ($__.fs.J$__v2246113107_689_1011 = function J$__v2246113107_689() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return labConvert(this).rgb();})
    }, 3, true, $__.uid), 4, true, $__.uid);
    A = -0.14861;
    B = +1.78277;
    C = -0.29227;
    D = -0.90649;
    E = +1.97294;
    ED = E * D;
    EB = E * B;
    BC_DA = B * C - D * A;
    (define, $__.fs.define_183)((Cubehelix, $__.fs.Cubehelix_209), (cubehelix, $__.fs.cubehelix_208), (extend, $__.fs.extend_184)((Color, $__.fs.Color_185), $__.os.oid37 = {
        'brighter': ($__.fs.J$__v2246113107_694_1012 = function J$__v2246113107_694(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
k = k == null ? brighter : Math.pow(brighter, k);
return new Cubehelix(this.h, this.s, this.l * k, this.opacity);}),
        'darker': ($__.fs.J$__v2246113107_696_1013 = function J$__v2246113107_696(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
k = k == null ? darker : Math.pow(darker, k);
return new Cubehelix(this.h, this.s, this.l * k, this.opacity);}),
        'rgb': ($__.fs.J$__v2246113107_698_1014 = function J$__v2246113107_698() {
var vvv_return, vvv_switch, h, l, a, cosh, sinh;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad;
l = +this.l;
a = isNaN(this.s) ? 0 : this.s * l * (1 - l);
cosh = Math.cos(h);
sinh = Math.sin(h);
return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);})
    }, 4, true, $__.uid), 5, true, $__.uid);
    interpolateRgb = (($__.fs.rgbGamma_1015 = function rgbGamma(y) {
var vvv_return, vvv_switch, color, rgb;
rgb = function rgb(start, end) {
    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = color(start.opacity, end.opacity);
    return function (t) {
        start.r = r(t);
        start.g = g(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + '';
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    rgb = ($__.fs.rgb_1016 = function rgb(start, end) {
var vvv_return, vvv_switch, r, g, b, opacity;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r);
g = color(start.g, end.g);
b = color(start.b, end.b);
opacity = color(start.opacity, end.opacity);
return function (t) {
    start.r = r(t);
    start.g = g(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + '';
};});
    color = (gamma, $__.fs.gamma_217)(y, 0, true, $__.uid);
    rgb.gamma = rgbGamma;
    return rgb;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
color = gamma(y);
rgb.gamma = rgbGamma;
return rgb;}), $__.fs.rgbGamma_1015)(1, 0, true, $__.uid);
    rgbBasis = (rgbSpline, $__.fs.rgbSpline_219)((basis$2, $__.fs.basis$2_211), 0, true, $__.uid);
    rgbBasisClosed = (rgbSpline, $__.fs.rgbSpline_219)((basisClosed$1, $__.fs.basisClosed$1_212), 1, true, $__.uid);
    reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
    reB = new RegExp(TAJS_restrictToType(reA.source, 'string'), 'g');
    degrees = 180 / (Math.PI, 3.141592653589793);
    identity$2 = $__.os.oid38 = {
        'translateX': 0,
        'translateY': 0,
        'rotate': 0,
        'skewX': 0,
        'scaleX': 1,
        'scaleY': 1
    };
    interpolateTransform$1 = (interpolateTransform, $__.fs.interpolateTransform_232)((parseCss, $__.fs.parseCss_230), 'px, ', 'px)', 'deg)', 0, true, $__.uid);
    interpolateTransform$2 = (interpolateTransform, $__.fs.interpolateTransform_232)((parseSvg, $__.fs.parseSvg_231), ', ', ')', ')', 1, true, $__.uid);
    rho = (Math.SQRT2, 1.4142135623730951);
    rho2 = 2;
    rho4 = 4;
    epsilon2 = 1e-12;
    hsl$1 = (hsl, $__.fs.hsl_237)((hue, $__.fs.hue_216), 0, true, $__.uid);
    hslLong = (hsl, $__.fs.hsl_237)((nogamma, $__.fs.nogamma_218), 1, true, $__.uid);
    hcl$1 = (hcl, $__.fs.hcl_239)((hue, $__.fs.hue_216), 0, true, $__.uid);
    hclLong = (hcl, $__.fs.hcl_239)((nogamma, $__.fs.nogamma_218), 1, true, $__.uid);
    cubehelix$2 = (cubehelix$1, $__.fs.cubehelix$1_240)((hue, $__.fs.hue_216), 0, true, $__.uid);
    interpolateCubehelixLong = (cubehelix$1, $__.fs.cubehelix$1_240)((nogamma, $__.fs.nogamma_218), 1, true, $__.uid);
    noop$1 = $__.os.oid39 = {
        'value': ($__.fs.J$__v2246113107_795_1039 = function J$__v2246113107_795() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');})
    };
    Dispatch.prototype = dispatch.prototype = $__.os.oid40 = {
        'constructor': Dispatch,
        'on': ($__.fs.J$__v2246113107_802_1040 = function J$__v2246113107_802(typename, callback) {
var vvv_return, vvv_switch, _, T, t, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
typename = arguments[0], callback = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
_ = this._;
T = parseTypenames(typename + '', _);
i = -1;
n = T.length;
if (arguments.length < 2) {
    while (++i < n)
        if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name)))
        return t;
    return;
}
if (callback != null && typeof callback !== 'function')
    throw new Error('invalid callback: ' + callback);
while (++i < n) {
    if (t = (typename = T[i]).type)
        _[t] = set$1(_[t], typename.name, callback);
    else if (callback == null)
        for (t in _)
        _[t] = set$1(_[t], typename.name, null);
}
return this;}),
        'copy': ($__.fs.J$__v2246113107_804_1041 = function J$__v2246113107_804() {
var vvv_return, vvv_switch, copy, _;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
copy = {};
_ = this._;
for (var t in _)
    copy[t] = _[t].slice();
return new Dispatch(copy);}),
        'call': ($__.fs.J$__v2246113107_806_1042 = function J$__v2246113107_806(type, that) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0], that = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if ((n = arguments.length - 2) > 0)
    for (var args = new Array(n), i = 0, n, t; i < n; ++i)
    args[i] = arguments[i + 2];
if (!this._.hasOwnProperty(type))
    throw new Error('unknown type: ' + type);
for (t = this._[type], i = 0, n = t.length; i < n; ++i)
    t[i].value.apply(that, args);}),
        'apply': ($__.fs.J$__v2246113107_808_1043 = function J$__v2246113107_808(type, that, args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0], that = arguments[1], args = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!this._.hasOwnProperty(type))
    throw new Error('unknown type: ' + type);
for (var t = this._[type], i = 0, n = t.length; i < n; ++i)
    t[i].value.apply(that, args);})
    };
    csv = (dsv, $__.fs.dsv_250)(',', 0, true, $__.uid);
    csvParse = TAJS_restrictToType((csv, $__.os.oid41).parse, 'function');
    csvParseRows = TAJS_restrictToType((csv, $__.os.oid41).parseRows, 'function');
    csvFormat = TAJS_restrictToType((csv, $__.os.oid41).format, 'function');
    csvFormatRows = TAJS_restrictToType((csv, $__.os.oid41).formatRows, 'function');
    tsv = (dsv, $__.fs.dsv_250)('\t', 1, true, $__.uid);
    tsvParse = TAJS_restrictToType((tsv, $__.os.oid42).parse, 'function');
    tsvParseRows = TAJS_restrictToType((tsv, $__.os.oid42).parseRows, 'function');
    tsvFormat = TAJS_restrictToType((tsv, $__.os.oid42).format, 'function');
    tsvFormatRows = TAJS_restrictToType((tsv, $__.os.oid42).formatRows, 'function');
    html = (type, $__.fs.type_254)('text/html', ($__.fs.J$__v2246113107_877_1056 = function J$__v2246113107_877(xhr) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xhr = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return document.createRange().createContextualFragment(xhr.responseText);}), 0, true, $__.uid);
    json = (type, $__.fs.type_254)('application/json', ($__.fs.J$__v2246113107_879_1058 = function J$__v2246113107_879(xhr) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xhr = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return JSON.parse(xhr.responseText);}), 1, true, $__.uid);
    text = (type, $__.fs.type_254)('text/plain', ($__.fs.J$__v2246113107_881_1060 = function J$__v2246113107_881(xhr) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xhr = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return xhr.responseText;}), 2, true, $__.uid);
    xml = (type, $__.fs.type_254)('application/xml', ($__.fs.J$__v2246113107_883_1062 = function J$__v2246113107_883(xhr) {
var vvv_return, vvv_switch, xml;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xhr = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
xml = xhr.responseXML;
if (!xml)
    throw new Error('parse error');
return xml;}), 3, true, $__.uid);
    csv$1 = (dsv$1, $__.fs.dsv$1_255)('text/csv', (csvParse, $__.fs.parse_1044), 0, true, $__.uid);
    tsv$1 = (dsv$1, $__.fs.dsv$1_255)('text/tab-separated-values', (tsvParse, $__.fs.parse_1050), 1, true, $__.uid);
    frame = 0;
    timeout = 0;
    interval = 0;
    pokeDelay = 1000;
    clockLast = 0;
    clockNow = 0;
    clockSkew = 0;
    clock = ((typeof performance === 'object', TAJS_restrictToType(performance.now, 'function')), performance);
    setFrame = (typeof requestAnimationFrame === 'function', (clock === Date, requestAnimationFrame));
    Timer.prototype = timer.prototype = $__.os.oid43 = {
        'constructor': Timer,
        'restart': ($__.fs.J$__v2246113107_902_1066 = function J$__v2246113107_902(callback, delay, time) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
callback = arguments[0], delay = arguments[1], time = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof callback !== 'function')
    throw new TypeError('callback is not a function');
time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
if (!this._next && taskTail !== this) {
    if (taskTail)
        taskTail._next = this;
    else
        taskHead = this;
    taskTail = this;
}
this._call = callback;
this._time = time;
sleep();}),
        'stop': ($__.fs.J$__v2246113107_904_1067 = function J$__v2246113107_904() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this._call) {
    this._call = null;
    this._time = Infinity;
    sleep();
}})
    };
    t0$1 = new Date(1493924340759);
    t1$1 = new Date(1493924340759);
    millisecond = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_941_1068 = function J$__v2246113107_941() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');}), ($__.fs.J$__v2246113107_943_1069 = function J$__v2246113107_943(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setTime(+date + step);}), ($__.fs.J$__v2246113107_945_1070 = function J$__v2246113107_945(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return end - start;}), 0, true, $__.uid);
    millisecond.every = ($__.fs.J$__v2246113107_953_1079 = function J$__v2246113107_953(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
k = Math.floor(k);
if (!isFinite(k) || !(k > 0))
    return null;
if (!(k > 1))
    return millisecond;
return newInterval(function (date) {
    date.setTime(Math.floor(date / k) * k);
}, function (date, step) {
    date.setTime(+date + step * k);
}, function (start, end) {
    return (end - start) / k;
});});
    milliseconds = TAJS_restrictToType(millisecond.range, 'function');
    durationSecond = 1000;
    durationMinute = 60000;
    durationHour = 3600000;
    durationDay = 86400000;
    durationWeek = 604800000;
    second = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_955_1080 = function J$__v2246113107_955(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setTime(Math.floor(date / durationSecond) * durationSecond);}), ($__.fs.J$__v2246113107_957_1081 = function J$__v2246113107_957(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setTime(+date + step * durationSecond);}), ($__.fs.J$__v2246113107_959_1082 = function J$__v2246113107_959(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationSecond;}), ($__.fs.J$__v2246113107_961_1083 = function J$__v2246113107_961(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getUTCSeconds();}), 1, true, $__.uid);
    seconds = TAJS_restrictToType(second.range, 'function');
    minute = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_963_1092 = function J$__v2246113107_963(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setTime(Math.floor(date / durationMinute) * durationMinute);}), ($__.fs.J$__v2246113107_965_1093 = function J$__v2246113107_965(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setTime(+date + step * durationMinute);}), ($__.fs.J$__v2246113107_967_1094 = function J$__v2246113107_967(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationMinute;}), ($__.fs.J$__v2246113107_969_1095 = function J$__v2246113107_969(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getMinutes();}), 2, true, $__.uid);
    minutes = TAJS_restrictToType(minute.range, 'function');
    hour = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_971_1104 = function J$__v2246113107_971(date) {
var vvv_return, vvv_switch, offset;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
offset = date.getTimezoneOffset() * durationMinute % durationHour;
if (offset < 0)
    offset += durationHour;
date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);}), ($__.fs.J$__v2246113107_973_1105 = function J$__v2246113107_973(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setTime(+date + step * durationHour);}), ($__.fs.J$__v2246113107_975_1106 = function J$__v2246113107_975(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationHour;}), ($__.fs.J$__v2246113107_977_1107 = function J$__v2246113107_977(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getHours();}), 3, true, $__.uid);
    hours = TAJS_restrictToType(hour.range, 'function');
    day = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_979_1116 = function J$__v2246113107_979(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_981_1117 = function J$__v2246113107_981(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(date.getDate() + step);}), ($__.fs.J$__v2246113107_983_1118 = function J$__v2246113107_983(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;}), ($__.fs.J$__v2246113107_985_1119 = function J$__v2246113107_985(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getDate() - 1;}), 4, true, $__.uid);
    days = TAJS_restrictToType(day.range, 'function');
    timeWeek = (weekday, $__.fs.weekday_269)(0, 0, true, $__.uid);
    timeMonday = (weekday, $__.fs.weekday_269)(1, 1, true, $__.uid);
    tuesday = (weekday, $__.fs.weekday_269)(2, 2, true, $__.uid);
    wednesday = (weekday, $__.fs.weekday_269)(3, 3, true, $__.uid);
    thursday = (weekday, $__.fs.weekday_269)(4, 4, true, $__.uid);
    friday = (weekday, $__.fs.weekday_269)(5, 5, true, $__.uid);
    saturday = (weekday, $__.fs.weekday_269)(6, 6, true, $__.uid);
    sundays = TAJS_restrictToType(timeWeek.range, 'function');
    mondays = TAJS_restrictToType(timeMonday.range, 'function');
    tuesdays = TAJS_restrictToType(tuesday.range, 'function');
    wednesdays = TAJS_restrictToType(wednesday.range, 'function');
    thursdays = TAJS_restrictToType(thursday.range, 'function');
    fridays = TAJS_restrictToType(friday.range, 'function');
    saturdays = TAJS_restrictToType(saturday.range, 'function');
    month = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_994_1205 = function J$__v2246113107_994(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setDate(1);
date.setHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_996_1206 = function J$__v2246113107_996(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setMonth(date.getMonth() + step);}), ($__.fs.J$__v2246113107_998_1207 = function J$__v2246113107_998(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;}), ($__.fs.J$__v2246113107_1000_1208 = function J$__v2246113107_1000(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getMonth();}), 12, true, $__.uid);
    months = TAJS_restrictToType(month.range, 'function');
    year = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1002_1217 = function J$__v2246113107_1002(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setMonth(0, 1);
date.setHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1004_1218 = function J$__v2246113107_1004(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setFullYear(date.getFullYear() + step);}), ($__.fs.J$__v2246113107_1006_1219 = function J$__v2246113107_1006(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return end.getFullYear() - start.getFullYear();}), ($__.fs.J$__v2246113107_1008_1220 = function J$__v2246113107_1008(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getFullYear();}), 13, true, $__.uid);
    year.every = ($__.fs.J$__v2246113107_1014_1229 = function J$__v2246113107_1014(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
}, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
});});
    years = TAJS_restrictToType(year.range, 'function');
    utcMinute = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1016_1230 = function J$__v2246113107_1016(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCSeconds(0, 0);}), ($__.fs.J$__v2246113107_1018_1231 = function J$__v2246113107_1018(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setTime(+date + step * durationMinute);}), ($__.fs.J$__v2246113107_1020_1232 = function J$__v2246113107_1020(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationMinute;}), ($__.fs.J$__v2246113107_1022_1233 = function J$__v2246113107_1022(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getUTCMinutes();}), 14, true, $__.uid);
    utcMinutes = TAJS_restrictToType(utcMinute.range, 'function');
    utcHour = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1024_1242 = function J$__v2246113107_1024(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCMinutes(0, 0, 0);}), ($__.fs.J$__v2246113107_1026_1243 = function J$__v2246113107_1026(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setTime(+date + step * durationHour);}), ($__.fs.J$__v2246113107_1028_1244 = function J$__v2246113107_1028(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationHour;}), ($__.fs.J$__v2246113107_1030_1245 = function J$__v2246113107_1030(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getUTCHours();}), 15, true, $__.uid);
    utcHours = TAJS_restrictToType(utcHour.range, 'function');
    utcDay = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1032_1254 = function J$__v2246113107_1032(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1034_1255 = function J$__v2246113107_1034(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(date.getUTCDate() + step);}), ($__.fs.J$__v2246113107_1036_1256 = function J$__v2246113107_1036(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (end - start) / durationDay;}), ($__.fs.J$__v2246113107_1038_1257 = function J$__v2246113107_1038(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getUTCDate() - 1;}), 16, true, $__.uid);
    utcDays = TAJS_restrictToType(utcDay.range, 'function');
    utcWeek = (utcWeekday, $__.fs.utcWeekday_270)(0, 0, true, $__.uid);
    utcMonday = (utcWeekday, $__.fs.utcWeekday_270)(1, 1, true, $__.uid);
    utcTuesday = (utcWeekday, $__.fs.utcWeekday_270)(2, 2, true, $__.uid);
    utcWednesday = (utcWeekday, $__.fs.utcWeekday_270)(3, 3, true, $__.uid);
    utcThursday = (utcWeekday, $__.fs.utcWeekday_270)(4, 4, true, $__.uid);
    utcFriday = (utcWeekday, $__.fs.utcWeekday_270)(5, 5, true, $__.uid);
    utcSaturday = (utcWeekday, $__.fs.utcWeekday_270)(6, 6, true, $__.uid);
    utcSundays = TAJS_restrictToType(utcWeek.range, 'function');
    utcMondays = TAJS_restrictToType(utcMonday.range, 'function');
    utcTuesdays = TAJS_restrictToType(utcTuesday.range, 'function');
    utcWednesdays = TAJS_restrictToType(utcWednesday.range, 'function');
    utcThursdays = TAJS_restrictToType(utcThursday.range, 'function');
    utcFridays = TAJS_restrictToType(utcFriday.range, 'function');
    utcSaturdays = TAJS_restrictToType(utcSaturday.range, 'function');
    utcMonth = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1047_1343 = function J$__v2246113107_1047(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCDate(1);
date.setUTCHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1049_1344 = function J$__v2246113107_1049(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCMonth(date.getUTCMonth() + step);}), ($__.fs.J$__v2246113107_1051_1345 = function J$__v2246113107_1051(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;}), ($__.fs.J$__v2246113107_1053_1346 = function J$__v2246113107_1053(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getUTCMonth();}), 24, true, $__.uid);
    utcMonths = TAJS_restrictToType(utcMonth.range, 'function');
    utcYear = (newInterval, $__.fs.newInterval_268)(($__.fs.J$__v2246113107_1055_1355 = function J$__v2246113107_1055(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCMonth(0, 1);
date.setUTCHours(0, 0, 0, 0);}), ($__.fs.J$__v2246113107_1057_1356 = function J$__v2246113107_1057(date, step) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0], step = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
date.setUTCFullYear(date.getUTCFullYear() + step);}), ($__.fs.J$__v2246113107_1059_1357 = function J$__v2246113107_1059(start, end) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], end = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return end.getUTCFullYear() - start.getUTCFullYear();}), ($__.fs.J$__v2246113107_1061_1358 = function J$__v2246113107_1061(date) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
date = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return date.getUTCFullYear();}), 25, true, $__.uid);
    utcYear.every = ($__.fs.J$__v2246113107_1067_1367 = function J$__v2246113107_1067(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
});});
    utcYears = TAJS_restrictToType(utcYear.range, 'function');
    formatTypes = $__.os.oid44 = {
        '': formatDefault,
        '%': ($__.fs.J$__v2246113107_1077_1368 = function J$__v2246113107_1077(x, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (x * 100).toFixed(p);}),
        'b': ($__.fs.J$__v2246113107_1079_1369 = function J$__v2246113107_1079(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.round(x).toString(2);}),
        'c': ($__.fs.J$__v2246113107_1081_1370 = function J$__v2246113107_1081(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x + '';}),
        'd': ($__.fs.J$__v2246113107_1083_1371 = function J$__v2246113107_1083(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.round(x).toString(10);}),
        'e': ($__.fs.J$__v2246113107_1085_1372 = function J$__v2246113107_1085(x, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x.toExponential(p);}),
        'f': ($__.fs.J$__v2246113107_1087_1373 = function J$__v2246113107_1087(x, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x.toFixed(p);}),
        'g': ($__.fs.J$__v2246113107_1089_1374 = function J$__v2246113107_1089(x, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x.toPrecision(p);}),
        'o': ($__.fs.J$__v2246113107_1091_1375 = function J$__v2246113107_1091(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.round(x).toString(8);}),
        'p': ($__.fs.J$__v2246113107_1093_1376 = function J$__v2246113107_1093(x, p) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], p = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return formatRounded(x * 100, p);}),
        'r': formatRounded,
        's': formatPrefixAuto,
        'X': ($__.fs.J$__v2246113107_1095_1377 = function J$__v2246113107_1095(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.round(x).toString(16).toUpperCase();}),
        'x': ($__.fs.J$__v2246113107_1097_1378 = function J$__v2246113107_1097(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.round(x).toString(16);})
    };
    re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
    TAJS_restrictToType(FormatSpecifier.prototype, 'object').toString = ($__.fs.J$__v2246113107_1101_1379 = function J$__v2246113107_1101() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.fill + this.align + this.sign + this.symbol + (this.zero ? '0' : '') + (this.width == null ? '' : Math.max(1, this.width | 0)) + (this.comma ? ',' : '') + (this.precision == null ? '' : '.' + Math.max(0, this.precision | 0)) + this.type;});
    prefixes = [
        'y',
        'z',
        'a',
        'f',
        'p',
        'n',
        '\xB5',
        'm',
        '',
        'k',
        'M',
        'G',
        'T',
        'P',
        'E',
        'Z',
        'Y'
    ];
    (defaultLocale, $__.fs.defaultLocale_281)($__.os.oid45 = {
        'decimal': '.',
        'thousands': ',',
        'grouping': [3],
        'currency': [
            '$',
            ''
        ]
    }, 0, true, $__.uid);
    pads = $__.os.oid47 = {
        '-': '',
        '_': ' ',
        '0': '0'
    };
    numberRe = /^\s*\d+/;
    percentRe = /^%/;
    requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    (defaultLocale$1, $__.fs.defaultLocale$1_336)($__.os.oid48 = {
        'dateTime': '%x, %X',
        'date': '%-m/%-d/%Y',
        'time': '%-I:%M:%S %p',
        'periods': [
            'AM',
            'PM'
        ],
        'days': [
            'Sunday',
            'Monday',
            'Tuesday',
            'Wednesday',
            'Thursday',
            'Friday',
            'Saturday'
        ],
        'shortDays': [
            'Sun',
            'Mon',
            'Tue',
            'Wed',
            'Thu',
            'Fri',
            'Sat'
        ],
        'months': [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
        ],
        'shortMonths': [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec'
        ]
    }, 0, true, $__.uid);
    isoSpecifier = '%Y-%m-%dT%H:%M:%S.%LZ';
    formatIso = (TAJS_restrictToType(TAJS_restrictToType(Date.prototype, 'object').toISOString, 'function'), formatIsoNative);
    parseIso = (+new Date('2000-01-01T00:00:00.000Z'), parseIsoNative);
    array$2 = TAJS_restrictToType(Array.prototype, 'object');
    map$2 = TAJS_restrictToType(array$2.map, 'function');
    slice$3 = TAJS_restrictToType(array$2.slice, 'function');
    implicit = $__.os.oid58 = {
        'name': 'implicit'
    };
    unit = [
        0,
        1
    ];
    durationSecond$1 = 1000;
    durationMinute$1 = durationSecond$1 * 60;
    durationHour$1 = durationMinute$1 * 60;
    durationDay$1 = durationHour$1 * 24;
    durationWeek$1 = durationDay$1 * 7;
    durationMonth = durationDay$1 * 30;
    durationYear = durationDay$1 * 365;
    category10 = (colors, $__.fs.colors_375)('1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf', 0, true, $__.uid);
    category20b = (colors, $__.fs.colors_375)('393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6', 1, true, $__.uid);
    category20c = (colors, $__.fs.colors_375)('3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9', 2, true, $__.uid);
    category20 = (colors, $__.fs.colors_375)('1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5', 3, true, $__.uid);
    cubehelix$3 = (interpolateCubehelixLong, $__.fs.cubehelix$$_1038)((cubehelix, $__.fs.cubehelix_208)(300, 0.5, 0, 0, true, $__.uid), (cubehelix, $__.fs.cubehelix_208)(-240, 0.5, 1, 1, true, $__.uid), 0, true, $__.uid);
    warm = (interpolateCubehelixLong, $__.fs.cubehelix$$_1038)((cubehelix, $__.fs.cubehelix_208)(-100, 0.75, 0.35, 4, true, $__.uid), (cubehelix, $__.fs.cubehelix_208)(80, 1.5, 0.8, 5, true, $__.uid), 1, true, $__.uid);
    cool = (interpolateCubehelixLong, $__.fs.cubehelix$$_1038)((cubehelix, $__.fs.cubehelix_208)(260, 0.75, 0.35, 8, true, $__.uid), (cubehelix, $__.fs.cubehelix_208)(80, 1.5, 0.8, 9, true, $__.uid), 2, true, $__.uid);
    rainbow = (cubehelix, $__.fs.cubehelix_208)(12, true, $__.uid);
    viridis = (ramp, $__.fs.ramp_377)((colors, $__.fs.colors_375)('44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725', 4, true, $__.uid), 0, true, $__.uid);
    magma = (ramp, $__.fs.ramp_377)((colors, $__.fs.colors_375)('00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf', 5, true, $__.uid), 1, true, $__.uid);
    inferno = (ramp, $__.fs.ramp_377)((colors, $__.fs.colors_375)('00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4', 6, true, $__.uid), 2, true, $__.uid);
    plasma = (ramp, $__.fs.ramp_377)((colors, $__.fs.colors_375)('0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921', 7, true, $__.uid), 3, true, $__.uid);
    xhtml = 'http://www.w3.org/1999/xhtml';
    namespaces = $__.os.oid59 = {
        'svg': 'http://www.w3.org/2000/svg',
        'xhtml': xhtml,
        'xlink': 'http://www.w3.org/1999/xlink',
        'xml': 'http://www.w3.org/XML/1998/namespace',
        'xmlns': 'http://www.w3.org/2000/xmlns/'
    };
    nextId = 0;
    Local.prototype = local.prototype = $__.os.oid60 = {
        'constructor': Local,
        'get': ($__.fs.J$__v2246113107_1441_1441 = function J$__v2246113107_1441(node) {
var vvv_return, vvv_switch, id;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
id = this._;
while (!(id in node))
    if (!(node = node.parentNode))
    return;
return node[id];}),
        'set': ($__.fs.J$__v2246113107_1443_1442 = function J$__v2246113107_1443(node, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return node[this._] = value;}),
        'remove': ($__.fs.J$__v2246113107_1445_1443 = function J$__v2246113107_1445(node) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._ in node && delete node[this._];}),
        'toString': ($__.fs.J$__v2246113107_1447_1444 = function J$__v2246113107_1447() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._;})
    };
    matcher = ($__.fs.J$__v2246113107_1451_1445 = function J$__v2246113107_1451(selector) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
selector = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function () {
    return this.matches(selector);
};});
    typeof document !== 'undefined';
    element = TAJS_restrictToType(document.documentElement, 'HTMLHtmlElement');
    !TAJS_restrictToType(element.matches, 'function');
    matcher$1 = matcher;
    filterEvents = $__.os.oid61 = {};
    (exports, $__.os.oid0).event = null;
    typeof document !== 'undefined';
    element$1 = TAJS_restrictToType(document.documentElement, 'HTMLHtmlElement');
    !('onmouseenter' in element$1);
    EnterNode.prototype = $__.os.oid62 = {
        'constructor': EnterNode,
        'appendChild': ($__.fs.J$__v2246113107_1492_1446 = function J$__v2246113107_1492(child) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
child = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._parent.insertBefore(child, this._next);}),
        'insertBefore': ($__.fs.J$__v2246113107_1494_1447 = function J$__v2246113107_1494(child, next) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
child = arguments[0], next = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._parent.insertBefore(child, next);}),
        'querySelector': ($__.fs.J$__v2246113107_1496_1448 = function J$__v2246113107_1496(selector) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
selector = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._parent.querySelector(selector);}),
        'querySelectorAll': ($__.fs.J$__v2246113107_1498_1449 = function J$__v2246113107_1498(selector) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
selector = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._parent.querySelectorAll(selector);})
    };
    keyPrefix = '$';
    ClassList.prototype = $__.os.oid63 = {
        'add': ($__.fs.J$__v2246113107_1567_1450 = function J$__v2246113107_1567(name) {
var vvv_return, vvv_switch, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = this._names.indexOf(name);
if (i < 0) {
    this._names.push(name);
    this._node.setAttribute('class', this._names.join(' '));
}}),
        'remove': ($__.fs.J$__v2246113107_1569_1451 = function J$__v2246113107_1569(name) {
var vvv_return, vvv_switch, i;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = this._names.indexOf(name);
if (i >= 0) {
    this._names.splice(i, 1);
    this._node.setAttribute('class', this._names.join(' '));
}}),
        'contains': ($__.fs.J$__v2246113107_1571_1452 = function J$__v2246113107_1571(name) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
name = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._names.indexOf(name) >= 0;})
    };
    root = [null];
    Selection.prototype = selection.prototype = $__.os.oid64 = {
        'constructor': Selection,
        'select': selection_select,
        'selectAll': selection_selectAll,
        'filter': selection_filter,
        'data': selection_data,
        'enter': selection_enter,
        'exit': selection_exit,
        'merge': selection_merge,
        'order': selection_order,
        'sort': selection_sort,
        'call': selection_call,
        'nodes': selection_nodes,
        'node': selection_node,
        'size': selection_size,
        'empty': selection_empty,
        'each': selection_each,
        'attr': selection_attr,
        'style': selection_style,
        'property': selection_property,
        'classed': selection_classed,
        'text': selection_text,
        'html': selection_html,
        'raise': selection_raise,
        'lower': selection_lower,
        'append': selection_append,
        'insert': selection_insert,
        'remove': selection_remove,
        'datum': selection_datum,
        'on': selection_on,
        'dispatch': selection_dispatch
    };
    emptyOn = (dispatch, $__.fs.dispatch_242)('start', 'end', 'interrupt', 0, true, $__.uid);
    emptyTween = [];
    CREATED = 0;
    SCHEDULED = 1;
    STARTING = 2;
    STARTED = 3;
    ENDING = 4;
    ENDED = 5;
    Selection$1 = TAJS_restrictToType(((selection.prototype, $__.os.oid64), $__.os.oid64).constructor, 'function');
    id = 0;
    selection_prototype = (selection.prototype, $__.os.oid64);
    Transition.prototype = transition.prototype = $__.os.oid66 = {
        'constructor': Transition,
        'select': transition_select,
        'selectAll': transition_selectAll,
        'filter': transition_filter,
        'merge': transition_merge,
        'selection': transition_selection,
        'transition': transition_transition,
        'call': TAJS_restrictToType((selection_prototype, $__.os.oid64).call, 'function'),
        'nodes': TAJS_restrictToType((selection_prototype, $__.os.oid64).nodes, 'function'),
        'node': TAJS_restrictToType((selection_prototype, $__.os.oid64).node, 'function'),
        'size': TAJS_restrictToType((selection_prototype, $__.os.oid64).size, 'function'),
        'empty': TAJS_restrictToType((selection_prototype, $__.os.oid64).empty, 'function'),
        'each': TAJS_restrictToType((selection_prototype, $__.os.oid64).each, 'function'),
        'on': transition_on,
        'attr': transition_attr,
        'attrTween': transition_attrTween,
        'style': transition_style,
        'styleTween': transition_styleTween,
        'text': transition_text,
        'remove': transition_remove,
        'tween': transition_tween,
        'delay': transition_delay,
        'duration': transition_duration,
        'ease': transition_ease
    };
    defaultTiming = $__.os.oid67 = {
        'time': null,
        'delay': 0,
        'duration': 250,
        'ease': easeCubicInOut
    };
    ((selection.prototype, $__.os.oid64), $__.os.oid64).interrupt = selection_interrupt;
    ((selection.prototype, $__.os.oid64), $__.os.oid64).transition = selection_transition;
    root$1 = [null];
    slice$4 = TAJS_restrictToType(TAJS_restrictToType(Array.prototype, 'object').slice, 'function');
    top = 1;
    right = 2;
    bottom = 3;
    left = 4;
    epsilon$2 = 0.000001;
    Node.prototype = hierarchy.prototype = $__.os.oid68 = {
        'constructor': Node,
        'each': node_each,
        'eachAfter': node_eachAfter,
        'eachBefore': node_eachBefore,
        'sum': node_sum,
        'sort': node_sort,
        'path': node_path,
        'ancestors': node_ancestors,
        'descendants': node_descendants,
        'leaves': node_leaves,
        'links': node_links,
        'copy': node_copy
    };
    keyPrefix$1 = '$';
    preroot = $__.os.oid69 = {
        'depth': -1
    };
    ambiguous = $__.os.oid70 = {};
    TreeNode.prototype = Object['create']((Node.prototype, $__.os.oid68));
    phi = (1 + Math['sqrt'](5)) / 2;
    squarify = (($__.fs.custom_1453 = function custom(ratio) {
var vvv_return, vvv_switch, squarify;
squarify = function squarify(parent, x0, y0, x1, y1) {
    squarifyRatio(ratio, parent, x0, y0, x1, y1);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    squarify = ($__.fs.squarify_1454 = function squarify(parent, x0, y0, x1, y1) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parent = arguments[0], x0 = arguments[1], y0 = arguments[2], x1 = arguments[3], y1 = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
squarifyRatio(ratio, parent, x0, y0, x1, y1);});
    squarify.ratio = ($__.fs.J$__v2246113107_1927_1455 = function J$__v2246113107_1927(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom((x = +x) > 1 ? x : 1);});
    return squarify;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
squarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
};
return squarify;}), $__.fs.custom_1453)(phi, 0, true, $__.uid);
    resquarify = (($__.fs.custom_1456 = function custom(ratio) {
var vvv_return, vvv_switch, resquarify;
resquarify = function resquarify(parent, x0, y0, x1, y1) {
    if ((rows = parent._squarify) && rows.ratio === ratio) {
        var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;
        while (++j < m) {
            row = rows[j], nodes = row.children;
            for (i = row.value = 0, n = nodes.length; i < n; ++i)
                row.value += nodes[i].value;
            if (row.dice)
                treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
            else
                treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
            value -= row.value;
        }
    } else {
        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
        rows.ratio = ratio;
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    resquarify = ($__.fs.resquarify_1457 = function resquarify(parent, x0, y0, x1, y1) {
var vvv_return, vvv_switch, rows, row, nodes, i, j, n, m, value;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
parent = arguments[0], x0 = arguments[1], y0 = arguments[2], x1 = arguments[3], y1 = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if ((rows = parent._squarify) && rows.ratio === ratio) {
    j = -1;
    m = rows.length;
    value = parent.value;
    while (++j < m) {
        row = rows[j], nodes = row.children;
        for (i = row.value = 0, n = nodes.length; i < n; ++i)
            row.value += nodes[i].value;
        if (row.dice)
            treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
        else
            treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
        value -= row.value;
    }
} else {
    parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
    rows.ratio = ratio;
}});
    resquarify.ratio = ($__.fs.J$__v2246113107_1957_1458 = function J$__v2246113107_1957(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return custom((x = +x) > 1 ? x : 1);});
    return resquarify;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
resquarify.ratio = function (x) {
    return custom((x = +x) > 1 ? x : 1);
};
return resquarify;}), $__.fs.custom_1456)(phi, 0, true, $__.uid);
    initialRadius = 10;
    initialAngle = (Math.PI, 3.141592653589793) * (3 - Math['sqrt'](5));
    TAJS_restrictToType(DragEvent.prototype, 'object').on = ($__.fs.J$__v2246113107_2080_1459 = function J$__v2246113107_2080() {
var vvv_return, vvv_switch, value;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
value = this._.on.apply(this._, arguments);
return value === this._ ? this : value;});
    RedBlackTree.prototype = $__.os.oid71 = {
        'constructor': RedBlackTree,
        'insert': ($__.fs.J$__v2246113107_2114_1460 = function J$__v2246113107_2114(after, node) {
var vvv_return, vvv_switch, parent, grandpa, uncle;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
after = arguments[0], node = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (after) {
    node.P = after;
    node.N = after.N;
    if (after.N)
        after.N.P = node;
    after.N = node;
    if (after.R) {
        after = after.R;
        while (after.L)
            after = after.L;
        after.L = node;
    } else {
        after.R = node;
    }
    parent = after;
} else if (this._) {
    after = RedBlackFirst(this._);
    node.P = null;
    node.N = after;
    after.P = after.L = node;
    parent = after;
} else {
    node.P = node.N = null;
    this._ = node;
    parent = null;
}
node.L = node.R = null;
node.U = parent;
node.C = true;
after = node;
while (parent && parent.C) {
    grandpa = parent.U;
    if (parent === grandpa.L) {
        uncle = grandpa.R;
        if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
        } else {
            if (after === parent.R) {
                RedBlackRotateLeft(this, parent);
                after = parent;
                parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            RedBlackRotateRight(this, grandpa);
        }
    } else {
        uncle = grandpa.L;
        if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
        } else {
            if (after === parent.L) {
                RedBlackRotateRight(this, parent);
                after = parent;
                parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            RedBlackRotateLeft(this, grandpa);
        }
    }
    parent = after.U;
}
this._.C = false;}),
        'remove': ($__.fs.J$__v2246113107_2116_1461 = function J$__v2246113107_2116(node) {
var vvv_return, vvv_switch, parent, sibling, left, right, next, red;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (node.N)
    node.N.P = node.P;
if (node.P)
    node.P.N = node.N;
node.N = node.P = null;
parent = node.U;
left = node.L;
right = node.R;
if (!left)
    next = right;
else if (!right)
    next = left;
else
    next = RedBlackFirst(right);
if (parent) {
    if (parent.L === node)
        parent.L = next;
    else
        parent.R = next;
} else {
    this._ = next;
}
if (left && right) {
    red = next.C;
    next.C = node.C;
    next.L = left;
    left.U = next;
    if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
    } else {
        next.U = parent;
        parent = next;
        node = next.R;
    }
} else {
    red = node.C;
    node = next;
}
if (node)
    node.U = parent;
if (red)
    return;
if (node && node.C) {
    node.C = false;
    return;
}
do {
    if (node === this._)
        break;
    if (node === parent.L) {
        sibling = parent.R;
        if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            RedBlackRotateLeft(this, parent);
            sibling = parent.R;
        }
        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
                sibling.L.C = false;
                sibling.C = true;
                RedBlackRotateRight(this, sibling);
                sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            RedBlackRotateLeft(this, parent);
            node = this._;
            break;
        }
    } else {
        sibling = parent.L;
        if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            RedBlackRotateRight(this, parent);
            sibling = parent.L;
        }
        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
                sibling.R.C = false;
                sibling.C = true;
                RedBlackRotateLeft(this, sibling);
                sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            RedBlackRotateRight(this, parent);
            node = this._;
            break;
        }
    }
    sibling.C = true;
    node = parent;
    parent = parent.U;
} while (!node.C);
if (node)
    node.C = false;})
    };
    circlePool = [];
    beachPool = [];
    epsilon$3 = 0.000001;
    epsilon2$1 = 1e-12;
    Diagram.prototype = $__.os.oid72 = {
        'constructor': Diagram,
        'polygons': ($__.fs.J$__v2246113107_2152_1462 = function J$__v2246113107_2152() {
var vvv_return, vvv_switch, edges;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
edges = this.edges;
return this.cells.map(function (cell) {
    var polygon = cell.halfedges.map(function (i) {
        return cellHalfedgeStart(cell, edges[i]);
    });
    polygon.data = cell.site.data;
    return polygon;
});}),
        'triangles': ($__.fs.J$__v2246113107_2156_1463 = function J$__v2246113107_2156() {
var vvv_return, vvv_switch, triangles, edges;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
triangles = [];
edges = this.edges;
this.cells.forEach(function (cell, i) {
    var site = cell.site, halfedges = cell.halfedges, j = -1, m = halfedges.length, s0, e1 = edges[halfedges[m - 1]], s1 = e1.left === site ? e1.right : e1.left;
    while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;
        if (i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
            triangles.push([
                site.data,
                s0.data,
                s1.data
            ]);
        }
    }
});
return triangles;}),
        'links': ($__.fs.J$__v2246113107_2162_1464 = function J$__v2246113107_2162() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.edges.filter(function (edge) {
    return edge.right;
}).map(function (edge) {
    return {
        source: edge.left.data,
        target: edge.right.data
    };
});})
    };
    Transform.prototype = $__.os.oid73 = {
        'constructor': Transform,
        'scale': ($__.fs.J$__v2246113107_2187_1465 = function J$__v2246113107_2187(k) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
k = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return k === 1 ? this : new Transform(this.k * k, this.x, this.y);}),
        'translate': ($__.fs.J$__v2246113107_2189_1466 = function J$__v2246113107_2189(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);}),
        'apply': ($__.fs.J$__v2246113107_2191_1467 = function J$__v2246113107_2191(point) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    point[0] * this.k + this.x,
    point[1] * this.k + this.y
];}),
        'applyX': ($__.fs.J$__v2246113107_2193_1468 = function J$__v2246113107_2193(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x * this.k + this.x;}),
        'applyY': ($__.fs.J$__v2246113107_2195_1469 = function J$__v2246113107_2195(y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return y * this.k + this.y;}),
        'invert': ($__.fs.J$__v2246113107_2197_1470 = function J$__v2246113107_2197(location) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
location = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    (location[0] - this.x) / this.k,
    (location[1] - this.y) / this.k
];}),
        'invertX': ($__.fs.J$__v2246113107_2199_1471 = function J$__v2246113107_2199(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (x - this.x) / this.k;}),
        'invertY': ($__.fs.J$__v2246113107_2201_1472 = function J$__v2246113107_2201(y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (y - this.y) / this.k;}),
        'rescaleX': ($__.fs.J$__v2246113107_2203_1473 = function J$__v2246113107_2203(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));}),
        'rescaleY': ($__.fs.J$__v2246113107_2205_1474 = function J$__v2246113107_2205(y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));}),
        'toString': ($__.fs.J$__v2246113107_2207_1475 = function J$__v2246113107_2207() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 'translate(' + this.x + ',' + this.y + ') scale(' + this.k + ')';})
    };
    identity$6 = new (Transform, $__.fs.Transform_668)(1, 0, 0, 0, true, $__.uid);
    transform.prototype = (Transform.prototype, $__.os.oid73);
    MODE_DRAG = $__.os.oid74 = {
        'name': 'drag'
    };
    MODE_SPACE = $__.os.oid75 = {
        'name': 'space'
    };
    MODE_HANDLE = $__.os.oid76 = {
        'name': 'handle'
    };
    MODE_CENTER = $__.os.oid77 = {
        'name': 'center'
    };
    X = $__.os.oid80 = {
        'name': 'x',
        'handles': function $__lt21(res) {
            res.length = 2;
            if (res.length != 2)
                TAJS_dumpValue('Possible loss of precision');
            return res;
            ;
            TAJS_makeContextSensitive($__lt21, -2);
        }([
            'e',
            'w'
        ]['map'](((type$1, $__.fs.type$1_680), $__.fs.type$1_680_13))),
        'input': ($__.fs.J$__v2246113107_2287_1476 = function J$__v2246113107_2287(x, e) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], e = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return x && [
    [
        x[0],
        e[0][1]
    ],
    [
        x[1],
        e[1][1]
    ]
];}),
        'output': ($__.fs.J$__v2246113107_2289_1477 = function J$__v2246113107_2289(xy) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xy = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return xy && [
    xy[0][0],
    xy[1][0]
];})
    };
    Y = $__.os.oid83 = {
        'name': 'y',
        'handles': function $__lt22(res) {
            res.length = 2;
            if (res.length != 2)
                TAJS_dumpValue('Possible loss of precision');
            return res;
            ;
            TAJS_makeContextSensitive($__lt22, -2);
        }([
            'n',
            's'
        ]['map'](((type$1, $__.fs.type$1_680), $__.fs.type$1_680_14))),
        'input': ($__.fs.J$__v2246113107_2291_1478 = function J$__v2246113107_2291(y, e) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0], e = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return y && [
    [
        e[0][0],
        y[0]
    ],
    [
        e[1][0],
        y[1]
    ]
];}),
        'output': ($__.fs.J$__v2246113107_2293_1479 = function J$__v2246113107_2293(xy) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xy = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return xy && [
    xy[0][1],
    xy[1][1]
];})
    };
    XY = $__.os.oid92 = {
        'name': 'xy',
        'handles': function $__lt23(res) {
            res.length = 8;
            if (res.length != 8)
                TAJS_dumpValue('Possible loss of precision');
            return res;
            ;
            TAJS_makeContextSensitive($__lt23, -2);
        }([
            'n',
            'e',
            's',
            'w',
            'nw',
            'ne',
            'se',
            'sw'
        ]['map'](((type$1, $__.fs.type$1_680), $__.fs.type$1_680_15))),
        'input': ($__.fs.J$__v2246113107_2295_1480 = function J$__v2246113107_2295(xy) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xy = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return xy;}),
        'output': ($__.fs.J$__v2246113107_2297_1481 = function J$__v2246113107_2297(xy) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xy = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return xy;})
    };
    cursors = $__.os.oid93 = {
        'overlay': 'crosshair',
        'selection': 'move',
        'n': 'ns-resize',
        'e': 'ew-resize',
        's': 'ns-resize',
        'w': 'ew-resize',
        'nw': 'nwse-resize',
        'ne': 'nesw-resize',
        'se': 'nwse-resize',
        'sw': 'nesw-resize'
    };
    flipX = $__.os.oid94 = {
        'e': 'w',
        'w': 'e',
        'nw': 'ne',
        'ne': 'nw',
        'se': 'sw',
        'sw': 'se'
    };
    flipY = $__.os.oid95 = {
        'n': 's',
        's': 'n',
        'nw': 'sw',
        'ne': 'se',
        'se': 'ne',
        'sw': 'nw'
    };
    signsX = $__.os.oid96 = {
        'overlay': +1,
        'selection': +1,
        'n': null,
        'e': +1,
        's': null,
        'w': -1,
        'nw': -1,
        'ne': +1,
        'se': +1,
        'sw': -1
    };
    signsY = $__.os.oid97 = {
        'overlay': +1,
        'selection': +1,
        'n': -1,
        'e': null,
        's': +1,
        'w': null,
        'nw': -1,
        'ne': -1,
        'se': +1,
        'sw': +1
    };
    cos = TAJS_restrictToType(Math.cos, 'function');
    sin = TAJS_restrictToType(Math.sin, 'function');
    pi$3 = (Math.PI, 3.141592653589793);
    halfPi$2 = pi$3 / 2;
    tau$3 = pi$3 * 2;
    max$1 = TAJS_restrictToType(Math.max, 'function');
    slice$5 = TAJS_restrictToType(TAJS_restrictToType(Array.prototype, 'object').slice, 'function');
    Adder.prototype = $__.os.oid98 = {
        'constructor': Adder,
        'reset': ($__.fs.J$__v2246113107_2410_1482 = function J$__v2246113107_2410() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 7);
    this.s = this.t = 0;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.s = this.t = 0;}),
        'add': ($__.fs.J$__v2246113107_2412_1483 = function J$__v2246113107_2412(y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
y = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
add$1(temp, y, this.t);
add$1(this, temp.s, this.s);
if (this.s)
    this.t += temp.t;
else
    this.s = temp.t;}),
        'valueOf': ($__.fs.J$__v2246113107_2414_1484 = function J$__v2246113107_2414() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.s;})
    };
    temp = new (Adder, $__.fs.Adder_700)(0, true, $__.uid);
    epsilon$4 = 0.000001;
    epsilon2$2 = 1e-12;
    pi$4 = (Math.PI, 3.141592653589793);
    halfPi$3 = pi$4 / 2;
    quarterPi = pi$4 / 4;
    tau$4 = pi$4 * 2;
    degrees$1 = 180 / pi$4;
    radians = pi$4 / 180;
    abs = TAJS_restrictToType(Math.abs, 'function');
    atan = TAJS_restrictToType(Math.atan, 'function');
    atan2 = TAJS_restrictToType(Math.atan2, 'function');
    cos$1 = TAJS_restrictToType(Math.cos, 'function');
    ceil = TAJS_restrictToType(Math.ceil, 'function');
    exp = TAJS_restrictToType(Math.exp, 'function');
    log$1 = TAJS_restrictToType(Math.log, 'function');
    pow$1 = TAJS_restrictToType(Math.pow, 'function');
    sin$1 = TAJS_restrictToType(Math.sin, 'function');
    sign$1 = TAJS_restrictToType(Math.sign, 'function');
    sqrt$1 = TAJS_restrictToType(Math.sqrt, 'function');
    tan = TAJS_restrictToType(Math.tan, 'function');
    streamObjectType = $__.os.oid99 = {
        'Feature': ($__.fs.J$__v2246113107_2424_1485 = function J$__v2246113107_2424(feature, stream) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
feature = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
streamGeometry(feature.geometry, stream);}),
        'FeatureCollection': ($__.fs.J$__v2246113107_2426_1486 = function J$__v2246113107_2426(object, stream) {
var vvv_return, vvv_switch, features, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
features = object.features;
i = -1;
n = features.length;
while (++i < n)
    streamGeometry(features[i].geometry, stream);})
    };
    streamGeometryType = $__.os.oid100 = {
        'Sphere': ($__.fs.J$__v2246113107_2428_1487 = function J$__v2246113107_2428(object, stream) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
stream.sphere();}),
        'Point': ($__.fs.J$__v2246113107_2430_1488 = function J$__v2246113107_2430(object, stream) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
object = object.coordinates;
stream.point(object[0], object[1], object[2]);}),
        'MultiPoint': ($__.fs.J$__v2246113107_2432_1489 = function J$__v2246113107_2432(object, stream) {
var vvv_return, vvv_switch, coordinates, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
coordinates = object.coordinates;
i = -1;
n = coordinates.length;
while (++i < n)
    object = coordinates[i], stream.point(object[0], object[1], object[2]);}),
        'LineString': ($__.fs.J$__v2246113107_2434_1490 = function J$__v2246113107_2434(object, stream) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
streamLine(object.coordinates, stream, 0);}),
        'MultiLineString': ($__.fs.J$__v2246113107_2436_1491 = function J$__v2246113107_2436(object, stream) {
var vvv_return, vvv_switch, coordinates, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
coordinates = object.coordinates;
i = -1;
n = coordinates.length;
while (++i < n)
    streamLine(coordinates[i], stream, 0);}),
        'Polygon': ($__.fs.J$__v2246113107_2438_1492 = function J$__v2246113107_2438(object, stream) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
streamPolygon(object.coordinates, stream);}),
        'MultiPolygon': ($__.fs.J$__v2246113107_2440_1493 = function J$__v2246113107_2440(object, stream) {
var vvv_return, vvv_switch, coordinates, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
coordinates = object.coordinates;
i = -1;
n = coordinates.length;
while (++i < n)
    streamPolygon(coordinates[i], stream);}),
        'GeometryCollection': ($__.fs.J$__v2246113107_2442_1494 = function J$__v2246113107_2442(object, stream) {
var vvv_return, vvv_switch, geometries, i, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
object = arguments[0], stream = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
geometries = object.geometries;
i = -1;
n = geometries.length;
while (++i < n)
    streamGeometry(geometries[i], stream);})
    };
    areaRingSum = (adder, $__.fs.adder_699)(0, true, $__.uid);
    areaSum = (adder, $__.fs.adder_699)(1, true, $__.uid);
    areaStream = $__.os.oid101 = {
        'point': noop$2,
        'lineStart': noop$2,
        'lineEnd': noop$2,
        'polygonStart': ($__.fs.J$__v2246113107_2447_1495 = function J$__v2246113107_2447() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaRingSum.reset();
areaStream.lineStart = areaRingStart;
areaStream.lineEnd = areaRingEnd;}),
        'polygonEnd': ($__.fs.J$__v2246113107_2449_1496 = function J$__v2246113107_2449() {
var vvv_return, vvv_switch, areaRing;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaRing = +areaRingSum;
areaSum.add(areaRing < 0 ? tau$4 + areaRing : areaRing);
this.lineStart = this.lineEnd = this.point = noop$2;}),
        'sphere': ($__.fs.J$__v2246113107_2451_1497 = function J$__v2246113107_2451() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaSum.add(tau$4);})
    };
    deltaSum = (adder, $__.fs.adder_699)(2, true, $__.uid);
    boundsStream = $__.os.oid102 = {
        'point': boundsPoint,
        'lineStart': boundsLineStart,
        'lineEnd': boundsLineEnd,
        'polygonStart': ($__.fs.J$__v2246113107_2465_1498 = function J$__v2246113107_2465() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
boundsStream.point = boundsRingPoint;
boundsStream.lineStart = boundsRingStart;
boundsStream.lineEnd = boundsRingEnd;
deltaSum.reset();
areaStream.polygonStart();}),
        'polygonEnd': ($__.fs.J$__v2246113107_2467_1499 = function J$__v2246113107_2467() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaStream.polygonEnd();
boundsStream.point = boundsPoint;
boundsStream.lineStart = boundsLineStart;
boundsStream.lineEnd = boundsLineEnd;
if (areaRingSum < 0)
    lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
else if (deltaSum > epsilon$4)
    phi1 = 90;
else if (deltaSum < -epsilon$4)
    phi0 = -90;
range$1[0] = lambda0$1, range$1[1] = lambda1;})
    };
    centroidStream = $__.os.oid103 = {
        'sphere': noop$2,
        'point': centroidPoint,
        'lineStart': centroidLineStart,
        'lineEnd': centroidLineEnd,
        'polygonStart': ($__.fs.J$__v2246113107_2480_1500 = function J$__v2246113107_2480() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream.lineStart = centroidRingStart;
centroidStream.lineEnd = centroidRingEnd;}),
        'polygonEnd': ($__.fs.J$__v2246113107_2482_1501 = function J$__v2246113107_2482() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream.lineStart = centroidLineStart;
centroidStream.lineEnd = centroidLineEnd;})
    };
    rotationIdentity.invert = rotationIdentity;
    clipMax = 1000000000;
    clipMin = -clipMax;
    lengthSum = (adder, $__.fs.adder_699)(3, true, $__.uid);
    lengthStream = $__.os.oid104 = {
        'sphere': noop$2,
        'point': noop$2,
        'lineStart': lengthLineStart,
        'lineEnd': noop$2,
        'polygonStart': noop$2,
        'polygonEnd': noop$2
    };
    coordinates = [
        null,
        null
    ];
    object$1 = $__.os.oid105 = {
        'type': 'LineString',
        'coordinates': coordinates
    };
    areaSum$1 = (adder, $__.fs.adder_699)(4, true, $__.uid);
    areaRingSum$1 = (adder, $__.fs.adder_699)(5, true, $__.uid);
    areaStream$1 = $__.os.oid106 = {
        'point': noop$2,
        'lineStart': noop$2,
        'lineEnd': noop$2,
        'polygonStart': ($__.fs.J$__v2246113107_2612_1502 = function J$__v2246113107_2612() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaStream$1.lineStart = areaRingStart$1;
areaStream$1.lineEnd = areaRingEnd$1;}),
        'polygonEnd': ($__.fs.J$__v2246113107_2614_1503 = function J$__v2246113107_2614() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2;
areaSum$1.add(abs(areaRingSum$1));
areaRingSum$1.reset();}),
        'result': ($__.fs.J$__v2246113107_2616_1504 = function J$__v2246113107_2616() {
var vvv_return, vvv_switch, area;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
area = areaSum$1 / 2;
areaSum$1.reset();
return area;})
    };
    x0$2 = Infinity;
    y0$2 = x0$2;
    x1 = -x0$2;
    y1 = x1;
    boundsStream$1 = $__.os.oid107 = {
        'point': boundsPoint$1,
        'lineStart': noop$2,
        'lineEnd': noop$2,
        'polygonStart': noop$2,
        'polygonEnd': noop$2,
        'result': ($__.fs.J$__v2246113107_2622_1505 = function J$__v2246113107_2622() {
var vvv_return, vvv_switch, bounds;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
bounds = [
    [
        x0$2,
        y0$2
    ],
    [
        x1,
        y1
    ]
];
x1 = y1 = -(y0$2 = x0$2 = Infinity);
return bounds;})
    };
    X0$1 = 0;
    Y0$1 = 0;
    Z0$1 = 0;
    X1$1 = 0;
    Y1$1 = 0;
    Z1$1 = 0;
    X2$1 = 0;
    Y2$1 = 0;
    Z2$1 = 0;
    centroidStream$1 = $__.os.oid108 = {
        'point': centroidPoint$1,
        'lineStart': centroidLineStart$1,
        'lineEnd': centroidLineEnd$1,
        'polygonStart': ($__.fs.J$__v2246113107_2625_1506 = function J$__v2246113107_2625() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream$1.lineStart = centroidRingStart$1;
centroidStream$1.lineEnd = centroidRingEnd$1;}),
        'polygonEnd': ($__.fs.J$__v2246113107_2627_1507 = function J$__v2246113107_2627() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroidStream$1.point = centroidPoint$1;
centroidStream$1.lineStart = centroidLineStart$1;
centroidStream$1.lineEnd = centroidLineEnd$1;}),
        'result': ($__.fs.J$__v2246113107_2629_1508 = function J$__v2246113107_2629() {
var vvv_return, vvv_switch, centroid;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
centroid = Z2$1 ? [
    X2$1 / Z2$1,
    Y2$1 / Z2$1
] : Z1$1 ? [
    X1$1 / Z1$1,
    Y1$1 / Z1$1
] : Z0$1 ? [
    X0$1 / Z0$1,
    Y0$1 / Z0$1
] : [
    NaN,
    NaN
];
X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0;
return centroid;})
    };
    sum$2 = (adder, $__.fs.adder_699)(6, true, $__.uid);
    clipAntimeridian = (clip, $__.fs.clip_793)(($__.fs.J$__v2246113107_2704_1509 = function J$__v2246113107_2704() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return true;}), (clipAntimeridianLine, $__.fs.clipAntimeridianLine_796), (clipAntimeridianInterpolate, $__.fs.clipAntimeridianInterpolate_798), [
        -pi$4,
        -halfPi$3
    ], 0, true, $__.uid);
    Transform$1.prototype = $__.os.oid109 = {
        'point': ($__.fs.J$__v2246113107_2738_1511 = function J$__v2246113107_2738(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.stream.point(x, y);}),
        'sphere': ($__.fs.J$__v2246113107_2740_1512 = function J$__v2246113107_2740() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.stream.sphere();}),
        'lineStart': ($__.fs.J$__v2246113107_2742_1513 = function J$__v2246113107_2742() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.stream.lineStart();}),
        'lineEnd': ($__.fs.J$__v2246113107_2744_1514 = function J$__v2246113107_2744() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.stream.lineEnd();}),
        'polygonStart': ($__.fs.J$__v2246113107_2746_1515 = function J$__v2246113107_2746() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.stream.polygonStart();}),
        'polygonEnd': ($__.fs.J$__v2246113107_2748_1516 = function J$__v2246113107_2748() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.stream.polygonEnd();})
    };
    maxDepth = 16;
    cosMinDistance = cos$1(30 * radians);
    transformRadians = (transform$2, $__.fs.transform$2_801)($__.os.oid110 = {
        'point': ($__.fs.J$__v2246113107_2776_1517 = function J$__v2246113107_2776(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.stream.point(x * radians, y * radians);})
    }, 0, true, $__.uid);
    azimuthalEqualAreaRaw = (azimuthalRaw, $__.fs.azimuthalRaw_817)(($__.fs.J$__v2246113107_2847_1520 = function J$__v2246113107_2847(cxcy) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
cxcy = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return sqrt$1(2 / (1 + cxcy));}), 0, true, $__.uid);
    azimuthalEqualAreaRaw.invert = (azimuthalInvert, $__.fs.azimuthalInvert_818)(($__.fs.J$__v2246113107_2849_1522 = function J$__v2246113107_2849(z) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
z = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 2 * asin$1(z / 2);}), 0, true, $__.uid);
    azimuthalEquidistantRaw = (azimuthalRaw, $__.fs.azimuthalRaw_817)(($__.fs.J$__v2246113107_2852_1524 = function J$__v2246113107_2852(c) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
c = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return (c = acos(c)) && c / sin$1(c);}), 1, true, $__.uid);
    azimuthalEquidistantRaw.invert = (azimuthalInvert, $__.fs.azimuthalInvert_818)(($__.fs.J$__v2246113107_2854_1526 = function J$__v2246113107_2854(z) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
z = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return z;}), 1, true, $__.uid);
    mercatorRaw.invert = ($__.fs.J$__v2246113107_2858_1528 = function J$__v2246113107_2858(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    x,
    2 * atan(exp(y)) - halfPi$3
];});
    equirectangularRaw.invert = equirectangularRaw;
    gnomonicRaw.invert = (azimuthalInvert, $__.fs.azimuthalInvert_818)(atan, 2, true, $__.uid);
    orthographicRaw.invert = (azimuthalInvert, $__.fs.azimuthalInvert_818)((asin$1, $__.fs.asin$1_703), 3, true, $__.uid);
    stereographicRaw.invert = (azimuthalInvert, $__.fs.azimuthalInvert_818)(($__.fs.J$__v2246113107_2886_1531 = function J$__v2246113107_2886(z) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
z = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 2 * atan(z);}), 4, true, $__.uid);
    transverseMercatorRaw.invert = ($__.fs.J$__v2246113107_2890_1533 = function J$__v2246113107_2890(x, y) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return [
    -y,
    2 * atan(exp(x)) - halfPi$3
];});
    (exports, $__.os.oid0).version = version;
    (exports, $__.os.oid0).bisect = bisectRight;
    (exports, $__.os.oid0).bisectRight = bisectRight;
    (exports, $__.os.oid0).bisectLeft = bisectLeft;
    (exports, $__.os.oid0).ascending = ascending;
    (exports, $__.os.oid0).bisector = bisector;
    (exports, $__.os.oid0).descending = descending;
    (exports, $__.os.oid0).deviation = deviation;
    (exports, $__.os.oid0).extent = extent;
    (exports, $__.os.oid0).histogram = histogram;
    (exports, $__.os.oid0).thresholdFreedmanDiaconis = freedmanDiaconis;
    (exports, $__.os.oid0).thresholdScott = scott;
    (exports, $__.os.oid0).thresholdSturges = sturges;
    (exports, $__.os.oid0).max = max;
    (exports, $__.os.oid0).mean = mean;
    (exports, $__.os.oid0).median = median;
    (exports, $__.os.oid0).merge = merge;
    (exports, $__.os.oid0).min = min;
    (exports, $__.os.oid0).pairs = pairs;
    (exports, $__.os.oid0).permute = permute;
    (exports, $__.os.oid0).quantile = threshold;
    (exports, $__.os.oid0).range = range;
    (exports, $__.os.oid0).scan = scan;
    (exports, $__.os.oid0).shuffle = shuffle;
    (exports, $__.os.oid0).sum = sum;
    (exports, $__.os.oid0).ticks = ticks;
    (exports, $__.os.oid0).tickStep = tickStep;
    (exports, $__.os.oid0).transpose = transpose;
    (exports, $__.os.oid0).variance = variance;
    (exports, $__.os.oid0).zip = zip;
    (exports, $__.os.oid0).entries = entries;
    (exports, $__.os.oid0).keys = keys;
    (exports, $__.os.oid0).values = values;
    (exports, $__.os.oid0).map = map$1;
    (exports, $__.os.oid0).set = set;
    (exports, $__.os.oid0).nest = nest;
    (exports, $__.os.oid0).randomUniform = uniform;
    (exports, $__.os.oid0).randomNormal = normal;
    (exports, $__.os.oid0).randomLogNormal = logNormal;
    (exports, $__.os.oid0).randomBates = bates;
    (exports, $__.os.oid0).randomIrwinHall = irwinHall;
    (exports, $__.os.oid0).randomExponential = exponential;
    (exports, $__.os.oid0).easeLinear = linear;
    (exports, $__.os.oid0).easeQuad = quadInOut;
    (exports, $__.os.oid0).easeQuadIn = quadIn;
    (exports, $__.os.oid0).easeQuadOut = quadOut;
    (exports, $__.os.oid0).easeQuadInOut = quadInOut;
    (exports, $__.os.oid0).easeCubic = easeCubicInOut;
    (exports, $__.os.oid0).easeCubicIn = cubicIn;
    (exports, $__.os.oid0).easeCubicOut = cubicOut;
    (exports, $__.os.oid0).easeCubicInOut = easeCubicInOut;
    (exports, $__.os.oid0).easePoly = polyInOut;
    (exports, $__.os.oid0).easePolyIn = polyIn;
    (exports, $__.os.oid0).easePolyOut = polyOut;
    (exports, $__.os.oid0).easePolyInOut = polyInOut;
    (exports, $__.os.oid0).easeSin = sinInOut;
    (exports, $__.os.oid0).easeSinIn = sinIn;
    (exports, $__.os.oid0).easeSinOut = sinOut;
    (exports, $__.os.oid0).easeSinInOut = sinInOut;
    (exports, $__.os.oid0).easeExp = expInOut;
    (exports, $__.os.oid0).easeExpIn = expIn;
    (exports, $__.os.oid0).easeExpOut = expOut;
    (exports, $__.os.oid0).easeExpInOut = expInOut;
    (exports, $__.os.oid0).easeCircle = circleInOut;
    (exports, $__.os.oid0).easeCircleIn = circleIn;
    (exports, $__.os.oid0).easeCircleOut = circleOut;
    (exports, $__.os.oid0).easeCircleInOut = circleInOut;
    (exports, $__.os.oid0).easeBounce = bounceOut;
    (exports, $__.os.oid0).easeBounceIn = bounceIn;
    (exports, $__.os.oid0).easeBounceOut = bounceOut;
    (exports, $__.os.oid0).easeBounceInOut = bounceInOut;
    (exports, $__.os.oid0).easeBack = backInOut;
    (exports, $__.os.oid0).easeBackIn = backIn;
    (exports, $__.os.oid0).easeBackOut = backOut;
    (exports, $__.os.oid0).easeBackInOut = backInOut;
    (exports, $__.os.oid0).easeElastic = elasticOut;
    (exports, $__.os.oid0).easeElasticIn = elasticIn;
    (exports, $__.os.oid0).easeElasticOut = elasticOut;
    (exports, $__.os.oid0).easeElasticInOut = elasticInOut;
    (exports, $__.os.oid0).polygonArea = area;
    (exports, $__.os.oid0).polygonCentroid = centroid;
    (exports, $__.os.oid0).polygonHull = hull;
    (exports, $__.os.oid0).polygonContains = contains;
    (exports, $__.os.oid0).polygonLength = length$1;
    (exports, $__.os.oid0).path = path;
    (exports, $__.os.oid0).quadtree = quadtree;
    (exports, $__.os.oid0).queue = queue;
    (exports, $__.os.oid0).arc = arc;
    (exports, $__.os.oid0).area = area$1;
    (exports, $__.os.oid0).line = line;
    (exports, $__.os.oid0).pie = pie;
    (exports, $__.os.oid0).radialArea = radialArea;
    (exports, $__.os.oid0).radialLine = radialLine$1;
    (exports, $__.os.oid0).symbol = symbol;
    (exports, $__.os.oid0).symbols = symbols;
    (exports, $__.os.oid0).symbolCircle = circle;
    (exports, $__.os.oid0).symbolCross = cross$1;
    (exports, $__.os.oid0).symbolDiamond = diamond;
    (exports, $__.os.oid0).symbolSquare = square;
    (exports, $__.os.oid0).symbolStar = star;
    (exports, $__.os.oid0).symbolTriangle = triangle;
    (exports, $__.os.oid0).symbolWye = wye;
    (exports, $__.os.oid0).curveBasisClosed = basisClosed;
    (exports, $__.os.oid0).curveBasisOpen = basisOpen;
    (exports, $__.os.oid0).curveBasis = basis;
    (exports, $__.os.oid0).curveBundle = bundle;
    (exports, $__.os.oid0).curveCardinalClosed = cardinalClosed;
    (exports, $__.os.oid0).curveCardinalOpen = cardinalOpen;
    (exports, $__.os.oid0).curveCardinal = cardinal;
    (exports, $__.os.oid0).curveCatmullRomClosed = catmullRomClosed;
    (exports, $__.os.oid0).curveCatmullRomOpen = catmullRomOpen;
    (exports, $__.os.oid0).curveCatmullRom = catmullRom;
    (exports, $__.os.oid0).curveLinearClosed = linearClosed;
    (exports, $__.os.oid0).curveLinear = curveLinear;
    (exports, $__.os.oid0).curveMonotoneX = monotoneX;
    (exports, $__.os.oid0).curveMonotoneY = monotoneY;
    (exports, $__.os.oid0).curveNatural = natural;
    (exports, $__.os.oid0).curveStep = step;
    (exports, $__.os.oid0).curveStepAfter = stepAfter;
    (exports, $__.os.oid0).curveStepBefore = stepBefore;
    (exports, $__.os.oid0).stack = stack;
    (exports, $__.os.oid0).stackOffsetExpand = expand;
    (exports, $__.os.oid0).stackOffsetNone = none;
    (exports, $__.os.oid0).stackOffsetSilhouette = silhouette;
    (exports, $__.os.oid0).stackOffsetWiggle = wiggle;
    (exports, $__.os.oid0).stackOrderAscending = ascending$1;
    (exports, $__.os.oid0).stackOrderDescending = descending$2;
    (exports, $__.os.oid0).stackOrderInsideOut = insideOut;
    (exports, $__.os.oid0).stackOrderNone = none$1;
    (exports, $__.os.oid0).stackOrderReverse = reverse;
    (exports, $__.os.oid0).color = color;
    (exports, $__.os.oid0).rgb = colorRgb;
    (exports, $__.os.oid0).hsl = colorHsl;
    (exports, $__.os.oid0).lab = lab;
    (exports, $__.os.oid0).hcl = colorHcl;
    (exports, $__.os.oid0).cubehelix = cubehelix;
    (exports, $__.os.oid0).interpolate = interpolate;
    (exports, $__.os.oid0).interpolateArray = array$1;
    (exports, $__.os.oid0).interpolateDate = date;
    (exports, $__.os.oid0).interpolateNumber = interpolateNumber;
    (exports, $__.os.oid0).interpolateObject = object;
    (exports, $__.os.oid0).interpolateRound = interpolateRound;
    (exports, $__.os.oid0).interpolateString = interpolateString;
    (exports, $__.os.oid0).interpolateTransformCss = interpolateTransform$1;
    (exports, $__.os.oid0).interpolateTransformSvg = interpolateTransform$2;
    (exports, $__.os.oid0).interpolateZoom = interpolateZoom;
    (exports, $__.os.oid0).interpolateRgb = interpolateRgb;
    (exports, $__.os.oid0).interpolateRgbBasis = rgbBasis;
    (exports, $__.os.oid0).interpolateRgbBasisClosed = rgbBasisClosed;
    (exports, $__.os.oid0).interpolateHsl = hsl$1;
    (exports, $__.os.oid0).interpolateHslLong = hslLong;
    (exports, $__.os.oid0).interpolateLab = lab$1;
    (exports, $__.os.oid0).interpolateHcl = hcl$1;
    (exports, $__.os.oid0).interpolateHclLong = hclLong;
    (exports, $__.os.oid0).interpolateCubehelix = cubehelix$2;
    (exports, $__.os.oid0).interpolateCubehelixLong = interpolateCubehelixLong;
    (exports, $__.os.oid0).interpolateBasis = basis$2;
    (exports, $__.os.oid0).interpolateBasisClosed = basisClosed$1;
    (exports, $__.os.oid0).quantize = quantize;
    (exports, $__.os.oid0).dispatch = dispatch;
    (exports, $__.os.oid0).dsvFormat = dsv;
    (exports, $__.os.oid0).csvParse = csvParse;
    (exports, $__.os.oid0).csvParseRows = csvParseRows;
    (exports, $__.os.oid0).csvFormat = csvFormat;
    (exports, $__.os.oid0).csvFormatRows = csvFormatRows;
    (exports, $__.os.oid0).tsvParse = tsvParse;
    (exports, $__.os.oid0).tsvParseRows = tsvParseRows;
    (exports, $__.os.oid0).tsvFormat = tsvFormat;
    (exports, $__.os.oid0).tsvFormatRows = tsvFormatRows;
    (exports, $__.os.oid0).request = request;
    (exports, $__.os.oid0).html = html;
    (exports, $__.os.oid0).json = json;
    (exports, $__.os.oid0).text = text;
    (exports, $__.os.oid0).xml = xml;
    (exports, $__.os.oid0).csv = csv$1;
    (exports, $__.os.oid0).tsv = tsv$1;
    (exports, $__.os.oid0).now = now;
    (exports, $__.os.oid0).timer = timer;
    (exports, $__.os.oid0).timerFlush = timerFlush;
    (exports, $__.os.oid0).timeout = timeout$1;
    (exports, $__.os.oid0).interval = interval$1;
    (exports, $__.os.oid0).timeInterval = newInterval;
    (exports, $__.os.oid0).timeMillisecond = millisecond;
    (exports, $__.os.oid0).timeMilliseconds = milliseconds;
    (exports, $__.os.oid0).timeSecond = second;
    (exports, $__.os.oid0).timeSeconds = seconds;
    (exports, $__.os.oid0).timeMinute = minute;
    (exports, $__.os.oid0).timeMinutes = minutes;
    (exports, $__.os.oid0).timeHour = hour;
    (exports, $__.os.oid0).timeHours = hours;
    (exports, $__.os.oid0).timeDay = day;
    (exports, $__.os.oid0).timeDays = days;
    (exports, $__.os.oid0).timeWeek = timeWeek;
    (exports, $__.os.oid0).timeWeeks = sundays;
    (exports, $__.os.oid0).timeSunday = timeWeek;
    (exports, $__.os.oid0).timeSundays = sundays;
    (exports, $__.os.oid0).timeMonday = timeMonday;
    (exports, $__.os.oid0).timeMondays = mondays;
    (exports, $__.os.oid0).timeTuesday = tuesday;
    (exports, $__.os.oid0).timeTuesdays = tuesdays;
    (exports, $__.os.oid0).timeWednesday = wednesday;
    (exports, $__.os.oid0).timeWednesdays = wednesdays;
    (exports, $__.os.oid0).timeThursday = thursday;
    (exports, $__.os.oid0).timeThursdays = thursdays;
    (exports, $__.os.oid0).timeFriday = friday;
    (exports, $__.os.oid0).timeFridays = fridays;
    (exports, $__.os.oid0).timeSaturday = saturday;
    (exports, $__.os.oid0).timeSaturdays = saturdays;
    (exports, $__.os.oid0).timeMonth = month;
    (exports, $__.os.oid0).timeMonths = months;
    (exports, $__.os.oid0).timeYear = year;
    (exports, $__.os.oid0).timeYears = years;
    (exports, $__.os.oid0).utcMillisecond = millisecond;
    (exports, $__.os.oid0).utcMilliseconds = milliseconds;
    (exports, $__.os.oid0).utcSecond = second;
    (exports, $__.os.oid0).utcSeconds = seconds;
    (exports, $__.os.oid0).utcMinute = utcMinute;
    (exports, $__.os.oid0).utcMinutes = utcMinutes;
    (exports, $__.os.oid0).utcHour = utcHour;
    (exports, $__.os.oid0).utcHours = utcHours;
    (exports, $__.os.oid0).utcDay = utcDay;
    (exports, $__.os.oid0).utcDays = utcDays;
    (exports, $__.os.oid0).utcWeek = utcWeek;
    (exports, $__.os.oid0).utcWeeks = utcSundays;
    (exports, $__.os.oid0).utcSunday = utcWeek;
    (exports, $__.os.oid0).utcSundays = utcSundays;
    (exports, $__.os.oid0).utcMonday = utcMonday;
    (exports, $__.os.oid0).utcMondays = utcMondays;
    (exports, $__.os.oid0).utcTuesday = utcTuesday;
    (exports, $__.os.oid0).utcTuesdays = utcTuesdays;
    (exports, $__.os.oid0).utcWednesday = utcWednesday;
    (exports, $__.os.oid0).utcWednesdays = utcWednesdays;
    (exports, $__.os.oid0).utcThursday = utcThursday;
    (exports, $__.os.oid0).utcThursdays = utcThursdays;
    (exports, $__.os.oid0).utcFriday = utcFriday;
    (exports, $__.os.oid0).utcFridays = utcFridays;
    (exports, $__.os.oid0).utcSaturday = utcSaturday;
    (exports, $__.os.oid0).utcSaturdays = utcSaturdays;
    (exports, $__.os.oid0).utcMonth = utcMonth;
    (exports, $__.os.oid0).utcMonths = utcMonths;
    (exports, $__.os.oid0).utcYear = utcYear;
    (exports, $__.os.oid0).utcYears = utcYears;
    (exports, $__.os.oid0).formatLocale = formatLocale;
    (exports, $__.os.oid0).formatDefaultLocale = defaultLocale;
    (exports, $__.os.oid0).formatSpecifier = formatSpecifier;
    (exports, $__.os.oid0).precisionFixed = precisionFixed;
    (exports, $__.os.oid0).precisionPrefix = precisionPrefix;
    (exports, $__.os.oid0).precisionRound = precisionRound;
    (exports, $__.os.oid0).isoFormat = formatIso;
    (exports, $__.os.oid0).isoParse = parseIso;
    (exports, $__.os.oid0).timeFormatLocale = formatLocale$1;
    (exports, $__.os.oid0).timeFormatDefaultLocale = defaultLocale$1;
    (exports, $__.os.oid0).scaleBand = band;
    (exports, $__.os.oid0).scalePoint = point$4;
    (exports, $__.os.oid0).scaleIdentity = identity$4;
    (exports, $__.os.oid0).scaleLinear = linear$2;
    (exports, $__.os.oid0).scaleLog = log;
    (exports, $__.os.oid0).scaleOrdinal = ordinal;
    (exports, $__.os.oid0).scaleImplicit = implicit;
    (exports, $__.os.oid0).scalePow = pow;
    (exports, $__.os.oid0).scaleSqrt = sqrt;
    (exports, $__.os.oid0).scaleQuantile = quantile;
    (exports, $__.os.oid0).scaleQuantize = quantize$1;
    (exports, $__.os.oid0).scaleThreshold = threshold$1;
    (exports, $__.os.oid0).scaleTime = time;
    (exports, $__.os.oid0).scaleUtc = utcTime;
    (exports, $__.os.oid0).schemeCategory10 = category10;
    (exports, $__.os.oid0).schemeCategory20b = category20b;
    (exports, $__.os.oid0).schemeCategory20c = category20c;
    (exports, $__.os.oid0).schemeCategory20 = category20;
    (exports, $__.os.oid0).scaleSequential = sequential;
    (exports, $__.os.oid0).interpolateCubehelixDefault = cubehelix$3;
    (exports, $__.os.oid0).interpolateRainbow = rainbow$1;
    (exports, $__.os.oid0).interpolateWarm = warm;
    (exports, $__.os.oid0).interpolateCool = cool;
    (exports, $__.os.oid0).interpolateViridis = viridis;
    (exports, $__.os.oid0).interpolateMagma = magma;
    (exports, $__.os.oid0).interpolateInferno = inferno;
    (exports, $__.os.oid0).interpolatePlasma = plasma;
    (exports, $__.os.oid0).creator = creator;
    (exports, $__.os.oid0).customEvent = customEvent;
    (exports, $__.os.oid0).local = local;
    (exports, $__.os.oid0).matcher = matcher$1;
    (exports, $__.os.oid0).mouse = mouse;
    (exports, $__.os.oid0).namespace = namespace;
    (exports, $__.os.oid0).namespaces = namespaces;
    (exports, $__.os.oid0).select = select;
    (exports, $__.os.oid0).selectAll = selectAll;
    (exports, $__.os.oid0).selection = selection;
    (exports, $__.os.oid0).selector = selector;
    (exports, $__.os.oid0).selectorAll = selectorAll;
    (exports, $__.os.oid0).touch = touch;
    (exports, $__.os.oid0).touches = touches;
    (exports, $__.os.oid0).window = window;
    (exports, $__.os.oid0).active = active;
    (exports, $__.os.oid0).interrupt = interrupt;
    (exports, $__.os.oid0).transition = transition;
    (exports, $__.os.oid0).axisTop = axisTop;
    (exports, $__.os.oid0).axisRight = axisRight;
    (exports, $__.os.oid0).axisBottom = axisBottom;
    (exports, $__.os.oid0).axisLeft = axisLeft;
    (exports, $__.os.oid0).cluster = cluster;
    (exports, $__.os.oid0).hierarchy = hierarchy;
    (exports, $__.os.oid0).pack = index;
    (exports, $__.os.oid0).packSiblings = siblings;
    (exports, $__.os.oid0).packEnclose = enclose;
    (exports, $__.os.oid0).partition = partition;
    (exports, $__.os.oid0).stratify = stratify;
    (exports, $__.os.oid0).tree = tree;
    (exports, $__.os.oid0).treemap = index$1;
    (exports, $__.os.oid0).treemapBinary = binary;
    (exports, $__.os.oid0).treemapDice = treemapDice;
    (exports, $__.os.oid0).treemapSlice = treemapSlice;
    (exports, $__.os.oid0).treemapSliceDice = sliceDice;
    (exports, $__.os.oid0).treemapSquarify = squarify;
    (exports, $__.os.oid0).treemapResquarify = resquarify;
    (exports, $__.os.oid0).forceCenter = center$1;
    (exports, $__.os.oid0).forceCollide = collide;
    (exports, $__.os.oid0).forceLink = link;
    (exports, $__.os.oid0).forceManyBody = manyBody;
    (exports, $__.os.oid0).forceSimulation = simulation;
    (exports, $__.os.oid0).forceX = x$3;
    (exports, $__.os.oid0).forceY = y$3;
    (exports, $__.os.oid0).drag = drag;
    (exports, $__.os.oid0).dragDisable = dragDisable;
    (exports, $__.os.oid0).dragEnable = dragEnable;
    (exports, $__.os.oid0).voronoi = voronoi;
    (exports, $__.os.oid0).zoom = zoom;
    (exports, $__.os.oid0).zoomIdentity = identity$6;
    (exports, $__.os.oid0).zoomTransform = transform;
    (exports, $__.os.oid0).brush = brush;
    (exports, $__.os.oid0).brushX = brushX;
    (exports, $__.os.oid0).brushY = brushY;
    (exports, $__.os.oid0).brushSelection = brushSelection;
    (exports, $__.os.oid0).chord = chord;
    (exports, $__.os.oid0).ribbon = ribbon;
    (exports, $__.os.oid0).geoAlbers = albers;
    (exports, $__.os.oid0).geoAlbersUsa = albersUsa;
    (exports, $__.os.oid0).geoArea = area$2;
    (exports, $__.os.oid0).geoAzimuthalEqualArea = azimuthalEqualArea;
    (exports, $__.os.oid0).geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
    (exports, $__.os.oid0).geoAzimuthalEquidistant = azimuthalEquidistant;
    (exports, $__.os.oid0).geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
    (exports, $__.os.oid0).geoBounds = bounds;
    (exports, $__.os.oid0).geoCentroid = centroid$1;
    (exports, $__.os.oid0).geoCircle = circle$1;
    (exports, $__.os.oid0).geoClipExtent = extent$1;
    (exports, $__.os.oid0).geoConicConformal = conicConformal;
    (exports, $__.os.oid0).geoConicConformalRaw = conicConformalRaw;
    (exports, $__.os.oid0).geoConicEqualArea = conicEqualArea;
    (exports, $__.os.oid0).geoConicEqualAreaRaw = conicEqualAreaRaw;
    (exports, $__.os.oid0).geoConicEquidistant = conicEquidistant;
    (exports, $__.os.oid0).geoConicEquidistantRaw = conicEquidistantRaw;
    (exports, $__.os.oid0).geoDistance = distance;
    (exports, $__.os.oid0).geoEquirectangular = equirectangular;
    (exports, $__.os.oid0).geoEquirectangularRaw = equirectangularRaw;
    (exports, $__.os.oid0).geoGnomonic = gnomonic;
    (exports, $__.os.oid0).geoGnomonicRaw = gnomonicRaw;
    (exports, $__.os.oid0).geoGraticule = graticule;
    (exports, $__.os.oid0).geoInterpolate = interpolate$2;
    (exports, $__.os.oid0).geoLength = length$2;
    (exports, $__.os.oid0).geoMercator = mercator;
    (exports, $__.os.oid0).geoMercatorRaw = mercatorRaw;
    (exports, $__.os.oid0).geoOrthographic = orthographic;
    (exports, $__.os.oid0).geoOrthographicRaw = orthographicRaw;
    (exports, $__.os.oid0).geoPath = index$3;
    (exports, $__.os.oid0).geoProjection = projection;
    (exports, $__.os.oid0).geoProjectionMutator = projectionMutator;
    (exports, $__.os.oid0).geoRotation = rotation;
    (exports, $__.os.oid0).geoStereographic = stereographic;
    (exports, $__.os.oid0).geoStereographicRaw = stereographicRaw;
    (exports, $__.os.oid0).geoStream = geoStream;
    (exports, $__.os.oid0).geoTransform = transform$1;
    (exports, $__.os.oid0).geoTransverseMercator = transverseMercator;
    (exports, $__.os.oid0).geoTransverseMercatorRaw = transverseMercatorRaw;
    Object['defineProperty'](exports, '__esModule', $__.os.oid111 = {
        'value': true
    });
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
version = '4.2.2';
ascendingBisect = bisector(ascending);
bisectRight = ascendingBisect.right;
bisectLeft = ascendingBisect.left;
array = Array.prototype;
slice = array.slice;
map = array.map;
e10 = Math.sqrt(50);
e5 = Math.sqrt(10);
e2 = Math.sqrt(2);
prefix = '$';
Map.prototype = map$1.prototype = {
    constructor: Map,
    has: function (key) {
        return prefix + key in this;
    },
    get: function (key) {
        return this[prefix + key];
    },
    set: function (key, value) {
        this[prefix + key] = value;
        return this;
    },
    remove: function (key) {
        var property = prefix + key;
        return property in this && delete this[property];
    },
    clear: function () {
        for (var property in this)
            if (property[0] === prefix)
            delete this[property];
    },
    keys: function () {
        var keys = [];
        for (var property in this)
            if (property[0] === prefix)
            keys.push(property.slice(1));
        return keys;
    },
    values: function () {
        var values = [];
        for (var property in this)
            if (property[0] === prefix)
            values.push(this[property]);
        return values;
    },
    entries: function () {
        var entries = [];
        for (var property in this)
            if (property[0] === prefix)
            entries.push({
            key: property.slice(1),
            value: this[property]
        });
        return entries;
    },
    size: function () {
        var size = 0;
        for (var property in this)
            if (property[0] === prefix)
            ++size;
        return size;
    },
    empty: function () {
        for (var property in this)
            if (property[0] === prefix)
            return false;
        return true;
    },
    each: function (f) {
        for (var property in this)
            if (property[0] === prefix)
            f(this[property], property.slice(1), this);
    }
};
proto = map$1.prototype;
Set.prototype = set.prototype = {
    constructor: Set,
    has: proto.has,
    add: function (value) {
        value += '';
        this[prefix + value] = value;
        return this;
    },
    remove: proto.remove,
    clear: proto.clear,
    values: proto.keys,
    size: proto.size,
    empty: proto.empty,
    each: proto.each
};
exponent = 3;
polyIn = function custom(e) {
    e = +e;
    function polyIn(t) {
        return Math.pow(t, e);
    }
    polyIn.exponent = custom;
    return polyIn;
}(exponent);
polyOut = function custom(e) {
    e = +e;
    function polyOut(t) {
        return 1 - Math.pow(1 - t, e);
    }
    polyOut.exponent = custom;
    return polyOut;
}(exponent);
polyInOut = function custom(e) {
    e = +e;
    function polyInOut(t) {
        return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
    }
    polyInOut.exponent = custom;
    return polyInOut;
}(exponent);
pi = Math.PI;
halfPi = pi / 2;
b1 = 4 / 11;
b2 = 6 / 11;
b3 = 8 / 11;
b4 = 3 / 4;
b5 = 9 / 11;
b6 = 10 / 11;
b7 = 15 / 16;
b8 = 21 / 22;
b9 = 63 / 64;
b0 = 1 / b1 / b1;
overshoot = 1.70158;
backIn = function custom(s) {
    s = +s;
    function backIn(t) {
        return t * t * ((s + 1) * t - s);
    }
    backIn.overshoot = custom;
    return backIn;
}(overshoot);
backOut = function custom(s) {
    s = +s;
    function backOut(t) {
        return --t * t * ((s + 1) * t + s) + 1;
    }
    backOut.overshoot = custom;
    return backOut;
}(overshoot);
backInOut = function custom(s) {
    s = +s;
    function backInOut(t) {
        return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
    }
    backInOut.overshoot = custom;
    return backInOut;
}(overshoot);
tau = 2 * Math.PI;
amplitude = 1;
period = 0.3;
elasticIn = function custom(a, p) {
    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
    function elasticIn(t) {
        return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
    }
    elasticIn.amplitude = function (a) {
        return custom(a, p * tau);
    };
    elasticIn.period = function (p) {
        return custom(a, p);
    };
    return elasticIn;
}(amplitude, period);
elasticOut = function custom(a, p) {
    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
    function elasticOut(t) {
        return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
    }
    elasticOut.amplitude = function (a) {
        return custom(a, p * tau);
    };
    elasticOut.period = function (p) {
        return custom(a, p);
    };
    return elasticOut;
}(amplitude, period);
elasticInOut = function custom(a, p) {
    var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
    function elasticInOut(t) {
        return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
    }
    elasticInOut.amplitude = function (a) {
        return custom(a, p * tau);
    };
    elasticInOut.period = function (p) {
        return custom(a, p);
    };
    return elasticInOut;
}(amplitude, period);
pi$1 = Math.PI;
tau$1 = 2 * pi$1;
epsilon = 0.000001;
tauEpsilon = tau$1 - epsilon;
Path.prototype = path.prototype = {
    constructor: Path,
    moveTo: function (x, y) {
        this._.push('M', this._x0 = this._x1 = +x, ',', this._y0 = this._y1 = +y);
    },
    closePath: function () {
        if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._.push('Z');
        }
    },
    lineTo: function (x, y) {
        this._.push('L', this._x1 = +x, ',', this._y1 = +y);
    },
    quadraticCurveTo: function (x1, y1, x, y) {
        this._.push('Q', +x1, ',', +y1, ',', this._x1 = +x, ',', this._y1 = +y);
    },
    bezierCurveTo: function (x1, y1, x2, y2, x, y) {
        this._.push('C', +x1, ',', +y1, ',', +x2, ',', +y2, ',', this._x1 = +x, ',', this._y1 = +y);
    },
    arcTo: function (x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        if (r < 0)
            throw new Error('negative radius: ' + r);
        if (this._x1 === null) {
            this._.push('M', this._x1 = x1, ',', this._y1 = y1);
        } else if (!(l01_2 > epsilon));
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
            this._.push('L', this._x1 = x1, ',', this._y1 = y1);
        } else {
            var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi$1 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
            if (Math.abs(t01 - 1) > epsilon) {
                this._.push('L', x1 + t01 * x01, ',', y1 + t01 * y01);
            }
            this._.push('A', r, ',', r, ',0,0,', +(y01 * x20 > x01 * y20), ',', this._x1 = x1 + t21 * x21, ',', this._y1 = y1 + t21 * y21);
        }
    },
    arc: function (x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r;
        var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        if (r < 0)
            throw new Error('negative radius: ' + r);
        if (this._x1 === null) {
            this._.push('M', x0, ',', y0);
        } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
            this._.push('L', x0, ',', y0);
        }
        if (!r)
            return;
        if (da > tauEpsilon) {
            this._.push('A', r, ',', r, ',0,1,', cw, ',', x - dx, ',', y - dy, 'A', r, ',', r, ',0,1,', cw, ',', this._x1 = x0, ',', this._y1 = y0);
        } else {
            if (da < 0)
                da = da % tau$1 + tau$1;
            this._.push('A', r, ',', r, ',0,', +(da >= pi$1), ',', cw, ',', this._x1 = x + r * Math.cos(a1), ',', this._y1 = y + r * Math.sin(a1));
        }
    },
    rect: function (x, y, w, h) {
        this._.push('M', this._x0 = this._x1 = +x, ',', this._y0 = this._y1 = +y, 'h', +w, 'v', +h, 'h', -w, 'Z');
    },
    toString: function () {
        return this._.join('');
    }
};
treeProto = quadtree.prototype = Quadtree.prototype;
treeProto.copy = function () {
    var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1), node = this._root, nodes, child;
    if (!node)
        return copy;
    if (!node.length)
        return copy._root = leaf_copy(node), copy;
    nodes = [{
            source: node,
            target: copy._root = new Array(4)
        }];
    while (node = nodes.pop()) {
        for (var i = 0; i < 4; ++i) {
            if (child = node.source[i]) {
                if (child.length)
                    nodes.push({
                    source: child,
                    target: node.target[i] = new Array(4)
                });
                else
                    node.target[i] = leaf_copy(child);
            }
        }
    }
    return copy;
};
treeProto.add = tree_add;
treeProto.addAll = addAll;
treeProto.cover = tree_cover;
treeProto.data = tree_data;
treeProto.extent = tree_extent;
treeProto.find = tree_find;
treeProto.remove = tree_remove;
treeProto.removeAll = removeAll;
treeProto.root = tree_root;
treeProto.size = tree_size;
treeProto.visit = tree_visit;
treeProto.visitAfter = tree_visitAfter;
treeProto.x = tree_x;
treeProto.y = tree_y;
slice$1 = [].slice;
noabort = {};
Queue.prototype = queue.prototype = {
    constructor: Queue,
    defer: function (callback) {
        if (typeof callback !== 'function' || this._call)
            throw new Error();
        if (this._error != null)
            return this;
        var t = slice$1.call(arguments, 1);
        t.push(callback);
        ++this._waiting, this._tasks.push(t);
        poke(this);
        return this;
    },
    abort: function () {
        if (this._error == null)
            abort(this, new Error('abort'));
        return this;
    },
    await: function (callback) {
        if (typeof callback !== 'function' || this._call)
            throw new Error();
        this._call = function (error, results) {
            callback.apply(null, [error].concat(results));
        };
        maybeNotify(this);
        return this;
    },
    awaitAll: function (callback) {
        if (typeof callback !== 'function' || this._call)
            throw new Error();
        this._call = callback;
        maybeNotify(this);
        return this;
    }
};
epsilon$1 = 1e-12;
pi$2 = Math.PI;
halfPi$1 = pi$2 / 2;
tau$2 = 2 * pi$2;
Linear.prototype = {
    areaStart: function () {
        this._line = 0;
    },
    areaEnd: function () {
        this._line = NaN;
    },
    lineStart: function () {
        this._point = 0;
    },
    lineEnd: function () {
        if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function (x, y) {
        x = +x, y = +y;
        switch (this._point) {
        case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
        case 1:
            this._point = 2;
        default:
            this._context.lineTo(x, y);
            break;
        }
    }
};
curveRadialLinear = curveRadial(curveLinear);
Radial.prototype = {
    areaStart: function () {
        this._curve.areaStart();
    },
    areaEnd: function () {
        this._curve.areaEnd();
    },
    lineStart: function () {
        this._curve.lineStart();
    },
    lineEnd: function () {
        this._curve.lineEnd();
    },
    point: function (a, r) {
        this._curve.point(r * Math.sin(a), r * -Math.cos(a));
    }
};
circle = {
    draw: function (context, size) {
        var r = Math.sqrt(size / pi$2);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau$2);
    }
};
cross$1 = {
    draw: function (context, size) {
        var r = Math.sqrt(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
    }
};
tan30 = Math.sqrt(1 / 3);
tan30_2 = tan30 * 2;
diamond = {
    draw: function (context, size) {
        var y = Math.sqrt(size / tan30_2), x = y * tan30;
        context.moveTo(0, -y);
        context.lineTo(x, 0);
        context.lineTo(0, y);
        context.lineTo(-x, 0);
        context.closePath();
    }
};
ka = 0.8908130915292852;
kr = Math.sin(pi$2 / 10) / Math.sin(7 * pi$2 / 10);
kx = Math.sin(tau$2 / 10) * kr;
ky = -Math.cos(tau$2 / 10) * kr;
star = {
    draw: function (context, size) {
        var r = Math.sqrt(size * ka), x = kx * r, y = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x, y);
        for (var i = 1; i < 5; ++i) {
            var a = tau$2 * i / 5, c = Math.cos(a), s = Math.sin(a);
            context.lineTo(s * r, -c * r);
            context.lineTo(c * x - s * y, s * x + c * y);
        }
        context.closePath();
    }
};
square = {
    draw: function (context, size) {
        var w = Math.sqrt(size), x = -w / 2;
        context.rect(x, x, w, w);
    }
};
sqrt3 = Math.sqrt(3);
triangle = {
    draw: function (context, size) {
        var y = -Math.sqrt(size / (sqrt3 * 3));
        context.moveTo(0, y * 2);
        context.lineTo(-sqrt3 * y, -y);
        context.lineTo(sqrt3 * y, -y);
        context.closePath();
    }
};
c = -0.5;
s = Math.sqrt(3) / 2;
k = 1 / Math.sqrt(12);
a = (k / 2 + 1) * 3;
wye = {
    draw: function (context, size) {
        var r = Math.sqrt(size / a), x0 = r / 2, y0 = r * k, x1 = x0, y1 = r * k + r, x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
    }
};
symbols = [
    circle,
    cross$1,
    diamond,
    square,
    star,
    triangle,
    wye
];
Basis.prototype = {
    areaStart: function () {
        this._line = 0;
    },
    areaEnd: function () {
        this._line = NaN;
    },
    lineStart: function () {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function () {
        switch (this._point) {
        case 3:
            point(this, this._x1, this._y1);
        case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function (x, y) {
        x = +x, y = +y;
        switch (this._point) {
        case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
        case 1:
            this._point = 2;
            break;
        case 2:
            this._point = 3;
            this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
        default:
            point(this, x, y);
            break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
BasisClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function () {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
    },
    lineEnd: function () {
        switch (this._point) {
        case 1: {
                this._context.moveTo(this._x2, this._y2);
                this._context.closePath();
                break;
            }
        case 2: {
                this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                this._context.closePath();
                break;
            }
        case 3: {
                this.point(this._x2, this._y2);
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                break;
            }
        }
    },
    point: function (x, y) {
        x = +x, y = +y;
        switch (this._point) {
        case 0:
            this._point = 1;
            this._x2 = x, this._y2 = y;
            break;
        case 1:
            this._point = 2;
            this._x3 = x, this._y3 = y;
            break;
        case 2:
            this._point = 3;
            this._x4 = x, this._y4 = y;
            this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
            break;
        default:
            point(this, x, y);
            break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
BasisOpen.prototype = {
    areaStart: function () {
        this._line = 0;
    },
    areaEnd: function () {
        this._line = NaN;
    },
    lineStart: function () {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function () {
        if (this._line || this._line !== 0 && this._point === 3)
            this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function (x, y) {
        x = +x, y = +y;
        switch (this._point) {
        case 0:
            this._point = 1;
            break;
        case 1:
            this._point = 2;
            break;
        case 2:
            this._point = 3;
            var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6;
            this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
            break;
        case 3:
            this._point = 4;
        default:
            point(this, x, y);
            break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};
Bundle.prototype = {
    lineStart: function () {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
    },
    lineEnd: function () {
        var x = this._x, y = this._y, j = x.length - 1;
        if (j > 0) {
            var x0 = x[0], y0 = y[0], dx = x[j] - x0, dy = y[j] - y0, i = -1, t;
            while (++i <= j) {
                t = i / j;
                this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
            }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
    },
    point: function (x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
bundle = function custom(beta) {
    function bundle(context) {
        return beta === 1 ? new Basis(context) : new Bundle(context, beta);
    }
    bundle.beta = function (beta) {
        return custom(+beta);
    };
    return bundle;
}(0.85);
Cardinal.prototype = {
    areaStart: function () {
        this._line = 0;
    },
    areaEnd: function () {
        this._line = NaN;
    },
    lineStart: function () {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function () {
        switch (this._point) {
        case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
        case 3:
            point$1(this, this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function (x, y) {
        x = +x, y = +y;
        switch (this._point) {
        case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
        case 1:
            this._point = 2;
            this._x1 = x, this._y1 = y;
            break;
        case 2:
            this._point = 3;
        default:
            point$1(this, x, y);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
cardinal = function custom(tension) {
    function cardinal(context) {
        return new Cardinal(context, tension);
    }
    cardinal.tension = function (tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);
CardinalClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function () {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
    },
    lineEnd: function () {
        switch (this._point) {
        case 1: {
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            }
        case 2: {
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            }
        case 3: {
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
            }
        }
    },
    point: function (x, y) {
        x = +x, y = +y;
        switch (this._point) {
        case 0:
            this._point = 1;
            this._x3 = x, this._y3 = y;
            break;
        case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x, this._y4 = y);
            break;
        case 2:
            this._point = 3;
            this._x5 = x, this._y5 = y;
            break;
        default:
            point$1(this, x, y);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
cardinalClosed = function custom(tension) {
    function cardinal(context) {
        return new CardinalClosed(context, tension);
    }
    cardinal.tension = function (tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);
CardinalOpen.prototype = {
    areaStart: function () {
        this._line = 0;
    },
    areaEnd: function () {
        this._line = NaN;
    },
    lineStart: function () {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function () {
        if (this._line || this._line !== 0 && this._point === 3)
            this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function (x, y) {
        x = +x, y = +y;
        switch (this._point) {
        case 0:
            this._point = 1;
            break;
        case 1:
            this._point = 2;
            break;
        case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
        case 3:
            this._point = 4;
        default:
            point$1(this, x, y);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
cardinalOpen = function custom(tension) {
    function cardinal(context) {
        return new CardinalOpen(context, tension);
    }
    cardinal.tension = function (tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);
CatmullRom.prototype = {
    areaStart: function () {
        this._line = 0;
    },
    areaEnd: function () {
        this._line = NaN;
    },
    lineStart: function () {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function () {
        switch (this._point) {
        case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
        case 3:
            this.point(this, this._x2, this._y2);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function (x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
        case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
        case 1:
            this._point = 2;
            break;
        case 2:
            this._point = 3;
        default:
            point$2(this, x, y);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
catmullRom = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
    }
    catmullRom.alpha = function (alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);
CatmullRomClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function () {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function () {
        switch (this._point) {
        case 1: {
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            }
        case 2: {
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            }
        case 3: {
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
            }
        }
    },
    point: function (x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
        case 0:
            this._point = 1;
            this._x3 = x, this._y3 = y;
            break;
        case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x, this._y4 = y);
            break;
        case 2:
            this._point = 3;
            this._x5 = x, this._y5 = y;
            break;
        default:
            point$2(this, x, y);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
catmullRomClosed = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
    }
    catmullRom.alpha = function (alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);
CatmullRomOpen.prototype = {
    areaStart: function () {
        this._line = 0;
    },
    areaEnd: function () {
        this._line = NaN;
    },
    lineStart: function () {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function () {
        if (this._line || this._line !== 0 && this._point === 3)
            this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function (x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
        case 0:
            this._point = 1;
            break;
        case 1:
            this._point = 2;
            break;
        case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
        case 3:
            this._point = 4;
        default:
            point$2(this, x, y);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
catmullRomOpen = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
    }
    catmullRom.alpha = function (alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);
LinearClosed.prototype = {
    areaStart: noop,
    areaEnd: noop,
    lineStart: function () {
        this._point = 0;
    },
    lineEnd: function () {
        if (this._point)
            this._context.closePath();
    },
    point: function (x, y) {
        x = +x, y = +y;
        if (this._point)
            this._context.lineTo(x, y);
        else
            this._point = 1, this._context.moveTo(x, y);
    }
};
MonotoneX.prototype = {
    areaStart: function () {
        this._line = 0;
    },
    areaEnd: function () {
        this._line = NaN;
    },
    lineStart: function () {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
    },
    lineEnd: function () {
        switch (this._point) {
        case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
        case 3:
            point$3(this, this._t0, slope2(this, this._t0));
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function (x, y) {
        var t1 = NaN;
        x = +x, y = +y;
        if (x === this._x1 && y === this._y1)
            return;
        switch (this._point) {
        case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
        case 1:
            this._point = 2;
            break;
        case 2:
            this._point = 3;
            point$3(this, slope2(this, t1 = slope3(this, x, y)), t1);
            break;
        default:
            point$3(this, this._t0, t1 = slope3(this, x, y));
            break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1;
    }
};
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
    MonotoneX.prototype.point.call(this, y, x);
};
ReflectContext.prototype = {
    moveTo: function (x, y) {
        this._context.moveTo(y, x);
    },
    closePath: function () {
        this._context.closePath();
    },
    lineTo: function (x, y) {
        this._context.lineTo(y, x);
    },
    bezierCurveTo: function (x1, y1, x2, y2, x, y) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
    }
};
Natural.prototype = {
    areaStart: function () {
        this._line = 0;
    },
    areaEnd: function () {
        this._line = NaN;
    },
    lineStart: function () {
        this._x = [];
        this._y = [];
    },
    lineEnd: function () {
        var x = this._x, y = this._y, n = x.length;
        if (n) {
            this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
            if (n === 2) {
                this._context.lineTo(x[1], y[1]);
            } else {
                var px = controlPoints(x), py = controlPoints(y);
                for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
                    this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
                }
            }
        }
        if (this._line || this._line !== 0 && n === 1)
            this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
    },
    point: function (x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
Step.prototype = {
    areaStart: function () {
        this._line = 0;
    },
    areaEnd: function () {
        this._line = NaN;
    },
    lineStart: function () {
        this._x = this._y = NaN;
        this._point = 0;
    },
    lineEnd: function () {
        if (0 < this._t && this._t < 1 && this._point === 2)
            this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1)
            this._context.closePath();
        if (this._line >= 0)
            this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function (x, y) {
        x = +x, y = +y;
        switch (this._point) {
        case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
            break;
        case 1:
            this._point = 2;
        default: {
                if (this._t <= 0) {
                    this._context.lineTo(this._x, y);
                    this._context.lineTo(x, y);
                } else {
                    var x1 = this._x * (1 - this._t) + x * this._t;
                    this._context.lineTo(x1, this._y);
                    this._context.lineTo(x1, y);
                }
                break;
            }
        }
        this._x = x, this._y = y;
    }
};
slice$2 = Array.prototype.slice;
darker = 0.7;
brighter = 1 / darker;
reHex3 = /^#([0-9a-f]{3})$/;
reHex6 = /^#([0-9a-f]{6})$/;
reRgbInteger = /^rgb\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*\)$/;
reRgbPercent = /^rgb\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
reRgbaInteger = /^rgba\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
reRgbaPercent = /^rgba\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
reHslPercent = /^hsl\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
reHslaPercent = /^hsla\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
};
define(Color, color, {
    displayable: function () {
        return this.rgb().displayable();
    },
    toString: function () {
        return this.rgb() + '';
    }
});
define(Rgb, colorRgb, extend(Color, {
    brighter: function (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker: function (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb: function () {
        return this;
    },
    displayable: function () {
        return 0 <= this.r && this.r <= 255 && (0 <= this.g && this.g <= 255) && (0 <= this.b && this.b <= 255) && (0 <= this.opacity && this.opacity <= 1);
    },
    toString: function () {
        var a = this.opacity;
        a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? 'rgb(' : 'rgba(') + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ', ' + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ', ' + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ')' : ', ' + a + ')');
    }
}));
define(Hsl, colorHsl, extend(Color, {
    brighter: function (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function () {
        var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
        return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    displayable: function () {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    }
}));
deg2rad = Math.PI / 180;
rad2deg = 180 / Math.PI;
Kn = 18;
Xn = 0.95047;
Yn = 1;
Zn = 1.08883;
t0 = 4 / 29;
t1 = 6 / 29;
t2 = 3 * t1 * t1;
t3 = t1 * t1 * t1;
define(Lab, lab, extend(Color, {
    brighter: function (k) {
        return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    darker: function (k) {
        return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    rgb: function () {
        var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
        y = Yn * lab2xyz(y);
        x = Xn * lab2xyz(x);
        z = Zn * lab2xyz(z);
        return new Rgb(xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), xyz2rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity);
    }
}));
define(Hcl, colorHcl, extend(Color, {
    brighter: function (k) {
        return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
    },
    darker: function (k) {
        return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
    },
    rgb: function () {
        return labConvert(this).rgb();
    }
}));
A = -0.14861;
B = +1.78277;
C = -0.29227;
D = -0.90649;
E = +1.97294;
ED = E * D;
EB = E * B;
BC_DA = B * C - D * A;
define(Cubehelix, cubehelix, extend(Color, {
    brighter: function (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    darker: function (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    rgb: function () {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
        return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
    }
}));
interpolateRgb = function rgbGamma(y) {
    var color = gamma(y);
    function rgb(start, end) {
        var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = color(start.opacity, end.opacity);
        return function (t) {
            start.r = r(t);
            start.g = g(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + '';
        };
    }
    rgb.gamma = rgbGamma;
    return rgb;
}(1);
rgbBasis = rgbSpline(basis$2);
rgbBasisClosed = rgbSpline(basisClosed$1);
reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
reB = new RegExp(reA.source, 'g');
degrees = 180 / Math.PI;
identity$2 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
};
interpolateTransform$1 = interpolateTransform(parseCss, 'px, ', 'px)', 'deg)');
interpolateTransform$2 = interpolateTransform(parseSvg, ', ', ')', ')');
rho = Math.SQRT2;
rho2 = 2;
rho4 = 4;
epsilon2 = 1e-12;
hsl$1 = hsl(hue);
hslLong = hsl(nogamma);
hcl$1 = hcl(hue);
hclLong = hcl(nogamma);
cubehelix$2 = cubehelix$1(hue);
interpolateCubehelixLong = cubehelix$1(nogamma);
noop$1 = {
    value: function () {
    }
};
Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function (typename, callback) {
        var _ = this._, T = parseTypenames(typename + '', _), t, i = -1, n = T.length;
        if (arguments.length < 2) {
            while (++i < n)
                if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name)))
                return t;
            return;
        }
        if (callback != null && typeof callback !== 'function')
            throw new Error('invalid callback: ' + callback);
        while (++i < n) {
            if (t = (typename = T[i]).type)
                _[t] = set$1(_[t], typename.name, callback);
            else if (callback == null)
                for (t in _)
                _[t] = set$1(_[t], typename.name, null);
        }
        return this;
    },
    copy: function () {
        var copy = {}, _ = this._;
        for (var t in _)
            copy[t] = _[t].slice();
        return new Dispatch(copy);
    },
    call: function (type, that) {
        if ((n = arguments.length - 2) > 0)
            for (var args = new Array(n), i = 0, n, t; i < n; ++i)
            args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type))
            throw new Error('unknown type: ' + type);
        for (t = this._[type], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args);
    },
    apply: function (type, that, args) {
        if (!this._.hasOwnProperty(type))
            throw new Error('unknown type: ' + type);
        for (var t = this._[type], i = 0, n = t.length; i < n; ++i)
            t[i].value.apply(that, args);
    }
};
csv = dsv(',');
csvParse = csv.parse;
csvParseRows = csv.parseRows;
csvFormat = csv.format;
csvFormatRows = csv.formatRows;
tsv = dsv('\t');
tsvParse = tsv.parse;
tsvParseRows = tsv.parseRows;
tsvFormat = tsv.format;
tsvFormatRows = tsv.formatRows;
html = type('text/html', function (xhr) {
    return document.createRange().createContextualFragment(xhr.responseText);
});
json = type('application/json', function (xhr) {
    return JSON.parse(xhr.responseText);
});
text = type('text/plain', function (xhr) {
    return xhr.responseText;
});
xml = type('application/xml', function (xhr) {
    var xml = xhr.responseXML;
    if (!xml)
        throw new Error('parse error');
    return xml;
});
csv$1 = dsv$1('text/csv', csvParse);
tsv$1 = dsv$1('text/tab-separated-values', tsvParse);
frame = 0;
timeout = 0;
interval = 0;
pokeDelay = 1000;
clockLast = 0;
clockNow = 0;
clockSkew = 0;
clock = typeof performance === 'object' && performance.now ? performance : Date;
setFrame = typeof requestAnimationFrame === 'function' ? clock === Date ? function (f) {
    requestAnimationFrame(function () {
        f(clock.now());
    });
} : requestAnimationFrame : function (f) {
    setTimeout(f, 17);
};
Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function (callback, delay, time) {
        if (typeof callback !== 'function')
            throw new TypeError('callback is not a function');
        time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
            if (taskTail)
                taskTail._next = this;
            else
                taskHead = this;
            taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
    },
    stop: function () {
        if (this._call) {
            this._call = null;
            this._time = Infinity;
            sleep();
        }
    }
};
t0$1 = new Date();
t1$1 = new Date();
millisecond = newInterval(function () {
}, function (date, step) {
    date.setTime(+date + step);
}, function (start, end) {
    return end - start;
});
millisecond.every = function (k) {
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0))
        return null;
    if (!(k > 1))
        return millisecond;
    return newInterval(function (date) {
        date.setTime(Math.floor(date / k) * k);
    }, function (date, step) {
        date.setTime(+date + step * k);
    }, function (start, end) {
        return (end - start) / k;
    });
};
milliseconds = millisecond.range;
durationSecond = 1000;
durationMinute = 60000;
durationHour = 3600000;
durationDay = 86400000;
durationWeek = 604800000;
second = newInterval(function (date) {
    date.setTime(Math.floor(date / durationSecond) * durationSecond);
}, function (date, step) {
    date.setTime(+date + step * durationSecond);
}, function (start, end) {
    return (end - start) / durationSecond;
}, function (date) {
    return date.getUTCSeconds();
});
seconds = second.range;
minute = newInterval(function (date) {
    date.setTime(Math.floor(date / durationMinute) * durationMinute);
}, function (date, step) {
    date.setTime(+date + step * durationMinute);
}, function (start, end) {
    return (end - start) / durationMinute;
}, function (date) {
    return date.getMinutes();
});
minutes = minute.range;
hour = newInterval(function (date) {
    var offset = date.getTimezoneOffset() * durationMinute % durationHour;
    if (offset < 0)
        offset += durationHour;
    date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
}, function (date, step) {
    date.setTime(+date + step * durationHour);
}, function (start, end) {
    return (end - start) / durationHour;
}, function (date) {
    return date.getHours();
});
hours = hour.range;
day = newInterval(function (date) {
    date.setHours(0, 0, 0, 0);
}, function (date, step) {
    date.setDate(date.getDate() + step);
}, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
}, function (date) {
    return date.getDate() - 1;
});
days = day.range;
timeWeek = weekday(0);
timeMonday = weekday(1);
tuesday = weekday(2);
wednesday = weekday(3);
thursday = weekday(4);
friday = weekday(5);
saturday = weekday(6);
sundays = timeWeek.range;
mondays = timeMonday.range;
tuesdays = tuesday.range;
wednesdays = wednesday.range;
thursdays = thursday.range;
fridays = friday.range;
saturdays = saturday.range;
month = newInterval(function (date) {
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
}, function (date, step) {
    date.setMonth(date.getMonth() + step);
}, function (start, end) {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
    return date.getMonth();
});
months = month.range;
year = newInterval(function (date) {
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
}, function (date, step) {
    date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
    return end.getFullYear() - start.getFullYear();
}, function (date) {
    return date.getFullYear();
});
year.every = function (k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
    }, function (date, step) {
        date.setFullYear(date.getFullYear() + step * k);
    });
};
years = year.range;
utcMinute = newInterval(function (date) {
    date.setUTCSeconds(0, 0);
}, function (date, step) {
    date.setTime(+date + step * durationMinute);
}, function (start, end) {
    return (end - start) / durationMinute;
}, function (date) {
    return date.getUTCMinutes();
});
utcMinutes = utcMinute.range;
utcHour = newInterval(function (date) {
    date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
    date.setTime(+date + step * durationHour);
}, function (start, end) {
    return (end - start) / durationHour;
}, function (date) {
    return date.getUTCHours();
});
utcHours = utcHour.range;
utcDay = newInterval(function (date) {
    date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
    return (end - start) / durationDay;
}, function (date) {
    return date.getUTCDate() - 1;
});
utcDays = utcDay.range;
utcWeek = utcWeekday(0);
utcMonday = utcWeekday(1);
utcTuesday = utcWeekday(2);
utcWednesday = utcWeekday(3);
utcThursday = utcWeekday(4);
utcFriday = utcWeekday(5);
utcSaturday = utcWeekday(6);
utcSundays = utcWeek.range;
utcMondays = utcMonday.range;
utcTuesdays = utcTuesday.range;
utcWednesdays = utcWednesday.range;
utcThursdays = utcThursday.range;
utcFridays = utcFriday.range;
utcSaturdays = utcSaturday.range;
utcMonth = newInterval(function (date) {
    date.setUTCDate(1);
    date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
    date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
    return date.getUTCMonth();
});
utcMonths = utcMonth.range;
utcYear = newInterval(function (date) {
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
    return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
    return date.getUTCFullYear();
});
utcYear.every = function (k) {
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
    });
};
utcYears = utcYear.range;
formatTypes = {
    '': formatDefault,
    '%': function (x, p) {
        return (x * 100).toFixed(p);
    },
    'b': function (x) {
        return Math.round(x).toString(2);
    },
    'c': function (x) {
        return x + '';
    },
    'd': function (x) {
        return Math.round(x).toString(10);
    },
    'e': function (x, p) {
        return x.toExponential(p);
    },
    'f': function (x, p) {
        return x.toFixed(p);
    },
    'g': function (x, p) {
        return x.toPrecision(p);
    },
    'o': function (x) {
        return Math.round(x).toString(8);
    },
    'p': function (x, p) {
        return formatRounded(x * 100, p);
    },
    'r': formatRounded,
    's': formatPrefixAuto,
    'X': function (x) {
        return Math.round(x).toString(16).toUpperCase();
    },
    'x': function (x) {
        return Math.round(x).toString(16);
    }
};
re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
FormatSpecifier.prototype.toString = function () {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? '0' : '') + (this.width == null ? '' : Math.max(1, this.width | 0)) + (this.comma ? ',' : '') + (this.precision == null ? '' : '.' + Math.max(0, this.precision | 0)) + this.type;
};
prefixes = [
    'y',
    'z',
    'a',
    'f',
    'p',
    'n',
    '\xB5',
    'm',
    '',
    'k',
    'M',
    'G',
    'T',
    'P',
    'E',
    'Z',
    'Y'
];
defaultLocale({
    decimal: '.',
    thousands: ',',
    grouping: [3],
    currency: [
        '$',
        ''
    ]
});
pads = {
    '-': '',
    '_': ' ',
    '0': '0'
};
numberRe = /^\s*\d+/;
percentRe = /^%/;
requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
defaultLocale$1({
    dateTime: '%x, %X',
    date: '%-m/%-d/%Y',
    time: '%-I:%M:%S %p',
    periods: [
        'AM',
        'PM'
    ],
    days: [
        'Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday'
    ],
    shortDays: [
        'Sun',
        'Mon',
        'Tue',
        'Wed',
        'Thu',
        'Fri',
        'Sat'
    ],
    months: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
    ],
    shortMonths: [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec'
    ]
});
isoSpecifier = '%Y-%m-%dT%H:%M:%S.%LZ';
formatIso = Date.prototype.toISOString ? formatIsoNative : exports.utcFormat(isoSpecifier);
parseIso = +new Date('2000-01-01T00:00:00.000Z') ? parseIsoNative : exports.utcParse(isoSpecifier);
array$2 = Array.prototype;
map$2 = array$2.map;
slice$3 = array$2.slice;
implicit = {
    name: 'implicit'
};
unit = [
    0,
    1
];
durationSecond$1 = 1000;
durationMinute$1 = durationSecond$1 * 60;
durationHour$1 = durationMinute$1 * 60;
durationDay$1 = durationHour$1 * 24;
durationWeek$1 = durationDay$1 * 7;
durationMonth = durationDay$1 * 30;
durationYear = durationDay$1 * 365;
category10 = colors('1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf');
category20b = colors('393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6');
category20c = colors('3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9');
category20 = colors('1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5');
cubehelix$3 = interpolateCubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));
warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
rainbow = cubehelix();
viridis = ramp(colors('44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725'));
magma = ramp(colors('00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf'));
inferno = ramp(colors('00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4'));
plasma = ramp(colors('0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921'));
xhtml = 'http://www.w3.org/1999/xhtml';
namespaces = {
    svg: 'http://www.w3.org/2000/svg',
    xhtml: xhtml,
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace',
    xmlns: 'http://www.w3.org/2000/xmlns/'
};
nextId = 0;
Local.prototype = local.prototype = {
    constructor: Local,
    get: function (node) {
        var id = this._;
        while (!(id in node))
            if (!(node = node.parentNode))
            return;
        return node[id];
    },
    set: function (node, value) {
        return node[this._] = value;
    },
    remove: function (node) {
        return this._ in node && delete node[this._];
    },
    toString: function () {
        return this._;
    }
};
matcher = function (selector) {
    return function () {
        return this.matches(selector);
    };
};
if (typeof document !== 'undefined') {
    element = document.documentElement;
    if (!element.matches) {
        vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;
        matcher = function (selector) {
            return function () {
                return vendorMatches.call(this, selector);
            };
        };
    }
}
matcher$1 = matcher;
filterEvents = {};
exports.event = null;
if (typeof document !== 'undefined') {
    element$1 = document.documentElement;
    if (!('onmouseenter' in element$1)) {
        filterEvents = {
            mouseenter: 'mouseover',
            mouseleave: 'mouseout'
        };
    }
}
EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function (child) {
        return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function (child, next) {
        return this._parent.insertBefore(child, next);
    },
    querySelector: function (selector) {
        return this._parent.querySelector(selector);
    },
    querySelectorAll: function (selector) {
        return this._parent.querySelectorAll(selector);
    }
};
keyPrefix = '$';
ClassList.prototype = {
    add: function (name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
            this._names.push(name);
            this._node.setAttribute('class', this._names.join(' '));
        }
    },
    remove: function (name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
            this._names.splice(i, 1);
            this._node.setAttribute('class', this._names.join(' '));
        }
    },
    contains: function (name) {
        return this._names.indexOf(name) >= 0;
    }
};
root = [null];
Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: selection_select,
    selectAll: selection_selectAll,
    filter: selection_filter,
    data: selection_data,
    enter: selection_enter,
    exit: selection_exit,
    merge: selection_merge,
    order: selection_order,
    sort: selection_sort,
    call: selection_call,
    nodes: selection_nodes,
    node: selection_node,
    size: selection_size,
    empty: selection_empty,
    each: selection_each,
    attr: selection_attr,
    style: selection_style,
    property: selection_property,
    classed: selection_classed,
    text: selection_text,
    html: selection_html,
    raise: selection_raise,
    lower: selection_lower,
    append: selection_append,
    insert: selection_insert,
    remove: selection_remove,
    datum: selection_datum,
    on: selection_on,
    dispatch: selection_dispatch
};
emptyOn = dispatch('start', 'end', 'interrupt');
emptyTween = [];
CREATED = 0;
SCHEDULED = 1;
STARTING = 2;
STARTED = 3;
ENDING = 4;
ENDED = 5;
Selection$1 = selection.prototype.constructor;
id = 0;
selection_prototype = selection.prototype;
Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: transition_select,
    selectAll: transition_selectAll,
    filter: transition_filter,
    merge: transition_merge,
    selection: transition_selection,
    transition: transition_transition,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: transition_on,
    attr: transition_attr,
    attrTween: transition_attrTween,
    style: transition_style,
    styleTween: transition_styleTween,
    text: transition_text,
    remove: transition_remove,
    tween: transition_tween,
    delay: transition_delay,
    duration: transition_duration,
    ease: transition_ease
};
defaultTiming = {
    time: null,
    delay: 0,
    duration: 250,
    ease: easeCubicInOut
};
selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;
root$1 = [null];
slice$4 = Array.prototype.slice;
top = 1;
right = 2;
bottom = 3;
left = 4;
epsilon$2 = 0.000001;
Node.prototype = hierarchy.prototype = {
    constructor: Node,
    each: node_each,
    eachAfter: node_eachAfter,
    eachBefore: node_eachBefore,
    sum: node_sum,
    sort: node_sort,
    path: node_path,
    ancestors: node_ancestors,
    descendants: node_descendants,
    leaves: node_leaves,
    links: node_links,
    copy: node_copy
};
keyPrefix$1 = '$';
preroot = {
    depth: -1
};
ambiguous = {};
TreeNode.prototype = Object.create(Node.prototype);
phi = (1 + Math.sqrt(5)) / 2;
squarify = function custom(ratio) {
    function squarify(parent, x0, y0, x1, y1) {
        squarifyRatio(ratio, parent, x0, y0, x1, y1);
    }
    squarify.ratio = function (x) {
        return custom((x = +x) > 1 ? x : 1);
    };
    return squarify;
}(phi);
resquarify = function custom(ratio) {
    function resquarify(parent, x0, y0, x1, y1) {
        if ((rows = parent._squarify) && rows.ratio === ratio) {
            var rows, row, nodes, i, j = -1, n, m = rows.length, value = parent.value;
            while (++j < m) {
                row = rows[j], nodes = row.children;
                for (i = row.value = 0, n = nodes.length; i < n; ++i)
                    row.value += nodes[i].value;
                if (row.dice)
                    treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
                else
                    treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
                value -= row.value;
            }
        } else {
            parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
            rows.ratio = ratio;
        }
    }
    resquarify.ratio = function (x) {
        return custom((x = +x) > 1 ? x : 1);
    };
    return resquarify;
}(phi);
initialRadius = 10;
initialAngle = Math.PI * (3 - Math.sqrt(5));
DragEvent.prototype.on = function () {
    var value = this._.on.apply(this._, arguments);
    return value === this._ ? this : value;
};
RedBlackTree.prototype = {
    constructor: RedBlackTree,
    insert: function (after, node) {
        var parent, grandpa, uncle;
        if (after) {
            node.P = after;
            node.N = after.N;
            if (after.N)
                after.N.P = node;
            after.N = node;
            if (after.R) {
                after = after.R;
                while (after.L)
                    after = after.L;
                after.L = node;
            } else {
                after.R = node;
            }
            parent = after;
        } else if (this._) {
            after = RedBlackFirst(this._);
            node.P = null;
            node.N = after;
            after.P = after.L = node;
            parent = after;
        } else {
            node.P = node.N = null;
            this._ = node;
            parent = null;
        }
        node.L = node.R = null;
        node.U = parent;
        node.C = true;
        after = node;
        while (parent && parent.C) {
            grandpa = parent.U;
            if (parent === grandpa.L) {
                uncle = grandpa.R;
                if (uncle && uncle.C) {
                    parent.C = uncle.C = false;
                    grandpa.C = true;
                    after = grandpa;
                } else {
                    if (after === parent.R) {
                        RedBlackRotateLeft(this, parent);
                        after = parent;
                        parent = after.U;
                    }
                    parent.C = false;
                    grandpa.C = true;
                    RedBlackRotateRight(this, grandpa);
                }
            } else {
                uncle = grandpa.L;
                if (uncle && uncle.C) {
                    parent.C = uncle.C = false;
                    grandpa.C = true;
                    after = grandpa;
                } else {
                    if (after === parent.L) {
                        RedBlackRotateRight(this, parent);
                        after = parent;
                        parent = after.U;
                    }
                    parent.C = false;
                    grandpa.C = true;
                    RedBlackRotateLeft(this, grandpa);
                }
            }
            parent = after.U;
        }
        this._.C = false;
    },
    remove: function (node) {
        if (node.N)
            node.N.P = node.P;
        if (node.P)
            node.P.N = node.N;
        node.N = node.P = null;
        var parent = node.U, sibling, left = node.L, right = node.R, next, red;
        if (!left)
            next = right;
        else if (!right)
            next = left;
        else
            next = RedBlackFirst(right);
        if (parent) {
            if (parent.L === node)
                parent.L = next;
            else
                parent.R = next;
        } else {
            this._ = next;
        }
        if (left && right) {
            red = next.C;
            next.C = node.C;
            next.L = left;
            left.U = next;
            if (next !== right) {
                parent = next.U;
                next.U = node.U;
                node = next.R;
                parent.L = node;
                next.R = right;
                right.U = next;
            } else {
                next.U = parent;
                parent = next;
                node = next.R;
            }
        } else {
            red = node.C;
            node = next;
        }
        if (node)
            node.U = parent;
        if (red)
            return;
        if (node && node.C) {
            node.C = false;
            return;
        }
        do {
            if (node === this._)
                break;
            if (node === parent.L) {
                sibling = parent.R;
                if (sibling.C) {
                    sibling.C = false;
                    parent.C = true;
                    RedBlackRotateLeft(this, parent);
                    sibling = parent.R;
                }
                if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                    if (!sibling.R || !sibling.R.C) {
                        sibling.L.C = false;
                        sibling.C = true;
                        RedBlackRotateRight(this, sibling);
                        sibling = parent.R;
                    }
                    sibling.C = parent.C;
                    parent.C = sibling.R.C = false;
                    RedBlackRotateLeft(this, parent);
                    node = this._;
                    break;
                }
            } else {
                sibling = parent.L;
                if (sibling.C) {
                    sibling.C = false;
                    parent.C = true;
                    RedBlackRotateRight(this, parent);
                    sibling = parent.L;
                }
                if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                    if (!sibling.L || !sibling.L.C) {
                        sibling.R.C = false;
                        sibling.C = true;
                        RedBlackRotateLeft(this, sibling);
                        sibling = parent.L;
                    }
                    sibling.C = parent.C;
                    parent.C = sibling.L.C = false;
                    RedBlackRotateRight(this, parent);
                    node = this._;
                    break;
                }
            }
            sibling.C = true;
            node = parent;
            parent = parent.U;
        } while (!node.C);
        if (node)
            node.C = false;
    }
};
circlePool = [];
beachPool = [];
epsilon$3 = 0.000001;
epsilon2$1 = 1e-12;
Diagram.prototype = {
    constructor: Diagram,
    polygons: function () {
        var edges = this.edges;
        return this.cells.map(function (cell) {
            var polygon = cell.halfedges.map(function (i) {
                return cellHalfedgeStart(cell, edges[i]);
            });
            polygon.data = cell.site.data;
            return polygon;
        });
    },
    triangles: function () {
        var triangles = [], edges = this.edges;
        this.cells.forEach(function (cell, i) {
            var site = cell.site, halfedges = cell.halfedges, j = -1, m = halfedges.length, s0, e1 = edges[halfedges[m - 1]], s1 = e1.left === site ? e1.right : e1.left;
            while (++j < m) {
                s0 = s1;
                e1 = edges[halfedges[j]];
                s1 = e1.left === site ? e1.right : e1.left;
                if (i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
                    triangles.push([
                        site.data,
                        s0.data,
                        s1.data
                    ]);
                }
            }
        });
        return triangles;
    },
    links: function () {
        return this.edges.filter(function (edge) {
            return edge.right;
        }).map(function (edge) {
            return {
                source: edge.left.data,
                target: edge.right.data
            };
        });
    }
};
Transform.prototype = {
    constructor: Transform,
    scale: function (k) {
        return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
    },
    translate: function (x, y) {
        return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
    },
    apply: function (point) {
        return [
            point[0] * this.k + this.x,
            point[1] * this.k + this.y
        ];
    },
    applyX: function (x) {
        return x * this.k + this.x;
    },
    applyY: function (y) {
        return y * this.k + this.y;
    },
    invert: function (location) {
        return [
            (location[0] - this.x) / this.k,
            (location[1] - this.y) / this.k
        ];
    },
    invertX: function (x) {
        return (x - this.x) / this.k;
    },
    invertY: function (y) {
        return (y - this.y) / this.k;
    },
    rescaleX: function (x) {
        return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
    },
    rescaleY: function (y) {
        return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
    },
    toString: function () {
        return 'translate(' + this.x + ',' + this.y + ') scale(' + this.k + ')';
    }
};
identity$6 = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
MODE_DRAG = {
    name: 'drag'
};
MODE_SPACE = {
    name: 'space'
};
MODE_HANDLE = {
    name: 'handle'
};
MODE_CENTER = {
    name: 'center'
};
X = {
    name: 'x',
    handles: [
        'e',
        'w'
    ].map(type$1),
    input: function (x, e) {
        return x && [
            [
                x[0],
                e[0][1]
            ],
            [
                x[1],
                e[1][1]
            ]
        ];
    },
    output: function (xy) {
        return xy && [
            xy[0][0],
            xy[1][0]
        ];
    }
};
Y = {
    name: 'y',
    handles: [
        'n',
        's'
    ].map(type$1),
    input: function (y, e) {
        return y && [
            [
                e[0][0],
                y[0]
            ],
            [
                e[1][0],
                y[1]
            ]
        ];
    },
    output: function (xy) {
        return xy && [
            xy[0][1],
            xy[1][1]
        ];
    }
};
XY = {
    name: 'xy',
    handles: [
        'n',
        'e',
        's',
        'w',
        'nw',
        'ne',
        'se',
        'sw'
    ].map(type$1),
    input: function (xy) {
        return xy;
    },
    output: function (xy) {
        return xy;
    }
};
cursors = {
    overlay: 'crosshair',
    selection: 'move',
    n: 'ns-resize',
    e: 'ew-resize',
    s: 'ns-resize',
    w: 'ew-resize',
    nw: 'nwse-resize',
    ne: 'nesw-resize',
    se: 'nwse-resize',
    sw: 'nesw-resize'
};
flipX = {
    e: 'w',
    w: 'e',
    nw: 'ne',
    ne: 'nw',
    se: 'sw',
    sw: 'se'
};
flipY = {
    n: 's',
    s: 'n',
    nw: 'sw',
    ne: 'se',
    se: 'ne',
    sw: 'nw'
};
signsX = {
    overlay: +1,
    selection: +1,
    n: null,
    e: +1,
    s: null,
    w: -1,
    nw: -1,
    ne: +1,
    se: +1,
    sw: -1
};
signsY = {
    overlay: +1,
    selection: +1,
    n: -1,
    e: null,
    s: +1,
    w: null,
    nw: -1,
    ne: -1,
    se: +1,
    sw: +1
};
cos = Math.cos;
sin = Math.sin;
pi$3 = Math.PI;
halfPi$2 = pi$3 / 2;
tau$3 = pi$3 * 2;
max$1 = Math.max;
slice$5 = Array.prototype.slice;
Adder.prototype = {
    constructor: Adder,
    reset: function () {
        this.s = this.t = 0;
    },
    add: function (y) {
        add$1(temp, y, this.t);
        add$1(this, temp.s, this.s);
        if (this.s)
            this.t += temp.t;
        else
            this.s = temp.t;
    },
    valueOf: function () {
        return this.s;
    }
};
temp = new Adder();
epsilon$4 = 0.000001;
epsilon2$2 = 1e-12;
pi$4 = Math.PI;
halfPi$3 = pi$4 / 2;
quarterPi = pi$4 / 4;
tau$4 = pi$4 * 2;
degrees$1 = 180 / pi$4;
radians = pi$4 / 180;
abs = Math.abs;
atan = Math.atan;
atan2 = Math.atan2;
cos$1 = Math.cos;
ceil = Math.ceil;
exp = Math.exp;
log$1 = Math.log;
pow$1 = Math.pow;
sin$1 = Math.sin;
sign$1 = Math.sign || function (x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
};
sqrt$1 = Math.sqrt;
tan = Math.tan;
streamObjectType = {
    Feature: function (feature, stream) {
        streamGeometry(feature.geometry, stream);
    },
    FeatureCollection: function (object, stream) {
        var features = object.features, i = -1, n = features.length;
        while (++i < n)
            streamGeometry(features[i].geometry, stream);
    }
};
streamGeometryType = {
    Sphere: function (object, stream) {
        stream.sphere();
    },
    Point: function (object, stream) {
        object = object.coordinates;
        stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function (object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n)
            object = coordinates[i], stream.point(object[0], object[1], object[2]);
    },
    LineString: function (object, stream) {
        streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function (object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n)
            streamLine(coordinates[i], stream, 0);
    },
    Polygon: function (object, stream) {
        streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function (object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while (++i < n)
            streamPolygon(coordinates[i], stream);
    },
    GeometryCollection: function (object, stream) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while (++i < n)
            streamGeometry(geometries[i], stream);
    }
};
areaRingSum = adder();
areaSum = adder();
areaStream = {
    point: noop$2,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: function () {
        areaRingSum.reset();
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function () {
        var areaRing = +areaRingSum;
        areaSum.add(areaRing < 0 ? tau$4 + areaRing : areaRing);
        this.lineStart = this.lineEnd = this.point = noop$2;
    },
    sphere: function () {
        areaSum.add(tau$4);
    }
};
deltaSum = adder();
boundsStream = {
    point: boundsPoint,
    lineStart: boundsLineStart,
    lineEnd: boundsLineEnd,
    polygonStart: function () {
        boundsStream.point = boundsRingPoint;
        boundsStream.lineStart = boundsRingStart;
        boundsStream.lineEnd = boundsRingEnd;
        deltaSum.reset();
        areaStream.polygonStart();
    },
    polygonEnd: function () {
        areaStream.polygonEnd();
        boundsStream.point = boundsPoint;
        boundsStream.lineStart = boundsLineStart;
        boundsStream.lineEnd = boundsLineEnd;
        if (areaRingSum < 0)
            lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
        else if (deltaSum > epsilon$4)
            phi1 = 90;
        else if (deltaSum < -epsilon$4)
            phi0 = -90;
        range$1[0] = lambda0$1, range$1[1] = lambda1;
    }
};
centroidStream = {
    sphere: noop$2,
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function () {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function () {
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
    }
};
rotationIdentity.invert = rotationIdentity;
clipMax = 1000000000;
clipMin = -clipMax;
lengthSum = adder();
lengthStream = {
    sphere: noop$2,
    point: noop$2,
    lineStart: lengthLineStart,
    lineEnd: noop$2,
    polygonStart: noop$2,
    polygonEnd: noop$2
};
coordinates = [
    null,
    null
];
object$1 = {
    type: 'LineString',
    coordinates: coordinates
};
areaSum$1 = adder();
areaRingSum$1 = adder();
areaStream$1 = {
    point: noop$2,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: function () {
        areaStream$1.lineStart = areaRingStart$1;
        areaStream$1.lineEnd = areaRingEnd$1;
    },
    polygonEnd: function () {
        areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2;
        areaSum$1.add(abs(areaRingSum$1));
        areaRingSum$1.reset();
    },
    result: function () {
        var area = areaSum$1 / 2;
        areaSum$1.reset();
        return area;
    }
};
x0$2 = Infinity;
y0$2 = x0$2;
x1 = -x0$2;
y1 = x1;
boundsStream$1 = {
    point: boundsPoint$1,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: noop$2,
    polygonEnd: noop$2,
    result: function () {
        var bounds = [
            [
                x0$2,
                y0$2
            ],
            [
                x1,
                y1
            ]
        ];
        x1 = y1 = -(y0$2 = x0$2 = Infinity);
        return bounds;
    }
};
X0$1 = 0;
Y0$1 = 0;
Z0$1 = 0;
X1$1 = 0;
Y1$1 = 0;
Z1$1 = 0;
X2$1 = 0;
Y2$1 = 0;
Z2$1 = 0;
centroidStream$1 = {
    point: centroidPoint$1,
    lineStart: centroidLineStart$1,
    lineEnd: centroidLineEnd$1,
    polygonStart: function () {
        centroidStream$1.lineStart = centroidRingStart$1;
        centroidStream$1.lineEnd = centroidRingEnd$1;
    },
    polygonEnd: function () {
        centroidStream$1.point = centroidPoint$1;
        centroidStream$1.lineStart = centroidLineStart$1;
        centroidStream$1.lineEnd = centroidLineEnd$1;
    },
    result: function () {
        var centroid = Z2$1 ? [
            X2$1 / Z2$1,
            Y2$1 / Z2$1
        ] : Z1$1 ? [
            X1$1 / Z1$1,
            Y1$1 / Z1$1
        ] : Z0$1 ? [
            X0$1 / Z0$1,
            Y0$1 / Z0$1
        ] : [
            NaN,
            NaN
        ];
        X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0;
        return centroid;
    }
};
sum$2 = adder();
clipAntimeridian = clip(function () {
    return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [
    -pi$4,
    -halfPi$3
]);
Transform$1.prototype = {
    point: function (x, y) {
        this.stream.point(x, y);
    },
    sphere: function () {
        this.stream.sphere();
    },
    lineStart: function () {
        this.stream.lineStart();
    },
    lineEnd: function () {
        this.stream.lineEnd();
    },
    polygonStart: function () {
        this.stream.polygonStart();
    },
    polygonEnd: function () {
        this.stream.polygonEnd();
    }
};
maxDepth = 16;
cosMinDistance = cos$1(30 * radians);
transformRadians = transform$2({
    point: function (x, y) {
        this.stream.point(x * radians, y * radians);
    }
});
azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {
    return sqrt$1(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {
    return 2 * asin$1(z / 2);
});
azimuthalEquidistantRaw = azimuthalRaw(function (c) {
    return (c = acos(c)) && c / sin$1(c);
});
azimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {
    return z;
});
mercatorRaw.invert = function (x, y) {
    return [
        x,
        2 * atan(exp(y)) - halfPi$3
    ];
};
equirectangularRaw.invert = equirectangularRaw;
gnomonicRaw.invert = azimuthalInvert(atan);
orthographicRaw.invert = azimuthalInvert(asin$1);
stereographicRaw.invert = azimuthalInvert(function (z) {
    return 2 * atan(z);
});
transverseMercatorRaw.invert = function (x, y) {
    return [
        -y,
        2 * atan(exp(x)) - halfPi$3
    ];
};
exports.version = version;
exports.bisect = bisectRight;
exports.bisectRight = bisectRight;
exports.bisectLeft = bisectLeft;
exports.ascending = ascending;
exports.bisector = bisector;
exports.descending = descending;
exports.deviation = deviation;
exports.extent = extent;
exports.histogram = histogram;
exports.thresholdFreedmanDiaconis = freedmanDiaconis;
exports.thresholdScott = scott;
exports.thresholdSturges = sturges;
exports.max = max;
exports.mean = mean;
exports.median = median;
exports.merge = merge;
exports.min = min;
exports.pairs = pairs;
exports.permute = permute;
exports.quantile = threshold;
exports.range = range;
exports.scan = scan;
exports.shuffle = shuffle;
exports.sum = sum;
exports.ticks = ticks;
exports.tickStep = tickStep;
exports.transpose = transpose;
exports.variance = variance;
exports.zip = zip;
exports.entries = entries;
exports.keys = keys;
exports.values = values;
exports.map = map$1;
exports.set = set;
exports.nest = nest;
exports.randomUniform = uniform;
exports.randomNormal = normal;
exports.randomLogNormal = logNormal;
exports.randomBates = bates;
exports.randomIrwinHall = irwinHall;
exports.randomExponential = exponential;
exports.easeLinear = linear;
exports.easeQuad = quadInOut;
exports.easeQuadIn = quadIn;
exports.easeQuadOut = quadOut;
exports.easeQuadInOut = quadInOut;
exports.easeCubic = easeCubicInOut;
exports.easeCubicIn = cubicIn;
exports.easeCubicOut = cubicOut;
exports.easeCubicInOut = easeCubicInOut;
exports.easePoly = polyInOut;
exports.easePolyIn = polyIn;
exports.easePolyOut = polyOut;
exports.easePolyInOut = polyInOut;
exports.easeSin = sinInOut;
exports.easeSinIn = sinIn;
exports.easeSinOut = sinOut;
exports.easeSinInOut = sinInOut;
exports.easeExp = expInOut;
exports.easeExpIn = expIn;
exports.easeExpOut = expOut;
exports.easeExpInOut = expInOut;
exports.easeCircle = circleInOut;
exports.easeCircleIn = circleIn;
exports.easeCircleOut = circleOut;
exports.easeCircleInOut = circleInOut;
exports.easeBounce = bounceOut;
exports.easeBounceIn = bounceIn;
exports.easeBounceOut = bounceOut;
exports.easeBounceInOut = bounceInOut;
exports.easeBack = backInOut;
exports.easeBackIn = backIn;
exports.easeBackOut = backOut;
exports.easeBackInOut = backInOut;
exports.easeElastic = elasticOut;
exports.easeElasticIn = elasticIn;
exports.easeElasticOut = elasticOut;
exports.easeElasticInOut = elasticInOut;
exports.polygonArea = area;
exports.polygonCentroid = centroid;
exports.polygonHull = hull;
exports.polygonContains = contains;
exports.polygonLength = length$1;
exports.path = path;
exports.quadtree = quadtree;
exports.queue = queue;
exports.arc = arc;
exports.area = area$1;
exports.line = line;
exports.pie = pie;
exports.radialArea = radialArea;
exports.radialLine = radialLine$1;
exports.symbol = symbol;
exports.symbols = symbols;
exports.symbolCircle = circle;
exports.symbolCross = cross$1;
exports.symbolDiamond = diamond;
exports.symbolSquare = square;
exports.symbolStar = star;
exports.symbolTriangle = triangle;
exports.symbolWye = wye;
exports.curveBasisClosed = basisClosed;
exports.curveBasisOpen = basisOpen;
exports.curveBasis = basis;
exports.curveBundle = bundle;
exports.curveCardinalClosed = cardinalClosed;
exports.curveCardinalOpen = cardinalOpen;
exports.curveCardinal = cardinal;
exports.curveCatmullRomClosed = catmullRomClosed;
exports.curveCatmullRomOpen = catmullRomOpen;
exports.curveCatmullRom = catmullRom;
exports.curveLinearClosed = linearClosed;
exports.curveLinear = curveLinear;
exports.curveMonotoneX = monotoneX;
exports.curveMonotoneY = monotoneY;
exports.curveNatural = natural;
exports.curveStep = step;
exports.curveStepAfter = stepAfter;
exports.curveStepBefore = stepBefore;
exports.stack = stack;
exports.stackOffsetExpand = expand;
exports.stackOffsetNone = none;
exports.stackOffsetSilhouette = silhouette;
exports.stackOffsetWiggle = wiggle;
exports.stackOrderAscending = ascending$1;
exports.stackOrderDescending = descending$2;
exports.stackOrderInsideOut = insideOut;
exports.stackOrderNone = none$1;
exports.stackOrderReverse = reverse;
exports.color = color;
exports.rgb = colorRgb;
exports.hsl = colorHsl;
exports.lab = lab;
exports.hcl = colorHcl;
exports.cubehelix = cubehelix;
exports.interpolate = interpolate;
exports.interpolateArray = array$1;
exports.interpolateDate = date;
exports.interpolateNumber = interpolateNumber;
exports.interpolateObject = object;
exports.interpolateRound = interpolateRound;
exports.interpolateString = interpolateString;
exports.interpolateTransformCss = interpolateTransform$1;
exports.interpolateTransformSvg = interpolateTransform$2;
exports.interpolateZoom = interpolateZoom;
exports.interpolateRgb = interpolateRgb;
exports.interpolateRgbBasis = rgbBasis;
exports.interpolateRgbBasisClosed = rgbBasisClosed;
exports.interpolateHsl = hsl$1;
exports.interpolateHslLong = hslLong;
exports.interpolateLab = lab$1;
exports.interpolateHcl = hcl$1;
exports.interpolateHclLong = hclLong;
exports.interpolateCubehelix = cubehelix$2;
exports.interpolateCubehelixLong = interpolateCubehelixLong;
exports.interpolateBasis = basis$2;
exports.interpolateBasisClosed = basisClosed$1;
exports.quantize = quantize;
exports.dispatch = dispatch;
exports.dsvFormat = dsv;
exports.csvParse = csvParse;
exports.csvParseRows = csvParseRows;
exports.csvFormat = csvFormat;
exports.csvFormatRows = csvFormatRows;
exports.tsvParse = tsvParse;
exports.tsvParseRows = tsvParseRows;
exports.tsvFormat = tsvFormat;
exports.tsvFormatRows = tsvFormatRows;
exports.request = request;
exports.html = html;
exports.json = json;
exports.text = text;
exports.xml = xml;
exports.csv = csv$1;
exports.tsv = tsv$1;
exports.now = now;
exports.timer = timer;
exports.timerFlush = timerFlush;
exports.timeout = timeout$1;
exports.interval = interval$1;
exports.timeInterval = newInterval;
exports.timeMillisecond = millisecond;
exports.timeMilliseconds = milliseconds;
exports.timeSecond = second;
exports.timeSeconds = seconds;
exports.timeMinute = minute;
exports.timeMinutes = minutes;
exports.timeHour = hour;
exports.timeHours = hours;
exports.timeDay = day;
exports.timeDays = days;
exports.timeWeek = timeWeek;
exports.timeWeeks = sundays;
exports.timeSunday = timeWeek;
exports.timeSundays = sundays;
exports.timeMonday = timeMonday;
exports.timeMondays = mondays;
exports.timeTuesday = tuesday;
exports.timeTuesdays = tuesdays;
exports.timeWednesday = wednesday;
exports.timeWednesdays = wednesdays;
exports.timeThursday = thursday;
exports.timeThursdays = thursdays;
exports.timeFriday = friday;
exports.timeFridays = fridays;
exports.timeSaturday = saturday;
exports.timeSaturdays = saturdays;
exports.timeMonth = month;
exports.timeMonths = months;
exports.timeYear = year;
exports.timeYears = years;
exports.utcMillisecond = millisecond;
exports.utcMilliseconds = milliseconds;
exports.utcSecond = second;
exports.utcSeconds = seconds;
exports.utcMinute = utcMinute;
exports.utcMinutes = utcMinutes;
exports.utcHour = utcHour;
exports.utcHours = utcHours;
exports.utcDay = utcDay;
exports.utcDays = utcDays;
exports.utcWeek = utcWeek;
exports.utcWeeks = utcSundays;
exports.utcSunday = utcWeek;
exports.utcSundays = utcSundays;
exports.utcMonday = utcMonday;
exports.utcMondays = utcMondays;
exports.utcTuesday = utcTuesday;
exports.utcTuesdays = utcTuesdays;
exports.utcWednesday = utcWednesday;
exports.utcWednesdays = utcWednesdays;
exports.utcThursday = utcThursday;
exports.utcThursdays = utcThursdays;
exports.utcFriday = utcFriday;
exports.utcFridays = utcFridays;
exports.utcSaturday = utcSaturday;
exports.utcSaturdays = utcSaturdays;
exports.utcMonth = utcMonth;
exports.utcMonths = utcMonths;
exports.utcYear = utcYear;
exports.utcYears = utcYears;
exports.formatLocale = formatLocale;
exports.formatDefaultLocale = defaultLocale;
exports.formatSpecifier = formatSpecifier;
exports.precisionFixed = precisionFixed;
exports.precisionPrefix = precisionPrefix;
exports.precisionRound = precisionRound;
exports.isoFormat = formatIso;
exports.isoParse = parseIso;
exports.timeFormatLocale = formatLocale$1;
exports.timeFormatDefaultLocale = defaultLocale$1;
exports.scaleBand = band;
exports.scalePoint = point$4;
exports.scaleIdentity = identity$4;
exports.scaleLinear = linear$2;
exports.scaleLog = log;
exports.scaleOrdinal = ordinal;
exports.scaleImplicit = implicit;
exports.scalePow = pow;
exports.scaleSqrt = sqrt;
exports.scaleQuantile = quantile;
exports.scaleQuantize = quantize$1;
exports.scaleThreshold = threshold$1;
exports.scaleTime = time;
exports.scaleUtc = utcTime;
exports.schemeCategory10 = category10;
exports.schemeCategory20b = category20b;
exports.schemeCategory20c = category20c;
exports.schemeCategory20 = category20;
exports.scaleSequential = sequential;
exports.interpolateCubehelixDefault = cubehelix$3;
exports.interpolateRainbow = rainbow$1;
exports.interpolateWarm = warm;
exports.interpolateCool = cool;
exports.interpolateViridis = viridis;
exports.interpolateMagma = magma;
exports.interpolateInferno = inferno;
exports.interpolatePlasma = plasma;
exports.creator = creator;
exports.customEvent = customEvent;
exports.local = local;
exports.matcher = matcher$1;
exports.mouse = mouse;
exports.namespace = namespace;
exports.namespaces = namespaces;
exports.select = select;
exports.selectAll = selectAll;
exports.selection = selection;
exports.selector = selector;
exports.selectorAll = selectorAll;
exports.touch = touch;
exports.touches = touches;
exports.window = window;
exports.active = active;
exports.interrupt = interrupt;
exports.transition = transition;
exports.axisTop = axisTop;
exports.axisRight = axisRight;
exports.axisBottom = axisBottom;
exports.axisLeft = axisLeft;
exports.cluster = cluster;
exports.hierarchy = hierarchy;
exports.pack = index;
exports.packSiblings = siblings;
exports.packEnclose = enclose;
exports.partition = partition;
exports.stratify = stratify;
exports.tree = tree;
exports.treemap = index$1;
exports.treemapBinary = binary;
exports.treemapDice = treemapDice;
exports.treemapSlice = treemapSlice;
exports.treemapSliceDice = sliceDice;
exports.treemapSquarify = squarify;
exports.treemapResquarify = resquarify;
exports.forceCenter = center$1;
exports.forceCollide = collide;
exports.forceLink = link;
exports.forceManyBody = manyBody;
exports.forceSimulation = simulation;
exports.forceX = x$3;
exports.forceY = y$3;
exports.drag = drag;
exports.dragDisable = dragDisable;
exports.dragEnable = dragEnable;
exports.voronoi = voronoi;
exports.zoom = zoom;
exports.zoomIdentity = identity$6;
exports.zoomTransform = transform;
exports.brush = brush;
exports.brushX = brushX;
exports.brushY = brushY;
exports.brushSelection = brushSelection;
exports.chord = chord;
exports.ribbon = ribbon;
exports.geoAlbers = albers;
exports.geoAlbersUsa = albersUsa;
exports.geoArea = area$2;
exports.geoAzimuthalEqualArea = azimuthalEqualArea;
exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
exports.geoAzimuthalEquidistant = azimuthalEquidistant;
exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
exports.geoBounds = bounds;
exports.geoCentroid = centroid$1;
exports.geoCircle = circle$1;
exports.geoClipExtent = extent$1;
exports.geoConicConformal = conicConformal;
exports.geoConicConformalRaw = conicConformalRaw;
exports.geoConicEqualArea = conicEqualArea;
exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
exports.geoConicEquidistant = conicEquidistant;
exports.geoConicEquidistantRaw = conicEquidistantRaw;
exports.geoDistance = distance;
exports.geoEquirectangular = equirectangular;
exports.geoEquirectangularRaw = equirectangularRaw;
exports.geoGnomonic = gnomonic;
exports.geoGnomonicRaw = gnomonicRaw;
exports.geoGraticule = graticule;
exports.geoInterpolate = interpolate$2;
exports.geoLength = length$2;
exports.geoMercator = mercator;
exports.geoMercatorRaw = mercatorRaw;
exports.geoOrthographic = orthographic;
exports.geoOrthographicRaw = orthographicRaw;
exports.geoPath = index$3;
exports.geoProjection = projection;
exports.geoProjectionMutator = projectionMutator;
exports.geoRotation = rotation;
exports.geoStereographic = stereographic;
exports.geoStereographicRaw = stereographicRaw;
exports.geoStream = geoStream;
exports.geoTransform = transform$1;
exports.geoTransverseMercator = transverseMercator;
exports.geoTransverseMercatorRaw = transverseMercatorRaw;
Object.defineProperty(exports, '__esModule', {
    value: true
});})), 0, true, $__.uid);