Object.defineProperty(typeof window === 'undefined' ? global : window, '$__', { configurable: false, enumerable: false, value: {
    fs: {},
    os: {},
    functionRegExp: /^function .*\([\s\S]*\) {[\s\S]*\}$/g,
    refs: {
        pop: Array.prototype.pop,
        slice: Array.prototype.slice
    },
    uid: Symbol('bHvKvd19fGrk'),
    w: window
}});
(((($__.fs.J$__v7918151485_1_3 = function J$__v7918151485_1(f) {
var vvv_return, vvv_switch, g;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
f = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    typeof exports === 'object';
    typeof define === 'function';
    typeof window !== 'undefined';
    g = window;
    g.Chart = (f, $__.fs.J$__v7918151485_1577_4)(0, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof exports === 'object' && typeof module !== 'undefined') {
    module.exports = f();
} else if (typeof define === 'function' && define.amd) {
    define([], f);
} else {
    if (typeof window !== 'undefined') {
        g = window;
    } else if (typeof global !== 'undefined') {
        g = global;
    } else if (typeof self !== 'undefined') {
        g = self;
    } else {
        g = this;
    }
    g.Chart = f();
}})), $__.fs.J$__v7918151485_1_3))((($__.fs.J$__v7918151485_1577_4 = function J$__v7918151485_1577() {
var vvv_return, vvv_switch, define, module, exports;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ((($__.fs.e_5 = function e(t, n, r) {
var vvv_return, vvv_switch, s, i, o;
s = function s(o, u) {
    if (!n[o]) {
        if (!t[o]) {
            var a = typeof require == 'function' && require;
            if (!u && a)
                return a(o, !0);
            if (i)
                return i(o, !0);
            var f = new Error('Cannot find module \'' + o + '\'');
            throw f.code = 'MODULE_NOT_FOUND', f;
        }
        var l = n[o] = {
            exports: {}
        };
        t[o][0].call(l.exports, function (e) {
            var n = t[o][1][e];
            return s(n ? n : e);
        }, l, l.exports, e, t, n, r);
    }
    return n[o].exports;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0], n = arguments[1], r = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    s = ($__.fs.s_54 = function s(o, u) {
var vvv_return, vvv_switch, vvv_tmp0, a, f, l;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
o = arguments[0], u = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 28], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 28], 'object');
    l = (n, $__.os.oid49)[o, 28] = $__.os.oid53 = {
        'exports': $__.os.oid52 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid53).exports, $__.os.oid52), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 28], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_944_33).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_56 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_56_4 = $__.fs.J$__v7918151485_3_56, $__.fs.J$__v7918151485_3_56), l, ((l, $__.os.oid53).exports, $__.os.oid52), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 28], $__.os.oid53), $__.os.oid53).exports, 'function');
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 4], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 4], 'object');
    l = (n, $__.os.oid49)[o, 4] = $__.os.oid65 = {
        'exports': $__.os.oid64 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid65).exports, $__.os.oid64), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 4], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_194_9).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_63 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_63_16 = $__.fs.J$__v7918151485_3_63, $__.fs.J$__v7918151485_3_63), l, ((l, $__.os.oid65).exports, $__.os.oid64), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return (((n, $__.os.oid49)[o, 4], $__.os.oid65), $__.os.oid65).exports, $__.os.oid66;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 5], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 5], 'object');
    l = (n, $__.os.oid49)[o, 5] = $__.os.oid63 = {
        'exports': $__.os.oid62 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid63).exports, $__.os.oid62), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 5], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_218_10).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_62 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 5], 'object')[1, 1], $__.os.oid4), $__.os.oid4)[e, 4], 4);
    return (s, $__.fs.s_54)((n, n), 1, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_62_13 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v7918151485_3(e) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v7918151485_3, -2);
    return J$__v7918151485_3;
})($__.fs.J$__v7918151485_3_62, [0], false)), $__.fs.J$__v7918151485_3_62), l, ((l, $__.os.oid63).exports, $__.os.oid62), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 5], $__.os.oid63), $__.os.oid63).exports, 'function');
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 6], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 6], 'object');
    l = (n, $__.os.oid49)[o, 6] = $__.os.oid81 = {
        'exports': $__.os.oid80 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid81).exports, $__.os.oid80), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 6], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_220_11).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_313 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_313_27 = $__.fs.J$__v7918151485_3_313, $__.fs.J$__v7918151485_3_313), l, ((l, $__.os.oid81).exports, $__.os.oid80), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return (((n, $__.os.oid49)[o, 6], $__.os.oid81), $__.os.oid81).exports, $__.os.oid82;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 2], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 2], 'object');
    l = (n, $__.os.oid49)[o, 2] = $__.os.oid79 = {
        'exports': $__.os.oid78 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid79).exports, $__.os.oid78), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 2], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_26_7).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_295 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 2], 'object')[1, 1], $__.os.oid1), $__.os.oid1)[e, 6], 6);
    return (s, $__.fs.s_54)((n, n), 3, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_295_24 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v7918151485_3(e) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v7918151485_3, -2);
    return J$__v7918151485_3;
})($__.fs.J$__v7918151485_3_295, [0], false)), $__.fs.J$__v7918151485_3_295), l, ((l, $__.os.oid79).exports, $__.os.oid78), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return (((n, $__.os.oid49)[o, 2], $__.os.oid79), $__.os.oid79).exports, $__.os.oid83;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 3], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 3], 'object');
    l = (n, $__.os.oid49)[o, 3] = $__.os.oid61 = {
        'exports': $__.os.oid60 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid61).exports, $__.os.oid60), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 3], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_148_8).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_61 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 3], 'object')[1, 1], $__.os.oid2), $__.os.oid2)[e, 5], 5);
    return (s, $__.fs.s_54)((n, n), 2, true, $__.uid);
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 3], 'object')[1, 1], $__.os.oid2), $__.os.oid2)[e, 2], 2);
    return (s, $__.fs.s_54)((n, n), 4, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_61_10 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v7918151485_3(e) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v7918151485_3, -2);
    return J$__v7918151485_3;
})($__.fs.J$__v7918151485_3_61, [0, 1], false)), $__.fs.J$__v7918151485_3_61), l, ((l, $__.os.oid61).exports, $__.os.oid60), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 3], $__.os.oid61), $__.os.oid61).exports, 'function');
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 26], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 26], 'object');
    l = (n, $__.os.oid49)[o, 26] = $__.os.oid59 = {
        'exports': $__.os.oid58 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid59).exports, $__.os.oid58), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 26], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_897_31).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_60 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 26], 'object')[1, 1], $__.os.oid25), $__.os.oid25)[e, 3], 3);
    return (s, $__.fs.s_54)((n, n), 5, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_60_7 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v7918151485_3(e) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v7918151485_3, -2);
    return J$__v7918151485_3;
})($__.fs.J$__v7918151485_3_60, [0], false)), $__.fs.J$__v7918151485_3_60), l, ((l, $__.os.oid59).exports, $__.os.oid58), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 26], $__.os.oid59), $__.os.oid59).exports, 'function');
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 41], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 41], 'object');
    l = (n, $__.os.oid49)[o, 41] = $__.os.oid93 = {
        'exports': $__.os.oid92 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid93).exports, $__.os.oid92), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 41], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1375_46).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_464 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_464_33 = $__.fs.J$__v7918151485_3_464, $__.fs.J$__v7918151485_3_464), l, ((l, $__.os.oid93).exports, $__.os.oid92), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 41], $__.os.oid93), $__.os.oid93).exports, 'function');
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 42], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 42], 'object');
    l = (n, $__.os.oid49)[o, 42] = $__.os.oid91 = {
        'exports': $__.os.oid90 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid91).exports, $__.os.oid90), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 42], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1387_47).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_463 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 42], 'object')[1, 1], $__.os.oid41), $__.os.oid41)[e, 41], 41);
    return (s, $__.fs.s_54)((n, n), 7, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_463_30 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v7918151485_3(e) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v7918151485_3, -2);
    return J$__v7918151485_3;
})($__.fs.J$__v7918151485_3_463, [0], false)), $__.fs.J$__v7918151485_3_463), l, ((l, $__.os.oid91).exports, $__.os.oid90), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 42], $__.os.oid91), $__.os.oid91).exports, 'function');
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 22], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 22], 'object');
    l = (n, $__.os.oid49)[o, 22] = $__.os.oid98 = {
        'exports': $__.os.oid97 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid98).exports, $__.os.oid97), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 22], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_486_27).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_483 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_483_44 = $__.fs.J$__v7918151485_3_483, $__.fs.J$__v7918151485_3_483), l, ((l, $__.os.oid98).exports, $__.os.oid97), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 22], $__.os.oid98), $__.os.oid98).exports, 'function');
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 31], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 31], 'object');
    l = (n, $__.os.oid49)[o, 31] = $__.os.oid101 = {
        'exports': $__.os.oid100 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid101).exports, $__.os.oid100), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 31], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1076_36).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_488 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_488_47 = $__.fs.J$__v7918151485_3_488, $__.fs.J$__v7918151485_3_488), l, ((l, $__.os.oid101).exports, $__.os.oid100), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 31], $__.os.oid101), $__.os.oid101).exports, 'function');
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 25], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 25], 'object');
    l = (n, $__.os.oid49)[o, 25] = $__.os.oid106 = {
        'exports': $__.os.oid105 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid106).exports, $__.os.oid105), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 25], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_676_30).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_500 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_500_50 = $__.fs.J$__v7918151485_3_500, $__.fs.J$__v7918151485_3_500), l, ((l, $__.os.oid106).exports, $__.os.oid105), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 25], $__.os.oid106), $__.os.oid106).exports, 'function');
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 21], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 21], 'object');
    l = (n, $__.os.oid49)[o, 21] = $__.os.oid110 = {
        'exports': $__.os.oid109 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid110).exports, $__.os.oid109), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 21], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_476_26).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_509 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_509_63 = $__.fs.J$__v7918151485_3_509, $__.fs.J$__v7918151485_3_509), l, ((l, $__.os.oid110).exports, $__.os.oid109), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 21], $__.os.oid110), $__.os.oid110).exports, 'function');
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 23], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 23], 'object');
    l = (n, $__.os.oid49)[o, 23] = $__.os.oid115 = {
        'exports': $__.os.oid114 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid115).exports, $__.os.oid114), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 23], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_596_28).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_518 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_518_72 = $__.fs.J$__v7918151485_3_518, $__.fs.J$__v7918151485_3_518), l, ((l, $__.os.oid115).exports, $__.os.oid114), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 23], $__.os.oid115), $__.os.oid115).exports, 'function');
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 24], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 24], 'object');
    l = (n, $__.os.oid49)[o, 24] = $__.os.oid121 = {
        'exports': $__.os.oid120 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid121).exports, $__.os.oid120), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 24], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_658_29).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_556 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_556_139 = $__.fs.J$__v7918151485_3_556, $__.fs.J$__v7918151485_3_556), l, ((l, $__.os.oid121).exports, $__.os.oid120), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 24], $__.os.oid121), $__.os.oid121).exports, 'function');
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 29], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 29], 'object');
    l = (n, $__.os.oid49)[o, 29] = $__.os.oid124 = {
        'exports': $__.os.oid123 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid124).exports, $__.os.oid123), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 29], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1006_34).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_585 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_585_192 = $__.fs.J$__v7918151485_3_585, $__.fs.J$__v7918151485_3_585), l, ((l, $__.os.oid124).exports, $__.os.oid123), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 29], $__.os.oid124), $__.os.oid124).exports, 'function');
case 16:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 16);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 33], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 33], 'object');
    l = (n, $__.os.oid49)[o, 33] = $__.os.oid128 = {
        'exports': $__.os.oid127 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid128).exports, $__.os.oid127), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 33], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1160_38).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_590 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_590_195 = $__.fs.J$__v7918151485_3_590, $__.fs.J$__v7918151485_3_590), l, ((l, $__.os.oid128).exports, $__.os.oid127), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 33], $__.os.oid128), $__.os.oid128).exports, 'function');
case 17:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 17);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 34], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 34], 'object');
    l = (n, $__.os.oid49)[o, 34] = $__.os.oid133 = {
        'exports': $__.os.oid132 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid133).exports, $__.os.oid132), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 34], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1174_39).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_597 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_597_198 = $__.fs.J$__v7918151485_3_597, $__.fs.J$__v7918151485_3_597), l, ((l, $__.os.oid133).exports, $__.os.oid132), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 34], $__.os.oid133), $__.os.oid133).exports, 'function');
case 18:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 18);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 32], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 32], 'object');
    l = (n, $__.os.oid49)[o, 32] = $__.os.oid138 = {
        'exports': $__.os.oid137 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid138).exports, $__.os.oid137), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 32], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1144_37).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_604 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_604_201 = $__.fs.J$__v7918151485_3_604, $__.fs.J$__v7918151485_3_604), l, ((l, $__.os.oid138).exports, $__.os.oid137), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 32], $__.os.oid138), $__.os.oid138).exports, 'function');
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 19);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 35], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 35], 'object');
    l = (n, $__.os.oid49)[o, 35] = $__.os.oid145 = {
        'exports': $__.os.oid144 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid145).exports, $__.os.oid144), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 35], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1195_40).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_640 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_640_272 = $__.fs.J$__v7918151485_3_640, $__.fs.J$__v7918151485_3_640), l, ((l, $__.os.oid145).exports, $__.os.oid144), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 35], $__.os.oid145), $__.os.oid145).exports, 'function');
case 20:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 20);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 30], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 30], 'object');
    l = (n, $__.os.oid49)[o, 30] = $__.os.oid150 = {
        'exports': $__.os.oid149 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid150).exports, $__.os.oid149), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 30], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1052_35).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_655 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_655_306 = $__.fs.J$__v7918151485_3_655, $__.fs.J$__v7918151485_3_655), l, ((l, $__.os.oid150).exports, $__.os.oid149), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 30], $__.os.oid150), $__.os.oid150).exports, 'function');
case 21:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 21);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 27], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 27], 'object');
    l = (n, $__.os.oid49)[o, 27] = $__.os.oid156 = {
        'exports': $__.os.oid155 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid156).exports, $__.os.oid155), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 27], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_936_32).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_676 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_676_342 = $__.fs.J$__v7918151485_3_676, $__.fs.J$__v7918151485_3_676), l, ((l, $__.os.oid156).exports, $__.os.oid155), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 27], $__.os.oid156), $__.os.oid156).exports, 'function');
case 22:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 22);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 36], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 36], 'object');
    l = (n, $__.os.oid49)[o, 36] = $__.os.oid160 = {
        'exports': $__.os.oid159 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid160).exports, $__.os.oid159), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 36], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1280_41).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_690 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_690_345 = $__.fs.J$__v7918151485_3_690, $__.fs.J$__v7918151485_3_690), l, ((l, $__.os.oid160).exports, $__.os.oid159), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 36], $__.os.oid160), $__.os.oid160).exports, 'function');
case 23:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 23);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 37], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 37], 'object');
    l = (n, $__.os.oid49)[o, 37] = $__.os.oid166 = {
        'exports': $__.os.oid165 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid166).exports, $__.os.oid165), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 37], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1296_42).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_721 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_721_376 = $__.fs.J$__v7918151485_3_721, $__.fs.J$__v7918151485_3_721), l, ((l, $__.os.oid166).exports, $__.os.oid165), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 37], $__.os.oid166), $__.os.oid166).exports, 'function');
case 24:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 24);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 38], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 38], 'object');
    l = (n, $__.os.oid49)[o, 38] = $__.os.oid170 = {
        'exports': $__.os.oid169 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid170).exports, $__.os.oid169), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 38], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1303_43).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_732 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_732_391 = $__.fs.J$__v7918151485_3_732, $__.fs.J$__v7918151485_3_732), l, ((l, $__.os.oid170).exports, $__.os.oid169), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 38], $__.os.oid170), $__.os.oid170).exports, 'function');
case 25:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 25);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 39], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 39], 'object');
    l = (n, $__.os.oid49)[o, 39] = $__.os.oid174 = {
        'exports': $__.os.oid173 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid174).exports, $__.os.oid173), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 39], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1319_44).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_738 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_738_396 = $__.fs.J$__v7918151485_3_738, $__.fs.J$__v7918151485_3_738), l, ((l, $__.os.oid174).exports, $__.os.oid173), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 39], $__.os.oid174), $__.os.oid174).exports, 'function');
case 26:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 26);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 40], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 40], 'object');
    l = (n, $__.os.oid49)[o, 40] = $__.os.oid178 = {
        'exports': $__.os.oid177 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid178).exports, $__.os.oid177), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 40], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1344_45).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_750 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_750_415 = $__.fs.J$__v7918151485_3_750, $__.fs.J$__v7918151485_3_750), l, ((l, $__.os.oid178).exports, $__.os.oid177), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 40], $__.os.oid178), $__.os.oid178).exports, 'function');
case 27:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 27);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 45], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 45], 'object');
    l = (n, $__.os.oid49)[o, 45] = $__.os.oid182 = {
        'exports': $__.os.oid181 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid182).exports, $__.os.oid181), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 45], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1448_50).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_766 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_766_436 = $__.fs.J$__v7918151485_3_766, $__.fs.J$__v7918151485_3_766), l, ((l, $__.os.oid182).exports, $__.os.oid181), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 45], $__.os.oid182), $__.os.oid182).exports, 'function');
case 28:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 28);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 43], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 43], 'object');
    l = (n, $__.os.oid49)[o, 43] = $__.os.oid185 = {
        'exports': $__.os.oid184 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid185).exports, $__.os.oid184), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 43], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1407_48).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_774 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_774_449 = $__.fs.J$__v7918151485_3_774, $__.fs.J$__v7918151485_3_774), l, ((l, $__.os.oid185).exports, $__.os.oid184), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 43], $__.os.oid185), $__.os.oid185).exports, 'function');
case 29:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 29);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 44], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 44], 'object');
    l = (n, $__.os.oid49)[o, 44] = $__.os.oid190 = {
        'exports': $__.os.oid189 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid190).exports, $__.os.oid189), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 44], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1438_49).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_788 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_788_469 = $__.fs.J$__v7918151485_3_788, $__.fs.J$__v7918151485_3_788), l, ((l, $__.os.oid190).exports, $__.os.oid189), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 44], $__.os.oid190), $__.os.oid190).exports, 'function');
case 30:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 30);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 46], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 46], 'object');
    l = (n, $__.os.oid49)[o, 46] = $__.os.oid197 = {
        'exports': $__.os.oid196 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid197).exports, $__.os.oid196), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 46], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1479_51).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_802 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_802_490 = $__.fs.J$__v7918151485_3_802, $__.fs.J$__v7918151485_3_802), l, ((l, $__.os.oid197).exports, $__.os.oid196), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 46], $__.os.oid197), $__.os.oid197).exports, 'function');
case 31:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 31);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 47], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 47], 'object');
    l = (n, $__.os.oid49)[o, 47] = $__.os.oid204 = {
        'exports': $__.os.oid203 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid204).exports, $__.os.oid203), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 47], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1531_52).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_816 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_816_511 = $__.fs.J$__v7918151485_3_816, $__.fs.J$__v7918151485_3_816), l, ((l, $__.os.oid204).exports, $__.os.oid203), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 47], $__.os.oid204), $__.os.oid204).exports, 'function');
case 32:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 32);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 1], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 1], 'object');
    l = (n, $__.os.oid49)[o, 1] = $__.os.oid217 = {
        'exports': $__.os.oid216 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid217).exports, $__.os.oid216), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 1], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_7_6).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_853 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_853_564 = $__.fs.J$__v7918151485_3_853, $__.fs.J$__v7918151485_3_853), l, ((l, $__.os.oid217).exports, $__.os.oid216), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return (((n, $__.os.oid49)[o, 1], $__.os.oid217), $__.os.oid217).exports, $__.os.oid216;
case 33:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 33);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 48], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 48], 'object');
    l = (n, $__.os.oid49)[o, 48] = $__.os.oid215 = {
        'exports': $__.os.oid214 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid215).exports, $__.os.oid214), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 48], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_1575_53).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_852 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 48], 'object')[1, 1], $__.os.oid47), $__.os.oid47)[e, 1], 1);
    return (s, $__.fs.s_54)((n, n), 32, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_852_561 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v7918151485_3(e) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v7918151485_3, -2);
    return J$__v7918151485_3;
})($__.fs.J$__v7918151485_3_852, [0], false)), $__.fs.J$__v7918151485_3_852), l, ((l, $__.os.oid215).exports, $__.os.oid214), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 48], $__.os.oid215), $__.os.oid215).exports, 'function');
case 34:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 34);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 15], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 15], 'object');
    l = (n, $__.os.oid49)[o, 15] = $__.os.oid238 = {
        'exports': $__.os.oid237 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid238).exports, $__.os.oid237), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 15], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_324_20).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_876 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_876_616 = $__.fs.J$__v7918151485_3_876, $__.fs.J$__v7918151485_3_876), l, ((l, $__.os.oid238).exports, $__.os.oid237), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 15], $__.os.oid238), $__.os.oid238).exports, 'function');
case 35:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 35);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 16], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 16], 'object');
    l = (n, $__.os.oid49)[o, 16] = $__.os.oid258 = {
        'exports': $__.os.oid257 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid258).exports, $__.os.oid257), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 16], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_344_21).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_907 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_907_663 = $__.fs.J$__v7918151485_3_907, $__.fs.J$__v7918151485_3_907), l, ((l, $__.os.oid258).exports, $__.os.oid257), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 16], $__.os.oid258), $__.os.oid258).exports, 'function');
case 36:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 36);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 17], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 17], 'object');
    l = (n, $__.os.oid49)[o, 17] = $__.os.oid268 = {
        'exports': $__.os.oid267 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid268).exports, $__.os.oid267), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 17], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_378_22).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_919 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_919_678 = $__.fs.J$__v7918151485_3_919, $__.fs.J$__v7918151485_3_919), l, ((l, $__.os.oid268).exports, $__.os.oid267), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 17], $__.os.oid268), $__.os.oid268).exports, 'function');
case 37:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 37);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 18], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 18], 'object');
    l = (n, $__.os.oid49)[o, 18] = $__.os.oid286 = {
        'exports': $__.os.oid285 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid286).exports, $__.os.oid285), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 18], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_406_23).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_944 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_944_723 = $__.fs.J$__v7918151485_3_944, $__.fs.J$__v7918151485_3_944), l, ((l, $__.os.oid286).exports, $__.os.oid285), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 18], $__.os.oid286), $__.os.oid286).exports, 'function');
case 38:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 38);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 19], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 19], 'object');
    l = (n, $__.os.oid49)[o, 19] = $__.os.oid294 = {
        'exports': $__.os.oid293 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid294).exports, $__.os.oid293), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 19], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_436_24).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_960 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_960_750 = $__.fs.J$__v7918151485_3_960, $__.fs.J$__v7918151485_3_960), l, ((l, $__.os.oid294).exports, $__.os.oid293), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 19], $__.os.oid294), $__.os.oid294).exports, 'function');
case 39:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 39);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 20], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 20], 'object');
    l = (n, $__.os.oid49)[o, 20] = $__.os.oid305 = {
        'exports': $__.os.oid304 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid305).exports, $__.os.oid304), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 20], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_460_25).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_975 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_975_767 = $__.fs.J$__v7918151485_3_975, $__.fs.J$__v7918151485_3_975), l, ((l, $__.os.oid305).exports, $__.os.oid304), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 20], $__.os.oid305), $__.os.oid305).exports, 'function');
case 40:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 40);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 8], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 8], 'object');
    l = (n, $__.os.oid49)[o, 8] = $__.os.oid312 = {
        'exports': $__.os.oid311 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid312).exports, $__.os.oid311), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 8], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_228_13).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_986 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_986_788 = $__.fs.J$__v7918151485_3_986, $__.fs.J$__v7918151485_3_986), l, ((l, $__.os.oid312).exports, $__.os.oid311), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 8], $__.os.oid312), $__.os.oid312).exports, 'function');
case 41:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 41);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 9], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 9], 'object');
    l = (n, $__.os.oid49)[o, 9] = $__.os.oid314 = {
        'exports': $__.os.oid313 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid314).exports, $__.os.oid313), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 9], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_234_14).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_989 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_989_791 = $__.fs.J$__v7918151485_3_989, $__.fs.J$__v7918151485_3_989), l, ((l, $__.os.oid314).exports, $__.os.oid313), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 9], $__.os.oid314), $__.os.oid314).exports, 'function');
case 42:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 42);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 10], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 10], 'object');
    l = (n, $__.os.oid49)[o, 10] = $__.os.oid316 = {
        'exports': $__.os.oid315 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid316).exports, $__.os.oid315), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 10], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_240_15).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_992 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_992_794 = $__.fs.J$__v7918151485_3_992, $__.fs.J$__v7918151485_3_992), l, ((l, $__.os.oid316).exports, $__.os.oid315), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 10], $__.os.oid316), $__.os.oid316).exports, 'function');
case 43:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 43);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 11], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 11], 'object');
    l = (n, $__.os.oid49)[o, 11] = $__.os.oid318 = {
        'exports': $__.os.oid317 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid318).exports, $__.os.oid317), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 11], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_246_16).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_995 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_995_797 = $__.fs.J$__v7918151485_3_995, $__.fs.J$__v7918151485_3_995), l, ((l, $__.os.oid318).exports, $__.os.oid317), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 11], $__.os.oid318), $__.os.oid318).exports, 'function');
case 44:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 44);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 12], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 12], 'object');
    l = (n, $__.os.oid49)[o, 12] = $__.os.oid320 = {
        'exports': $__.os.oid319 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid320).exports, $__.os.oid319), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 12], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_252_17).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_998 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_998_800 = $__.fs.J$__v7918151485_3_998, $__.fs.J$__v7918151485_3_998), l, ((l, $__.os.oid320).exports, $__.os.oid319), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 12], $__.os.oid320), $__.os.oid320).exports, 'function');
case 45:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 45);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 13], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 13], 'object');
    l = (n, $__.os.oid49)[o, 13] = $__.os.oid322 = {
        'exports': $__.os.oid321 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid322).exports, $__.os.oid321), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 13], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_258_18).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_1001 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_1001_803 = $__.fs.J$__v7918151485_3_1001, $__.fs.J$__v7918151485_3_1001), l, ((l, $__.os.oid322).exports, $__.os.oid321), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 13], $__.os.oid322), $__.os.oid322).exports, 'function');
case 46:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 46);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 14], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 14], 'object');
    l = (n, $__.os.oid49)[o, 14] = $__.os.oid324 = {
        'exports': $__.os.oid323 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid324).exports, $__.os.oid323), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 14], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_268_19).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_1004 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_1004_806 = $__.fs.J$__v7918151485_3_1004, $__.fs.J$__v7918151485_3_1004), l, ((l, $__.os.oid324).exports, $__.os.oid323), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 14], $__.os.oid324), $__.os.oid324).exports, 'function');
case 47:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 47);
    !TAJS_restrictToType((n, $__.os.oid49)[o, 7], 'undefined');
    !TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object');
    l = (n, $__.os.oid49)[o, 7] = $__.os.oid51 = {
        'exports': $__.os.oid50 = {}
    };
    vvv_tmp0 = ((l, $__.os.oid51).exports, $__.os.oid50), (TAJS_restrictToType(TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[0, 0], 'function'), $__.fs.J$__v7918151485_222_12).call(vvv_tmp0, ($__.fs.J$__v7918151485_3_55 = function J$__v7918151485_3(e) {
var vvv_return, vvv_switch, n;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 28], 28);
    return (s, $__.fs.s_54)((n, n), 0, true, $__.uid);
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 26], 26);
    return (s, $__.fs.s_54)((n, n), 6, true, $__.uid);
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 42], 42);
    return (s, $__.fs.s_54)((n, n), 8, true, $__.uid);
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 22], 22);
    return (s, $__.fs.s_54)((n, n), 9, true, $__.uid);
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 31], 31);
    return (s, $__.fs.s_54)((n, n), 10, true, $__.uid);
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 25], 25);
    return (s, $__.fs.s_54)((n, n), 11, true, $__.uid);
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 21], 21);
    return (s, $__.fs.s_54)((n, n), 12, true, $__.uid);
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 23], 23);
    return (s, $__.fs.s_54)((n, n), 13, true, $__.uid);
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 24], 24);
    return (s, $__.fs.s_54)((n, n), 14, true, $__.uid);
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 29], 29);
    return (s, $__.fs.s_54)((n, n), 15, true, $__.uid);
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 33], 33);
    return (s, $__.fs.s_54)((n, n), 16, true, $__.uid);
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 34], 34);
    return (s, $__.fs.s_54)((n, n), 17, true, $__.uid);
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 32], 32);
    return (s, $__.fs.s_54)((n, n), 18, true, $__.uid);
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 35], 35);
    return (s, $__.fs.s_54)((n, n), 19, true, $__.uid);
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 30], 30);
    return (s, $__.fs.s_54)((n, n), 20, true, $__.uid);
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 27], 27);
    return (s, $__.fs.s_54)((n, n), 21, true, $__.uid);
case 16:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 16);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 36], 36);
    return (s, $__.fs.s_54)((n, n), 22, true, $__.uid);
case 17:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 17);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 37], 37);
    return (s, $__.fs.s_54)((n, n), 23, true, $__.uid);
case 18:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 18);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 38], 38);
    return (s, $__.fs.s_54)((n, n), 24, true, $__.uid);
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 19);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 39], 39);
    return (s, $__.fs.s_54)((n, n), 25, true, $__.uid);
case 20:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 20);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 40], 40);
    return (s, $__.fs.s_54)((n, n), 26, true, $__.uid);
case 21:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 21);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 45], 45);
    return (s, $__.fs.s_54)((n, n), 27, true, $__.uid);
case 22:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 22);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 43], 43);
    return (s, $__.fs.s_54)((n, n), 28, true, $__.uid);
case 23:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 23);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 44], 44);
    return (s, $__.fs.s_54)((n, n), 29, true, $__.uid);
case 24:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 24);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 46], 46);
    return (s, $__.fs.s_54)((n, n), 30, true, $__.uid);
case 25:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 25);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 47], 47);
    return (s, $__.fs.s_54)((n, n), 31, true, $__.uid);
case 26:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 26);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 48], 48);
    return (s, $__.fs.s_54)((n, n), 33, true, $__.uid);
case 27:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 27);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 15], 15);
    return (s, $__.fs.s_54)((n, n), 34, true, $__.uid);
case 28:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 28);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 16], 16);
    return (s, $__.fs.s_54)((n, n), 35, true, $__.uid);
case 29:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 29);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 17], 17);
    return (s, $__.fs.s_54)((n, n), 36, true, $__.uid);
case 30:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 30);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 18], 18);
    return (s, $__.fs.s_54)((n, n), 37, true, $__.uid);
case 31:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 31);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 19], 19);
    return (s, $__.fs.s_54)((n, n), 38, true, $__.uid);
case 32:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 32);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 20], 20);
    return (s, $__.fs.s_54)((n, n), 39, true, $__.uid);
case 33:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 33);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 8], 8);
    return (s, $__.fs.s_54)((n, n), 40, true, $__.uid);
case 34:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 34);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 9], 9);
    return (s, $__.fs.s_54)((n, n), 41, true, $__.uid);
case 35:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 35);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 10], 10);
    return (s, $__.fs.s_54)((n, n), 42, true, $__.uid);
case 36:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 36);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 11], 11);
    return (s, $__.fs.s_54)((n, n), 43, true, $__.uid);
case 37:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 37);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 12], 12);
    return (s, $__.fs.s_54)((n, n), 44, true, $__.uid);
case 38:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 38);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 13], 13);
    return (s, $__.fs.s_54)((n, n), 45, true, $__.uid);
case 39:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 39);
    n = (((TAJS_restrictToType((t, $__.os.oid48)[o, 7], 'object')[1, 1], $__.os.oid6), $__.os.oid6)[e, 14], 14);
    return (s, $__.fs.s_54)((n, n), 46, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
n = t[o][1][e];
return s(n ? n : e);}, $__.fs.J$__v7918151485_3_55_1 = ((function $_mk($_f, ids, isOneShotEscapingFunction) {
    TAJS_makeContextSensitive($_mk, 1);
    TAJS_makeContextSensitive($_mk, 2);
    var nxt = 0;
    function J$__v7918151485_3(e) {
        arguments[arguments.length] = ids[nxt];
        arguments[arguments.length + 1] = isOneShotEscapingFunction;
        arguments[arguments.length + 2] = $__.uid;
        arguments.length += 3;
        if (!isOneShotEscapingFunction) {
            ++nxt;
        }
        return $_f.apply(this, arguments);
    };
    TAJS_makeContextSensitive(J$__v7918151485_3, -2);
    return J$__v7918151485_3;
})($__.fs.J$__v7918151485_3_55, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], false)), $__.fs.J$__v7918151485_3_55), l, ((l, $__.os.oid51).exports, $__.os.oid50), (e, $__.fs.e_5), t, n, r, 0, true, $__.uid);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 7], $__.os.oid51), $__.os.oid51).exports, 'function');
case 48:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 48);
    !((n, $__.os.oid49)[o, 7], $__.os.oid51);
    return TAJS_restrictToType((((n, $__.os.oid49)[o, 7], $__.os.oid51), $__.os.oid51).exports, 'function');
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!n[o]) {
    if (!t[o]) {
        a = typeof require == 'function' && require;
        if (!u && a)
            return a(o, !0);
        if (i)
            return i(o, !0);
        f = new Error('Cannot find module \'' + o + '\'');
        throw f.code = 'MODULE_NOT_FOUND', f;
    }
    l = n[o] = {
        exports: {}
    };
    t[o][0].call(l.exports, function (e) {
        var n = t[o][1][e];
        return s(n ? n : e);
    }, l, l.exports, e, t, n, r);
}
return n[o].exports;});
    i = typeof require == 'function';
    o = 0;
    o < (r.length, 1);
    (s, $__.fs.s_54)((r[o, 0], 7), 47, true, $__.uid);
    (o = +o + 1) - 1;
    o < (r.length, 1);
    return s;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
i = typeof require == 'function' && require;
for (var o = 0; o < r.length; o++)
    s(r[o]);
return s;}, $__.fs.e_5_2 = $__.fs.e_5, $__.fs.e_5_5 = $__.fs.e_5, $__.fs.e_5_8 = $__.fs.e_5, $__.fs.e_5_11 = $__.fs.e_5, $__.fs.e_5_14 = $__.fs.e_5, $__.fs.e_5_17 = $__.fs.e_5, $__.fs.e_5_25 = $__.fs.e_5, $__.fs.e_5_28 = $__.fs.e_5, $__.fs.e_5_31 = $__.fs.e_5, $__.fs.e_5_34 = $__.fs.e_5, $__.fs.e_5_45 = $__.fs.e_5, $__.fs.e_5_48 = $__.fs.e_5, $__.fs.e_5_51 = $__.fs.e_5, $__.fs.e_5_64 = $__.fs.e_5, $__.fs.e_5_73 = $__.fs.e_5, $__.fs.e_5_140 = $__.fs.e_5, $__.fs.e_5_193 = $__.fs.e_5, $__.fs.e_5_196 = $__.fs.e_5, $__.fs.e_5_199 = $__.fs.e_5, $__.fs.e_5_202 = $__.fs.e_5, $__.fs.e_5_273 = $__.fs.e_5, $__.fs.e_5_307 = $__.fs.e_5, $__.fs.e_5_343 = $__.fs.e_5, $__.fs.e_5_346 = $__.fs.e_5, $__.fs.e_5_377 = $__.fs.e_5, $__.fs.e_5_392 = $__.fs.e_5, $__.fs.e_5_397 = $__.fs.e_5, $__.fs.e_5_416 = $__.fs.e_5, $__.fs.e_5_437 = $__.fs.e_5, $__.fs.e_5_450 = $__.fs.e_5, $__.fs.e_5_470 = $__.fs.e_5, $__.fs.e_5_491 = $__.fs.e_5, $__.fs.e_5_512 = $__.fs.e_5, $__.fs.e_5_562 = $__.fs.e_5, $__.fs.e_5_565 = $__.fs.e_5, $__.fs.e_5_617 = $__.fs.e_5, $__.fs.e_5_664 = $__.fs.e_5, $__.fs.e_5_679 = $__.fs.e_5, $__.fs.e_5_724 = $__.fs.e_5, $__.fs.e_5_751 = $__.fs.e_5, $__.fs.e_5_768 = $__.fs.e_5, $__.fs.e_5_789 = $__.fs.e_5, $__.fs.e_5_792 = $__.fs.e_5, $__.fs.e_5_795 = $__.fs.e_5, $__.fs.e_5_798 = $__.fs.e_5, $__.fs.e_5_801 = $__.fs.e_5, $__.fs.e_5_804 = $__.fs.e_5, $__.fs.e_5_807 = $__.fs.e_5, $__.fs.e_5), $__.fs.e_5)($__.os.oid48 = {
        1: [
            ($__.fs.J$__v7918151485_7_6 = function J$__v7918151485_7(require, module, exports) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');}, $__.fs.J$__v7918151485_7_6),
            $__.os.oid0 = {}
        ],
        2: [
            ($__.fs.J$__v7918151485_26_7 = function J$__v7918151485_26(require, module, exports) {
var vvv_return, vvv_switch, vvv_tmp0, colorNames, getRgba, getHsla, getHwb, getRgb, getHsl, getAlpha, hexString, rgbString, rgbaString, percentString, percentaString, hslString, hslaString, hwbString, keyword, scale, hexDouble, reverseNames, name;
getRgba = function getRgba(string) {
    if (!string) {
        return;
    }
    var abbr = /^#([a-fA-F0-9]{3})$/, hex = /^#([a-fA-F0-9]{6})$/, rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/, per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/, keyword = /(\w+)/;
    var rgb = [
            0,
            0,
            0
        ], a = 1, match = string.match(abbr);
    if (match) {
        match = match[1];
        for (var i = 0; i < rgb.length; i++) {
            rgb[i] = parseInt(match[i] + match[i], 16);
        }
    } else if (match = string.match(hex)) {
        match = match[1];
        for (var i = 0; i < rgb.length; i++) {
            rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
        }
    } else if (match = string.match(rgba)) {
        for (var i = 0; i < rgb.length; i++) {
            rgb[i] = parseInt(match[i + 1]);
        }
        a = parseFloat(match[4]);
    } else if (match = string.match(per)) {
        for (var i = 0; i < rgb.length; i++) {
            rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
        }
        a = parseFloat(match[4]);
    } else if (match = string.match(keyword)) {
        if (match[1] == 'transparent') {
            return [
                0,
                0,
                0,
                0
            ];
        }
        rgb = colorNames[match[1]];
        if (!rgb) {
            return;
        }
    }
    for (var i = 0; i < rgb.length; i++) {
        rgb[i] = scale(rgb[i], 0, 255);
    }
    if (!a && a != 0) {
        a = 1;
    } else {
        a = scale(a, 0, 1);
    }
    rgb[3] = a;
    return rgb;
};
getHsla = function getHsla(string) {
    if (!string) {
        return;
    }
    var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
    var match = string.match(hsl);
    if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360), s = scale(parseFloat(match[2]), 0, 100), l = scale(parseFloat(match[3]), 0, 100), a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [
            h,
            s,
            l,
            a
        ];
    }
};
getHwb = function getHwb(string) {
    if (!string) {
        return;
    }
    var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
    var match = string.match(hwb);
    if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360), w = scale(parseFloat(match[2]), 0, 100), b = scale(parseFloat(match[3]), 0, 100), a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [
            h,
            w,
            b,
            a
        ];
    }
};
getRgb = function getRgb(string) {
    var rgba = getRgba(string);
    return rgba && rgba.slice(0, 3);
};
getHsl = function getHsl(string) {
    var hsla = getHsla(string);
    return hsla && hsla.slice(0, 3);
};
getAlpha = function getAlpha(string) {
    var vals = getRgba(string);
    if (vals) {
        return vals[3];
    } else if (vals = getHsla(string)) {
        return vals[3];
    } else if (vals = getHwb(string)) {
        return vals[3];
    }
};
hexString = function hexString(rgb) {
    return '#' + hexDouble(rgb[0]) + hexDouble(rgb[1]) + hexDouble(rgb[2]);
};
rgbString = function rgbString(rgba, alpha) {
    if (alpha < 1 || rgba[3] && rgba[3] < 1) {
        return rgbaString(rgba, alpha);
    }
    return 'rgb(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ')';
};
rgbaString = function rgbaString(rgba, alpha) {
    if (alpha === undefined) {
        alpha = rgba[3] !== undefined ? rgba[3] : 1;
    }
    return 'rgba(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ', ' + alpha + ')';
};
percentString = function percentString(rgba, alpha) {
    if (alpha < 1 || rgba[3] && rgba[3] < 1) {
        return percentaString(rgba, alpha);
    }
    var r = Math.round(rgba[0] / 255 * 100), g = Math.round(rgba[1] / 255 * 100), b = Math.round(rgba[2] / 255 * 100);
    return 'rgb(' + r + '%, ' + g + '%, ' + b + '%)';
};
percentaString = function percentaString(rgba, alpha) {
    var r = Math.round(rgba[0] / 255 * 100), g = Math.round(rgba[1] / 255 * 100), b = Math.round(rgba[2] / 255 * 100);
    return 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + (alpha || rgba[3] || 1) + ')';
};
hslString = function hslString(hsla, alpha) {
    if (alpha < 1 || hsla[3] && hsla[3] < 1) {
        return hslaString(hsla, alpha);
    }
    return 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)';
};
hslaString = function hslaString(hsla, alpha) {
    if (alpha === undefined) {
        alpha = hsla[3] !== undefined ? hsla[3] : 1;
    }
    return 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + alpha + ')';
};
hwbString = function hwbString(hwb, alpha) {
    if (alpha === undefined) {
        alpha = hwb[3] !== undefined ? hwb[3] : 1;
    }
    return 'hwb(' + hwb[0] + ', ' + hwb[1] + '%, ' + hwb[2] + '%' + (alpha !== undefined && alpha !== 1 ? ', ' + alpha : '') + ')';
};
keyword = function keyword(rgb) {
    return reverseNames[rgb.slice(0, 3)];
};
scale = function scale(num, min, max) {
    return Math.min(Math.max(min, num), max);
};
hexDouble = function hexDouble(num) {
    var str = num.toString(16).toUpperCase();
    return str.length < 2 ? '0' + str : str;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    getRgba = ($__.fs.getRgba_296 = function getRgba(string) {
var vvv_return, vvv_switch, abbr, hex, rgba, per, keyword, rgb, a, match;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
string = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!string) {
    return;
}
abbr = /^#([a-fA-F0-9]{3})$/;
hex = /^#([a-fA-F0-9]{6})$/;
rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
keyword = /(\w+)/;
rgb = [
    0,
    0,
    0
];
a = 1;
match = string.match(abbr);
if (match) {
    match = match[1];
    for (var i = 0; i < rgb.length; i++) {
        rgb[i] = parseInt(match[i] + match[i], 16);
    }
} else if (match = string.match(hex)) {
    match = match[1];
    for (var i = 0; i < rgb.length; i++) {
        rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
    }
} else if (match = string.match(rgba)) {
    for (var i = 0; i < rgb.length; i++) {
        rgb[i] = parseInt(match[i + 1]);
    }
    a = parseFloat(match[4]);
} else if (match = string.match(per)) {
    for (var i = 0; i < rgb.length; i++) {
        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
    }
    a = parseFloat(match[4]);
} else if (match = string.match(keyword)) {
    if (match[1] == 'transparent') {
        return [
            0,
            0,
            0,
            0
        ];
    }
    rgb = colorNames[match[1]];
    if (!rgb) {
        return;
    }
}
for (var i = 0; i < rgb.length; i++) {
    rgb[i] = scale(rgb[i], 0, 255);
}
if (!a && a != 0) {
    a = 1;
} else {
    a = scale(a, 0, 1);
}
rgb[3] = a;
return rgb;});
    getHsla = ($__.fs.getHsla_297 = function getHsla(string) {
var vvv_return, vvv_switch, hsl, match, alpha, h, s, l, a;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
string = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!string) {
    return;
}
hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
match = string.match(hsl);
if (match) {
    alpha = parseFloat(match[4]);
    h = scale(parseInt(match[1]), 0, 360);
    s = scale(parseFloat(match[2]), 0, 100);
    l = scale(parseFloat(match[3]), 0, 100);
    a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
    return [
        h,
        s,
        l,
        a
    ];
}});
    getHwb = ($__.fs.getHwb_298 = function getHwb(string) {
var vvv_return, vvv_switch, hwb, match, alpha, h, w, b, a;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
string = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!string) {
    return;
}
hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
match = string.match(hwb);
if (match) {
    alpha = parseFloat(match[4]);
    h = scale(parseInt(match[1]), 0, 360);
    w = scale(parseFloat(match[2]), 0, 100);
    b = scale(parseFloat(match[3]), 0, 100);
    a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
    return [
        h,
        w,
        b,
        a
    ];
}});
    getRgb = ($__.fs.getRgb_299 = function getRgb(string) {
var vvv_return, vvv_switch, rgba;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
string = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rgba = getRgba(string);
return rgba && rgba.slice(0, 3);});
    getHsl = ($__.fs.getHsl_300 = function getHsl(string) {
var vvv_return, vvv_switch, hsla;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
string = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
hsla = getHsla(string);
return hsla && hsla.slice(0, 3);});
    getAlpha = ($__.fs.getAlpha_301 = function getAlpha(string) {
var vvv_return, vvv_switch, vals;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
string = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vals = getRgba(string);
if (vals) {
    return vals[3];
} else if (vals = getHsla(string)) {
    return vals[3];
} else if (vals = getHwb(string)) {
    return vals[3];
}});
    hexString = ($__.fs.hexString_302 = function hexString(rgb) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgb = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '#' + hexDouble(rgb[0]) + hexDouble(rgb[1]) + hexDouble(rgb[2]);});
    rgbString = ($__.fs.rgbString_303 = function rgbString(rgba, alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgba = arguments[0], alpha = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (alpha < 1 || rgba[3] && rgba[3] < 1) {
    return rgbaString(rgba, alpha);
}
return 'rgb(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ')';});
    rgbaString = ($__.fs.rgbaString_304 = function rgbaString(rgba, alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgba = arguments[0], alpha = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (alpha === undefined) {
    alpha = rgba[3] !== undefined ? rgba[3] : 1;
}
return 'rgba(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ', ' + alpha + ')';});
    percentString = ($__.fs.percentString_305 = function percentString(rgba, alpha) {
var vvv_return, vvv_switch, r, g, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgba = arguments[0], alpha = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (alpha < 1 || rgba[3] && rgba[3] < 1) {
    return percentaString(rgba, alpha);
}
r = Math.round(rgba[0] / 255 * 100);
g = Math.round(rgba[1] / 255 * 100);
b = Math.round(rgba[2] / 255 * 100);
return 'rgb(' + r + '%, ' + g + '%, ' + b + '%)';});
    percentaString = ($__.fs.percentaString_306 = function percentaString(rgba, alpha) {
var vvv_return, vvv_switch, r, g, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgba = arguments[0], alpha = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = Math.round(rgba[0] / 255 * 100);
g = Math.round(rgba[1] / 255 * 100);
b = Math.round(rgba[2] / 255 * 100);
return 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + (alpha || rgba[3] || 1) + ')';});
    hslString = ($__.fs.hslString_307 = function hslString(hsla, alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hsla = arguments[0], alpha = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (alpha < 1 || hsla[3] && hsla[3] < 1) {
    return hslaString(hsla, alpha);
}
return 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)';});
    hslaString = ($__.fs.hslaString_308 = function hslaString(hsla, alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hsla = arguments[0], alpha = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (alpha === undefined) {
    alpha = hsla[3] !== undefined ? hsla[3] : 1;
}
return 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + alpha + ')';});
    hwbString = ($__.fs.hwbString_309 = function hwbString(hwb, alpha) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hwb = arguments[0], alpha = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (alpha === undefined) {
    alpha = hwb[3] !== undefined ? hwb[3] : 1;
}
return 'hwb(' + hwb[0] + ', ' + hwb[1] + '%, ' + hwb[2] + '%' + (alpha !== undefined && alpha !== 1 ? ', ' + alpha : '') + ')';});
    keyword = ($__.fs.keyword_310 = function keyword(rgb) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgb = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return reverseNames[rgb.slice(0, 3)];});
    scale = ($__.fs.scale_311 = function scale(num, min, max) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
num = arguments[0], min = arguments[1], max = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.min(Math.max(min, num), max);});
    hexDouble = ($__.fs.hexDouble_312 = function hexDouble(num) {
var vvv_return, vvv_switch, str;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
num = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
str = num.toString(16).toUpperCase();
return str.length < 2 ? '0' + str : str;});
    colorNames = (require, $__.fs.J$__v7918151485_3_295)(6, 0, true, $__.uid);
    (module, $__.os.oid79).exports = $__.os.oid83 = {
        'getRgba': getRgba,
        'getHsla': getHsla,
        'getRgb': getRgb,
        'getHsl': getHsl,
        'getHwb': getHwb,
        'getAlpha': getAlpha,
        'hexString': hexString,
        'rgbString': rgbString,
        'rgbaString': rgbaString,
        'percentString': percentString,
        'percentaString': percentaString,
        'hslString': hslString,
        'hslaString': hslaString,
        'hwbString': hwbString,
        'keyword': keyword
    };
    reverseNames = $__.os.oid84 = {};
    vvv_tmp0 = colorNames;
    'aliceblue' in vvv_tmp0;
    name = 'aliceblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'aliceblue'], 'object')['toString']()] = name;
    'antiquewhite' in vvv_tmp0;
    name = 'antiquewhite';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'antiquewhite'], 'object')['toString']()] = name;
    'aqua' in vvv_tmp0;
    name = 'aqua';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'aqua'], 'object')['toString']()] = name;
    'aquamarine' in vvv_tmp0;
    name = 'aquamarine';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'aquamarine'], 'object')['toString']()] = name;
    'azure' in vvv_tmp0;
    name = 'azure';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'azure'], 'object')['toString']()] = name;
    'beige' in vvv_tmp0;
    name = 'beige';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'beige'], 'object')['toString']()] = name;
    'bisque' in vvv_tmp0;
    name = 'bisque';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'bisque'], 'object')['toString']()] = name;
    'black' in vvv_tmp0;
    name = 'black';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'black'], 'object')['toString']()] = name;
    'blanchedalmond' in vvv_tmp0;
    name = 'blanchedalmond';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'blanchedalmond'], 'object')['toString']()] = name;
    'blue' in vvv_tmp0;
    name = 'blue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'blue'], 'object')['toString']()] = name;
    'blueviolet' in vvv_tmp0;
    name = 'blueviolet';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'blueviolet'], 'object')['toString']()] = name;
    'brown' in vvv_tmp0;
    name = 'brown';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'brown'], 'object')['toString']()] = name;
    'burlywood' in vvv_tmp0;
    name = 'burlywood';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'burlywood'], 'object')['toString']()] = name;
    'cadetblue' in vvv_tmp0;
    name = 'cadetblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'cadetblue'], 'object')['toString']()] = name;
    'chartreuse' in vvv_tmp0;
    name = 'chartreuse';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'chartreuse'], 'object')['toString']()] = name;
    'chocolate' in vvv_tmp0;
    name = 'chocolate';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'chocolate'], 'object')['toString']()] = name;
    'coral' in vvv_tmp0;
    name = 'coral';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'coral'], 'object')['toString']()] = name;
    'cornflowerblue' in vvv_tmp0;
    name = 'cornflowerblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'cornflowerblue'], 'object')['toString']()] = name;
    'cornsilk' in vvv_tmp0;
    name = 'cornsilk';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'cornsilk'], 'object')['toString']()] = name;
    'crimson' in vvv_tmp0;
    name = 'crimson';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'crimson'], 'object')['toString']()] = name;
    'cyan' in vvv_tmp0;
    name = 'cyan';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'cyan'], 'object')['toString']()] = name;
    'darkblue' in vvv_tmp0;
    name = 'darkblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkblue'], 'object')['toString']()] = name;
    'darkcyan' in vvv_tmp0;
    name = 'darkcyan';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkcyan'], 'object')['toString']()] = name;
    'darkgoldenrod' in vvv_tmp0;
    name = 'darkgoldenrod';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkgoldenrod'], 'object')['toString']()] = name;
    'darkgray' in vvv_tmp0;
    name = 'darkgray';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkgray'], 'object')['toString']()] = name;
    'darkgreen' in vvv_tmp0;
    name = 'darkgreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkgreen'], 'object')['toString']()] = name;
    'darkgrey' in vvv_tmp0;
    name = 'darkgrey';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkgrey'], 'object')['toString']()] = name;
    'darkkhaki' in vvv_tmp0;
    name = 'darkkhaki';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkkhaki'], 'object')['toString']()] = name;
    'darkmagenta' in vvv_tmp0;
    name = 'darkmagenta';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkmagenta'], 'object')['toString']()] = name;
    'darkolivegreen' in vvv_tmp0;
    name = 'darkolivegreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkolivegreen'], 'object')['toString']()] = name;
    'darkorange' in vvv_tmp0;
    name = 'darkorange';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkorange'], 'object')['toString']()] = name;
    'darkorchid' in vvv_tmp0;
    name = 'darkorchid';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkorchid'], 'object')['toString']()] = name;
    'darkred' in vvv_tmp0;
    name = 'darkred';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkred'], 'object')['toString']()] = name;
    'darksalmon' in vvv_tmp0;
    name = 'darksalmon';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darksalmon'], 'object')['toString']()] = name;
    'darkseagreen' in vvv_tmp0;
    name = 'darkseagreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkseagreen'], 'object')['toString']()] = name;
    'darkslateblue' in vvv_tmp0;
    name = 'darkslateblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkslateblue'], 'object')['toString']()] = name;
    'darkslategray' in vvv_tmp0;
    name = 'darkslategray';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkslategray'], 'object')['toString']()] = name;
    'darkslategrey' in vvv_tmp0;
    name = 'darkslategrey';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkslategrey'], 'object')['toString']()] = name;
    'darkturquoise' in vvv_tmp0;
    name = 'darkturquoise';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkturquoise'], 'object')['toString']()] = name;
    'darkviolet' in vvv_tmp0;
    name = 'darkviolet';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'darkviolet'], 'object')['toString']()] = name;
    'deeppink' in vvv_tmp0;
    name = 'deeppink';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'deeppink'], 'object')['toString']()] = name;
    'deepskyblue' in vvv_tmp0;
    name = 'deepskyblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'deepskyblue'], 'object')['toString']()] = name;
    'dimgray' in vvv_tmp0;
    name = 'dimgray';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'dimgray'], 'object')['toString']()] = name;
    'dimgrey' in vvv_tmp0;
    name = 'dimgrey';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'dimgrey'], 'object')['toString']()] = name;
    'dodgerblue' in vvv_tmp0;
    name = 'dodgerblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'dodgerblue'], 'object')['toString']()] = name;
    'firebrick' in vvv_tmp0;
    name = 'firebrick';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'firebrick'], 'object')['toString']()] = name;
    'floralwhite' in vvv_tmp0;
    name = 'floralwhite';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'floralwhite'], 'object')['toString']()] = name;
    'forestgreen' in vvv_tmp0;
    name = 'forestgreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'forestgreen'], 'object')['toString']()] = name;
    'fuchsia' in vvv_tmp0;
    name = 'fuchsia';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'fuchsia'], 'object')['toString']()] = name;
    'gainsboro' in vvv_tmp0;
    name = 'gainsboro';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'gainsboro'], 'object')['toString']()] = name;
    'ghostwhite' in vvv_tmp0;
    name = 'ghostwhite';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'ghostwhite'], 'object')['toString']()] = name;
    'gold' in vvv_tmp0;
    name = 'gold';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'gold'], 'object')['toString']()] = name;
    'goldenrod' in vvv_tmp0;
    name = 'goldenrod';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'goldenrod'], 'object')['toString']()] = name;
    'gray' in vvv_tmp0;
    name = 'gray';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'gray'], 'object')['toString']()] = name;
    'green' in vvv_tmp0;
    name = 'green';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'green'], 'object')['toString']()] = name;
    'greenyellow' in vvv_tmp0;
    name = 'greenyellow';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'greenyellow'], 'object')['toString']()] = name;
    'grey' in vvv_tmp0;
    name = 'grey';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'grey'], 'object')['toString']()] = name;
    'honeydew' in vvv_tmp0;
    name = 'honeydew';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'honeydew'], 'object')['toString']()] = name;
    'hotpink' in vvv_tmp0;
    name = 'hotpink';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'hotpink'], 'object')['toString']()] = name;
    'indianred' in vvv_tmp0;
    name = 'indianred';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'indianred'], 'object')['toString']()] = name;
    'indigo' in vvv_tmp0;
    name = 'indigo';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'indigo'], 'object')['toString']()] = name;
    'ivory' in vvv_tmp0;
    name = 'ivory';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'ivory'], 'object')['toString']()] = name;
    'khaki' in vvv_tmp0;
    name = 'khaki';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'khaki'], 'object')['toString']()] = name;
    'lavender' in vvv_tmp0;
    name = 'lavender';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lavender'], 'object')['toString']()] = name;
    'lavenderblush' in vvv_tmp0;
    name = 'lavenderblush';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lavenderblush'], 'object')['toString']()] = name;
    'lawngreen' in vvv_tmp0;
    name = 'lawngreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lawngreen'], 'object')['toString']()] = name;
    'lemonchiffon' in vvv_tmp0;
    name = 'lemonchiffon';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lemonchiffon'], 'object')['toString']()] = name;
    'lightblue' in vvv_tmp0;
    name = 'lightblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightblue'], 'object')['toString']()] = name;
    'lightcoral' in vvv_tmp0;
    name = 'lightcoral';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightcoral'], 'object')['toString']()] = name;
    'lightcyan' in vvv_tmp0;
    name = 'lightcyan';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightcyan'], 'object')['toString']()] = name;
    'lightgoldenrodyellow' in vvv_tmp0;
    name = 'lightgoldenrodyellow';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightgoldenrodyellow'], 'object')['toString']()] = name;
    'lightgray' in vvv_tmp0;
    name = 'lightgray';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightgray'], 'object')['toString']()] = name;
    'lightgreen' in vvv_tmp0;
    name = 'lightgreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightgreen'], 'object')['toString']()] = name;
    'lightgrey' in vvv_tmp0;
    name = 'lightgrey';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightgrey'], 'object')['toString']()] = name;
    'lightpink' in vvv_tmp0;
    name = 'lightpink';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightpink'], 'object')['toString']()] = name;
    'lightsalmon' in vvv_tmp0;
    name = 'lightsalmon';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightsalmon'], 'object')['toString']()] = name;
    'lightseagreen' in vvv_tmp0;
    name = 'lightseagreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightseagreen'], 'object')['toString']()] = name;
    'lightskyblue' in vvv_tmp0;
    name = 'lightskyblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightskyblue'], 'object')['toString']()] = name;
    'lightslategray' in vvv_tmp0;
    name = 'lightslategray';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightslategray'], 'object')['toString']()] = name;
    'lightslategrey' in vvv_tmp0;
    name = 'lightslategrey';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightslategrey'], 'object')['toString']()] = name;
    'lightsteelblue' in vvv_tmp0;
    name = 'lightsteelblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightsteelblue'], 'object')['toString']()] = name;
    'lightyellow' in vvv_tmp0;
    name = 'lightyellow';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lightyellow'], 'object')['toString']()] = name;
    'lime' in vvv_tmp0;
    name = 'lime';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'lime'], 'object')['toString']()] = name;
    'limegreen' in vvv_tmp0;
    name = 'limegreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'limegreen'], 'object')['toString']()] = name;
    'linen' in vvv_tmp0;
    name = 'linen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'linen'], 'object')['toString']()] = name;
    'magenta' in vvv_tmp0;
    name = 'magenta';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'magenta'], 'object')['toString']()] = name;
    'maroon' in vvv_tmp0;
    name = 'maroon';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'maroon'], 'object')['toString']()] = name;
    'mediumaquamarine' in vvv_tmp0;
    name = 'mediumaquamarine';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mediumaquamarine'], 'object')['toString']()] = name;
    'mediumblue' in vvv_tmp0;
    name = 'mediumblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mediumblue'], 'object')['toString']()] = name;
    'mediumorchid' in vvv_tmp0;
    name = 'mediumorchid';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mediumorchid'], 'object')['toString']()] = name;
    'mediumpurple' in vvv_tmp0;
    name = 'mediumpurple';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mediumpurple'], 'object')['toString']()] = name;
    'mediumseagreen' in vvv_tmp0;
    name = 'mediumseagreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mediumseagreen'], 'object')['toString']()] = name;
    'mediumslateblue' in vvv_tmp0;
    name = 'mediumslateblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mediumslateblue'], 'object')['toString']()] = name;
    'mediumspringgreen' in vvv_tmp0;
    name = 'mediumspringgreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mediumspringgreen'], 'object')['toString']()] = name;
    'mediumturquoise' in vvv_tmp0;
    name = 'mediumturquoise';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mediumturquoise'], 'object')['toString']()] = name;
    'mediumvioletred' in vvv_tmp0;
    name = 'mediumvioletred';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mediumvioletred'], 'object')['toString']()] = name;
    'midnightblue' in vvv_tmp0;
    name = 'midnightblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'midnightblue'], 'object')['toString']()] = name;
    'mintcream' in vvv_tmp0;
    name = 'mintcream';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mintcream'], 'object')['toString']()] = name;
    'mistyrose' in vvv_tmp0;
    name = 'mistyrose';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'mistyrose'], 'object')['toString']()] = name;
    'moccasin' in vvv_tmp0;
    name = 'moccasin';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'moccasin'], 'object')['toString']()] = name;
    'navajowhite' in vvv_tmp0;
    name = 'navajowhite';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'navajowhite'], 'object')['toString']()] = name;
    'navy' in vvv_tmp0;
    name = 'navy';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'navy'], 'object')['toString']()] = name;
    'oldlace' in vvv_tmp0;
    name = 'oldlace';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'oldlace'], 'object')['toString']()] = name;
    'olive' in vvv_tmp0;
    name = 'olive';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'olive'], 'object')['toString']()] = name;
    'olivedrab' in vvv_tmp0;
    name = 'olivedrab';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'olivedrab'], 'object')['toString']()] = name;
    'orange' in vvv_tmp0;
    name = 'orange';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'orange'], 'object')['toString']()] = name;
    'orangered' in vvv_tmp0;
    name = 'orangered';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'orangered'], 'object')['toString']()] = name;
    'orchid' in vvv_tmp0;
    name = 'orchid';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'orchid'], 'object')['toString']()] = name;
    'palegoldenrod' in vvv_tmp0;
    name = 'palegoldenrod';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'palegoldenrod'], 'object')['toString']()] = name;
    'palegreen' in vvv_tmp0;
    name = 'palegreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'palegreen'], 'object')['toString']()] = name;
    'paleturquoise' in vvv_tmp0;
    name = 'paleturquoise';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'paleturquoise'], 'object')['toString']()] = name;
    'palevioletred' in vvv_tmp0;
    name = 'palevioletred';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'palevioletred'], 'object')['toString']()] = name;
    'papayawhip' in vvv_tmp0;
    name = 'papayawhip';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'papayawhip'], 'object')['toString']()] = name;
    'peachpuff' in vvv_tmp0;
    name = 'peachpuff';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'peachpuff'], 'object')['toString']()] = name;
    'peru' in vvv_tmp0;
    name = 'peru';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'peru'], 'object')['toString']()] = name;
    'pink' in vvv_tmp0;
    name = 'pink';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'pink'], 'object')['toString']()] = name;
    'plum' in vvv_tmp0;
    name = 'plum';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'plum'], 'object')['toString']()] = name;
    'powderblue' in vvv_tmp0;
    name = 'powderblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'powderblue'], 'object')['toString']()] = name;
    'purple' in vvv_tmp0;
    name = 'purple';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'purple'], 'object')['toString']()] = name;
    'rebeccapurple' in vvv_tmp0;
    name = 'rebeccapurple';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'rebeccapurple'], 'object')['toString']()] = name;
    'red' in vvv_tmp0;
    name = 'red';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'red'], 'object')['toString']()] = name;
    'rosybrown' in vvv_tmp0;
    name = 'rosybrown';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'rosybrown'], 'object')['toString']()] = name;
    'royalblue' in vvv_tmp0;
    name = 'royalblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'royalblue'], 'object')['toString']()] = name;
    'saddlebrown' in vvv_tmp0;
    name = 'saddlebrown';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'saddlebrown'], 'object')['toString']()] = name;
    'salmon' in vvv_tmp0;
    name = 'salmon';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'salmon'], 'object')['toString']()] = name;
    'sandybrown' in vvv_tmp0;
    name = 'sandybrown';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'sandybrown'], 'object')['toString']()] = name;
    'seagreen' in vvv_tmp0;
    name = 'seagreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'seagreen'], 'object')['toString']()] = name;
    'seashell' in vvv_tmp0;
    name = 'seashell';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'seashell'], 'object')['toString']()] = name;
    'sienna' in vvv_tmp0;
    name = 'sienna';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'sienna'], 'object')['toString']()] = name;
    'silver' in vvv_tmp0;
    name = 'silver';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'silver'], 'object')['toString']()] = name;
    'skyblue' in vvv_tmp0;
    name = 'skyblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'skyblue'], 'object')['toString']()] = name;
    'slateblue' in vvv_tmp0;
    name = 'slateblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'slateblue'], 'object')['toString']()] = name;
    'slategray' in vvv_tmp0;
    name = 'slategray';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'slategray'], 'object')['toString']()] = name;
    'slategrey' in vvv_tmp0;
    name = 'slategrey';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'slategrey'], 'object')['toString']()] = name;
    'snow' in vvv_tmp0;
    name = 'snow';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'snow'], 'object')['toString']()] = name;
    'springgreen' in vvv_tmp0;
    name = 'springgreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'springgreen'], 'object')['toString']()] = name;
    'steelblue' in vvv_tmp0;
    name = 'steelblue';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'steelblue'], 'object')['toString']()] = name;
    'tan' in vvv_tmp0;
    name = 'tan';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'tan'], 'object')['toString']()] = name;
    'teal' in vvv_tmp0;
    name = 'teal';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'teal'], 'object')['toString']()] = name;
    'thistle' in vvv_tmp0;
    name = 'thistle';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'thistle'], 'object')['toString']()] = name;
    'tomato' in vvv_tmp0;
    name = 'tomato';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'tomato'], 'object')['toString']()] = name;
    'turquoise' in vvv_tmp0;
    name = 'turquoise';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'turquoise'], 'object')['toString']()] = name;
    'violet' in vvv_tmp0;
    name = 'violet';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'violet'], 'object')['toString']()] = name;
    'wheat' in vvv_tmp0;
    name = 'wheat';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'wheat'], 'object')['toString']()] = name;
    'white' in vvv_tmp0;
    name = 'white';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'white'], 'object')['toString']()] = name;
    'whitesmoke' in vvv_tmp0;
    name = 'whitesmoke';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'whitesmoke'], 'object')['toString']()] = name;
    'yellow' in vvv_tmp0;
    name = 'yellow';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'yellow'], 'object')['toString']()] = name;
    'yellowgreen' in vvv_tmp0;
    name = 'yellowgreen';
    (reverseNames, $__.os.oid84)[TAJS_restrictToType((colorNames, $__.os.oid82)[name, 'yellowgreen'], 'object')['toString']()] = name;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
colorNames = require(6);
module.exports = {
    getRgba: getRgba,
    getHsla: getHsla,
    getRgb: getRgb,
    getHsl: getHsl,
    getHwb: getHwb,
    getAlpha: getAlpha,
    hexString: hexString,
    rgbString: rgbString,
    rgbaString: rgbaString,
    percentString: percentString,
    percentaString: percentaString,
    hslString: hslString,
    hslaString: hslaString,
    hwbString: hwbString,
    keyword: keyword
};
reverseNames = {};
for (var name in colorNames) {
    reverseNames[colorNames[name]] = name;
}}, $__.fs.J$__v7918151485_26_7),
            $__.os.oid1 = {
                '6': 6
            }
        ],
        3: [
            ($__.fs.J$__v7918151485_148_8 = function J$__v7918151485_148(require, module, exports) {
var vvv_return, vvv_switch, convert, string, Color;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    convert = (require, $__.fs.J$__v7918151485_3_61)(5, 0, true, $__.uid);
    string = (require, $__.fs.J$__v7918151485_3_61)(2, 1, true, $__.uid);
    Color = ($__.fs.J$__v7918151485_28_314 = function J$__v7918151485_28(obj) {
var vvv_return, vvv_switch, vals;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
obj = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (obj instanceof Color) {
    return obj;
}
if (!(this instanceof Color)) {
    return new Color(obj);
}
this.values = {
    rgb: [
        0,
        0,
        0
    ],
    hsl: [
        0,
        0,
        0
    ],
    hsv: [
        0,
        0,
        0
    ],
    hwb: [
        0,
        0,
        0
    ],
    cmyk: [
        0,
        0,
        0,
        0
    ],
    alpha: 1
};
if (typeof obj === 'string') {
    vals = string.getRgba(obj);
    if (vals) {
        this.setValues('rgb', vals);
    } else if (vals = string.getHsla(obj)) {
        this.setValues('hsl', vals);
    } else if (vals = string.getHwb(obj)) {
        this.setValues('hwb', vals);
    } else {
        throw new Error('Unable to parse color from string "' + obj + '"');
    }
} else if (typeof obj === 'object') {
    vals = obj;
    if (vals.r !== undefined || vals.red !== undefined) {
        this.setValues('rgb', vals);
    } else if (vals.l !== undefined || vals.lightness !== undefined) {
        this.setValues('hsl', vals);
    } else if (vals.v !== undefined || vals.value !== undefined) {
        this.setValues('hsv', vals);
    } else if (vals.w !== undefined || vals.whiteness !== undefined) {
        this.setValues('hwb', vals);
    } else if (vals.c !== undefined || vals.cyan !== undefined) {
        this.setValues('cmyk', vals);
    } else {
        throw new Error('Unable to parse color from object ' + JSON.stringify(obj));
    }
}});
    Color.prototype = $__.os.oid85 = {
        'rgb': ($__.fs.J$__v7918151485_30_315 = function J$__v7918151485_30() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setSpace('rgb', arguments);}),
        'hsl': ($__.fs.J$__v7918151485_32_316 = function J$__v7918151485_32() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setSpace('hsl', arguments);}),
        'hsv': ($__.fs.J$__v7918151485_34_317 = function J$__v7918151485_34() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setSpace('hsv', arguments);}),
        'hwb': ($__.fs.J$__v7918151485_36_318 = function J$__v7918151485_36() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setSpace('hwb', arguments);}),
        'cmyk': ($__.fs.J$__v7918151485_38_319 = function J$__v7918151485_38() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setSpace('cmyk', arguments);}),
        'rgbArray': ($__.fs.J$__v7918151485_40_320 = function J$__v7918151485_40() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.values.rgb;}),
        'hslArray': ($__.fs.J$__v7918151485_42_321 = function J$__v7918151485_42() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.values.hsl;}),
        'hsvArray': ($__.fs.J$__v7918151485_44_322 = function J$__v7918151485_44() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.values.hsv;}),
        'hwbArray': ($__.fs.J$__v7918151485_46_323 = function J$__v7918151485_46() {
var vvv_return, vvv_switch, values;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
values = this.values;
if (values.alpha !== 1) {
    return values.hwb.concat([values.alpha]);
}
return values.hwb;}),
        'cmykArray': ($__.fs.J$__v7918151485_48_324 = function J$__v7918151485_48() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.values.cmyk;}),
        'rgbaArray': ($__.fs.J$__v7918151485_50_325 = function J$__v7918151485_50() {
var vvv_return, vvv_switch, values;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
values = this.values;
return values.rgb.concat([values.alpha]);}),
        'hslaArray': ($__.fs.J$__v7918151485_52_326 = function J$__v7918151485_52() {
var vvv_return, vvv_switch, values;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
values = this.values;
return values.hsl.concat([values.alpha]);}),
        'alpha': ($__.fs.J$__v7918151485_54_327 = function J$__v7918151485_54(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (val === undefined) {
    return this.values.alpha;
}
this.setValues('alpha', val);
return this;}),
        'red': ($__.fs.J$__v7918151485_56_328 = function J$__v7918151485_56(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('rgb', 0, val);}),
        'green': ($__.fs.J$__v7918151485_58_329 = function J$__v7918151485_58(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('rgb', 1, val);}),
        'blue': ($__.fs.J$__v7918151485_60_330 = function J$__v7918151485_60(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('rgb', 2, val);}),
        'hue': ($__.fs.J$__v7918151485_62_331 = function J$__v7918151485_62(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (val) {
    val %= 360;
    val = val < 0 ? 360 + val : val;
}
return this.setChannel('hsl', 0, val);}),
        'saturation': ($__.fs.J$__v7918151485_64_332 = function J$__v7918151485_64(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('hsl', 1, val);}),
        'lightness': ($__.fs.J$__v7918151485_66_333 = function J$__v7918151485_66(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('hsl', 2, val);}),
        'saturationv': ($__.fs.J$__v7918151485_68_334 = function J$__v7918151485_68(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('hsv', 1, val);}),
        'whiteness': ($__.fs.J$__v7918151485_70_335 = function J$__v7918151485_70(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('hwb', 1, val);}),
        'blackness': ($__.fs.J$__v7918151485_72_336 = function J$__v7918151485_72(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('hwb', 2, val);}),
        'value': ($__.fs.J$__v7918151485_74_337 = function J$__v7918151485_74(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('hsv', 2, val);}),
        'cyan': ($__.fs.J$__v7918151485_76_338 = function J$__v7918151485_76(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('cmyk', 0, val);}),
        'magenta': ($__.fs.J$__v7918151485_78_339 = function J$__v7918151485_78(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('cmyk', 1, val);}),
        'yellow': ($__.fs.J$__v7918151485_80_340 = function J$__v7918151485_80(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('cmyk', 2, val);}),
        'black': ($__.fs.J$__v7918151485_82_341 = function J$__v7918151485_82(val) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
val = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.setChannel('cmyk', 3, val);}),
        'hexString': ($__.fs.J$__v7918151485_84_342 = function J$__v7918151485_84() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return string.hexString(this.values.rgb);}),
        'rgbString': ($__.fs.J$__v7918151485_86_343 = function J$__v7918151485_86() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return string.rgbString(this.values.rgb, this.values.alpha);}),
        'rgbaString': ($__.fs.J$__v7918151485_88_344 = function J$__v7918151485_88() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return string.rgbaString(this.values.rgb, this.values.alpha);}),
        'percentString': ($__.fs.J$__v7918151485_90_345 = function J$__v7918151485_90() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return string.percentString(this.values.rgb, this.values.alpha);}),
        'hslString': ($__.fs.J$__v7918151485_92_346 = function J$__v7918151485_92() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return string.hslString(this.values.hsl, this.values.alpha);}),
        'hslaString': ($__.fs.J$__v7918151485_94_347 = function J$__v7918151485_94() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return string.hslaString(this.values.hsl, this.values.alpha);}),
        'hwbString': ($__.fs.J$__v7918151485_96_348 = function J$__v7918151485_96() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return string.hwbString(this.values.hwb, this.values.alpha);}),
        'keyword': ($__.fs.J$__v7918151485_98_349 = function J$__v7918151485_98() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return string.keyword(this.values.rgb, this.values.alpha);}),
        'rgbNumber': ($__.fs.J$__v7918151485_100_350 = function J$__v7918151485_100() {
var vvv_return, vvv_switch, rgb;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rgb = this.values.rgb;
return rgb[0] << 16 | rgb[1] << 8 | rgb[2];}),
        'luminosity': ($__.fs.J$__v7918151485_102_351 = function J$__v7918151485_102() {
var vvv_return, vvv_switch, rgb, lum, chan;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rgb = this.values.rgb;
lum = [];
for (var i = 0; i < rgb.length; i++) {
    chan = rgb[i] / 255;
    lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
}
return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];}),
        'contrast': ($__.fs.J$__v7918151485_104_352 = function J$__v7918151485_104(color2) {
var vvv_return, vvv_switch, lum1, lum2;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
color2 = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lum1 = this.luminosity();
lum2 = color2.luminosity();
if (lum1 > lum2) {
    return (lum1 + 0.05) / (lum2 + 0.05);
}
return (lum2 + 0.05) / (lum1 + 0.05);}),
        'level': ($__.fs.J$__v7918151485_106_353 = function J$__v7918151485_106(color2) {
var vvv_return, vvv_switch, contrastRatio;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
color2 = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
contrastRatio = this.contrast(color2);
if (contrastRatio >= 7.1) {
    return 'AAA';
}
return contrastRatio >= 4.5 ? 'AA' : '';}),
        'dark': ($__.fs.J$__v7918151485_108_354 = function J$__v7918151485_108() {
var vvv_return, vvv_switch, rgb, yiq;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rgb = this.values.rgb;
yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
return yiq < 128;}),
        'light': ($__.fs.J$__v7918151485_110_355 = function J$__v7918151485_110() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return !this.dark();}),
        'negate': ($__.fs.J$__v7918151485_112_356 = function J$__v7918151485_112() {
var vvv_return, vvv_switch, rgb;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rgb = [];
for (var i = 0; i < 3; i++) {
    rgb[i] = 255 - this.values.rgb[i];
}
this.setValues('rgb', rgb);
return this;}),
        'lighten': ($__.fs.J$__v7918151485_114_357 = function J$__v7918151485_114(ratio) {
var vvv_return, vvv_switch, hsl;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
hsl = this.values.hsl;
hsl[2] += hsl[2] * ratio;
this.setValues('hsl', hsl);
return this;}),
        'darken': ($__.fs.J$__v7918151485_116_358 = function J$__v7918151485_116(ratio) {
var vvv_return, vvv_switch, hsl;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
hsl = this.values.hsl;
hsl[2] -= hsl[2] * ratio;
this.setValues('hsl', hsl);
return this;}),
        'saturate': ($__.fs.J$__v7918151485_118_359 = function J$__v7918151485_118(ratio) {
var vvv_return, vvv_switch, hsl;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
hsl = this.values.hsl;
hsl[1] += hsl[1] * ratio;
this.setValues('hsl', hsl);
return this;}),
        'desaturate': ($__.fs.J$__v7918151485_120_360 = function J$__v7918151485_120(ratio) {
var vvv_return, vvv_switch, hsl;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
hsl = this.values.hsl;
hsl[1] -= hsl[1] * ratio;
this.setValues('hsl', hsl);
return this;}),
        'whiten': ($__.fs.J$__v7918151485_122_361 = function J$__v7918151485_122(ratio) {
var vvv_return, vvv_switch, hwb;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
hwb = this.values.hwb;
hwb[1] += hwb[1] * ratio;
this.setValues('hwb', hwb);
return this;}),
        'blacken': ($__.fs.J$__v7918151485_124_362 = function J$__v7918151485_124(ratio) {
var vvv_return, vvv_switch, hwb;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
hwb = this.values.hwb;
hwb[2] += hwb[2] * ratio;
this.setValues('hwb', hwb);
return this;}),
        'greyscale': ($__.fs.J$__v7918151485_126_363 = function J$__v7918151485_126() {
var vvv_return, vvv_switch, rgb, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rgb = this.values.rgb;
val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
this.setValues('rgb', [
    val,
    val,
    val
]);
return this;}),
        'clearer': ($__.fs.J$__v7918151485_128_364 = function J$__v7918151485_128(ratio) {
var vvv_return, vvv_switch, alpha;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
alpha = this.values.alpha;
this.setValues('alpha', alpha - alpha * ratio);
return this;}),
        'opaquer': ($__.fs.J$__v7918151485_130_365 = function J$__v7918151485_130(ratio) {
var vvv_return, vvv_switch, alpha;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ratio = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
alpha = this.values.alpha;
this.setValues('alpha', alpha + alpha * ratio);
return this;}),
        'rotate': ($__.fs.J$__v7918151485_132_366 = function J$__v7918151485_132(degrees) {
var vvv_return, vvv_switch, hsl, hue;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
degrees = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
hsl = this.values.hsl;
hue = (hsl[0] + degrees) % 360;
hsl[0] = hue < 0 ? 360 + hue : hue;
this.setValues('hsl', hsl);
return this;}),
        'mix': ($__.fs.J$__v7918151485_134_367 = function J$__v7918151485_134(mixinColor, weight) {
var vvv_return, vvv_switch, color1, color2, p, w, a, w1, w2;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
mixinColor = arguments[0], weight = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
color1 = this;
color2 = mixinColor;
p = weight === undefined ? 0.5 : weight;
w = 2 * p - 1;
a = color1.alpha() - color2.alpha();
w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
w2 = 1 - w1;
return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));}),
        'toJSON': ($__.fs.J$__v7918151485_136_368 = function J$__v7918151485_136() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.rgb();}),
        'clone': ($__.fs.J$__v7918151485_138_369 = function J$__v7918151485_138() {
var vvv_return, vvv_switch, result, source, target, value, type;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
result = new Color();
source = this.values;
target = result.values;
for (var prop in source) {
    if (source.hasOwnProperty(prop)) {
        value = source[prop];
        type = {}.toString.call(value);
        if (type === '[object Array]') {
            target[prop] = value.slice(0);
        } else if (type === '[object Number]') {
            target[prop] = value;
        } else {
            console.error('unexpected color value:', value);
        }
    }
}
return result;})
    };
    ((Color.prototype, $__.os.oid85), $__.os.oid85).spaces = $__.os.oid86 = {
        'rgb': [
            'red',
            'green',
            'blue'
        ],
        'hsl': [
            'hue',
            'saturation',
            'lightness'
        ],
        'hsv': [
            'hue',
            'saturation',
            'value'
        ],
        'hwb': [
            'hue',
            'whiteness',
            'blackness'
        ],
        'cmyk': [
            'cyan',
            'magenta',
            'yellow',
            'black'
        ]
    };
    ((Color.prototype, $__.os.oid85), $__.os.oid85).maxes = $__.os.oid87 = {
        'rgb': [
            255,
            255,
            255
        ],
        'hsl': [
            360,
            100,
            100
        ],
        'hsv': [
            360,
            100,
            100
        ],
        'hwb': [
            360,
            100,
            100
        ],
        'cmyk': [
            100,
            100,
            100,
            100
        ]
    };
    ((Color.prototype, $__.os.oid85), $__.os.oid85).getValues = ($__.fs.J$__v7918151485_140_370 = function J$__v7918151485_140(space) {
var vvv_return, vvv_switch, values, vals;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
space = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
values = this.values;
vals = {};
for (var i = 0; i < space.length; i++) {
    vals[space.charAt(i)] = values[space][i];
}
if (values.alpha !== 1) {
    vals.a = values.alpha;
}
return vals;});
    ((Color.prototype, $__.os.oid85), $__.os.oid85).setValues = ($__.fs.J$__v7918151485_142_371 = function J$__v7918151485_142(space, vals) {
var vvv_return, vvv_switch, values, spaces, maxes, alpha, i, chans, capped;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
space = arguments[0], vals = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
values = this.values;
spaces = this.spaces;
maxes = this.maxes;
alpha = 1;
if (space === 'alpha') {
    alpha = vals;
} else if (vals.length) {
    values[space] = vals.slice(0, space.length);
    alpha = vals[space.length];
} else if (vals[space.charAt(0)] !== undefined) {
    for (i = 0; i < space.length; i++) {
        values[space][i] = vals[space.charAt(i)];
    }
    alpha = vals.a;
} else if (vals[spaces[space][0]] !== undefined) {
    chans = spaces[space];
    for (i = 0; i < space.length; i++) {
        values[space][i] = vals[chans[i]];
    }
    alpha = vals.alpha;
}
values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));
if (space === 'alpha') {
    return false;
}
for (i = 0; i < space.length; i++) {
    capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
    values[space][i] = Math.round(capped);
}
for (var sname in spaces) {
    if (sname !== space) {
        values[sname] = convert[space][sname](values[space]);
    }
}
return true;});
    ((Color.prototype, $__.os.oid85), $__.os.oid85).setSpace = ($__.fs.J$__v7918151485_144_372 = function J$__v7918151485_144(space, args) {
var vvv_return, vvv_switch, vals;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
space = arguments[0], args = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vals = args[0];
if (vals === undefined) {
    return this.getValues(space);
}
if (typeof vals === 'number') {
    vals = Array.prototype.slice.call(args);
}
this.setValues(space, vals);
return this;});
    ((Color.prototype, $__.os.oid85), $__.os.oid85).setChannel = ($__.fs.J$__v7918151485_146_373 = function J$__v7918151485_146(space, index, val) {
var vvv_return, vvv_switch, svalues;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
space = arguments[0], index = arguments[1], val = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
svalues = this.values[space];
if (val === undefined) {
    return svalues[index];
} else if (val === svalues[index]) {
    return this;
}
svalues[index] = val;
this.setValues(space, svalues);
return this;});
    typeof window !== 'undefined';
    window.Color = Color;
    (module, $__.os.oid61).exports = Color;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
convert = require(5);
string = require(2);
Color = function (obj) {
    if (obj instanceof Color) {
        return obj;
    }
    if (!(this instanceof Color)) {
        return new Color(obj);
    }
    this.values = {
        rgb: [
            0,
            0,
            0
        ],
        hsl: [
            0,
            0,
            0
        ],
        hsv: [
            0,
            0,
            0
        ],
        hwb: [
            0,
            0,
            0
        ],
        cmyk: [
            0,
            0,
            0,
            0
        ],
        alpha: 1
    };
    var vals;
    if (typeof obj === 'string') {
        vals = string.getRgba(obj);
        if (vals) {
            this.setValues('rgb', vals);
        } else if (vals = string.getHsla(obj)) {
            this.setValues('hsl', vals);
        } else if (vals = string.getHwb(obj)) {
            this.setValues('hwb', vals);
        } else {
            throw new Error('Unable to parse color from string "' + obj + '"');
        }
    } else if (typeof obj === 'object') {
        vals = obj;
        if (vals.r !== undefined || vals.red !== undefined) {
            this.setValues('rgb', vals);
        } else if (vals.l !== undefined || vals.lightness !== undefined) {
            this.setValues('hsl', vals);
        } else if (vals.v !== undefined || vals.value !== undefined) {
            this.setValues('hsv', vals);
        } else if (vals.w !== undefined || vals.whiteness !== undefined) {
            this.setValues('hwb', vals);
        } else if (vals.c !== undefined || vals.cyan !== undefined) {
            this.setValues('cmyk', vals);
        } else {
            throw new Error('Unable to parse color from object ' + JSON.stringify(obj));
        }
    }
};
Color.prototype = {
    rgb: function () {
        return this.setSpace('rgb', arguments);
    },
    hsl: function () {
        return this.setSpace('hsl', arguments);
    },
    hsv: function () {
        return this.setSpace('hsv', arguments);
    },
    hwb: function () {
        return this.setSpace('hwb', arguments);
    },
    cmyk: function () {
        return this.setSpace('cmyk', arguments);
    },
    rgbArray: function () {
        return this.values.rgb;
    },
    hslArray: function () {
        return this.values.hsl;
    },
    hsvArray: function () {
        return this.values.hsv;
    },
    hwbArray: function () {
        var values = this.values;
        if (values.alpha !== 1) {
            return values.hwb.concat([values.alpha]);
        }
        return values.hwb;
    },
    cmykArray: function () {
        return this.values.cmyk;
    },
    rgbaArray: function () {
        var values = this.values;
        return values.rgb.concat([values.alpha]);
    },
    hslaArray: function () {
        var values = this.values;
        return values.hsl.concat([values.alpha]);
    },
    alpha: function (val) {
        if (val === undefined) {
            return this.values.alpha;
        }
        this.setValues('alpha', val);
        return this;
    },
    red: function (val) {
        return this.setChannel('rgb', 0, val);
    },
    green: function (val) {
        return this.setChannel('rgb', 1, val);
    },
    blue: function (val) {
        return this.setChannel('rgb', 2, val);
    },
    hue: function (val) {
        if (val) {
            val %= 360;
            val = val < 0 ? 360 + val : val;
        }
        return this.setChannel('hsl', 0, val);
    },
    saturation: function (val) {
        return this.setChannel('hsl', 1, val);
    },
    lightness: function (val) {
        return this.setChannel('hsl', 2, val);
    },
    saturationv: function (val) {
        return this.setChannel('hsv', 1, val);
    },
    whiteness: function (val) {
        return this.setChannel('hwb', 1, val);
    },
    blackness: function (val) {
        return this.setChannel('hwb', 2, val);
    },
    value: function (val) {
        return this.setChannel('hsv', 2, val);
    },
    cyan: function (val) {
        return this.setChannel('cmyk', 0, val);
    },
    magenta: function (val) {
        return this.setChannel('cmyk', 1, val);
    },
    yellow: function (val) {
        return this.setChannel('cmyk', 2, val);
    },
    black: function (val) {
        return this.setChannel('cmyk', 3, val);
    },
    hexString: function () {
        return string.hexString(this.values.rgb);
    },
    rgbString: function () {
        return string.rgbString(this.values.rgb, this.values.alpha);
    },
    rgbaString: function () {
        return string.rgbaString(this.values.rgb, this.values.alpha);
    },
    percentString: function () {
        return string.percentString(this.values.rgb, this.values.alpha);
    },
    hslString: function () {
        return string.hslString(this.values.hsl, this.values.alpha);
    },
    hslaString: function () {
        return string.hslaString(this.values.hsl, this.values.alpha);
    },
    hwbString: function () {
        return string.hwbString(this.values.hwb, this.values.alpha);
    },
    keyword: function () {
        return string.keyword(this.values.rgb, this.values.alpha);
    },
    rgbNumber: function () {
        var rgb = this.values.rgb;
        return rgb[0] << 16 | rgb[1] << 8 | rgb[2];
    },
    luminosity: function () {
        var rgb = this.values.rgb;
        var lum = [];
        for (var i = 0; i < rgb.length; i++) {
            var chan = rgb[i] / 255;
            lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
        }
        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    },
    contrast: function (color2) {
        var lum1 = this.luminosity();
        var lum2 = color2.luminosity();
        if (lum1 > lum2) {
            return (lum1 + 0.05) / (lum2 + 0.05);
        }
        return (lum2 + 0.05) / (lum1 + 0.05);
    },
    level: function (color2) {
        var contrastRatio = this.contrast(color2);
        if (contrastRatio >= 7.1) {
            return 'AAA';
        }
        return contrastRatio >= 4.5 ? 'AA' : '';
    },
    dark: function () {
        var rgb = this.values.rgb;
        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
        return yiq < 128;
    },
    light: function () {
        return !this.dark();
    },
    negate: function () {
        var rgb = [];
        for (var i = 0; i < 3; i++) {
            rgb[i] = 255 - this.values.rgb[i];
        }
        this.setValues('rgb', rgb);
        return this;
    },
    lighten: function (ratio) {
        var hsl = this.values.hsl;
        hsl[2] += hsl[2] * ratio;
        this.setValues('hsl', hsl);
        return this;
    },
    darken: function (ratio) {
        var hsl = this.values.hsl;
        hsl[2] -= hsl[2] * ratio;
        this.setValues('hsl', hsl);
        return this;
    },
    saturate: function (ratio) {
        var hsl = this.values.hsl;
        hsl[1] += hsl[1] * ratio;
        this.setValues('hsl', hsl);
        return this;
    },
    desaturate: function (ratio) {
        var hsl = this.values.hsl;
        hsl[1] -= hsl[1] * ratio;
        this.setValues('hsl', hsl);
        return this;
    },
    whiten: function (ratio) {
        var hwb = this.values.hwb;
        hwb[1] += hwb[1] * ratio;
        this.setValues('hwb', hwb);
        return this;
    },
    blacken: function (ratio) {
        var hwb = this.values.hwb;
        hwb[2] += hwb[2] * ratio;
        this.setValues('hwb', hwb);
        return this;
    },
    greyscale: function () {
        var rgb = this.values.rgb;
        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
        this.setValues('rgb', [
            val,
            val,
            val
        ]);
        return this;
    },
    clearer: function (ratio) {
        var alpha = this.values.alpha;
        this.setValues('alpha', alpha - alpha * ratio);
        return this;
    },
    opaquer: function (ratio) {
        var alpha = this.values.alpha;
        this.setValues('alpha', alpha + alpha * ratio);
        return this;
    },
    rotate: function (degrees) {
        var hsl = this.values.hsl;
        var hue = (hsl[0] + degrees) % 360;
        hsl[0] = hue < 0 ? 360 + hue : hue;
        this.setValues('hsl', hsl);
        return this;
    },
    mix: function (mixinColor, weight) {
        var color1 = this;
        var color2 = mixinColor;
        var p = weight === undefined ? 0.5 : weight;
        var w = 2 * p - 1;
        var a = color1.alpha() - color2.alpha();
        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
        var w2 = 1 - w1;
        return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));
    },
    toJSON: function () {
        return this.rgb();
    },
    clone: function () {
        var result = new Color();
        var source = this.values;
        var target = result.values;
        var value, type;
        for (var prop in source) {
            if (source.hasOwnProperty(prop)) {
                value = source[prop];
                type = {}.toString.call(value);
                if (type === '[object Array]') {
                    target[prop] = value.slice(0);
                } else if (type === '[object Number]') {
                    target[prop] = value;
                } else {
                    console.error('unexpected color value:', value);
                }
            }
        }
        return result;
    }
};
Color.prototype.spaces = {
    rgb: [
        'red',
        'green',
        'blue'
    ],
    hsl: [
        'hue',
        'saturation',
        'lightness'
    ],
    hsv: [
        'hue',
        'saturation',
        'value'
    ],
    hwb: [
        'hue',
        'whiteness',
        'blackness'
    ],
    cmyk: [
        'cyan',
        'magenta',
        'yellow',
        'black'
    ]
};
Color.prototype.maxes = {
    rgb: [
        255,
        255,
        255
    ],
    hsl: [
        360,
        100,
        100
    ],
    hsv: [
        360,
        100,
        100
    ],
    hwb: [
        360,
        100,
        100
    ],
    cmyk: [
        100,
        100,
        100,
        100
    ]
};
Color.prototype.getValues = function (space) {
    var values = this.values;
    var vals = {};
    for (var i = 0; i < space.length; i++) {
        vals[space.charAt(i)] = values[space][i];
    }
    if (values.alpha !== 1) {
        vals.a = values.alpha;
    }
    return vals;
};
Color.prototype.setValues = function (space, vals) {
    var values = this.values;
    var spaces = this.spaces;
    var maxes = this.maxes;
    var alpha = 1;
    var i;
    if (space === 'alpha') {
        alpha = vals;
    } else if (vals.length) {
        values[space] = vals.slice(0, space.length);
        alpha = vals[space.length];
    } else if (vals[space.charAt(0)] !== undefined) {
        for (i = 0; i < space.length; i++) {
            values[space][i] = vals[space.charAt(i)];
        }
        alpha = vals.a;
    } else if (vals[spaces[space][0]] !== undefined) {
        var chans = spaces[space];
        for (i = 0; i < space.length; i++) {
            values[space][i] = vals[chans[i]];
        }
        alpha = vals.alpha;
    }
    values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));
    if (space === 'alpha') {
        return false;
    }
    var capped;
    for (i = 0; i < space.length; i++) {
        capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
        values[space][i] = Math.round(capped);
    }
    for (var sname in spaces) {
        if (sname !== space) {
            values[sname] = convert[space][sname](values[space]);
        }
    }
    return true;
};
Color.prototype.setSpace = function (space, args) {
    var vals = args[0];
    if (vals === undefined) {
        return this.getValues(space);
    }
    if (typeof vals === 'number') {
        vals = Array.prototype.slice.call(args);
    }
    this.setValues(space, vals);
    return this;
};
Color.prototype.setChannel = function (space, index, val) {
    var svalues = this.values[space];
    if (val === undefined) {
        return svalues[index];
    } else if (val === svalues[index]) {
        return this;
    }
    svalues[index] = val;
    this.setValues(space, svalues);
    return this;
};
if (typeof window !== 'undefined') {
    window.Color = Color;
}
module.exports = Color;}, $__.fs.J$__v7918151485_148_8),
            $__.os.oid2 = {
                '2': 2,
                '5': 5
            }
        ],
        4: [
            ($__.fs.J$__v7918151485_194_9 = function J$__v7918151485_194(require, module, exports) {
var vvv_return, vvv_switch, vvv_tmp0, rgb2hsl, rgb2hsv, rgb2hwb, rgb2cmyk, rgb2keyword, rgb2xyz, rgb2lab, rgb2lch, hsl2rgb, hsl2hsv, hsl2hwb, hsl2cmyk, hsl2keyword, hsv2rgb, hsv2hsl, hsv2hwb, hsv2cmyk, hsv2keyword, hwb2rgb, hwb2hsl, hwb2hsv, hwb2cmyk, hwb2keyword, cmyk2rgb, cmyk2hsl, cmyk2hsv, cmyk2hwb, cmyk2keyword, xyz2rgb, xyz2lab, xyz2lch, lab2xyz, lab2lch, lab2rgb, lch2lab, lch2xyz, lch2rgb, keyword2rgb, keyword2hsl, keyword2hsv, keyword2hwb, keyword2cmyk, keyword2lab, keyword2xyz, cssKeywords, reverseKeywords, key;
rgb2hsl = function rgb2hsl(rgb) {
    var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), delta = max - min, h, s, l;
    if (max == min)
        h = 0;
    else if (r == max)
        h = (g - b) / delta;
    else if (g == max)
        h = 2 + (b - r) / delta;
    else if (b == max)
        h = 4 + (r - g) / delta;
    h = Math.min(h * 60, 360);
    if (h < 0)
        h += 360;
    l = (min + max) / 2;
    if (max == min)
        s = 0;
    else if (l <= 0.5)
        s = delta / (max + min);
    else
        s = delta / (2 - max - min);
    return [
        h,
        s * 100,
        l * 100
    ];
};
rgb2hsv = function rgb2hsv(rgb) {
    var r = rgb[0], g = rgb[1], b = rgb[2], min = Math.min(r, g, b), max = Math.max(r, g, b), delta = max - min, h, s, v;
    if (max == 0)
        s = 0;
    else
        s = delta / max * 1000 / 10;
    if (max == min)
        h = 0;
    else if (r == max)
        h = (g - b) / delta;
    else if (g == max)
        h = 2 + (b - r) / delta;
    else if (b == max)
        h = 4 + (r - g) / delta;
    h = Math.min(h * 60, 360);
    if (h < 0)
        h += 360;
    v = max / 255 * 1000 / 10;
    return [
        h,
        s,
        v
    ];
};
rgb2hwb = function rgb2hwb(rgb) {
    var r = rgb[0], g = rgb[1], b = rgb[2], h = rgb2hsl(rgb)[0], w = 1 / 255 * Math.min(r, Math.min(g, b)), b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [
        h,
        w * 100,
        b * 100
    ];
};
rgb2cmyk = function rgb2cmyk(rgb) {
    var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255, c, m, y, k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [
        c * 100,
        m * 100,
        y * 100,
        k * 100
    ];
};
rgb2keyword = function rgb2keyword(rgb) {
    return reverseKeywords[JSON.stringify(rgb)];
};
rgb2xyz = function rgb2xyz(rgb) {
    var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [
        x * 100,
        y * 100,
        z * 100
    ];
};
rgb2lab = function rgb2lab(rgb) {
    var xyz = rgb2xyz(rgb), x = xyz[0], y = xyz[1], z = xyz[2], l, a, b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [
        l,
        a,
        b
    ];
};
rgb2lch = function rgb2lch(args) {
    return lab2lch(rgb2lab(args));
};
hsl2rgb = function hsl2rgb(hsl) {
    var h = hsl[0] / 360, s = hsl[1] / 100, l = hsl[2] / 100, t1, t2, t3, rgb, val;
    if (s == 0) {
        val = l * 255;
        return [
            val,
            val,
            val
        ];
    }
    if (l < 0.5)
        t2 = l * (1 + s);
    else
        t2 = l + s - l * s;
    t1 = 2 * l - t2;
    rgb = [
        0,
        0,
        0
    ];
    for (var i = 0; i < 3; i++) {
        t3 = h + 1 / 3 * -(i - 1);
        t3 < 0 && t3++;
        t3 > 1 && t3--;
        if (6 * t3 < 1)
            val = t1 + (t2 - t1) * 6 * t3;
        else if (2 * t3 < 1)
            val = t2;
        else if (3 * t3 < 2)
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        else
            val = t1;
        rgb[i] = val * 255;
    }
    return rgb;
};
hsl2hsv = function hsl2hsv(hsl) {
    var h = hsl[0], s = hsl[1] / 100, l = hsl[2] / 100, sv, v;
    if (l === 0) {
        return [
            0,
            0,
            0
        ];
    }
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    v = (l + s) / 2;
    sv = 2 * s / (l + s);
    return [
        h,
        sv * 100,
        v * 100
    ];
};
hsl2hwb = function hsl2hwb(args) {
    return rgb2hwb(hsl2rgb(args));
};
hsl2cmyk = function hsl2cmyk(args) {
    return rgb2cmyk(hsl2rgb(args));
};
hsl2keyword = function hsl2keyword(args) {
    return rgb2keyword(hsl2rgb(args));
};
hsv2rgb = function hsv2rgb(hsv) {
    var h = hsv[0] / 60, s = hsv[1] / 100, v = hsv[2] / 100, hi = Math.floor(h) % 6;
    var f = h - Math.floor(h), p = 255 * v * (1 - s), q = 255 * v * (1 - s * f), t = 255 * v * (1 - s * (1 - f)), v = 255 * v;
    switch (hi) {
    case 0:
        return [
            v,
            t,
            p
        ];
    case 1:
        return [
            q,
            v,
            p
        ];
    case 2:
        return [
            p,
            v,
            t
        ];
    case 3:
        return [
            p,
            q,
            v
        ];
    case 4:
        return [
            t,
            p,
            v
        ];
    case 5:
        return [
            v,
            p,
            q
        ];
    }
};
hsv2hsl = function hsv2hsl(hsv) {
    var h = hsv[0], s = hsv[1] / 100, v = hsv[2] / 100, sl, l;
    l = (2 - s) * v;
    sl = s * v;
    sl /= l <= 1 ? l : 2 - l;
    sl = sl || 0;
    l /= 2;
    return [
        h,
        sl * 100,
        l * 100
    ];
};
hsv2hwb = function hsv2hwb(args) {
    return rgb2hwb(hsv2rgb(args));
};
hsv2cmyk = function hsv2cmyk(args) {
    return rgb2cmyk(hsv2rgb(args));
};
hsv2keyword = function hsv2keyword(args) {
    return rgb2keyword(hsv2rgb(args));
};
hwb2rgb = function hwb2rgb(hwb) {
    var h = hwb[0] / 360, wh = hwb[1] / 100, bl = hwb[2] / 100, ratio = wh + bl, i, v, f, n;
    if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) != 0) {
        f = 1 - f;
    }
    n = wh + f * (v - wh);
    switch (i) {
    case 6:
    case 0:
        r = v;
        g = n;
        b = wh;
        break;
    case 1:
        r = n;
        g = v;
        b = wh;
        break;
    case 2:
        r = wh;
        g = v;
        b = n;
        break;
    case 3:
        r = wh;
        g = n;
        b = v;
        break;
    case 4:
        r = n;
        g = wh;
        b = v;
        break;
    case 5:
        r = v;
        g = wh;
        b = n;
        break;
    default:
        r = v;
        g = n;
        b = wh;
        break;
    }
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
hwb2hsl = function hwb2hsl(args) {
    return rgb2hsl(hwb2rgb(args));
};
hwb2hsv = function hwb2hsv(args) {
    return rgb2hsv(hwb2rgb(args));
};
hwb2cmyk = function hwb2cmyk(args) {
    return rgb2cmyk(hwb2rgb(args));
};
hwb2keyword = function hwb2keyword(args) {
    return rgb2keyword(hwb2rgb(args));
};
cmyk2rgb = function cmyk2rgb(cmyk) {
    var c = cmyk[0] / 100, m = cmyk[1] / 100, y = cmyk[2] / 100, k = cmyk[3] / 100, r, g, b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
cmyk2hsl = function cmyk2hsl(args) {
    return rgb2hsl(cmyk2rgb(args));
};
cmyk2hsv = function cmyk2hsv(args) {
    return rgb2hsv(cmyk2rgb(args));
};
cmyk2hwb = function cmyk2hwb(args) {
    return rgb2hwb(cmyk2rgb(args));
};
cmyk2keyword = function cmyk2keyword(args) {
    return rgb2keyword(cmyk2rgb(args));
};
xyz2rgb = function xyz2rgb(xyz) {
    var x = xyz[0] / 100, y = xyz[1] / 100, z = xyz[2] / 100, r, g, b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r = r * 12.92;
    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g = g * 12.92;
    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b = b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
xyz2lab = function xyz2lab(xyz) {
    var x = xyz[0], y = xyz[1], z = xyz[2], l, a, b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [
        l,
        a,
        b
    ];
};
xyz2lch = function xyz2lch(args) {
    return lab2lch(xyz2lab(args));
};
lab2xyz = function lab2xyz(lab) {
    var l = lab[0], a = lab[1], b = lab[2], x, y, z, y2;
    if (l <= 8) {
        y = l * 100 / 903.3;
        y2 = 7.787 * (y / 100) + 16 / 116;
    } else {
        y = 100 * Math.pow((l + 16) / 116, 3);
        y2 = Math.pow(y / 100, 1 / 3);
    }
    x = x / 95.047 <= 0.008856 ? x = 95.047 * (a / 500 + y2 - 16 / 116) / 7.787 : 95.047 * Math.pow(a / 500 + y2, 3);
    z = z / 108.883 <= 0.008859 ? z = 108.883 * (y2 - b / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(y2 - b / 200, 3);
    return [
        x,
        y,
        z
    ];
};
lab2lch = function lab2lch(lab) {
    var l = lab[0], a = lab[1], b = lab[2], hr, h, c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
        h += 360;
    }
    c = Math.sqrt(a * a + b * b);
    return [
        l,
        c,
        h
    ];
};
lab2rgb = function lab2rgb(args) {
    return xyz2rgb(lab2xyz(args));
};
lch2lab = function lch2lab(lch) {
    var l = lch[0], c = lch[1], h = lch[2], a, b, hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [
        l,
        a,
        b
    ];
};
lch2xyz = function lch2xyz(args) {
    return lab2xyz(lch2lab(args));
};
lch2rgb = function lch2rgb(args) {
    return lab2rgb(lch2lab(args));
};
keyword2rgb = function keyword2rgb(keyword) {
    return cssKeywords[keyword];
};
keyword2hsl = function keyword2hsl(args) {
    return rgb2hsl(keyword2rgb(args));
};
keyword2hsv = function keyword2hsv(args) {
    return rgb2hsv(keyword2rgb(args));
};
keyword2hwb = function keyword2hwb(args) {
    return rgb2hwb(keyword2rgb(args));
};
keyword2cmyk = function keyword2cmyk(args) {
    return rgb2cmyk(keyword2rgb(args));
};
keyword2lab = function keyword2lab(args) {
    return rgb2lab(keyword2rgb(args));
};
keyword2xyz = function keyword2xyz(args) {
    return rgb2xyz(keyword2rgb(args));
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    rgb2hsl = ($__.fs.rgb2hsl_64 = function rgb2hsl(rgb) {
var vvv_return, vvv_switch, r, g, b, min, max, delta, h, s, l;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgb = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = rgb[0] / 255;
g = rgb[1] / 255;
b = rgb[2] / 255;
min = Math.min(r, g, b);
max = Math.max(r, g, b);
delta = max - min;
if (max == min)
    h = 0;
else if (r == max)
    h = (g - b) / delta;
else if (g == max)
    h = 2 + (b - r) / delta;
else if (b == max)
    h = 4 + (r - g) / delta;
h = Math.min(h * 60, 360);
if (h < 0)
    h += 360;
l = (min + max) / 2;
if (max == min)
    s = 0;
else if (l <= 0.5)
    s = delta / (max + min);
else
    s = delta / (2 - max - min);
return [
    h,
    s * 100,
    l * 100
];});
    rgb2hsv = ($__.fs.rgb2hsv_65 = function rgb2hsv(rgb) {
var vvv_return, vvv_switch, r, g, b, min, max, delta, h, s, v;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgb = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = rgb[0];
g = rgb[1];
b = rgb[2];
min = Math.min(r, g, b);
max = Math.max(r, g, b);
delta = max - min;
if (max == 0)
    s = 0;
else
    s = delta / max * 1000 / 10;
if (max == min)
    h = 0;
else if (r == max)
    h = (g - b) / delta;
else if (g == max)
    h = 2 + (b - r) / delta;
else if (b == max)
    h = 4 + (r - g) / delta;
h = Math.min(h * 60, 360);
if (h < 0)
    h += 360;
v = max / 255 * 1000 / 10;
return [
    h,
    s,
    v
];});
    rgb2hwb = ($__.fs.rgb2hwb_66 = function rgb2hwb(rgb) {
var vvv_return, vvv_switch, r, g, b, h, w;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgb = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = rgb[0];
g = rgb[1];
b = rgb[2];
h = rgb2hsl(rgb)[0];
w = 1 / 255 * Math.min(r, Math.min(g, b));
b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
return [
    h,
    w * 100,
    b * 100
];});
    rgb2cmyk = ($__.fs.rgb2cmyk_67 = function rgb2cmyk(rgb) {
var vvv_return, vvv_switch, r, g, b, c, m, y, k;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgb = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = rgb[0] / 255;
g = rgb[1] / 255;
b = rgb[2] / 255;
k = Math.min(1 - r, 1 - g, 1 - b);
c = (1 - r - k) / (1 - k) || 0;
m = (1 - g - k) / (1 - k) || 0;
y = (1 - b - k) / (1 - k) || 0;
return [
    c * 100,
    m * 100,
    y * 100,
    k * 100
];});
    rgb2keyword = ($__.fs.rgb2keyword_68 = function rgb2keyword(rgb) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgb = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return reverseKeywords[JSON.stringify(rgb)];});
    rgb2xyz = ($__.fs.rgb2xyz_69 = function rgb2xyz(rgb) {
var vvv_return, vvv_switch, r, g, b, x, y, z;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgb = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
r = rgb[0] / 255;
g = rgb[1] / 255;
b = rgb[2] / 255;
r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
x = r * 0.4124 + g * 0.3576 + b * 0.1805;
y = r * 0.2126 + g * 0.7152 + b * 0.0722;
z = r * 0.0193 + g * 0.1192 + b * 0.9505;
return [
    x * 100,
    y * 100,
    z * 100
];});
    rgb2lab = ($__.fs.rgb2lab_70 = function rgb2lab(rgb) {
var vvv_return, vvv_switch, xyz, x, y, z, l, a, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rgb = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
xyz = rgb2xyz(rgb);
x = xyz[0];
y = xyz[1];
z = xyz[2];
x /= 95.047;
y /= 100;
z /= 108.883;
x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
l = 116 * y - 16;
a = 500 * (x - y);
b = 200 * (y - z);
return [
    l,
    a,
    b
];});
    rgb2lch = ($__.fs.rgb2lch_71 = function rgb2lch(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return lab2lch(rgb2lab(args));});
    hsl2rgb = ($__.fs.hsl2rgb_72 = function hsl2rgb(hsl) {
var vvv_return, vvv_switch, h, s, l, t1, t2, t3, rgb, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hsl = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hsl[0] / 360;
s = hsl[1] / 100;
l = hsl[2] / 100;
if (s == 0) {
    val = l * 255;
    return [
        val,
        val,
        val
    ];
}
if (l < 0.5)
    t2 = l * (1 + s);
else
    t2 = l + s - l * s;
t1 = 2 * l - t2;
rgb = [
    0,
    0,
    0
];
for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * -(i - 1);
    t3 < 0 && t3++;
    t3 > 1 && t3--;
    if (6 * t3 < 1)
        val = t1 + (t2 - t1) * 6 * t3;
    else if (2 * t3 < 1)
        val = t2;
    else if (3 * t3 < 2)
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    else
        val = t1;
    rgb[i] = val * 255;
}
return rgb;});
    hsl2hsv = ($__.fs.hsl2hsv_73 = function hsl2hsv(hsl) {
var vvv_return, vvv_switch, h, s, l, sv, v;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hsl = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hsl[0];
s = hsl[1] / 100;
l = hsl[2] / 100;
if (l === 0) {
    return [
        0,
        0,
        0
    ];
}
l *= 2;
s *= l <= 1 ? l : 2 - l;
v = (l + s) / 2;
sv = 2 * s / (l + s);
return [
    h,
    sv * 100,
    v * 100
];});
    hsl2hwb = ($__.fs.hsl2hwb_74 = function hsl2hwb(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2hwb(hsl2rgb(args));});
    hsl2cmyk = ($__.fs.hsl2cmyk_75 = function hsl2cmyk(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2cmyk(hsl2rgb(args));});
    hsl2keyword = ($__.fs.hsl2keyword_76 = function hsl2keyword(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2keyword(hsl2rgb(args));});
    hsv2rgb = ($__.fs.hsv2rgb_77 = function hsv2rgb(hsv) {
var vvv_return, vvv_switch, h, s, v, hi, f, p, q, t;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hsv = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hsv[0] / 60;
s = hsv[1] / 100;
v = hsv[2] / 100;
hi = Math.floor(h) % 6;
f = h - Math.floor(h);
p = 255 * v * (1 - s);
q = 255 * v * (1 - s * f);
t = 255 * v * (1 - s * (1 - f));
v = 255 * v;
switch (hi) {
case 0:
    return [
        v,
        t,
        p
    ];
case 1:
    return [
        q,
        v,
        p
    ];
case 2:
    return [
        p,
        v,
        t
    ];
case 3:
    return [
        p,
        q,
        v
    ];
case 4:
    return [
        t,
        p,
        v
    ];
case 5:
    return [
        v,
        p,
        q
    ];
}});
    hsv2hsl = ($__.fs.hsv2hsl_78 = function hsv2hsl(hsv) {
var vvv_return, vvv_switch, h, s, v, sl, l;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hsv = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hsv[0];
s = hsv[1] / 100;
v = hsv[2] / 100;
l = (2 - s) * v;
sl = s * v;
sl /= l <= 1 ? l : 2 - l;
sl = sl || 0;
l /= 2;
return [
    h,
    sl * 100,
    l * 100
];});
    hsv2hwb = ($__.fs.hsv2hwb_79 = function hsv2hwb(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2hwb(hsv2rgb(args));});
    hsv2cmyk = ($__.fs.hsv2cmyk_80 = function hsv2cmyk(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2cmyk(hsv2rgb(args));});
    hsv2keyword = ($__.fs.hsv2keyword_81 = function hsv2keyword(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2keyword(hsv2rgb(args));});
    hwb2rgb = ($__.fs.hwb2rgb_82 = function hwb2rgb(hwb) {
var vvv_return, vvv_switch, h, wh, bl, ratio, i, v, f, n;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
hwb = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
h = hwb[0] / 360;
wh = hwb[1] / 100;
bl = hwb[2] / 100;
ratio = wh + bl;
if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
}
i = Math.floor(6 * h);
v = 1 - bl;
f = 6 * h - i;
if ((i & 1) != 0) {
    f = 1 - f;
}
n = wh + f * (v - wh);
switch (i) {
case 6:
case 0:
    r = v;
    g = n;
    b = wh;
    break;
case 1:
    r = n;
    g = v;
    b = wh;
    break;
case 2:
    r = wh;
    g = v;
    b = n;
    break;
case 3:
    r = wh;
    g = n;
    b = v;
    break;
case 4:
    r = n;
    g = wh;
    b = v;
    break;
case 5:
    r = v;
    g = wh;
    b = n;
    break;
default:
    r = v;
    g = n;
    b = wh;
    break;
}
return [
    r * 255,
    g * 255,
    b * 255
];});
    hwb2hsl = ($__.fs.hwb2hsl_83 = function hwb2hsl(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2hsl(hwb2rgb(args));});
    hwb2hsv = ($__.fs.hwb2hsv_84 = function hwb2hsv(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2hsv(hwb2rgb(args));});
    hwb2cmyk = ($__.fs.hwb2cmyk_85 = function hwb2cmyk(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2cmyk(hwb2rgb(args));});
    hwb2keyword = ($__.fs.hwb2keyword_86 = function hwb2keyword(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2keyword(hwb2rgb(args));});
    cmyk2rgb = ($__.fs.cmyk2rgb_87 = function cmyk2rgb(cmyk) {
var vvv_return, vvv_switch, c, m, y, k, r, g, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
cmyk = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
c = cmyk[0] / 100;
m = cmyk[1] / 100;
y = cmyk[2] / 100;
k = cmyk[3] / 100;
r = 1 - Math.min(1, c * (1 - k) + k);
g = 1 - Math.min(1, m * (1 - k) + k);
b = 1 - Math.min(1, y * (1 - k) + k);
return [
    r * 255,
    g * 255,
    b * 255
];});
    cmyk2hsl = ($__.fs.cmyk2hsl_88 = function cmyk2hsl(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2hsl(cmyk2rgb(args));});
    cmyk2hsv = ($__.fs.cmyk2hsv_89 = function cmyk2hsv(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2hsv(cmyk2rgb(args));});
    cmyk2hwb = ($__.fs.cmyk2hwb_90 = function cmyk2hwb(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2hwb(cmyk2rgb(args));});
    cmyk2keyword = ($__.fs.cmyk2keyword_91 = function cmyk2keyword(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2keyword(cmyk2rgb(args));});
    xyz2rgb = ($__.fs.xyz2rgb_92 = function xyz2rgb(xyz) {
var vvv_return, vvv_switch, x, y, z, r, g, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xyz = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = xyz[0] / 100;
y = xyz[1] / 100;
z = xyz[2] / 100;
r = x * 3.2406 + y * -1.5372 + z * -0.4986;
g = x * -0.9689 + y * 1.8758 + z * 0.0415;
b = x * 0.0557 + y * -0.204 + z * 1.057;
r = r > 0.0031308 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r = r * 12.92;
g = g > 0.0031308 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g = g * 12.92;
b = b > 0.0031308 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b = b * 12.92;
r = Math.min(Math.max(0, r), 1);
g = Math.min(Math.max(0, g), 1);
b = Math.min(Math.max(0, b), 1);
return [
    r * 255,
    g * 255,
    b * 255
];});
    xyz2lab = ($__.fs.xyz2lab_93 = function xyz2lab(xyz) {
var vvv_return, vvv_switch, x, y, z, l, a, b;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
xyz = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = xyz[0];
y = xyz[1];
z = xyz[2];
x /= 95.047;
y /= 100;
z /= 108.883;
x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
l = 116 * y - 16;
a = 500 * (x - y);
b = 200 * (y - z);
return [
    l,
    a,
    b
];});
    xyz2lch = ($__.fs.xyz2lch_94 = function xyz2lch(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return lab2lch(xyz2lab(args));});
    lab2xyz = ($__.fs.lab2xyz_95 = function lab2xyz(lab) {
var vvv_return, vvv_switch, l, a, b, x, y, z, y2;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lab = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
l = lab[0];
a = lab[1];
b = lab[2];
if (l <= 8) {
    y = l * 100 / 903.3;
    y2 = 7.787 * (y / 100) + 16 / 116;
} else {
    y = 100 * Math.pow((l + 16) / 116, 3);
    y2 = Math.pow(y / 100, 1 / 3);
}
x = x / 95.047 <= 0.008856 ? x = 95.047 * (a / 500 + y2 - 16 / 116) / 7.787 : 95.047 * Math.pow(a / 500 + y2, 3);
z = z / 108.883 <= 0.008859 ? z = 108.883 * (y2 - b / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(y2 - b / 200, 3);
return [
    x,
    y,
    z
];});
    lab2lch = ($__.fs.lab2lch_96 = function lab2lch(lab) {
var vvv_return, vvv_switch, l, a, b, hr, h, c;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lab = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
l = lab[0];
a = lab[1];
b = lab[2];
hr = Math.atan2(b, a);
h = hr * 360 / 2 / Math.PI;
if (h < 0) {
    h += 360;
}
c = Math.sqrt(a * a + b * b);
return [
    l,
    c,
    h
];});
    lab2rgb = ($__.fs.lab2rgb_97 = function lab2rgb(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return xyz2rgb(lab2xyz(args));});
    lch2lab = ($__.fs.lch2lab_98 = function lch2lab(lch) {
var vvv_return, vvv_switch, l, c, h, a, b, hr;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
lch = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
l = lch[0];
c = lch[1];
h = lch[2];
hr = h / 360 * 2 * Math.PI;
a = c * Math.cos(hr);
b = c * Math.sin(hr);
return [
    l,
    a,
    b
];});
    lch2xyz = ($__.fs.lch2xyz_99 = function lch2xyz(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return lab2xyz(lch2lab(args));});
    lch2rgb = ($__.fs.lch2rgb_100 = function lch2rgb(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return lab2rgb(lch2lab(args));});
    keyword2rgb = ($__.fs.keyword2rgb_101 = function keyword2rgb(keyword) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
keyword = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return cssKeywords[keyword];});
    keyword2hsl = ($__.fs.keyword2hsl_102 = function keyword2hsl(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2hsl(keyword2rgb(args));});
    keyword2hsv = ($__.fs.keyword2hsv_103 = function keyword2hsv(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2hsv(keyword2rgb(args));});
    keyword2hwb = ($__.fs.keyword2hwb_104 = function keyword2hwb(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2hwb(keyword2rgb(args));});
    keyword2cmyk = ($__.fs.keyword2cmyk_105 = function keyword2cmyk(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2cmyk(keyword2rgb(args));});
    keyword2lab = ($__.fs.keyword2lab_106 = function keyword2lab(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2lab(keyword2rgb(args));});
    keyword2xyz = ($__.fs.keyword2xyz_107 = function keyword2xyz(args) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
args = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return rgb2xyz(keyword2rgb(args));});
    (module, $__.os.oid65).exports = $__.os.oid66 = {
        'rgb2hsl': rgb2hsl,
        'rgb2hsv': rgb2hsv,
        'rgb2hwb': rgb2hwb,
        'rgb2cmyk': rgb2cmyk,
        'rgb2keyword': rgb2keyword,
        'rgb2xyz': rgb2xyz,
        'rgb2lab': rgb2lab,
        'rgb2lch': rgb2lch,
        'hsl2rgb': hsl2rgb,
        'hsl2hsv': hsl2hsv,
        'hsl2hwb': hsl2hwb,
        'hsl2cmyk': hsl2cmyk,
        'hsl2keyword': hsl2keyword,
        'hsv2rgb': hsv2rgb,
        'hsv2hsl': hsv2hsl,
        'hsv2hwb': hsv2hwb,
        'hsv2cmyk': hsv2cmyk,
        'hsv2keyword': hsv2keyword,
        'hwb2rgb': hwb2rgb,
        'hwb2hsl': hwb2hsl,
        'hwb2hsv': hwb2hsv,
        'hwb2cmyk': hwb2cmyk,
        'hwb2keyword': hwb2keyword,
        'cmyk2rgb': cmyk2rgb,
        'cmyk2hsl': cmyk2hsl,
        'cmyk2hsv': cmyk2hsv,
        'cmyk2hwb': cmyk2hwb,
        'cmyk2keyword': cmyk2keyword,
        'keyword2rgb': keyword2rgb,
        'keyword2hsl': keyword2hsl,
        'keyword2hsv': keyword2hsv,
        'keyword2hwb': keyword2hwb,
        'keyword2cmyk': keyword2cmyk,
        'keyword2lab': keyword2lab,
        'keyword2xyz': keyword2xyz,
        'xyz2rgb': xyz2rgb,
        'xyz2lab': xyz2lab,
        'xyz2lch': xyz2lch,
        'lab2xyz': lab2xyz,
        'lab2rgb': lab2rgb,
        'lab2lch': lab2lch,
        'lch2lab': lch2lab,
        'lch2xyz': lch2xyz,
        'lch2rgb': lch2rgb
    };
    cssKeywords = $__.os.oid67 = {
        'aliceblue': [
            240,
            248,
            255
        ],
        'antiquewhite': [
            250,
            235,
            215
        ],
        'aqua': [
            0,
            255,
            255
        ],
        'aquamarine': [
            127,
            255,
            212
        ],
        'azure': [
            240,
            255,
            255
        ],
        'beige': [
            245,
            245,
            220
        ],
        'bisque': [
            255,
            228,
            196
        ],
        'black': [
            0,
            0,
            0
        ],
        'blanchedalmond': [
            255,
            235,
            205
        ],
        'blue': [
            0,
            0,
            255
        ],
        'blueviolet': [
            138,
            43,
            226
        ],
        'brown': [
            165,
            42,
            42
        ],
        'burlywood': [
            222,
            184,
            135
        ],
        'cadetblue': [
            95,
            158,
            160
        ],
        'chartreuse': [
            127,
            255,
            0
        ],
        'chocolate': [
            210,
            105,
            30
        ],
        'coral': [
            255,
            127,
            80
        ],
        'cornflowerblue': [
            100,
            149,
            237
        ],
        'cornsilk': [
            255,
            248,
            220
        ],
        'crimson': [
            220,
            20,
            60
        ],
        'cyan': [
            0,
            255,
            255
        ],
        'darkblue': [
            0,
            0,
            139
        ],
        'darkcyan': [
            0,
            139,
            139
        ],
        'darkgoldenrod': [
            184,
            134,
            11
        ],
        'darkgray': [
            169,
            169,
            169
        ],
        'darkgreen': [
            0,
            100,
            0
        ],
        'darkgrey': [
            169,
            169,
            169
        ],
        'darkkhaki': [
            189,
            183,
            107
        ],
        'darkmagenta': [
            139,
            0,
            139
        ],
        'darkolivegreen': [
            85,
            107,
            47
        ],
        'darkorange': [
            255,
            140,
            0
        ],
        'darkorchid': [
            153,
            50,
            204
        ],
        'darkred': [
            139,
            0,
            0
        ],
        'darksalmon': [
            233,
            150,
            122
        ],
        'darkseagreen': [
            143,
            188,
            143
        ],
        'darkslateblue': [
            72,
            61,
            139
        ],
        'darkslategray': [
            47,
            79,
            79
        ],
        'darkslategrey': [
            47,
            79,
            79
        ],
        'darkturquoise': [
            0,
            206,
            209
        ],
        'darkviolet': [
            148,
            0,
            211
        ],
        'deeppink': [
            255,
            20,
            147
        ],
        'deepskyblue': [
            0,
            191,
            255
        ],
        'dimgray': [
            105,
            105,
            105
        ],
        'dimgrey': [
            105,
            105,
            105
        ],
        'dodgerblue': [
            30,
            144,
            255
        ],
        'firebrick': [
            178,
            34,
            34
        ],
        'floralwhite': [
            255,
            250,
            240
        ],
        'forestgreen': [
            34,
            139,
            34
        ],
        'fuchsia': [
            255,
            0,
            255
        ],
        'gainsboro': [
            220,
            220,
            220
        ],
        'ghostwhite': [
            248,
            248,
            255
        ],
        'gold': [
            255,
            215,
            0
        ],
        'goldenrod': [
            218,
            165,
            32
        ],
        'gray': [
            128,
            128,
            128
        ],
        'green': [
            0,
            128,
            0
        ],
        'greenyellow': [
            173,
            255,
            47
        ],
        'grey': [
            128,
            128,
            128
        ],
        'honeydew': [
            240,
            255,
            240
        ],
        'hotpink': [
            255,
            105,
            180
        ],
        'indianred': [
            205,
            92,
            92
        ],
        'indigo': [
            75,
            0,
            130
        ],
        'ivory': [
            255,
            255,
            240
        ],
        'khaki': [
            240,
            230,
            140
        ],
        'lavender': [
            230,
            230,
            250
        ],
        'lavenderblush': [
            255,
            240,
            245
        ],
        'lawngreen': [
            124,
            252,
            0
        ],
        'lemonchiffon': [
            255,
            250,
            205
        ],
        'lightblue': [
            173,
            216,
            230
        ],
        'lightcoral': [
            240,
            128,
            128
        ],
        'lightcyan': [
            224,
            255,
            255
        ],
        'lightgoldenrodyellow': [
            250,
            250,
            210
        ],
        'lightgray': [
            211,
            211,
            211
        ],
        'lightgreen': [
            144,
            238,
            144
        ],
        'lightgrey': [
            211,
            211,
            211
        ],
        'lightpink': [
            255,
            182,
            193
        ],
        'lightsalmon': [
            255,
            160,
            122
        ],
        'lightseagreen': [
            32,
            178,
            170
        ],
        'lightskyblue': [
            135,
            206,
            250
        ],
        'lightslategray': [
            119,
            136,
            153
        ],
        'lightslategrey': [
            119,
            136,
            153
        ],
        'lightsteelblue': [
            176,
            196,
            222
        ],
        'lightyellow': [
            255,
            255,
            224
        ],
        'lime': [
            0,
            255,
            0
        ],
        'limegreen': [
            50,
            205,
            50
        ],
        'linen': [
            250,
            240,
            230
        ],
        'magenta': [
            255,
            0,
            255
        ],
        'maroon': [
            128,
            0,
            0
        ],
        'mediumaquamarine': [
            102,
            205,
            170
        ],
        'mediumblue': [
            0,
            0,
            205
        ],
        'mediumorchid': [
            186,
            85,
            211
        ],
        'mediumpurple': [
            147,
            112,
            219
        ],
        'mediumseagreen': [
            60,
            179,
            113
        ],
        'mediumslateblue': [
            123,
            104,
            238
        ],
        'mediumspringgreen': [
            0,
            250,
            154
        ],
        'mediumturquoise': [
            72,
            209,
            204
        ],
        'mediumvioletred': [
            199,
            21,
            133
        ],
        'midnightblue': [
            25,
            25,
            112
        ],
        'mintcream': [
            245,
            255,
            250
        ],
        'mistyrose': [
            255,
            228,
            225
        ],
        'moccasin': [
            255,
            228,
            181
        ],
        'navajowhite': [
            255,
            222,
            173
        ],
        'navy': [
            0,
            0,
            128
        ],
        'oldlace': [
            253,
            245,
            230
        ],
        'olive': [
            128,
            128,
            0
        ],
        'olivedrab': [
            107,
            142,
            35
        ],
        'orange': [
            255,
            165,
            0
        ],
        'orangered': [
            255,
            69,
            0
        ],
        'orchid': [
            218,
            112,
            214
        ],
        'palegoldenrod': [
            238,
            232,
            170
        ],
        'palegreen': [
            152,
            251,
            152
        ],
        'paleturquoise': [
            175,
            238,
            238
        ],
        'palevioletred': [
            219,
            112,
            147
        ],
        'papayawhip': [
            255,
            239,
            213
        ],
        'peachpuff': [
            255,
            218,
            185
        ],
        'peru': [
            205,
            133,
            63
        ],
        'pink': [
            255,
            192,
            203
        ],
        'plum': [
            221,
            160,
            221
        ],
        'powderblue': [
            176,
            224,
            230
        ],
        'purple': [
            128,
            0,
            128
        ],
        'rebeccapurple': [
            102,
            51,
            153
        ],
        'red': [
            255,
            0,
            0
        ],
        'rosybrown': [
            188,
            143,
            143
        ],
        'royalblue': [
            65,
            105,
            225
        ],
        'saddlebrown': [
            139,
            69,
            19
        ],
        'salmon': [
            250,
            128,
            114
        ],
        'sandybrown': [
            244,
            164,
            96
        ],
        'seagreen': [
            46,
            139,
            87
        ],
        'seashell': [
            255,
            245,
            238
        ],
        'sienna': [
            160,
            82,
            45
        ],
        'silver': [
            192,
            192,
            192
        ],
        'skyblue': [
            135,
            206,
            235
        ],
        'slateblue': [
            106,
            90,
            205
        ],
        'slategray': [
            112,
            128,
            144
        ],
        'slategrey': [
            112,
            128,
            144
        ],
        'snow': [
            255,
            250,
            250
        ],
        'springgreen': [
            0,
            255,
            127
        ],
        'steelblue': [
            70,
            130,
            180
        ],
        'tan': [
            210,
            180,
            140
        ],
        'teal': [
            0,
            128,
            128
        ],
        'thistle': [
            216,
            191,
            216
        ],
        'tomato': [
            255,
            99,
            71
        ],
        'turquoise': [
            64,
            224,
            208
        ],
        'violet': [
            238,
            130,
            238
        ],
        'wheat': [
            245,
            222,
            179
        ],
        'white': [
            255,
            255,
            255
        ],
        'whitesmoke': [
            245,
            245,
            245
        ],
        'yellow': [
            255,
            255,
            0
        ],
        'yellowgreen': [
            154,
            205,
            50
        ]
    };
    reverseKeywords = $__.os.oid68 = {};
    vvv_tmp0 = cssKeywords;
    'aliceblue' in vvv_tmp0;
    key = 'aliceblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'aliceblue'], 'object'))] = key;
    'antiquewhite' in vvv_tmp0;
    key = 'antiquewhite';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'antiquewhite'], 'object'))] = key;
    'aqua' in vvv_tmp0;
    key = 'aqua';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'aqua'], 'object'))] = key;
    'aquamarine' in vvv_tmp0;
    key = 'aquamarine';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'aquamarine'], 'object'))] = key;
    'azure' in vvv_tmp0;
    key = 'azure';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'azure'], 'object'))] = key;
    'beige' in vvv_tmp0;
    key = 'beige';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'beige'], 'object'))] = key;
    'bisque' in vvv_tmp0;
    key = 'bisque';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'bisque'], 'object'))] = key;
    'black' in vvv_tmp0;
    key = 'black';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'black'], 'object'))] = key;
    'blanchedalmond' in vvv_tmp0;
    key = 'blanchedalmond';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'blanchedalmond'], 'object'))] = key;
    'blue' in vvv_tmp0;
    key = 'blue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'blue'], 'object'))] = key;
    'blueviolet' in vvv_tmp0;
    key = 'blueviolet';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'blueviolet'], 'object'))] = key;
    'brown' in vvv_tmp0;
    key = 'brown';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'brown'], 'object'))] = key;
    'burlywood' in vvv_tmp0;
    key = 'burlywood';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'burlywood'], 'object'))] = key;
    'cadetblue' in vvv_tmp0;
    key = 'cadetblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'cadetblue'], 'object'))] = key;
    'chartreuse' in vvv_tmp0;
    key = 'chartreuse';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'chartreuse'], 'object'))] = key;
    'chocolate' in vvv_tmp0;
    key = 'chocolate';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'chocolate'], 'object'))] = key;
    'coral' in vvv_tmp0;
    key = 'coral';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'coral'], 'object'))] = key;
    'cornflowerblue' in vvv_tmp0;
    key = 'cornflowerblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'cornflowerblue'], 'object'))] = key;
    'cornsilk' in vvv_tmp0;
    key = 'cornsilk';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'cornsilk'], 'object'))] = key;
    'crimson' in vvv_tmp0;
    key = 'crimson';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'crimson'], 'object'))] = key;
    'cyan' in vvv_tmp0;
    key = 'cyan';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'cyan'], 'object'))] = key;
    'darkblue' in vvv_tmp0;
    key = 'darkblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkblue'], 'object'))] = key;
    'darkcyan' in vvv_tmp0;
    key = 'darkcyan';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkcyan'], 'object'))] = key;
    'darkgoldenrod' in vvv_tmp0;
    key = 'darkgoldenrod';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkgoldenrod'], 'object'))] = key;
    'darkgray' in vvv_tmp0;
    key = 'darkgray';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkgray'], 'object'))] = key;
    'darkgreen' in vvv_tmp0;
    key = 'darkgreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkgreen'], 'object'))] = key;
    'darkgrey' in vvv_tmp0;
    key = 'darkgrey';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkgrey'], 'object'))] = key;
    'darkkhaki' in vvv_tmp0;
    key = 'darkkhaki';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkkhaki'], 'object'))] = key;
    'darkmagenta' in vvv_tmp0;
    key = 'darkmagenta';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkmagenta'], 'object'))] = key;
    'darkolivegreen' in vvv_tmp0;
    key = 'darkolivegreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkolivegreen'], 'object'))] = key;
    'darkorange' in vvv_tmp0;
    key = 'darkorange';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkorange'], 'object'))] = key;
    'darkorchid' in vvv_tmp0;
    key = 'darkorchid';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkorchid'], 'object'))] = key;
    'darkred' in vvv_tmp0;
    key = 'darkred';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkred'], 'object'))] = key;
    'darksalmon' in vvv_tmp0;
    key = 'darksalmon';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darksalmon'], 'object'))] = key;
    'darkseagreen' in vvv_tmp0;
    key = 'darkseagreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkseagreen'], 'object'))] = key;
    'darkslateblue' in vvv_tmp0;
    key = 'darkslateblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkslateblue'], 'object'))] = key;
    'darkslategray' in vvv_tmp0;
    key = 'darkslategray';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkslategray'], 'object'))] = key;
    'darkslategrey' in vvv_tmp0;
    key = 'darkslategrey';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkslategrey'], 'object'))] = key;
    'darkturquoise' in vvv_tmp0;
    key = 'darkturquoise';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkturquoise'], 'object'))] = key;
    'darkviolet' in vvv_tmp0;
    key = 'darkviolet';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'darkviolet'], 'object'))] = key;
    'deeppink' in vvv_tmp0;
    key = 'deeppink';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'deeppink'], 'object'))] = key;
    'deepskyblue' in vvv_tmp0;
    key = 'deepskyblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'deepskyblue'], 'object'))] = key;
    'dimgray' in vvv_tmp0;
    key = 'dimgray';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'dimgray'], 'object'))] = key;
    'dimgrey' in vvv_tmp0;
    key = 'dimgrey';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'dimgrey'], 'object'))] = key;
    'dodgerblue' in vvv_tmp0;
    key = 'dodgerblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'dodgerblue'], 'object'))] = key;
    'firebrick' in vvv_tmp0;
    key = 'firebrick';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'firebrick'], 'object'))] = key;
    'floralwhite' in vvv_tmp0;
    key = 'floralwhite';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'floralwhite'], 'object'))] = key;
    'forestgreen' in vvv_tmp0;
    key = 'forestgreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'forestgreen'], 'object'))] = key;
    'fuchsia' in vvv_tmp0;
    key = 'fuchsia';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'fuchsia'], 'object'))] = key;
    'gainsboro' in vvv_tmp0;
    key = 'gainsboro';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'gainsboro'], 'object'))] = key;
    'ghostwhite' in vvv_tmp0;
    key = 'ghostwhite';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'ghostwhite'], 'object'))] = key;
    'gold' in vvv_tmp0;
    key = 'gold';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'gold'], 'object'))] = key;
    'goldenrod' in vvv_tmp0;
    key = 'goldenrod';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'goldenrod'], 'object'))] = key;
    'gray' in vvv_tmp0;
    key = 'gray';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'gray'], 'object'))] = key;
    'green' in vvv_tmp0;
    key = 'green';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'green'], 'object'))] = key;
    'greenyellow' in vvv_tmp0;
    key = 'greenyellow';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'greenyellow'], 'object'))] = key;
    'grey' in vvv_tmp0;
    key = 'grey';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'grey'], 'object'))] = key;
    'honeydew' in vvv_tmp0;
    key = 'honeydew';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'honeydew'], 'object'))] = key;
    'hotpink' in vvv_tmp0;
    key = 'hotpink';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'hotpink'], 'object'))] = key;
    'indianred' in vvv_tmp0;
    key = 'indianred';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'indianred'], 'object'))] = key;
    'indigo' in vvv_tmp0;
    key = 'indigo';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'indigo'], 'object'))] = key;
    'ivory' in vvv_tmp0;
    key = 'ivory';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'ivory'], 'object'))] = key;
    'khaki' in vvv_tmp0;
    key = 'khaki';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'khaki'], 'object'))] = key;
    'lavender' in vvv_tmp0;
    key = 'lavender';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lavender'], 'object'))] = key;
    'lavenderblush' in vvv_tmp0;
    key = 'lavenderblush';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lavenderblush'], 'object'))] = key;
    'lawngreen' in vvv_tmp0;
    key = 'lawngreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lawngreen'], 'object'))] = key;
    'lemonchiffon' in vvv_tmp0;
    key = 'lemonchiffon';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lemonchiffon'], 'object'))] = key;
    'lightblue' in vvv_tmp0;
    key = 'lightblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightblue'], 'object'))] = key;
    'lightcoral' in vvv_tmp0;
    key = 'lightcoral';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightcoral'], 'object'))] = key;
    'lightcyan' in vvv_tmp0;
    key = 'lightcyan';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightcyan'], 'object'))] = key;
    'lightgoldenrodyellow' in vvv_tmp0;
    key = 'lightgoldenrodyellow';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightgoldenrodyellow'], 'object'))] = key;
    'lightgray' in vvv_tmp0;
    key = 'lightgray';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightgray'], 'object'))] = key;
    'lightgreen' in vvv_tmp0;
    key = 'lightgreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightgreen'], 'object'))] = key;
    'lightgrey' in vvv_tmp0;
    key = 'lightgrey';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightgrey'], 'object'))] = key;
    'lightpink' in vvv_tmp0;
    key = 'lightpink';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightpink'], 'object'))] = key;
    'lightsalmon' in vvv_tmp0;
    key = 'lightsalmon';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightsalmon'], 'object'))] = key;
    'lightseagreen' in vvv_tmp0;
    key = 'lightseagreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightseagreen'], 'object'))] = key;
    'lightskyblue' in vvv_tmp0;
    key = 'lightskyblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightskyblue'], 'object'))] = key;
    'lightslategray' in vvv_tmp0;
    key = 'lightslategray';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightslategray'], 'object'))] = key;
    'lightslategrey' in vvv_tmp0;
    key = 'lightslategrey';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightslategrey'], 'object'))] = key;
    'lightsteelblue' in vvv_tmp0;
    key = 'lightsteelblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightsteelblue'], 'object'))] = key;
    'lightyellow' in vvv_tmp0;
    key = 'lightyellow';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lightyellow'], 'object'))] = key;
    'lime' in vvv_tmp0;
    key = 'lime';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'lime'], 'object'))] = key;
    'limegreen' in vvv_tmp0;
    key = 'limegreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'limegreen'], 'object'))] = key;
    'linen' in vvv_tmp0;
    key = 'linen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'linen'], 'object'))] = key;
    'magenta' in vvv_tmp0;
    key = 'magenta';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'magenta'], 'object'))] = key;
    'maroon' in vvv_tmp0;
    key = 'maroon';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'maroon'], 'object'))] = key;
    'mediumaquamarine' in vvv_tmp0;
    key = 'mediumaquamarine';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mediumaquamarine'], 'object'))] = key;
    'mediumblue' in vvv_tmp0;
    key = 'mediumblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mediumblue'], 'object'))] = key;
    'mediumorchid' in vvv_tmp0;
    key = 'mediumorchid';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mediumorchid'], 'object'))] = key;
    'mediumpurple' in vvv_tmp0;
    key = 'mediumpurple';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mediumpurple'], 'object'))] = key;
    'mediumseagreen' in vvv_tmp0;
    key = 'mediumseagreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mediumseagreen'], 'object'))] = key;
    'mediumslateblue' in vvv_tmp0;
    key = 'mediumslateblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mediumslateblue'], 'object'))] = key;
    'mediumspringgreen' in vvv_tmp0;
    key = 'mediumspringgreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mediumspringgreen'], 'object'))] = key;
    'mediumturquoise' in vvv_tmp0;
    key = 'mediumturquoise';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mediumturquoise'], 'object'))] = key;
    'mediumvioletred' in vvv_tmp0;
    key = 'mediumvioletred';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mediumvioletred'], 'object'))] = key;
    'midnightblue' in vvv_tmp0;
    key = 'midnightblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'midnightblue'], 'object'))] = key;
    'mintcream' in vvv_tmp0;
    key = 'mintcream';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mintcream'], 'object'))] = key;
    'mistyrose' in vvv_tmp0;
    key = 'mistyrose';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'mistyrose'], 'object'))] = key;
    'moccasin' in vvv_tmp0;
    key = 'moccasin';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'moccasin'], 'object'))] = key;
    'navajowhite' in vvv_tmp0;
    key = 'navajowhite';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'navajowhite'], 'object'))] = key;
    'navy' in vvv_tmp0;
    key = 'navy';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'navy'], 'object'))] = key;
    'oldlace' in vvv_tmp0;
    key = 'oldlace';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'oldlace'], 'object'))] = key;
    'olive' in vvv_tmp0;
    key = 'olive';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'olive'], 'object'))] = key;
    'olivedrab' in vvv_tmp0;
    key = 'olivedrab';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'olivedrab'], 'object'))] = key;
    'orange' in vvv_tmp0;
    key = 'orange';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'orange'], 'object'))] = key;
    'orangered' in vvv_tmp0;
    key = 'orangered';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'orangered'], 'object'))] = key;
    'orchid' in vvv_tmp0;
    key = 'orchid';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'orchid'], 'object'))] = key;
    'palegoldenrod' in vvv_tmp0;
    key = 'palegoldenrod';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'palegoldenrod'], 'object'))] = key;
    'palegreen' in vvv_tmp0;
    key = 'palegreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'palegreen'], 'object'))] = key;
    'paleturquoise' in vvv_tmp0;
    key = 'paleturquoise';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'paleturquoise'], 'object'))] = key;
    'palevioletred' in vvv_tmp0;
    key = 'palevioletred';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'palevioletred'], 'object'))] = key;
    'papayawhip' in vvv_tmp0;
    key = 'papayawhip';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'papayawhip'], 'object'))] = key;
    'peachpuff' in vvv_tmp0;
    key = 'peachpuff';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'peachpuff'], 'object'))] = key;
    'peru' in vvv_tmp0;
    key = 'peru';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'peru'], 'object'))] = key;
    'pink' in vvv_tmp0;
    key = 'pink';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'pink'], 'object'))] = key;
    'plum' in vvv_tmp0;
    key = 'plum';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'plum'], 'object'))] = key;
    'powderblue' in vvv_tmp0;
    key = 'powderblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'powderblue'], 'object'))] = key;
    'purple' in vvv_tmp0;
    key = 'purple';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'purple'], 'object'))] = key;
    'rebeccapurple' in vvv_tmp0;
    key = 'rebeccapurple';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'rebeccapurple'], 'object'))] = key;
    'red' in vvv_tmp0;
    key = 'red';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'red'], 'object'))] = key;
    'rosybrown' in vvv_tmp0;
    key = 'rosybrown';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'rosybrown'], 'object'))] = key;
    'royalblue' in vvv_tmp0;
    key = 'royalblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'royalblue'], 'object'))] = key;
    'saddlebrown' in vvv_tmp0;
    key = 'saddlebrown';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'saddlebrown'], 'object'))] = key;
    'salmon' in vvv_tmp0;
    key = 'salmon';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'salmon'], 'object'))] = key;
    'sandybrown' in vvv_tmp0;
    key = 'sandybrown';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'sandybrown'], 'object'))] = key;
    'seagreen' in vvv_tmp0;
    key = 'seagreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'seagreen'], 'object'))] = key;
    'seashell' in vvv_tmp0;
    key = 'seashell';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'seashell'], 'object'))] = key;
    'sienna' in vvv_tmp0;
    key = 'sienna';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'sienna'], 'object'))] = key;
    'silver' in vvv_tmp0;
    key = 'silver';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'silver'], 'object'))] = key;
    'skyblue' in vvv_tmp0;
    key = 'skyblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'skyblue'], 'object'))] = key;
    'slateblue' in vvv_tmp0;
    key = 'slateblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'slateblue'], 'object'))] = key;
    'slategray' in vvv_tmp0;
    key = 'slategray';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'slategray'], 'object'))] = key;
    'slategrey' in vvv_tmp0;
    key = 'slategrey';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'slategrey'], 'object'))] = key;
    'snow' in vvv_tmp0;
    key = 'snow';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'snow'], 'object'))] = key;
    'springgreen' in vvv_tmp0;
    key = 'springgreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'springgreen'], 'object'))] = key;
    'steelblue' in vvv_tmp0;
    key = 'steelblue';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'steelblue'], 'object'))] = key;
    'tan' in vvv_tmp0;
    key = 'tan';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'tan'], 'object'))] = key;
    'teal' in vvv_tmp0;
    key = 'teal';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'teal'], 'object'))] = key;
    'thistle' in vvv_tmp0;
    key = 'thistle';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'thistle'], 'object'))] = key;
    'tomato' in vvv_tmp0;
    key = 'tomato';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'tomato'], 'object'))] = key;
    'turquoise' in vvv_tmp0;
    key = 'turquoise';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'turquoise'], 'object'))] = key;
    'violet' in vvv_tmp0;
    key = 'violet';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'violet'], 'object'))] = key;
    'wheat' in vvv_tmp0;
    key = 'wheat';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'wheat'], 'object'))] = key;
    'white' in vvv_tmp0;
    key = 'white';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'white'], 'object'))] = key;
    'whitesmoke' in vvv_tmp0;
    key = 'whitesmoke';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'whitesmoke'], 'object'))] = key;
    'yellow' in vvv_tmp0;
    key = 'yellow';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'yellow'], 'object'))] = key;
    'yellowgreen' in vvv_tmp0;
    key = 'yellowgreen';
    (reverseKeywords, $__.os.oid68)[JSON['stringify'](TAJS_restrictToType((cssKeywords, $__.os.oid67)[key, 'yellowgreen'], 'object'))] = key;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = {
    rgb2hsl: rgb2hsl,
    rgb2hsv: rgb2hsv,
    rgb2hwb: rgb2hwb,
    rgb2cmyk: rgb2cmyk,
    rgb2keyword: rgb2keyword,
    rgb2xyz: rgb2xyz,
    rgb2lab: rgb2lab,
    rgb2lch: rgb2lch,
    hsl2rgb: hsl2rgb,
    hsl2hsv: hsl2hsv,
    hsl2hwb: hsl2hwb,
    hsl2cmyk: hsl2cmyk,
    hsl2keyword: hsl2keyword,
    hsv2rgb: hsv2rgb,
    hsv2hsl: hsv2hsl,
    hsv2hwb: hsv2hwb,
    hsv2cmyk: hsv2cmyk,
    hsv2keyword: hsv2keyword,
    hwb2rgb: hwb2rgb,
    hwb2hsl: hwb2hsl,
    hwb2hsv: hwb2hsv,
    hwb2cmyk: hwb2cmyk,
    hwb2keyword: hwb2keyword,
    cmyk2rgb: cmyk2rgb,
    cmyk2hsl: cmyk2hsl,
    cmyk2hsv: cmyk2hsv,
    cmyk2hwb: cmyk2hwb,
    cmyk2keyword: cmyk2keyword,
    keyword2rgb: keyword2rgb,
    keyword2hsl: keyword2hsl,
    keyword2hsv: keyword2hsv,
    keyword2hwb: keyword2hwb,
    keyword2cmyk: keyword2cmyk,
    keyword2lab: keyword2lab,
    keyword2xyz: keyword2xyz,
    xyz2rgb: xyz2rgb,
    xyz2lab: xyz2lab,
    xyz2lch: xyz2lch,
    lab2xyz: lab2xyz,
    lab2rgb: lab2rgb,
    lab2lch: lab2lch,
    lch2lab: lch2lab,
    lch2xyz: lch2xyz,
    lch2rgb: lch2rgb
};
cssKeywords = {
    aliceblue: [
        240,
        248,
        255
    ],
    antiquewhite: [
        250,
        235,
        215
    ],
    aqua: [
        0,
        255,
        255
    ],
    aquamarine: [
        127,
        255,
        212
    ],
    azure: [
        240,
        255,
        255
    ],
    beige: [
        245,
        245,
        220
    ],
    bisque: [
        255,
        228,
        196
    ],
    black: [
        0,
        0,
        0
    ],
    blanchedalmond: [
        255,
        235,
        205
    ],
    blue: [
        0,
        0,
        255
    ],
    blueviolet: [
        138,
        43,
        226
    ],
    brown: [
        165,
        42,
        42
    ],
    burlywood: [
        222,
        184,
        135
    ],
    cadetblue: [
        95,
        158,
        160
    ],
    chartreuse: [
        127,
        255,
        0
    ],
    chocolate: [
        210,
        105,
        30
    ],
    coral: [
        255,
        127,
        80
    ],
    cornflowerblue: [
        100,
        149,
        237
    ],
    cornsilk: [
        255,
        248,
        220
    ],
    crimson: [
        220,
        20,
        60
    ],
    cyan: [
        0,
        255,
        255
    ],
    darkblue: [
        0,
        0,
        139
    ],
    darkcyan: [
        0,
        139,
        139
    ],
    darkgoldenrod: [
        184,
        134,
        11
    ],
    darkgray: [
        169,
        169,
        169
    ],
    darkgreen: [
        0,
        100,
        0
    ],
    darkgrey: [
        169,
        169,
        169
    ],
    darkkhaki: [
        189,
        183,
        107
    ],
    darkmagenta: [
        139,
        0,
        139
    ],
    darkolivegreen: [
        85,
        107,
        47
    ],
    darkorange: [
        255,
        140,
        0
    ],
    darkorchid: [
        153,
        50,
        204
    ],
    darkred: [
        139,
        0,
        0
    ],
    darksalmon: [
        233,
        150,
        122
    ],
    darkseagreen: [
        143,
        188,
        143
    ],
    darkslateblue: [
        72,
        61,
        139
    ],
    darkslategray: [
        47,
        79,
        79
    ],
    darkslategrey: [
        47,
        79,
        79
    ],
    darkturquoise: [
        0,
        206,
        209
    ],
    darkviolet: [
        148,
        0,
        211
    ],
    deeppink: [
        255,
        20,
        147
    ],
    deepskyblue: [
        0,
        191,
        255
    ],
    dimgray: [
        105,
        105,
        105
    ],
    dimgrey: [
        105,
        105,
        105
    ],
    dodgerblue: [
        30,
        144,
        255
    ],
    firebrick: [
        178,
        34,
        34
    ],
    floralwhite: [
        255,
        250,
        240
    ],
    forestgreen: [
        34,
        139,
        34
    ],
    fuchsia: [
        255,
        0,
        255
    ],
    gainsboro: [
        220,
        220,
        220
    ],
    ghostwhite: [
        248,
        248,
        255
    ],
    gold: [
        255,
        215,
        0
    ],
    goldenrod: [
        218,
        165,
        32
    ],
    gray: [
        128,
        128,
        128
    ],
    green: [
        0,
        128,
        0
    ],
    greenyellow: [
        173,
        255,
        47
    ],
    grey: [
        128,
        128,
        128
    ],
    honeydew: [
        240,
        255,
        240
    ],
    hotpink: [
        255,
        105,
        180
    ],
    indianred: [
        205,
        92,
        92
    ],
    indigo: [
        75,
        0,
        130
    ],
    ivory: [
        255,
        255,
        240
    ],
    khaki: [
        240,
        230,
        140
    ],
    lavender: [
        230,
        230,
        250
    ],
    lavenderblush: [
        255,
        240,
        245
    ],
    lawngreen: [
        124,
        252,
        0
    ],
    lemonchiffon: [
        255,
        250,
        205
    ],
    lightblue: [
        173,
        216,
        230
    ],
    lightcoral: [
        240,
        128,
        128
    ],
    lightcyan: [
        224,
        255,
        255
    ],
    lightgoldenrodyellow: [
        250,
        250,
        210
    ],
    lightgray: [
        211,
        211,
        211
    ],
    lightgreen: [
        144,
        238,
        144
    ],
    lightgrey: [
        211,
        211,
        211
    ],
    lightpink: [
        255,
        182,
        193
    ],
    lightsalmon: [
        255,
        160,
        122
    ],
    lightseagreen: [
        32,
        178,
        170
    ],
    lightskyblue: [
        135,
        206,
        250
    ],
    lightslategray: [
        119,
        136,
        153
    ],
    lightslategrey: [
        119,
        136,
        153
    ],
    lightsteelblue: [
        176,
        196,
        222
    ],
    lightyellow: [
        255,
        255,
        224
    ],
    lime: [
        0,
        255,
        0
    ],
    limegreen: [
        50,
        205,
        50
    ],
    linen: [
        250,
        240,
        230
    ],
    magenta: [
        255,
        0,
        255
    ],
    maroon: [
        128,
        0,
        0
    ],
    mediumaquamarine: [
        102,
        205,
        170
    ],
    mediumblue: [
        0,
        0,
        205
    ],
    mediumorchid: [
        186,
        85,
        211
    ],
    mediumpurple: [
        147,
        112,
        219
    ],
    mediumseagreen: [
        60,
        179,
        113
    ],
    mediumslateblue: [
        123,
        104,
        238
    ],
    mediumspringgreen: [
        0,
        250,
        154
    ],
    mediumturquoise: [
        72,
        209,
        204
    ],
    mediumvioletred: [
        199,
        21,
        133
    ],
    midnightblue: [
        25,
        25,
        112
    ],
    mintcream: [
        245,
        255,
        250
    ],
    mistyrose: [
        255,
        228,
        225
    ],
    moccasin: [
        255,
        228,
        181
    ],
    navajowhite: [
        255,
        222,
        173
    ],
    navy: [
        0,
        0,
        128
    ],
    oldlace: [
        253,
        245,
        230
    ],
    olive: [
        128,
        128,
        0
    ],
    olivedrab: [
        107,
        142,
        35
    ],
    orange: [
        255,
        165,
        0
    ],
    orangered: [
        255,
        69,
        0
    ],
    orchid: [
        218,
        112,
        214
    ],
    palegoldenrod: [
        238,
        232,
        170
    ],
    palegreen: [
        152,
        251,
        152
    ],
    paleturquoise: [
        175,
        238,
        238
    ],
    palevioletred: [
        219,
        112,
        147
    ],
    papayawhip: [
        255,
        239,
        213
    ],
    peachpuff: [
        255,
        218,
        185
    ],
    peru: [
        205,
        133,
        63
    ],
    pink: [
        255,
        192,
        203
    ],
    plum: [
        221,
        160,
        221
    ],
    powderblue: [
        176,
        224,
        230
    ],
    purple: [
        128,
        0,
        128
    ],
    rebeccapurple: [
        102,
        51,
        153
    ],
    red: [
        255,
        0,
        0
    ],
    rosybrown: [
        188,
        143,
        143
    ],
    royalblue: [
        65,
        105,
        225
    ],
    saddlebrown: [
        139,
        69,
        19
    ],
    salmon: [
        250,
        128,
        114
    ],
    sandybrown: [
        244,
        164,
        96
    ],
    seagreen: [
        46,
        139,
        87
    ],
    seashell: [
        255,
        245,
        238
    ],
    sienna: [
        160,
        82,
        45
    ],
    silver: [
        192,
        192,
        192
    ],
    skyblue: [
        135,
        206,
        235
    ],
    slateblue: [
        106,
        90,
        205
    ],
    slategray: [
        112,
        128,
        144
    ],
    slategrey: [
        112,
        128,
        144
    ],
    snow: [
        255,
        250,
        250
    ],
    springgreen: [
        0,
        255,
        127
    ],
    steelblue: [
        70,
        130,
        180
    ],
    tan: [
        210,
        180,
        140
    ],
    teal: [
        0,
        128,
        128
    ],
    thistle: [
        216,
        191,
        216
    ],
    tomato: [
        255,
        99,
        71
    ],
    turquoise: [
        64,
        224,
        208
    ],
    violet: [
        238,
        130,
        238
    ],
    wheat: [
        245,
        222,
        179
    ],
    white: [
        255,
        255,
        255
    ],
    whitesmoke: [
        245,
        245,
        245
    ],
    yellow: [
        255,
        255,
        0
    ],
    yellowgreen: [
        154,
        205,
        50
    ]
};
reverseKeywords = {};
for (var key in cssKeywords) {
    reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
}}, $__.fs.J$__v7918151485_194_9),
            $__.os.oid3 = {}
        ],
        5: [
            ($__.fs.J$__v7918151485_218_10 = function J$__v7918151485_218(require, module, exports) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, conversions, convert, func, pair, from, to, Converter;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    conversions = (require, $__.fs.J$__v7918151485_3_62)(4, 0, true, $__.uid);
    convert = ($__.fs.J$__v7918151485_196_108 = function J$__v7918151485_196() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return new Converter();});
    vvv_tmp0 = conversions;
    'rgb2hsl' in vvv_tmp0;
    func = 'rgb2hsl';
    convert[func + 'Raw', 'rgb2hslRaw'] = (($__.fs.J$__v7918151485_200_109 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_110 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_109)(func, 0, true, $__.uid);
    pair = function $__lt0(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt0, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'rgb'] = (TAJS_restrictToType(convert[from, 'rgb'], 'undefined'), $__.os.oid69 = {});
    ((convert[from, 'rgb'], $__.os.oid69), $__.os.oid69)[to, 'hsl'] = convert[func, 'rgb2hsl'] = (($__.fs.J$__v7918151485_204_111 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_112 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_111)(func, 0, true, $__.uid);
    'rgb2hsv' in vvv_tmp0;
    func = 'rgb2hsv';
    convert[func + 'Raw', 'rgb2hsvRaw'] = (($__.fs.J$__v7918151485_200_113 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_114 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_113)(func, 0, true, $__.uid);
    pair = function $__lt1(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt1, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'rgb'] = (convert[from, 'rgb'], $__.os.oid69);
    ((convert[from, 'rgb'], $__.os.oid69), $__.os.oid69)[to, 'hsv'] = convert[func, 'rgb2hsv'] = (($__.fs.J$__v7918151485_204_115 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_116 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_115)(func, 0, true, $__.uid);
    'rgb2hwb' in vvv_tmp0;
    func = 'rgb2hwb';
    convert[func + 'Raw', 'rgb2hwbRaw'] = (($__.fs.J$__v7918151485_200_117 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_118 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_117)(func, 0, true, $__.uid);
    pair = function $__lt2(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt2, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'rgb'] = (convert[from, 'rgb'], $__.os.oid69);
    ((convert[from, 'rgb'], $__.os.oid69), $__.os.oid69)[to, 'hwb'] = convert[func, 'rgb2hwb'] = (($__.fs.J$__v7918151485_204_119 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_120 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_119)(func, 0, true, $__.uid);
    'rgb2cmyk' in vvv_tmp0;
    func = 'rgb2cmyk';
    convert[func + 'Raw', 'rgb2cmykRaw'] = (($__.fs.J$__v7918151485_200_121 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_122 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_121)(func, 0, true, $__.uid);
    pair = function $__lt3(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt3, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'rgb'] = (convert[from, 'rgb'], $__.os.oid69);
    ((convert[from, 'rgb'], $__.os.oid69), $__.os.oid69)[to, 'cmyk'] = convert[func, 'rgb2cmyk'] = (($__.fs.J$__v7918151485_204_123 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_124 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_123)(func, 0, true, $__.uid);
    'rgb2keyword' in vvv_tmp0;
    func = 'rgb2keyword';
    convert[func + 'Raw', 'rgb2keywordRaw'] = (($__.fs.J$__v7918151485_200_125 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_126 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_125)(func, 0, true, $__.uid);
    pair = function $__lt4(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt4, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'rgb'] = (convert[from, 'rgb'], $__.os.oid69);
    ((convert[from, 'rgb'], $__.os.oid69), $__.os.oid69)[to, 'keyword'] = convert[func, 'rgb2keyword'] = (($__.fs.J$__v7918151485_204_127 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_128 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_127)(func, 0, true, $__.uid);
    'rgb2xyz' in vvv_tmp0;
    func = 'rgb2xyz';
    convert[func + 'Raw', 'rgb2xyzRaw'] = (($__.fs.J$__v7918151485_200_129 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_130 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_129)(func, 0, true, $__.uid);
    pair = function $__lt5(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt5, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'rgb'] = (convert[from, 'rgb'], $__.os.oid69);
    ((convert[from, 'rgb'], $__.os.oid69), $__.os.oid69)[to, 'xyz'] = convert[func, 'rgb2xyz'] = (($__.fs.J$__v7918151485_204_131 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_132 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_131)(func, 0, true, $__.uid);
    'rgb2lab' in vvv_tmp0;
    func = 'rgb2lab';
    convert[func + 'Raw', 'rgb2labRaw'] = (($__.fs.J$__v7918151485_200_133 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_134 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_133)(func, 0, true, $__.uid);
    pair = function $__lt6(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt6, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'rgb'] = (convert[from, 'rgb'], $__.os.oid69);
    ((convert[from, 'rgb'], $__.os.oid69), $__.os.oid69)[to, 'lab'] = convert[func, 'rgb2lab'] = (($__.fs.J$__v7918151485_204_135 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_136 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_135)(func, 0, true, $__.uid);
    'rgb2lch' in vvv_tmp0;
    func = 'rgb2lch';
    convert[func + 'Raw', 'rgb2lchRaw'] = (($__.fs.J$__v7918151485_200_137 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_138 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_137)(func, 0, true, $__.uid);
    pair = function $__lt7(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt7, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'rgb'] = (convert[from, 'rgb'], $__.os.oid69);
    ((convert[from, 'rgb'], $__.os.oid69), $__.os.oid69)[to, 'lch'] = convert[func, 'rgb2lch'] = (($__.fs.J$__v7918151485_204_139 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_140 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_139)(func, 0, true, $__.uid);
    'hsl2rgb' in vvv_tmp0;
    func = 'hsl2rgb';
    convert[func + 'Raw', 'hsl2rgbRaw'] = (($__.fs.J$__v7918151485_200_141 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_142 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_141)(func, 0, true, $__.uid);
    pair = function $__lt8(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt8, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hsl'] = (TAJS_restrictToType(convert[from, 'hsl'], 'undefined'), $__.os.oid70 = {});
    ((convert[from, 'hsl'], $__.os.oid70), $__.os.oid70)[to, 'rgb'] = convert[func, 'hsl2rgb'] = (($__.fs.J$__v7918151485_204_143 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_144 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_143)(func, 0, true, $__.uid);
    'hsl2hsv' in vvv_tmp0;
    func = 'hsl2hsv';
    convert[func + 'Raw', 'hsl2hsvRaw'] = (($__.fs.J$__v7918151485_200_145 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_146 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_145)(func, 0, true, $__.uid);
    pair = function $__lt9(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt9, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hsl'] = (convert[from, 'hsl'], $__.os.oid70);
    ((convert[from, 'hsl'], $__.os.oid70), $__.os.oid70)[to, 'hsv'] = convert[func, 'hsl2hsv'] = (($__.fs.J$__v7918151485_204_147 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_148 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_147)(func, 0, true, $__.uid);
    'hsl2hwb' in vvv_tmp0;
    func = 'hsl2hwb';
    convert[func + 'Raw', 'hsl2hwbRaw'] = (($__.fs.J$__v7918151485_200_149 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_150 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_149)(func, 0, true, $__.uid);
    pair = function $__lt10(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt10, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hsl'] = (convert[from, 'hsl'], $__.os.oid70);
    ((convert[from, 'hsl'], $__.os.oid70), $__.os.oid70)[to, 'hwb'] = convert[func, 'hsl2hwb'] = (($__.fs.J$__v7918151485_204_151 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_152 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_151)(func, 0, true, $__.uid);
    'hsl2cmyk' in vvv_tmp0;
    func = 'hsl2cmyk';
    convert[func + 'Raw', 'hsl2cmykRaw'] = (($__.fs.J$__v7918151485_200_153 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_154 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_153)(func, 0, true, $__.uid);
    pair = function $__lt11(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt11, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hsl'] = (convert[from, 'hsl'], $__.os.oid70);
    ((convert[from, 'hsl'], $__.os.oid70), $__.os.oid70)[to, 'cmyk'] = convert[func, 'hsl2cmyk'] = (($__.fs.J$__v7918151485_204_155 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_156 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_155)(func, 0, true, $__.uid);
    'hsl2keyword' in vvv_tmp0;
    func = 'hsl2keyword';
    convert[func + 'Raw', 'hsl2keywordRaw'] = (($__.fs.J$__v7918151485_200_157 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_158 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_157)(func, 0, true, $__.uid);
    pair = function $__lt12(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt12, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hsl'] = (convert[from, 'hsl'], $__.os.oid70);
    ((convert[from, 'hsl'], $__.os.oid70), $__.os.oid70)[to, 'keyword'] = convert[func, 'hsl2keyword'] = (($__.fs.J$__v7918151485_204_159 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_160 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_159)(func, 0, true, $__.uid);
    'hsv2rgb' in vvv_tmp0;
    func = 'hsv2rgb';
    convert[func + 'Raw', 'hsv2rgbRaw'] = (($__.fs.J$__v7918151485_200_161 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_162 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_161)(func, 0, true, $__.uid);
    pair = function $__lt13(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt13, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hsv'] = (TAJS_restrictToType(convert[from, 'hsv'], 'undefined'), $__.os.oid71 = {});
    ((convert[from, 'hsv'], $__.os.oid71), $__.os.oid71)[to, 'rgb'] = convert[func, 'hsv2rgb'] = (($__.fs.J$__v7918151485_204_163 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_164 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_163)(func, 0, true, $__.uid);
    'hsv2hsl' in vvv_tmp0;
    func = 'hsv2hsl';
    convert[func + 'Raw', 'hsv2hslRaw'] = (($__.fs.J$__v7918151485_200_165 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_166 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_165)(func, 0, true, $__.uid);
    pair = function $__lt14(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt14, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hsv'] = (convert[from, 'hsv'], $__.os.oid71);
    ((convert[from, 'hsv'], $__.os.oid71), $__.os.oid71)[to, 'hsl'] = convert[func, 'hsv2hsl'] = (($__.fs.J$__v7918151485_204_167 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_168 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_167)(func, 0, true, $__.uid);
    'hsv2hwb' in vvv_tmp0;
    func = 'hsv2hwb';
    convert[func + 'Raw', 'hsv2hwbRaw'] = (($__.fs.J$__v7918151485_200_169 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_170 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_169)(func, 0, true, $__.uid);
    pair = function $__lt15(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt15, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hsv'] = (convert[from, 'hsv'], $__.os.oid71);
    ((convert[from, 'hsv'], $__.os.oid71), $__.os.oid71)[to, 'hwb'] = convert[func, 'hsv2hwb'] = (($__.fs.J$__v7918151485_204_171 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_172 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_171)(func, 0, true, $__.uid);
    'hsv2cmyk' in vvv_tmp0;
    func = 'hsv2cmyk';
    convert[func + 'Raw', 'hsv2cmykRaw'] = (($__.fs.J$__v7918151485_200_173 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_174 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_173)(func, 0, true, $__.uid);
    pair = function $__lt16(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt16, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hsv'] = (convert[from, 'hsv'], $__.os.oid71);
    ((convert[from, 'hsv'], $__.os.oid71), $__.os.oid71)[to, 'cmyk'] = convert[func, 'hsv2cmyk'] = (($__.fs.J$__v7918151485_204_175 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_176 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_175)(func, 0, true, $__.uid);
    'hsv2keyword' in vvv_tmp0;
    func = 'hsv2keyword';
    convert[func + 'Raw', 'hsv2keywordRaw'] = (($__.fs.J$__v7918151485_200_177 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_178 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_177)(func, 0, true, $__.uid);
    pair = function $__lt17(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt17, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hsv'] = (convert[from, 'hsv'], $__.os.oid71);
    ((convert[from, 'hsv'], $__.os.oid71), $__.os.oid71)[to, 'keyword'] = convert[func, 'hsv2keyword'] = (($__.fs.J$__v7918151485_204_179 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_180 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_179)(func, 0, true, $__.uid);
    'hwb2rgb' in vvv_tmp0;
    func = 'hwb2rgb';
    convert[func + 'Raw', 'hwb2rgbRaw'] = (($__.fs.J$__v7918151485_200_181 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_182 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_181)(func, 0, true, $__.uid);
    pair = function $__lt18(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt18, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hwb'] = (TAJS_restrictToType(convert[from, 'hwb'], 'undefined'), $__.os.oid72 = {});
    ((convert[from, 'hwb'], $__.os.oid72), $__.os.oid72)[to, 'rgb'] = convert[func, 'hwb2rgb'] = (($__.fs.J$__v7918151485_204_183 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_184 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_183)(func, 0, true, $__.uid);
    'hwb2hsl' in vvv_tmp0;
    func = 'hwb2hsl';
    convert[func + 'Raw', 'hwb2hslRaw'] = (($__.fs.J$__v7918151485_200_185 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_186 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_185)(func, 0, true, $__.uid);
    pair = function $__lt19(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt19, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hwb'] = (convert[from, 'hwb'], $__.os.oid72);
    ((convert[from, 'hwb'], $__.os.oid72), $__.os.oid72)[to, 'hsl'] = convert[func, 'hwb2hsl'] = (($__.fs.J$__v7918151485_204_187 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_188 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_187)(func, 0, true, $__.uid);
    'hwb2hsv' in vvv_tmp0;
    func = 'hwb2hsv';
    convert[func + 'Raw', 'hwb2hsvRaw'] = (($__.fs.J$__v7918151485_200_189 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_190 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_189)(func, 0, true, $__.uid);
    pair = function $__lt20(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt20, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hwb'] = (convert[from, 'hwb'], $__.os.oid72);
    ((convert[from, 'hwb'], $__.os.oid72), $__.os.oid72)[to, 'hsv'] = convert[func, 'hwb2hsv'] = (($__.fs.J$__v7918151485_204_191 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_192 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_191)(func, 0, true, $__.uid);
    'hwb2cmyk' in vvv_tmp0;
    func = 'hwb2cmyk';
    convert[func + 'Raw', 'hwb2cmykRaw'] = (($__.fs.J$__v7918151485_200_193 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_194 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_193)(func, 0, true, $__.uid);
    pair = function $__lt21(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt21, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hwb'] = (convert[from, 'hwb'], $__.os.oid72);
    ((convert[from, 'hwb'], $__.os.oid72), $__.os.oid72)[to, 'cmyk'] = convert[func, 'hwb2cmyk'] = (($__.fs.J$__v7918151485_204_195 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_196 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_195)(func, 0, true, $__.uid);
    'hwb2keyword' in vvv_tmp0;
    func = 'hwb2keyword';
    convert[func + 'Raw', 'hwb2keywordRaw'] = (($__.fs.J$__v7918151485_200_197 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_198 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_197)(func, 0, true, $__.uid);
    pair = function $__lt22(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt22, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'hwb'] = (convert[from, 'hwb'], $__.os.oid72);
    ((convert[from, 'hwb'], $__.os.oid72), $__.os.oid72)[to, 'keyword'] = convert[func, 'hwb2keyword'] = (($__.fs.J$__v7918151485_204_199 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_200 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_199)(func, 0, true, $__.uid);
    'cmyk2rgb' in vvv_tmp0;
    func = 'cmyk2rgb';
    convert[func + 'Raw', 'cmyk2rgbRaw'] = (($__.fs.J$__v7918151485_200_201 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_202 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_201)(func, 0, true, $__.uid);
    pair = function $__lt23(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt23, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'cmyk'] = (TAJS_restrictToType(convert[from, 'cmyk'], 'undefined'), $__.os.oid73 = {});
    ((convert[from, 'cmyk'], $__.os.oid73), $__.os.oid73)[to, 'rgb'] = convert[func, 'cmyk2rgb'] = (($__.fs.J$__v7918151485_204_203 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_204 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_203)(func, 0, true, $__.uid);
    'cmyk2hsl' in vvv_tmp0;
    func = 'cmyk2hsl';
    convert[func + 'Raw', 'cmyk2hslRaw'] = (($__.fs.J$__v7918151485_200_205 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_206 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_205)(func, 0, true, $__.uid);
    pair = function $__lt24(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt24, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'cmyk'] = (convert[from, 'cmyk'], $__.os.oid73);
    ((convert[from, 'cmyk'], $__.os.oid73), $__.os.oid73)[to, 'hsl'] = convert[func, 'cmyk2hsl'] = (($__.fs.J$__v7918151485_204_207 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_208 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_207)(func, 0, true, $__.uid);
    'cmyk2hsv' in vvv_tmp0;
    func = 'cmyk2hsv';
    convert[func + 'Raw', 'cmyk2hsvRaw'] = (($__.fs.J$__v7918151485_200_209 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_210 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_209)(func, 0, true, $__.uid);
    pair = function $__lt25(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt25, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'cmyk'] = (convert[from, 'cmyk'], $__.os.oid73);
    ((convert[from, 'cmyk'], $__.os.oid73), $__.os.oid73)[to, 'hsv'] = convert[func, 'cmyk2hsv'] = (($__.fs.J$__v7918151485_204_211 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_212 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_211)(func, 0, true, $__.uid);
    'cmyk2hwb' in vvv_tmp0;
    func = 'cmyk2hwb';
    convert[func + 'Raw', 'cmyk2hwbRaw'] = (($__.fs.J$__v7918151485_200_213 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_214 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_213)(func, 0, true, $__.uid);
    pair = function $__lt26(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt26, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'cmyk'] = (convert[from, 'cmyk'], $__.os.oid73);
    ((convert[from, 'cmyk'], $__.os.oid73), $__.os.oid73)[to, 'hwb'] = convert[func, 'cmyk2hwb'] = (($__.fs.J$__v7918151485_204_215 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_216 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_215)(func, 0, true, $__.uid);
    'cmyk2keyword' in vvv_tmp0;
    func = 'cmyk2keyword';
    convert[func + 'Raw', 'cmyk2keywordRaw'] = (($__.fs.J$__v7918151485_200_217 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_218 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_217)(func, 0, true, $__.uid);
    pair = function $__lt27(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt27, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'cmyk'] = (convert[from, 'cmyk'], $__.os.oid73);
    ((convert[from, 'cmyk'], $__.os.oid73), $__.os.oid73)[to, 'keyword'] = convert[func, 'cmyk2keyword'] = (($__.fs.J$__v7918151485_204_219 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_220 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_219)(func, 0, true, $__.uid);
    'keyword2rgb' in vvv_tmp0;
    func = 'keyword2rgb';
    convert[func + 'Raw', 'keyword2rgbRaw'] = (($__.fs.J$__v7918151485_200_221 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_222 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_221)(func, 0, true, $__.uid);
    pair = function $__lt28(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt28, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'keyword'] = (TAJS_restrictToType(convert[from, 'keyword'], 'undefined'), $__.os.oid74 = {});
    ((convert[from, 'keyword'], $__.os.oid74), $__.os.oid74)[to, 'rgb'] = convert[func, 'keyword2rgb'] = (($__.fs.J$__v7918151485_204_223 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_224 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_223)(func, 0, true, $__.uid);
    'keyword2hsl' in vvv_tmp0;
    func = 'keyword2hsl';
    convert[func + 'Raw', 'keyword2hslRaw'] = (($__.fs.J$__v7918151485_200_225 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_226 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_225)(func, 0, true, $__.uid);
    pair = function $__lt29(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt29, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'keyword'] = (convert[from, 'keyword'], $__.os.oid74);
    ((convert[from, 'keyword'], $__.os.oid74), $__.os.oid74)[to, 'hsl'] = convert[func, 'keyword2hsl'] = (($__.fs.J$__v7918151485_204_227 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_228 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_227)(func, 0, true, $__.uid);
    'keyword2hsv' in vvv_tmp0;
    func = 'keyword2hsv';
    convert[func + 'Raw', 'keyword2hsvRaw'] = (($__.fs.J$__v7918151485_200_229 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_230 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_229)(func, 0, true, $__.uid);
    pair = function $__lt30(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt30, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'keyword'] = (convert[from, 'keyword'], $__.os.oid74);
    ((convert[from, 'keyword'], $__.os.oid74), $__.os.oid74)[to, 'hsv'] = convert[func, 'keyword2hsv'] = (($__.fs.J$__v7918151485_204_231 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_232 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_231)(func, 0, true, $__.uid);
    'keyword2hwb' in vvv_tmp0;
    func = 'keyword2hwb';
    convert[func + 'Raw', 'keyword2hwbRaw'] = (($__.fs.J$__v7918151485_200_233 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_234 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_233)(func, 0, true, $__.uid);
    pair = function $__lt31(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt31, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'keyword'] = (convert[from, 'keyword'], $__.os.oid74);
    ((convert[from, 'keyword'], $__.os.oid74), $__.os.oid74)[to, 'hwb'] = convert[func, 'keyword2hwb'] = (($__.fs.J$__v7918151485_204_235 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_236 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_235)(func, 0, true, $__.uid);
    'keyword2cmyk' in vvv_tmp0;
    func = 'keyword2cmyk';
    convert[func + 'Raw', 'keyword2cmykRaw'] = (($__.fs.J$__v7918151485_200_237 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_238 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_237)(func, 0, true, $__.uid);
    pair = function $__lt32(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt32, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'keyword'] = (convert[from, 'keyword'], $__.os.oid74);
    ((convert[from, 'keyword'], $__.os.oid74), $__.os.oid74)[to, 'cmyk'] = convert[func, 'keyword2cmyk'] = (($__.fs.J$__v7918151485_204_239 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_240 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_239)(func, 0, true, $__.uid);
    'keyword2lab' in vvv_tmp0;
    func = 'keyword2lab';
    convert[func + 'Raw', 'keyword2labRaw'] = (($__.fs.J$__v7918151485_200_241 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_242 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_241)(func, 0, true, $__.uid);
    pair = function $__lt33(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt33, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'keyword'] = (convert[from, 'keyword'], $__.os.oid74);
    ((convert[from, 'keyword'], $__.os.oid74), $__.os.oid74)[to, 'lab'] = convert[func, 'keyword2lab'] = (($__.fs.J$__v7918151485_204_243 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_244 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_243)(func, 0, true, $__.uid);
    'keyword2xyz' in vvv_tmp0;
    func = 'keyword2xyz';
    convert[func + 'Raw', 'keyword2xyzRaw'] = (($__.fs.J$__v7918151485_200_245 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_246 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_245)(func, 0, true, $__.uid);
    pair = function $__lt34(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt34, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'keyword'] = (convert[from, 'keyword'], $__.os.oid74);
    ((convert[from, 'keyword'], $__.os.oid74), $__.os.oid74)[to, 'xyz'] = convert[func, 'keyword2xyz'] = (($__.fs.J$__v7918151485_204_247 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_248 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_247)(func, 0, true, $__.uid);
    'xyz2rgb' in vvv_tmp0;
    func = 'xyz2rgb';
    convert[func + 'Raw', 'xyz2rgbRaw'] = (($__.fs.J$__v7918151485_200_249 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_250 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_249)(func, 0, true, $__.uid);
    pair = function $__lt35(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt35, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'xyz'] = (TAJS_restrictToType(convert[from, 'xyz'], 'undefined'), $__.os.oid75 = {});
    ((convert[from, 'xyz'], $__.os.oid75), $__.os.oid75)[to, 'rgb'] = convert[func, 'xyz2rgb'] = (($__.fs.J$__v7918151485_204_251 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_252 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_251)(func, 0, true, $__.uid);
    'xyz2lab' in vvv_tmp0;
    func = 'xyz2lab';
    convert[func + 'Raw', 'xyz2labRaw'] = (($__.fs.J$__v7918151485_200_253 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_254 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_253)(func, 0, true, $__.uid);
    pair = function $__lt36(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt36, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'xyz'] = (convert[from, 'xyz'], $__.os.oid75);
    ((convert[from, 'xyz'], $__.os.oid75), $__.os.oid75)[to, 'lab'] = convert[func, 'xyz2lab'] = (($__.fs.J$__v7918151485_204_255 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_256 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_255)(func, 0, true, $__.uid);
    'xyz2lch' in vvv_tmp0;
    func = 'xyz2lch';
    convert[func + 'Raw', 'xyz2lchRaw'] = (($__.fs.J$__v7918151485_200_257 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_258 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_257)(func, 0, true, $__.uid);
    pair = function $__lt37(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt37, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'xyz'] = (convert[from, 'xyz'], $__.os.oid75);
    ((convert[from, 'xyz'], $__.os.oid75), $__.os.oid75)[to, 'lch'] = convert[func, 'xyz2lch'] = (($__.fs.J$__v7918151485_204_259 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_260 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_259)(func, 0, true, $__.uid);
    'lab2xyz' in vvv_tmp0;
    func = 'lab2xyz';
    convert[func + 'Raw', 'lab2xyzRaw'] = (($__.fs.J$__v7918151485_200_261 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_262 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_261)(func, 0, true, $__.uid);
    pair = function $__lt38(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt38, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'lab'] = (TAJS_restrictToType(convert[from, 'lab'], 'undefined'), $__.os.oid76 = {});
    ((convert[from, 'lab'], $__.os.oid76), $__.os.oid76)[to, 'xyz'] = convert[func, 'lab2xyz'] = (($__.fs.J$__v7918151485_204_263 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_264 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_263)(func, 0, true, $__.uid);
    'lab2rgb' in vvv_tmp0;
    func = 'lab2rgb';
    convert[func + 'Raw', 'lab2rgbRaw'] = (($__.fs.J$__v7918151485_200_265 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_266 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_265)(func, 0, true, $__.uid);
    pair = function $__lt39(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt39, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'lab'] = (convert[from, 'lab'], $__.os.oid76);
    ((convert[from, 'lab'], $__.os.oid76), $__.os.oid76)[to, 'rgb'] = convert[func, 'lab2rgb'] = (($__.fs.J$__v7918151485_204_267 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_268 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_267)(func, 0, true, $__.uid);
    'lab2lch' in vvv_tmp0;
    func = 'lab2lch';
    convert[func + 'Raw', 'lab2lchRaw'] = (($__.fs.J$__v7918151485_200_269 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_270 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_269)(func, 0, true, $__.uid);
    pair = function $__lt40(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt40, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'lab'] = (convert[from, 'lab'], $__.os.oid76);
    ((convert[from, 'lab'], $__.os.oid76), $__.os.oid76)[to, 'lch'] = convert[func, 'lab2lch'] = (($__.fs.J$__v7918151485_204_271 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_272 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_271)(func, 0, true, $__.uid);
    'lch2lab' in vvv_tmp0;
    func = 'lch2lab';
    convert[func + 'Raw', 'lch2labRaw'] = (($__.fs.J$__v7918151485_200_273 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_274 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_273)(func, 0, true, $__.uid);
    pair = function $__lt41(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt41, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'lch'] = (TAJS_restrictToType(convert[from, 'lch'], 'undefined'), $__.os.oid77 = {});
    ((convert[from, 'lch'], $__.os.oid77), $__.os.oid77)[to, 'lab'] = convert[func, 'lch2lab'] = (($__.fs.J$__v7918151485_204_275 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_276 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_275)(func, 0, true, $__.uid);
    'lch2xyz' in vvv_tmp0;
    func = 'lch2xyz';
    convert[func + 'Raw', 'lch2xyzRaw'] = (($__.fs.J$__v7918151485_200_277 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_278 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_277)(func, 0, true, $__.uid);
    pair = function $__lt42(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt42, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'lch'] = (convert[from, 'lch'], $__.os.oid77);
    ((convert[from, 'lch'], $__.os.oid77), $__.os.oid77)[to, 'xyz'] = convert[func, 'lch2xyz'] = (($__.fs.J$__v7918151485_204_279 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_280 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_279)(func, 0, true, $__.uid);
    'lch2rgb' in vvv_tmp0;
    func = 'lch2rgb';
    convert[func + 'Raw', 'lch2rgbRaw'] = (($__.fs.J$__v7918151485_200_281 = function J$__v7918151485_200(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_198_282 = function J$__v7918151485_198(arg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
return conversions[func](arg);});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    return conversions[func](arg);
};}), $__.fs.J$__v7918151485_200_281)(func, 0, true, $__.uid);
    pair = function $__lt43(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt43, -2);
    }(/(\w+)2(\w+)/['exec'](func));
    from = TAJS_restrictToType(pair[1, 1], 'string');
    to = TAJS_restrictToType(pair[2, 2], 'string');
    convert[from, 'lch'] = (convert[from, 'lch'], $__.os.oid77);
    ((convert[from, 'lch'], $__.os.oid77), $__.os.oid77)[to, 'rgb'] = convert[func, 'lch2rgb'] = (($__.fs.J$__v7918151485_204_283 = function J$__v7918151485_204(func) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
func = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return ($__.fs.J$__v7918151485_202_284 = function J$__v7918151485_202(arg) {
var vvv_return, vvv_switch, val;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arg = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof arg == 'number')
    arg = Array.prototype.slice.call(arguments);
val = conversions[func](arg);
if (typeof val == 'string' || val === undefined)
    return val;
for (var i = 0; i < val.length; i++)
    val[i] = Math.round(val[i]);
return val;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function (arg) {
    if (typeof arg == 'number')
        arg = Array.prototype.slice.call(arguments);
    var val = conversions[func](arg);
    if (typeof val == 'string' || val === undefined)
        return val;
    for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
    return val;
};}), $__.fs.J$__v7918151485_204_283)(func, 0, true, $__.uid);
    Converter = ($__.fs.J$__v7918151485_206_285 = function J$__v7918151485_206() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.convs = {};});
    TAJS_restrictToType(Converter.prototype, 'object').routeSpace = ($__.fs.J$__v7918151485_208_286 = function J$__v7918151485_208(space, args) {
var vvv_return, vvv_switch, values;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
space = arguments[0], args = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
values = args[0];
if (values === undefined) {
    return this.getValues(space);
}
if (typeof values == 'number') {
    values = Array.prototype.slice.call(args);
}
return this.setValues(space, values);});
    TAJS_restrictToType(Converter.prototype, 'object').setValues = ($__.fs.J$__v7918151485_210_287 = function J$__v7918151485_210(space, values) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
space = arguments[0], values = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.space = space;
this.convs = {};
this.convs[space] = values;
return this;});
    TAJS_restrictToType(Converter.prototype, 'object').getValues = ($__.fs.J$__v7918151485_212_288 = function J$__v7918151485_212(space) {
var vvv_return, vvv_switch, vals, fspace, from;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
space = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vals = this.convs[space];
if (!vals) {
    fspace = this.space;
    from = this.convs[fspace];
    vals = convert[fspace][space](from);
    this.convs[space] = vals;
}
return vals;});
    vvv_tmp1 = [
        'rgb',
        'hsl',
        'hsv',
        'cmyk',
        'keyword'
    ], 'forEach', $__.fs.J$__v1609870951_3_1.call(vvv_tmp1, ($__.fs.J$__v7918151485_216_289 = function J$__v7918151485_216(space) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
space = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    TAJS_restrictToType(Converter.prototype, 'object')[space, 'rgb'] = ($__.fs.J$__v7918151485_214_290 = function J$__v7918151485_214(vals) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
vals = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.routeSpace(space, arguments);});
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    TAJS_restrictToType(Converter.prototype, 'object')[space, 'hsl'] = ($__.fs.J$__v7918151485_214_291 = function J$__v7918151485_214(vals) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
vals = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.routeSpace(space, arguments);});
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    TAJS_restrictToType(Converter.prototype, 'object')[space, 'hsv'] = ($__.fs.J$__v7918151485_214_292 = function J$__v7918151485_214(vals) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
vals = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.routeSpace(space, arguments);});
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    TAJS_restrictToType(Converter.prototype, 'object')[space, 'cmyk'] = ($__.fs.J$__v7918151485_214_293 = function J$__v7918151485_214(vals) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
vals = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.routeSpace(space, arguments);});
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    TAJS_restrictToType(Converter.prototype, 'object')[space, 'keyword'] = ($__.fs.J$__v7918151485_214_294 = function J$__v7918151485_214(vals) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
vals = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.routeSpace(space, arguments);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Converter.prototype[space] = function (vals) {
    return this.routeSpace(space, arguments);
};}, $__.fs.J$__v7918151485_216_289), 0, true, $__.uid);
    (module, $__.os.oid63).exports = convert;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
conversions = require(4);
convert = function () {
    return new Converter();
};
for (var func in conversions) {
    convert[func + 'Raw'] = function (func) {
        return function (arg) {
            if (typeof arg == 'number')
                arg = Array.prototype.slice.call(arguments);
            return conversions[func](arg);
        };
    }(func);
    pair = /(\w+)2(\w+)/.exec(func);
    from = pair[1];
    to = pair[2];
    convert[from] = convert[from] || {};
    convert[from][to] = convert[func] = function (func) {
        return function (arg) {
            if (typeof arg == 'number')
                arg = Array.prototype.slice.call(arguments);
            var val = conversions[func](arg);
            if (typeof val == 'string' || val === undefined)
                return val;
            for (var i = 0; i < val.length; i++)
                val[i] = Math.round(val[i]);
            return val;
        };
    }(func);
}
Converter = function () {
    this.convs = {};
};
Converter.prototype.routeSpace = function (space, args) {
    var values = args[0];
    if (values === undefined) {
        return this.getValues(space);
    }
    if (typeof values == 'number') {
        values = Array.prototype.slice.call(args);
    }
    return this.setValues(space, values);
};
Converter.prototype.setValues = function (space, values) {
    this.space = space;
    this.convs = {};
    this.convs[space] = values;
    return this;
};
Converter.prototype.getValues = function (space) {
    var vals = this.convs[space];
    if (!vals) {
        var fspace = this.space, from = this.convs[fspace];
        vals = convert[fspace][space](from);
        this.convs[space] = vals;
    }
    return vals;
};
[
    'rgb',
    'hsl',
    'hsv',
    'cmyk',
    'keyword'
].forEach(function (space) {
    Converter.prototype[space] = function (vals) {
        return this.routeSpace(space, arguments);
    };
});
module.exports = convert;}, $__.fs.J$__v7918151485_218_10),
            $__.os.oid4 = {
                '4': 4
            }
        ],
        6: [
            ($__.fs.J$__v7918151485_220_11 = function J$__v7918151485_220(require, module, exports) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid81).exports = $__.os.oid82 = {
        'aliceblue': [
            240,
            248,
            255
        ],
        'antiquewhite': [
            250,
            235,
            215
        ],
        'aqua': [
            0,
            255,
            255
        ],
        'aquamarine': [
            127,
            255,
            212
        ],
        'azure': [
            240,
            255,
            255
        ],
        'beige': [
            245,
            245,
            220
        ],
        'bisque': [
            255,
            228,
            196
        ],
        'black': [
            0,
            0,
            0
        ],
        'blanchedalmond': [
            255,
            235,
            205
        ],
        'blue': [
            0,
            0,
            255
        ],
        'blueviolet': [
            138,
            43,
            226
        ],
        'brown': [
            165,
            42,
            42
        ],
        'burlywood': [
            222,
            184,
            135
        ],
        'cadetblue': [
            95,
            158,
            160
        ],
        'chartreuse': [
            127,
            255,
            0
        ],
        'chocolate': [
            210,
            105,
            30
        ],
        'coral': [
            255,
            127,
            80
        ],
        'cornflowerblue': [
            100,
            149,
            237
        ],
        'cornsilk': [
            255,
            248,
            220
        ],
        'crimson': [
            220,
            20,
            60
        ],
        'cyan': [
            0,
            255,
            255
        ],
        'darkblue': [
            0,
            0,
            139
        ],
        'darkcyan': [
            0,
            139,
            139
        ],
        'darkgoldenrod': [
            184,
            134,
            11
        ],
        'darkgray': [
            169,
            169,
            169
        ],
        'darkgreen': [
            0,
            100,
            0
        ],
        'darkgrey': [
            169,
            169,
            169
        ],
        'darkkhaki': [
            189,
            183,
            107
        ],
        'darkmagenta': [
            139,
            0,
            139
        ],
        'darkolivegreen': [
            85,
            107,
            47
        ],
        'darkorange': [
            255,
            140,
            0
        ],
        'darkorchid': [
            153,
            50,
            204
        ],
        'darkred': [
            139,
            0,
            0
        ],
        'darksalmon': [
            233,
            150,
            122
        ],
        'darkseagreen': [
            143,
            188,
            143
        ],
        'darkslateblue': [
            72,
            61,
            139
        ],
        'darkslategray': [
            47,
            79,
            79
        ],
        'darkslategrey': [
            47,
            79,
            79
        ],
        'darkturquoise': [
            0,
            206,
            209
        ],
        'darkviolet': [
            148,
            0,
            211
        ],
        'deeppink': [
            255,
            20,
            147
        ],
        'deepskyblue': [
            0,
            191,
            255
        ],
        'dimgray': [
            105,
            105,
            105
        ],
        'dimgrey': [
            105,
            105,
            105
        ],
        'dodgerblue': [
            30,
            144,
            255
        ],
        'firebrick': [
            178,
            34,
            34
        ],
        'floralwhite': [
            255,
            250,
            240
        ],
        'forestgreen': [
            34,
            139,
            34
        ],
        'fuchsia': [
            255,
            0,
            255
        ],
        'gainsboro': [
            220,
            220,
            220
        ],
        'ghostwhite': [
            248,
            248,
            255
        ],
        'gold': [
            255,
            215,
            0
        ],
        'goldenrod': [
            218,
            165,
            32
        ],
        'gray': [
            128,
            128,
            128
        ],
        'green': [
            0,
            128,
            0
        ],
        'greenyellow': [
            173,
            255,
            47
        ],
        'grey': [
            128,
            128,
            128
        ],
        'honeydew': [
            240,
            255,
            240
        ],
        'hotpink': [
            255,
            105,
            180
        ],
        'indianred': [
            205,
            92,
            92
        ],
        'indigo': [
            75,
            0,
            130
        ],
        'ivory': [
            255,
            255,
            240
        ],
        'khaki': [
            240,
            230,
            140
        ],
        'lavender': [
            230,
            230,
            250
        ],
        'lavenderblush': [
            255,
            240,
            245
        ],
        'lawngreen': [
            124,
            252,
            0
        ],
        'lemonchiffon': [
            255,
            250,
            205
        ],
        'lightblue': [
            173,
            216,
            230
        ],
        'lightcoral': [
            240,
            128,
            128
        ],
        'lightcyan': [
            224,
            255,
            255
        ],
        'lightgoldenrodyellow': [
            250,
            250,
            210
        ],
        'lightgray': [
            211,
            211,
            211
        ],
        'lightgreen': [
            144,
            238,
            144
        ],
        'lightgrey': [
            211,
            211,
            211
        ],
        'lightpink': [
            255,
            182,
            193
        ],
        'lightsalmon': [
            255,
            160,
            122
        ],
        'lightseagreen': [
            32,
            178,
            170
        ],
        'lightskyblue': [
            135,
            206,
            250
        ],
        'lightslategray': [
            119,
            136,
            153
        ],
        'lightslategrey': [
            119,
            136,
            153
        ],
        'lightsteelblue': [
            176,
            196,
            222
        ],
        'lightyellow': [
            255,
            255,
            224
        ],
        'lime': [
            0,
            255,
            0
        ],
        'limegreen': [
            50,
            205,
            50
        ],
        'linen': [
            250,
            240,
            230
        ],
        'magenta': [
            255,
            0,
            255
        ],
        'maroon': [
            128,
            0,
            0
        ],
        'mediumaquamarine': [
            102,
            205,
            170
        ],
        'mediumblue': [
            0,
            0,
            205
        ],
        'mediumorchid': [
            186,
            85,
            211
        ],
        'mediumpurple': [
            147,
            112,
            219
        ],
        'mediumseagreen': [
            60,
            179,
            113
        ],
        'mediumslateblue': [
            123,
            104,
            238
        ],
        'mediumspringgreen': [
            0,
            250,
            154
        ],
        'mediumturquoise': [
            72,
            209,
            204
        ],
        'mediumvioletred': [
            199,
            21,
            133
        ],
        'midnightblue': [
            25,
            25,
            112
        ],
        'mintcream': [
            245,
            255,
            250
        ],
        'mistyrose': [
            255,
            228,
            225
        ],
        'moccasin': [
            255,
            228,
            181
        ],
        'navajowhite': [
            255,
            222,
            173
        ],
        'navy': [
            0,
            0,
            128
        ],
        'oldlace': [
            253,
            245,
            230
        ],
        'olive': [
            128,
            128,
            0
        ],
        'olivedrab': [
            107,
            142,
            35
        ],
        'orange': [
            255,
            165,
            0
        ],
        'orangered': [
            255,
            69,
            0
        ],
        'orchid': [
            218,
            112,
            214
        ],
        'palegoldenrod': [
            238,
            232,
            170
        ],
        'palegreen': [
            152,
            251,
            152
        ],
        'paleturquoise': [
            175,
            238,
            238
        ],
        'palevioletred': [
            219,
            112,
            147
        ],
        'papayawhip': [
            255,
            239,
            213
        ],
        'peachpuff': [
            255,
            218,
            185
        ],
        'peru': [
            205,
            133,
            63
        ],
        'pink': [
            255,
            192,
            203
        ],
        'plum': [
            221,
            160,
            221
        ],
        'powderblue': [
            176,
            224,
            230
        ],
        'purple': [
            128,
            0,
            128
        ],
        'rebeccapurple': [
            102,
            51,
            153
        ],
        'red': [
            255,
            0,
            0
        ],
        'rosybrown': [
            188,
            143,
            143
        ],
        'royalblue': [
            65,
            105,
            225
        ],
        'saddlebrown': [
            139,
            69,
            19
        ],
        'salmon': [
            250,
            128,
            114
        ],
        'sandybrown': [
            244,
            164,
            96
        ],
        'seagreen': [
            46,
            139,
            87
        ],
        'seashell': [
            255,
            245,
            238
        ],
        'sienna': [
            160,
            82,
            45
        ],
        'silver': [
            192,
            192,
            192
        ],
        'skyblue': [
            135,
            206,
            235
        ],
        'slateblue': [
            106,
            90,
            205
        ],
        'slategray': [
            112,
            128,
            144
        ],
        'slategrey': [
            112,
            128,
            144
        ],
        'snow': [
            255,
            250,
            250
        ],
        'springgreen': [
            0,
            255,
            127
        ],
        'steelblue': [
            70,
            130,
            180
        ],
        'tan': [
            210,
            180,
            140
        ],
        'teal': [
            0,
            128,
            128
        ],
        'thistle': [
            216,
            191,
            216
        ],
        'tomato': [
            255,
            99,
            71
        ],
        'turquoise': [
            64,
            224,
            208
        ],
        'violet': [
            238,
            130,
            238
        ],
        'wheat': [
            245,
            222,
            179
        ],
        'white': [
            255,
            255,
            255
        ],
        'whitesmoke': [
            245,
            245,
            245
        ],
        'yellow': [
            255,
            255,
            0
        ],
        'yellowgreen': [
            154,
            205,
            50
        ]
    };
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = {
    'aliceblue': [
        240,
        248,
        255
    ],
    'antiquewhite': [
        250,
        235,
        215
    ],
    'aqua': [
        0,
        255,
        255
    ],
    'aquamarine': [
        127,
        255,
        212
    ],
    'azure': [
        240,
        255,
        255
    ],
    'beige': [
        245,
        245,
        220
    ],
    'bisque': [
        255,
        228,
        196
    ],
    'black': [
        0,
        0,
        0
    ],
    'blanchedalmond': [
        255,
        235,
        205
    ],
    'blue': [
        0,
        0,
        255
    ],
    'blueviolet': [
        138,
        43,
        226
    ],
    'brown': [
        165,
        42,
        42
    ],
    'burlywood': [
        222,
        184,
        135
    ],
    'cadetblue': [
        95,
        158,
        160
    ],
    'chartreuse': [
        127,
        255,
        0
    ],
    'chocolate': [
        210,
        105,
        30
    ],
    'coral': [
        255,
        127,
        80
    ],
    'cornflowerblue': [
        100,
        149,
        237
    ],
    'cornsilk': [
        255,
        248,
        220
    ],
    'crimson': [
        220,
        20,
        60
    ],
    'cyan': [
        0,
        255,
        255
    ],
    'darkblue': [
        0,
        0,
        139
    ],
    'darkcyan': [
        0,
        139,
        139
    ],
    'darkgoldenrod': [
        184,
        134,
        11
    ],
    'darkgray': [
        169,
        169,
        169
    ],
    'darkgreen': [
        0,
        100,
        0
    ],
    'darkgrey': [
        169,
        169,
        169
    ],
    'darkkhaki': [
        189,
        183,
        107
    ],
    'darkmagenta': [
        139,
        0,
        139
    ],
    'darkolivegreen': [
        85,
        107,
        47
    ],
    'darkorange': [
        255,
        140,
        0
    ],
    'darkorchid': [
        153,
        50,
        204
    ],
    'darkred': [
        139,
        0,
        0
    ],
    'darksalmon': [
        233,
        150,
        122
    ],
    'darkseagreen': [
        143,
        188,
        143
    ],
    'darkslateblue': [
        72,
        61,
        139
    ],
    'darkslategray': [
        47,
        79,
        79
    ],
    'darkslategrey': [
        47,
        79,
        79
    ],
    'darkturquoise': [
        0,
        206,
        209
    ],
    'darkviolet': [
        148,
        0,
        211
    ],
    'deeppink': [
        255,
        20,
        147
    ],
    'deepskyblue': [
        0,
        191,
        255
    ],
    'dimgray': [
        105,
        105,
        105
    ],
    'dimgrey': [
        105,
        105,
        105
    ],
    'dodgerblue': [
        30,
        144,
        255
    ],
    'firebrick': [
        178,
        34,
        34
    ],
    'floralwhite': [
        255,
        250,
        240
    ],
    'forestgreen': [
        34,
        139,
        34
    ],
    'fuchsia': [
        255,
        0,
        255
    ],
    'gainsboro': [
        220,
        220,
        220
    ],
    'ghostwhite': [
        248,
        248,
        255
    ],
    'gold': [
        255,
        215,
        0
    ],
    'goldenrod': [
        218,
        165,
        32
    ],
    'gray': [
        128,
        128,
        128
    ],
    'green': [
        0,
        128,
        0
    ],
    'greenyellow': [
        173,
        255,
        47
    ],
    'grey': [
        128,
        128,
        128
    ],
    'honeydew': [
        240,
        255,
        240
    ],
    'hotpink': [
        255,
        105,
        180
    ],
    'indianred': [
        205,
        92,
        92
    ],
    'indigo': [
        75,
        0,
        130
    ],
    'ivory': [
        255,
        255,
        240
    ],
    'khaki': [
        240,
        230,
        140
    ],
    'lavender': [
        230,
        230,
        250
    ],
    'lavenderblush': [
        255,
        240,
        245
    ],
    'lawngreen': [
        124,
        252,
        0
    ],
    'lemonchiffon': [
        255,
        250,
        205
    ],
    'lightblue': [
        173,
        216,
        230
    ],
    'lightcoral': [
        240,
        128,
        128
    ],
    'lightcyan': [
        224,
        255,
        255
    ],
    'lightgoldenrodyellow': [
        250,
        250,
        210
    ],
    'lightgray': [
        211,
        211,
        211
    ],
    'lightgreen': [
        144,
        238,
        144
    ],
    'lightgrey': [
        211,
        211,
        211
    ],
    'lightpink': [
        255,
        182,
        193
    ],
    'lightsalmon': [
        255,
        160,
        122
    ],
    'lightseagreen': [
        32,
        178,
        170
    ],
    'lightskyblue': [
        135,
        206,
        250
    ],
    'lightslategray': [
        119,
        136,
        153
    ],
    'lightslategrey': [
        119,
        136,
        153
    ],
    'lightsteelblue': [
        176,
        196,
        222
    ],
    'lightyellow': [
        255,
        255,
        224
    ],
    'lime': [
        0,
        255,
        0
    ],
    'limegreen': [
        50,
        205,
        50
    ],
    'linen': [
        250,
        240,
        230
    ],
    'magenta': [
        255,
        0,
        255
    ],
    'maroon': [
        128,
        0,
        0
    ],
    'mediumaquamarine': [
        102,
        205,
        170
    ],
    'mediumblue': [
        0,
        0,
        205
    ],
    'mediumorchid': [
        186,
        85,
        211
    ],
    'mediumpurple': [
        147,
        112,
        219
    ],
    'mediumseagreen': [
        60,
        179,
        113
    ],
    'mediumslateblue': [
        123,
        104,
        238
    ],
    'mediumspringgreen': [
        0,
        250,
        154
    ],
    'mediumturquoise': [
        72,
        209,
        204
    ],
    'mediumvioletred': [
        199,
        21,
        133
    ],
    'midnightblue': [
        25,
        25,
        112
    ],
    'mintcream': [
        245,
        255,
        250
    ],
    'mistyrose': [
        255,
        228,
        225
    ],
    'moccasin': [
        255,
        228,
        181
    ],
    'navajowhite': [
        255,
        222,
        173
    ],
    'navy': [
        0,
        0,
        128
    ],
    'oldlace': [
        253,
        245,
        230
    ],
    'olive': [
        128,
        128,
        0
    ],
    'olivedrab': [
        107,
        142,
        35
    ],
    'orange': [
        255,
        165,
        0
    ],
    'orangered': [
        255,
        69,
        0
    ],
    'orchid': [
        218,
        112,
        214
    ],
    'palegoldenrod': [
        238,
        232,
        170
    ],
    'palegreen': [
        152,
        251,
        152
    ],
    'paleturquoise': [
        175,
        238,
        238
    ],
    'palevioletred': [
        219,
        112,
        147
    ],
    'papayawhip': [
        255,
        239,
        213
    ],
    'peachpuff': [
        255,
        218,
        185
    ],
    'peru': [
        205,
        133,
        63
    ],
    'pink': [
        255,
        192,
        203
    ],
    'plum': [
        221,
        160,
        221
    ],
    'powderblue': [
        176,
        224,
        230
    ],
    'purple': [
        128,
        0,
        128
    ],
    'rebeccapurple': [
        102,
        51,
        153
    ],
    'red': [
        255,
        0,
        0
    ],
    'rosybrown': [
        188,
        143,
        143
    ],
    'royalblue': [
        65,
        105,
        225
    ],
    'saddlebrown': [
        139,
        69,
        19
    ],
    'salmon': [
        250,
        128,
        114
    ],
    'sandybrown': [
        244,
        164,
        96
    ],
    'seagreen': [
        46,
        139,
        87
    ],
    'seashell': [
        255,
        245,
        238
    ],
    'sienna': [
        160,
        82,
        45
    ],
    'silver': [
        192,
        192,
        192
    ],
    'skyblue': [
        135,
        206,
        235
    ],
    'slateblue': [
        106,
        90,
        205
    ],
    'slategray': [
        112,
        128,
        144
    ],
    'slategrey': [
        112,
        128,
        144
    ],
    'snow': [
        255,
        250,
        250
    ],
    'springgreen': [
        0,
        255,
        127
    ],
    'steelblue': [
        70,
        130,
        180
    ],
    'tan': [
        210,
        180,
        140
    ],
    'teal': [
        0,
        128,
        128
    ],
    'thistle': [
        216,
        191,
        216
    ],
    'tomato': [
        255,
        99,
        71
    ],
    'turquoise': [
        64,
        224,
        208
    ],
    'violet': [
        238,
        130,
        238
    ],
    'wheat': [
        245,
        222,
        179
    ],
    'white': [
        255,
        255,
        255
    ],
    'whitesmoke': [
        245,
        245,
        245
    ],
    'yellow': [
        255,
        255,
        0
    ],
    'yellowgreen': [
        154,
        205,
        50
    ]
};}, $__.fs.J$__v7918151485_220_11),
            $__.os.oid5 = {}
        ],
        7: [
            ($__.fs.J$__v7918151485_222_12 = function J$__v7918151485_222(require, module, exports) {
var vvv_return, vvv_switch, Chart;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    Chart = ((require, $__.fs.J$__v7918151485_3_55)(28, 0, true, $__.uid), $__.fs.J$__v7918151485_942_57)(0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(26, 1, true, $__.uid), $__.fs.J$__v7918151485_895_374)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(42, 2, true, $__.uid), $__.fs.J$__v7918151485_1385_466)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(22, 3, true, $__.uid), $__.fs.J$__v7918151485_484_484)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(31, 4, true, $__.uid), $__.fs.J$__v7918151485_1074_489)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(25, 5, true, $__.uid), $__.fs.J$__v7918151485_674_501)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(21, 6, true, $__.uid), $__.fs.J$__v7918151485_474_510)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(23, 7, true, $__.uid), $__.fs.J$__v7918151485_594_519)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(24, 8, true, $__.uid), $__.fs.J$__v7918151485_656_557)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(29, 9, true, $__.uid), $__.fs.J$__v7918151485_1004_586)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(33, 10, true, $__.uid), $__.fs.J$__v7918151485_1158_591)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(34, 11, true, $__.uid), $__.fs.J$__v7918151485_1172_598)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(32, 12, true, $__.uid), $__.fs.J$__v7918151485_1142_605)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(35, 13, true, $__.uid), $__.fs.J$__v7918151485_1193_641)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(30, 14, true, $__.uid), $__.fs.J$__v7918151485_1050_656)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(27, 15, true, $__.uid), $__.fs.J$__v7918151485_934_677)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(36, 16, true, $__.uid), $__.fs.J$__v7918151485_1278_691)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(37, 17, true, $__.uid), $__.fs.J$__v7918151485_1294_722)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(38, 18, true, $__.uid), $__.fs.J$__v7918151485_1301_733)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(39, 19, true, $__.uid), $__.fs.J$__v7918151485_1317_739)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(40, 20, true, $__.uid), $__.fs.J$__v7918151485_1342_751)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(45, 21, true, $__.uid), $__.fs.J$__v7918151485_1446_767)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(43, 22, true, $__.uid), $__.fs.J$__v7918151485_1405_775)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(44, 23, true, $__.uid), $__.fs.J$__v7918151485_1436_789)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(46, 24, true, $__.uid), $__.fs.J$__v7918151485_1477_803)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(47, 25, true, $__.uid), $__.fs.J$__v7918151485_1529_817)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(48, 26, true, $__.uid), $__.fs.J$__v7918151485_1573_854)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(15, 27, true, $__.uid), $__.fs.J$__v7918151485_322_877)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(16, 28, true, $__.uid), $__.fs.J$__v7918151485_342_908)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(17, 29, true, $__.uid), $__.fs.J$__v7918151485_376_920)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(18, 30, true, $__.uid), $__.fs.J$__v7918151485_404_945)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(19, 31, true, $__.uid), $__.fs.J$__v7918151485_434_961)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(20, 32, true, $__.uid), $__.fs.J$__v7918151485_458_976)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(8, 33, true, $__.uid), $__.fs.J$__v7918151485_226_987)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(9, 34, true, $__.uid), $__.fs.J$__v7918151485_232_990)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(10, 35, true, $__.uid), $__.fs.J$__v7918151485_238_993)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(11, 36, true, $__.uid), $__.fs.J$__v7918151485_244_996)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(12, 37, true, $__.uid), $__.fs.J$__v7918151485_250_999)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(13, 38, true, $__.uid), $__.fs.J$__v7918151485_256_1002)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    ((require, $__.fs.J$__v7918151485_3_55)(14, 39, true, $__.uid), $__.fs.J$__v7918151485_266_1005)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid);
    window.Chart = (module, $__.os.oid51).exports = Chart;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart = require(28)();
require(26)(Chart);
require(42)(Chart);
require(22)(Chart);
require(31)(Chart);
require(25)(Chart);
require(21)(Chart);
require(23)(Chart);
require(24)(Chart);
require(29)(Chart);
require(33)(Chart);
require(34)(Chart);
require(32)(Chart);
require(35)(Chart);
require(30)(Chart);
require(27)(Chart);
require(36)(Chart);
require(37)(Chart);
require(38)(Chart);
require(39)(Chart);
require(40)(Chart);
require(45)(Chart);
require(43)(Chart);
require(44)(Chart);
require(46)(Chart);
require(47)(Chart);
require(48)(Chart);
require(15)(Chart);
require(16)(Chart);
require(17)(Chart);
require(18)(Chart);
require(19)(Chart);
require(20)(Chart);
require(8)(Chart);
require(9)(Chart);
require(10)(Chart);
require(11)(Chart);
require(12)(Chart);
require(13)(Chart);
require(14)(Chart);
window.Chart = module.exports = Chart;}, $__.fs.J$__v7918151485_222_12),
            $__.os.oid6 = {
                '10': 10,
                '11': 11,
                '12': 12,
                '13': 13,
                '14': 14,
                '15': 15,
                '16': 16,
                '17': 17,
                '18': 18,
                '19': 19,
                '20': 20,
                '21': 21,
                '22': 22,
                '23': 23,
                '24': 24,
                '25': 25,
                '26': 26,
                '27': 27,
                '28': 28,
                '29': 29,
                '30': 30,
                '31': 31,
                '32': 32,
                '33': 33,
                '34': 34,
                '35': 35,
                '36': 36,
                '37': 37,
                '38': 38,
                '39': 39,
                '40': 40,
                '42': 42,
                '43': 43,
                '44': 44,
                '45': 45,
                '46': 46,
                '47': 47,
                '48': 48,
                '8': 8,
                '9': 9
            }
        ],
        8: [
            ($__.fs.J$__v7918151485_228_13 = function J$__v7918151485_228(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid312).exports = ($__.fs.J$__v7918151485_226_987 = function J$__v7918151485_226(Chart) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    Chart.Bar = ($__.fs.J$__v7918151485_224_988 = function J$__v7918151485_224(context, config) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], config = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
config.type = 'bar';
return new Chart(context, config);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.Bar = function (context, config) {
    config.type = 'bar';
    return new Chart(context, config);
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    Chart.Bar = function (context, config) {
        config.type = 'bar';
        return new Chart(context, config);
    };
};}, $__.fs.J$__v7918151485_228_13),
            $__.os.oid7 = {}
        ],
        9: [
            ($__.fs.J$__v7918151485_234_14 = function J$__v7918151485_234(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid314).exports = ($__.fs.J$__v7918151485_232_990 = function J$__v7918151485_232(Chart) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    Chart.Bubble = ($__.fs.J$__v7918151485_230_991 = function J$__v7918151485_230(context, config) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], config = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
config.type = 'bubble';
return new Chart(context, config);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.Bubble = function (context, config) {
    config.type = 'bubble';
    return new Chart(context, config);
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    Chart.Bubble = function (context, config) {
        config.type = 'bubble';
        return new Chart(context, config);
    };
};}, $__.fs.J$__v7918151485_234_14),
            $__.os.oid8 = {}
        ],
        10: [
            ($__.fs.J$__v7918151485_240_15 = function J$__v7918151485_240(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid316).exports = ($__.fs.J$__v7918151485_238_993 = function J$__v7918151485_238(Chart) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    Chart.Doughnut = ($__.fs.J$__v7918151485_236_994 = function J$__v7918151485_236(context, config) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], config = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
config.type = 'doughnut';
return new Chart(context, config);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.Doughnut = function (context, config) {
    config.type = 'doughnut';
    return new Chart(context, config);
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    Chart.Doughnut = function (context, config) {
        config.type = 'doughnut';
        return new Chart(context, config);
    };
};}, $__.fs.J$__v7918151485_240_15),
            $__.os.oid9 = {}
        ],
        11: [
            ($__.fs.J$__v7918151485_246_16 = function J$__v7918151485_246(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid318).exports = ($__.fs.J$__v7918151485_244_996 = function J$__v7918151485_244(Chart) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    Chart.Line = ($__.fs.J$__v7918151485_242_997 = function J$__v7918151485_242(context, config) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], config = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
config.type = 'line';
return new Chart(context, config);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.Line = function (context, config) {
    config.type = 'line';
    return new Chart(context, config);
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    Chart.Line = function (context, config) {
        config.type = 'line';
        return new Chart(context, config);
    };
};}, $__.fs.J$__v7918151485_246_16),
            $__.os.oid10 = {}
        ],
        12: [
            ($__.fs.J$__v7918151485_252_17 = function J$__v7918151485_252(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid320).exports = ($__.fs.J$__v7918151485_250_999 = function J$__v7918151485_250(Chart) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    Chart.PolarArea = ($__.fs.J$__v7918151485_248_1000 = function J$__v7918151485_248(context, config) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], config = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
config.type = 'polarArea';
return new Chart(context, config);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.PolarArea = function (context, config) {
    config.type = 'polarArea';
    return new Chart(context, config);
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    Chart.PolarArea = function (context, config) {
        config.type = 'polarArea';
        return new Chart(context, config);
    };
};}, $__.fs.J$__v7918151485_252_17),
            $__.os.oid11 = {}
        ],
        13: [
            ($__.fs.J$__v7918151485_258_18 = function J$__v7918151485_258(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid322).exports = ($__.fs.J$__v7918151485_256_1002 = function J$__v7918151485_256(Chart) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    Chart.Radar = ($__.fs.J$__v7918151485_254_1003 = function J$__v7918151485_254(context, config) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], config = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
config.type = 'radar';
return new Chart(context, config);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.Radar = function (context, config) {
    config.type = 'radar';
    return new Chart(context, config);
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    Chart.Radar = function (context, config) {
        config.type = 'radar';
        return new Chart(context, config);
    };
};}, $__.fs.J$__v7918151485_258_18),
            $__.os.oid12 = {}
        ],
        14: [
            ($__.fs.J$__v7918151485_268_19 = function J$__v7918151485_268(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid324).exports = ($__.fs.J$__v7918151485_266_1005 = function J$__v7918151485_266(Chart) {
var vvv_return, vvv_switch, defaultConfig;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    defaultConfig = $__.os.oid331 = {
        'hover': $__.os.oid325 = {
            'mode': 'single'
        },
        'scales': $__.os.oid328 = {
            'xAxes': [$__.os.oid326 = {
                    'type': 'linear',
                    'position': 'bottom',
                    'id': 'x-axis-1'
                }],
            'yAxes': [$__.os.oid327 = {
                    'type': 'linear',
                    'position': 'left',
                    'id': 'y-axis-1'
                }]
        },
        'tooltips': $__.os.oid330 = {
            'callbacks': $__.os.oid329 = {
                'title': ($__.fs.J$__v7918151485_260_1006 = function J$__v7918151485_260() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '';}),
                'label': ($__.fs.J$__v7918151485_262_1007 = function J$__v7918151485_262(tooltipItem) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipItem = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';})
            }
        }
    };
    ((Chart.defaults, $__.os.oid57), $__.os.oid57).scatter = defaultConfig;
    ((Chart.controllers, $__.os.oid118), $__.os.oid118).scatter = TAJS_restrictToType(((Chart.controllers, $__.os.oid118), $__.os.oid118).line, 'function');
    Chart.Scatter = ($__.fs.J$__v7918151485_264_1008 = function J$__v7918151485_264(context, config) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], config = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
config.type = 'scatter';
return new Chart(context, config);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
defaultConfig = {
    hover: {
        mode: 'single'
    },
    scales: {
        xAxes: [{
                type: 'linear',
                position: 'bottom',
                id: 'x-axis-1'
            }],
        yAxes: [{
                type: 'linear',
                position: 'left',
                id: 'y-axis-1'
            }]
    },
    tooltips: {
        callbacks: {
            title: function () {
                return '';
            },
            label: function (tooltipItem) {
                return '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';
            }
        }
    }
};
Chart.defaults.scatter = defaultConfig;
Chart.controllers.scatter = Chart.controllers.line;
Chart.Scatter = function (context, config) {
    config.type = 'scatter';
    return new Chart(context, config);
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var defaultConfig = {
        hover: {
            mode: 'single'
        },
        scales: {
            xAxes: [{
                    type: 'linear',
                    position: 'bottom',
                    id: 'x-axis-1'
                }],
            yAxes: [{
                    type: 'linear',
                    position: 'left',
                    id: 'y-axis-1'
                }]
        },
        tooltips: {
            callbacks: {
                title: function () {
                    return '';
                },
                label: function (tooltipItem) {
                    return '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';
                }
            }
        }
    };
    Chart.defaults.scatter = defaultConfig;
    Chart.controllers.scatter = Chart.controllers.line;
    Chart.Scatter = function (context, config) {
        config.type = 'scatter';
        return new Chart(context, config);
    };
};}, $__.fs.J$__v7918151485_268_19),
            $__.os.oid13 = {}
        ],
        15: [
            ($__.fs.J$__v7918151485_324_20 = function J$__v7918151485_324(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid238).exports = ($__.fs.J$__v7918151485_322_877 = function J$__v7918151485_322(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    ((Chart.defaults, $__.os.oid57), $__.os.oid57).bar = $__.os.oid244 = {
        'hover': $__.os.oid239 = {
            'mode': 'label'
        },
        'scales': $__.os.oid243 = {
            'xAxes': [$__.os.oid241 = {
                    'type': 'category',
                    'categoryPercentage': 0.8,
                    'barPercentage': 0.9,
                    'gridLines': $__.os.oid240 = {
                        'offsetGridLines': true
                    }
                }],
            'yAxes': [$__.os.oid242 = {
                    'type': 'linear'
                }]
        }
    };
    ((Chart.controllers, $__.os.oid118), $__.os.oid118).bar = (vvv_tmp0 = TAJS_restrictToType(Chart.DatasetController, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid245 = {
        'dataElementType': TAJS_restrictToType(((Chart.elements, $__.os.oid107), $__.os.oid107).Rectangle, 'function'),
        'initialize': ($__.fs.J$__v7918151485_270_878 = function J$__v7918151485_270(chart, datasetIndex) {
var vvv_return, vvv_switch, me, meta, dataset;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], datasetIndex = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);
me = this;
meta = me.getMeta();
dataset = me.getDataset();
meta.stack = dataset.stack;
meta.bar = true;}, $__.fs.J$__v7918151485_270_878_621 = $__.fs.J$__v7918151485_270_878, $__.fs.J$__v7918151485_270_878),
        'getStackCount': ($__.fs.J$__v7918151485_274_879 = function J$__v7918151485_274() {
var vvv_return, vvv_switch, me, meta, yScale, stacks;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
yScale = me.getScaleForId(meta.yAxisID);
stacks = [];
helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
    var dsMeta = me.chart.getDatasetMeta(datasetIndex);
    if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) && (yScale.options.stacked === false || yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
        stacks.push(dsMeta.stack);
    }
}, me);
return stacks.length;}, $__.fs.J$__v7918151485_274_879_623 = $__.fs.J$__v7918151485_274_879, $__.fs.J$__v7918151485_274_879),
        'update': ($__.fs.J$__v7918151485_278_880 = function J$__v7918151485_278(reset) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
reset = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
helpers.each(me.getMeta().data, function (rectangle, index) {
    me.updateElement(rectangle, index, reset);
}, me);}, $__.fs.J$__v7918151485_278_880_625 = $__.fs.J$__v7918151485_278_880, $__.fs.J$__v7918151485_278_880),
        'updateElement': ($__.fs.J$__v7918151485_280_881 = function J$__v7918151485_280(rectangle, index, reset) {
var vvv_return, vvv_switch, me, meta, xScale, yScale, scaleBase, rectangleElementOptions, custom, dataset, ruler;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rectangle = arguments[0], index = arguments[1], reset = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
xScale = me.getScaleForId(meta.xAxisID);
yScale = me.getScaleForId(meta.yAxisID);
scaleBase = yScale.getBasePixel();
rectangleElementOptions = me.chart.options.elements.rectangle;
custom = rectangle.custom || {};
dataset = me.getDataset();
rectangle._xScale = xScale;
rectangle._yScale = yScale;
rectangle._datasetIndex = me.index;
rectangle._index = index;
ruler = me.getRuler(index);
rectangle._model = {
    x: me.calculateBarX(index, me.index, ruler),
    y: reset ? scaleBase : me.calculateBarY(index, me.index),
    label: me.chart.data.labels[index],
    datasetLabel: dataset.label,
    horizontal: false,
    base: reset ? scaleBase : me.calculateBarBase(me.index, index),
    width: me.calculateBarWidth(ruler),
    backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
    borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
    borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
    borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
};
rectangle.pivot();}, $__.fs.J$__v7918151485_280_881_627 = $__.fs.J$__v7918151485_280_881, $__.fs.J$__v7918151485_280_881),
        'calculateBarBase': ($__.fs.J$__v7918151485_282_882 = function J$__v7918151485_282(datasetIndex, index) {
var vvv_return, vvv_switch, me, meta, yScale, base, original, chart, datasets, value, currentDs, currentDsMeta, currentVal;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
datasetIndex = arguments[0], index = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
yScale = me.getScaleForId(meta.yAxisID);
base = yScale.getBaseValue();
original = base;
if (yScale.options.stacked === true || yScale.options.stacked === undefined && meta.stack !== undefined) {
    chart = me.chart;
    datasets = chart.data.datasets;
    value = Number(datasets[datasetIndex].data[index]);
    for (var i = 0; i < datasetIndex; i++) {
        currentDs = datasets[i];
        currentDsMeta = chart.getDatasetMeta(i);
        if (currentDsMeta.bar && currentDsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i) && meta.stack === currentDsMeta.stack) {
            currentVal = Number(currentDs.data[index]);
            base += value < 0 ? Math.min(currentVal, original) : Math.max(currentVal, original);
        }
    }
    return yScale.getPixelForValue(base);
}
return yScale.getBasePixel();}, $__.fs.J$__v7918151485_282_882_629 = $__.fs.J$__v7918151485_282_882, $__.fs.J$__v7918151485_282_882),
        'getRuler': ($__.fs.J$__v7918151485_284_883 = function J$__v7918151485_284() {
var vvv_return, vvv_switch, me, meta, xScale, stackCount, tickWidth, categoryWidth, categorySpacing, fullBarWidth, barWidth, barSpacing;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
xScale = me.getScaleForId(meta.xAxisID);
stackCount = me.getStackCount();
tickWidth = xScale.width / xScale.ticks.length;
categoryWidth = tickWidth * xScale.options.categoryPercentage;
categorySpacing = (tickWidth - tickWidth * xScale.options.categoryPercentage) / 2;
fullBarWidth = categoryWidth / stackCount;
barWidth = fullBarWidth * xScale.options.barPercentage;
barSpacing = fullBarWidth - fullBarWidth * xScale.options.barPercentage;
return {
    stackCount: stackCount,
    tickWidth: tickWidth,
    categoryWidth: categoryWidth,
    categorySpacing: categorySpacing,
    fullBarWidth: fullBarWidth,
    barWidth: barWidth,
    barSpacing: barSpacing
};}, $__.fs.J$__v7918151485_284_883_631 = $__.fs.J$__v7918151485_284_883, $__.fs.J$__v7918151485_284_883),
        'calculateBarWidth': ($__.fs.J$__v7918151485_286_884 = function J$__v7918151485_286(ruler) {
var vvv_return, vvv_switch, me, meta, xScale;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ruler = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
xScale = me.getScaleForId(meta.xAxisID);
if (xScale.options.barThickness) {
    return xScale.options.barThickness;
}
return ruler.barWidth;}, $__.fs.J$__v7918151485_286_884_633 = $__.fs.J$__v7918151485_286_884, $__.fs.J$__v7918151485_286_884),
        'getStackIndex': ($__.fs.J$__v7918151485_288_885 = function J$__v7918151485_288(datasetIndex) {
var vvv_return, vvv_switch, me, meta, yScale, dsMeta, j, stacks;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
datasetIndex = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.chart.getDatasetMeta(datasetIndex);
yScale = me.getScaleForId(meta.yAxisID);
stacks = [meta.stack];
for (j = 0; j < datasetIndex; ++j) {
    dsMeta = this.chart.getDatasetMeta(j);
    if (dsMeta.bar && this.chart.isDatasetVisible(j) && (yScale.options.stacked === false || yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
        stacks.push(dsMeta.stack);
    }
}
return stacks.length - 1;}, $__.fs.J$__v7918151485_288_885_635 = $__.fs.J$__v7918151485_288_885, $__.fs.J$__v7918151485_288_885),
        'calculateBarX': ($__.fs.J$__v7918151485_290_886 = function J$__v7918151485_290(index, datasetIndex, ruler) {
var vvv_return, vvv_switch, me, meta, xScale, stackIndex, leftTick;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], datasetIndex = arguments[1], ruler = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
xScale = me.getScaleForId(meta.xAxisID);
stackIndex = me.getStackIndex(datasetIndex);
leftTick = xScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
leftTick -= me.chart.isCombo ? ruler.tickWidth / 2 : 0;
return leftTick + ruler.barWidth / 2 + ruler.categorySpacing + ruler.barWidth * stackIndex + ruler.barSpacing / 2 + ruler.barSpacing * stackIndex;}, $__.fs.J$__v7918151485_290_886_637 = $__.fs.J$__v7918151485_290_886, $__.fs.J$__v7918151485_290_886),
        'calculateBarY': ($__.fs.J$__v7918151485_292_887 = function J$__v7918151485_292(index, datasetIndex) {
var vvv_return, vvv_switch, me, meta, yScale, value, base, sumPos, sumNeg, ds, dsMeta, stackedVal;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], datasetIndex = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
yScale = me.getScaleForId(meta.yAxisID);
value = Number(me.getDataset().data[index]);
if (yScale.options.stacked || yScale.options.stacked === undefined && meta.stack !== undefined) {
    base = yScale.getBaseValue();
    sumPos = base;
    sumNeg = base;
    for (var i = 0; i < datasetIndex; i++) {
        ds = me.chart.data.datasets[i];
        dsMeta = me.chart.getDatasetMeta(i);
        if (dsMeta.bar && dsMeta.yAxisID === yScale.id && me.chart.isDatasetVisible(i) && meta.stack === dsMeta.stack) {
            stackedVal = Number(ds.data[index]);
            if (stackedVal < 0) {
                sumNeg += stackedVal || 0;
            } else {
                sumPos += stackedVal || 0;
            }
        }
    }
    if (value < 0) {
        return yScale.getPixelForValue(sumNeg + value);
    }
    return yScale.getPixelForValue(sumPos + value);
}
return yScale.getPixelForValue(value);}, $__.fs.J$__v7918151485_292_887_639 = $__.fs.J$__v7918151485_292_887, $__.fs.J$__v7918151485_292_887),
        'draw': ($__.fs.J$__v7918151485_294_888 = function J$__v7918151485_294(ease) {
var vvv_return, vvv_switch, me, easingDecimal, metaData, dataset, i, len, d;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ease = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
easingDecimal = ease || 1;
metaData = me.getMeta().data;
dataset = me.getDataset();
Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
for (i = 0, len = metaData.length; i < len; ++i) {
    d = dataset.data[i];
    if (d !== null && d !== undefined && !isNaN(d)) {
        metaData[i].transition(easingDecimal).draw();
    }
}
Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);}, $__.fs.J$__v7918151485_294_888_641 = $__.fs.J$__v7918151485_294_888, $__.fs.J$__v7918151485_294_888),
        'setHoverStyle': ($__.fs.J$__v7918151485_296_889 = function J$__v7918151485_296(rectangle) {
var vvv_return, vvv_switch, dataset, index, custom, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rectangle = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dataset = this.chart.data.datasets[rectangle._datasetIndex];
index = rectangle._index;
custom = rectangle.custom || {};
model = rectangle._model;
model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));
model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);}, $__.fs.J$__v7918151485_296_889_643 = $__.fs.J$__v7918151485_296_889, $__.fs.J$__v7918151485_296_889),
        'removeHoverStyle': ($__.fs.J$__v7918151485_298_890 = function J$__v7918151485_298(rectangle) {
var vvv_return, vvv_switch, dataset, index, custom, model, rectangleElementOptions;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rectangle = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dataset = this.chart.data.datasets[rectangle._datasetIndex];
index = rectangle._index;
custom = rectangle.custom || {};
model = rectangle._model;
rectangleElementOptions = this.chart.options.elements.rectangle;
model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);
model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);
model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);}, $__.fs.J$__v7918151485_298_890_645 = $__.fs.J$__v7918151485_298_890, $__.fs.J$__v7918151485_298_890)
    }, 16, true, $__.uid));
    ((Chart.defaults, $__.os.oid57), $__.os.oid57).horizontalBar = $__.os.oid255 = {
        'hover': $__.os.oid246 = {
            'mode': 'label'
        },
        'scales': $__.os.oid250 = {
            'xAxes': [$__.os.oid247 = {
                    'type': 'linear',
                    'position': 'bottom'
                }],
            'yAxes': [$__.os.oid249 = {
                    'position': 'left',
                    'type': 'category',
                    'categoryPercentage': 0.8,
                    'barPercentage': 0.9,
                    'gridLines': $__.os.oid248 = {
                        'offsetGridLines': true
                    }
                }]
        },
        'elements': $__.os.oid252 = {
            'rectangle': $__.os.oid251 = {
                'borderSkipped': 'left'
            }
        },
        'tooltips': $__.os.oid254 = {
            'callbacks': $__.os.oid253 = {
                'title': ($__.fs.J$__v7918151485_300_894 = function J$__v7918151485_300(tooltipItems, data) {
var vvv_return, vvv_switch, title;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipItems = arguments[0], data = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
title = '';
if (tooltipItems.length > 0) {
    if (tooltipItems[0].yLabel) {
        title = tooltipItems[0].yLabel;
    } else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {
        title = data.labels[tooltipItems[0].index];
    }
}
return title;}),
                'label': ($__.fs.J$__v7918151485_302_895 = function J$__v7918151485_302(tooltipItem, data) {
var vvv_return, vvv_switch, datasetLabel;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipItem = arguments[0], data = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
return datasetLabel + ': ' + tooltipItem.xLabel;})
            }
        }
    };
    ((Chart.controllers, $__.os.oid118), $__.os.oid118).horizontalBar = (vvv_tmp1 = TAJS_restrictToType(((Chart.controllers, $__.os.oid118), $__.os.oid118).bar, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp1, $__.os.oid256 = {
        'getStackCount': ($__.fs.J$__v7918151485_306_896 = function J$__v7918151485_306() {
var vvv_return, vvv_switch, me, meta, xScale, stacks;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
xScale = me.getScaleForId(meta.xAxisID);
stacks = [];
helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
    var dsMeta = me.chart.getDatasetMeta(datasetIndex);
    if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) && (xScale.options.stacked === false || xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
        stacks.push(dsMeta.stack);
    }
}, me);
return stacks.length;}, $__.fs.J$__v7918151485_306_896_647 = $__.fs.J$__v7918151485_306_896, $__.fs.J$__v7918151485_306_896),
        'updateElement': ($__.fs.J$__v7918151485_308_897 = function J$__v7918151485_308(rectangle, index, reset) {
var vvv_return, vvv_switch, me, meta, xScale, yScale, scaleBase, custom, dataset, rectangleElementOptions, ruler;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rectangle = arguments[0], index = arguments[1], reset = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
xScale = me.getScaleForId(meta.xAxisID);
yScale = me.getScaleForId(meta.yAxisID);
scaleBase = xScale.getBasePixel();
custom = rectangle.custom || {};
dataset = me.getDataset();
rectangleElementOptions = me.chart.options.elements.rectangle;
rectangle._xScale = xScale;
rectangle._yScale = yScale;
rectangle._datasetIndex = me.index;
rectangle._index = index;
ruler = me.getRuler(index);
rectangle._model = {
    x: reset ? scaleBase : me.calculateBarX(index, me.index),
    y: me.calculateBarY(index, me.index, ruler),
    label: me.chart.data.labels[index],
    datasetLabel: dataset.label,
    horizontal: true,
    base: reset ? scaleBase : me.calculateBarBase(me.index, index),
    height: me.calculateBarHeight(ruler),
    backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
    borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
    borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
    borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
};
rectangle.pivot();}, $__.fs.J$__v7918151485_308_897_649 = $__.fs.J$__v7918151485_308_897, $__.fs.J$__v7918151485_308_897),
        'calculateBarBase': ($__.fs.J$__v7918151485_310_898 = function J$__v7918151485_310(datasetIndex, index) {
var vvv_return, vvv_switch, me, meta, xScale, base, originalBase, chart, datasets, value, currentDs, currentDsMeta, currentVal;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
datasetIndex = arguments[0], index = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
xScale = me.getScaleForId(meta.xAxisID);
base = xScale.getBaseValue();
originalBase = base;
if (xScale.options.stacked || xScale.options.stacked === undefined && meta.stack !== undefined) {
    chart = me.chart;
    datasets = chart.data.datasets;
    value = Number(datasets[datasetIndex].data[index]);
    for (var i = 0; i < datasetIndex; i++) {
        currentDs = datasets[i];
        currentDsMeta = chart.getDatasetMeta(i);
        if (currentDsMeta.bar && currentDsMeta.xAxisID === xScale.id && chart.isDatasetVisible(i) && meta.stack === currentDsMeta.stack) {
            currentVal = Number(currentDs.data[index]);
            base += value < 0 ? Math.min(currentVal, originalBase) : Math.max(currentVal, originalBase);
        }
    }
    return xScale.getPixelForValue(base);
}
return xScale.getBasePixel();}, $__.fs.J$__v7918151485_310_898_651 = $__.fs.J$__v7918151485_310_898, $__.fs.J$__v7918151485_310_898),
        'getRuler': ($__.fs.J$__v7918151485_312_899 = function J$__v7918151485_312() {
var vvv_return, vvv_switch, me, meta, yScale, stackCount, tickHeight, categoryHeight, categorySpacing, fullBarHeight, barHeight, barSpacing;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
yScale = me.getScaleForId(meta.yAxisID);
stackCount = me.getStackCount();
tickHeight = yScale.height / yScale.ticks.length;
categoryHeight = tickHeight * yScale.options.categoryPercentage;
categorySpacing = (tickHeight - tickHeight * yScale.options.categoryPercentage) / 2;
fullBarHeight = categoryHeight / stackCount;
barHeight = fullBarHeight * yScale.options.barPercentage;
barSpacing = fullBarHeight - fullBarHeight * yScale.options.barPercentage;
return {
    stackCount: stackCount,
    tickHeight: tickHeight,
    categoryHeight: categoryHeight,
    categorySpacing: categorySpacing,
    fullBarHeight: fullBarHeight,
    barHeight: barHeight,
    barSpacing: barSpacing
};}, $__.fs.J$__v7918151485_312_899_653 = $__.fs.J$__v7918151485_312_899, $__.fs.J$__v7918151485_312_899),
        'calculateBarHeight': ($__.fs.J$__v7918151485_314_900 = function J$__v7918151485_314(ruler) {
var vvv_return, vvv_switch, me, meta, yScale;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ruler = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
yScale = me.getScaleForId(meta.yAxisID);
if (yScale.options.barThickness) {
    return yScale.options.barThickness;
}
return ruler.barHeight;}, $__.fs.J$__v7918151485_314_900_655 = $__.fs.J$__v7918151485_314_900, $__.fs.J$__v7918151485_314_900),
        'getStackIndex': ($__.fs.J$__v7918151485_316_901 = function J$__v7918151485_316(datasetIndex) {
var vvv_return, vvv_switch, me, meta, xScale, dsMeta, j, stacks;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
datasetIndex = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.chart.getDatasetMeta(datasetIndex);
xScale = me.getScaleForId(meta.xAxisID);
stacks = [meta.stack];
for (j = 0; j < datasetIndex; ++j) {
    dsMeta = this.chart.getDatasetMeta(j);
    if (dsMeta.bar && this.chart.isDatasetVisible(j) && (xScale.options.stacked === false || xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
        stacks.push(dsMeta.stack);
    }
}
return stacks.length - 1;}, $__.fs.J$__v7918151485_316_901_657 = $__.fs.J$__v7918151485_316_901, $__.fs.J$__v7918151485_316_901),
        'calculateBarX': ($__.fs.J$__v7918151485_318_902 = function J$__v7918151485_318(index, datasetIndex) {
var vvv_return, vvv_switch, me, meta, xScale, value, base, sumPos, sumNeg, ds, dsMeta, stackedVal;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], datasetIndex = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
xScale = me.getScaleForId(meta.xAxisID);
value = Number(me.getDataset().data[index]);
if (xScale.options.stacked || xScale.options.stacked === undefined && meta.stack !== undefined) {
    base = xScale.getBaseValue();
    sumPos = base;
    sumNeg = base;
    for (var i = 0; i < datasetIndex; i++) {
        ds = me.chart.data.datasets[i];
        dsMeta = me.chart.getDatasetMeta(i);
        if (dsMeta.bar && dsMeta.xAxisID === xScale.id && me.chart.isDatasetVisible(i) && meta.stack === dsMeta.stack) {
            stackedVal = Number(ds.data[index]);
            if (stackedVal < 0) {
                sumNeg += stackedVal || 0;
            } else {
                sumPos += stackedVal || 0;
            }
        }
    }
    if (value < 0) {
        return xScale.getPixelForValue(sumNeg + value);
    }
    return xScale.getPixelForValue(sumPos + value);
}
return xScale.getPixelForValue(value);}, $__.fs.J$__v7918151485_318_902_659 = $__.fs.J$__v7918151485_318_902, $__.fs.J$__v7918151485_318_902),
        'calculateBarY': ($__.fs.J$__v7918151485_320_903 = function J$__v7918151485_320(index, datasetIndex, ruler) {
var vvv_return, vvv_switch, me, meta, yScale, stackIndex, topTick;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], datasetIndex = arguments[1], ruler = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
yScale = me.getScaleForId(meta.yAxisID);
stackIndex = me.getStackIndex(datasetIndex);
topTick = yScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
topTick -= me.chart.isCombo ? ruler.tickHeight / 2 : 0;
return topTick + ruler.barHeight / 2 + ruler.categorySpacing + ruler.barHeight * stackIndex + ruler.barSpacing / 2 + ruler.barSpacing * stackIndex;}, $__.fs.J$__v7918151485_320_903_661 = $__.fs.J$__v7918151485_320_903, $__.fs.J$__v7918151485_320_903)
    }, 17, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.defaults.bar = {
    hover: {
        mode: 'label'
    },
    scales: {
        xAxes: [{
                type: 'category',
                categoryPercentage: 0.8,
                barPercentage: 0.9,
                gridLines: {
                    offsetGridLines: true
                }
            }],
        yAxes: [{
                type: 'linear'
            }]
    }
};
Chart.controllers.bar = Chart.DatasetController.extend({
    dataElementType: Chart.elements.Rectangle,
    initialize: function (chart, datasetIndex) {
        Chart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);
        var me = this;
        var meta = me.getMeta();
        var dataset = me.getDataset();
        meta.stack = dataset.stack;
        meta.bar = true;
    },
    getStackCount: function () {
        var me = this;
        var meta = me.getMeta();
        var yScale = me.getScaleForId(meta.yAxisID);
        var stacks = [];
        helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
            var dsMeta = me.chart.getDatasetMeta(datasetIndex);
            if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) && (yScale.options.stacked === false || yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                stacks.push(dsMeta.stack);
            }
        }, me);
        return stacks.length;
    },
    update: function (reset) {
        var me = this;
        helpers.each(me.getMeta().data, function (rectangle, index) {
            me.updateElement(rectangle, index, reset);
        }, me);
    },
    updateElement: function (rectangle, index, reset) {
        var me = this;
        var meta = me.getMeta();
        var xScale = me.getScaleForId(meta.xAxisID);
        var yScale = me.getScaleForId(meta.yAxisID);
        var scaleBase = yScale.getBasePixel();
        var rectangleElementOptions = me.chart.options.elements.rectangle;
        var custom = rectangle.custom || {};
        var dataset = me.getDataset();
        rectangle._xScale = xScale;
        rectangle._yScale = yScale;
        rectangle._datasetIndex = me.index;
        rectangle._index = index;
        var ruler = me.getRuler(index);
        rectangle._model = {
            x: me.calculateBarX(index, me.index, ruler),
            y: reset ? scaleBase : me.calculateBarY(index, me.index),
            label: me.chart.data.labels[index],
            datasetLabel: dataset.label,
            horizontal: false,
            base: reset ? scaleBase : me.calculateBarBase(me.index, index),
            width: me.calculateBarWidth(ruler),
            backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
            borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
            borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
            borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
        };
        rectangle.pivot();
    },
    calculateBarBase: function (datasetIndex, index) {
        var me = this;
        var meta = me.getMeta();
        var yScale = me.getScaleForId(meta.yAxisID);
        var base = yScale.getBaseValue();
        var original = base;
        if (yScale.options.stacked === true || yScale.options.stacked === undefined && meta.stack !== undefined) {
            var chart = me.chart;
            var datasets = chart.data.datasets;
            var value = Number(datasets[datasetIndex].data[index]);
            for (var i = 0; i < datasetIndex; i++) {
                var currentDs = datasets[i];
                var currentDsMeta = chart.getDatasetMeta(i);
                if (currentDsMeta.bar && currentDsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i) && meta.stack === currentDsMeta.stack) {
                    var currentVal = Number(currentDs.data[index]);
                    base += value < 0 ? Math.min(currentVal, original) : Math.max(currentVal, original);
                }
            }
            return yScale.getPixelForValue(base);
        }
        return yScale.getBasePixel();
    },
    getRuler: function () {
        var me = this;
        var meta = me.getMeta();
        var xScale = me.getScaleForId(meta.xAxisID);
        var stackCount = me.getStackCount();
        var tickWidth = xScale.width / xScale.ticks.length;
        var categoryWidth = tickWidth * xScale.options.categoryPercentage;
        var categorySpacing = (tickWidth - tickWidth * xScale.options.categoryPercentage) / 2;
        var fullBarWidth = categoryWidth / stackCount;
        var barWidth = fullBarWidth * xScale.options.barPercentage;
        var barSpacing = fullBarWidth - fullBarWidth * xScale.options.barPercentage;
        return {
            stackCount: stackCount,
            tickWidth: tickWidth,
            categoryWidth: categoryWidth,
            categorySpacing: categorySpacing,
            fullBarWidth: fullBarWidth,
            barWidth: barWidth,
            barSpacing: barSpacing
        };
    },
    calculateBarWidth: function (ruler) {
        var me = this;
        var meta = me.getMeta();
        var xScale = me.getScaleForId(meta.xAxisID);
        if (xScale.options.barThickness) {
            return xScale.options.barThickness;
        }
        return ruler.barWidth;
    },
    getStackIndex: function (datasetIndex) {
        var me = this;
        var meta = me.chart.getDatasetMeta(datasetIndex);
        var yScale = me.getScaleForId(meta.yAxisID);
        var dsMeta, j;
        var stacks = [meta.stack];
        for (j = 0; j < datasetIndex; ++j) {
            dsMeta = this.chart.getDatasetMeta(j);
            if (dsMeta.bar && this.chart.isDatasetVisible(j) && (yScale.options.stacked === false || yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                stacks.push(dsMeta.stack);
            }
        }
        return stacks.length - 1;
    },
    calculateBarX: function (index, datasetIndex, ruler) {
        var me = this;
        var meta = me.getMeta();
        var xScale = me.getScaleForId(meta.xAxisID);
        var stackIndex = me.getStackIndex(datasetIndex);
        var leftTick = xScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
        leftTick -= me.chart.isCombo ? ruler.tickWidth / 2 : 0;
        return leftTick + ruler.barWidth / 2 + ruler.categorySpacing + ruler.barWidth * stackIndex + ruler.barSpacing / 2 + ruler.barSpacing * stackIndex;
    },
    calculateBarY: function (index, datasetIndex) {
        var me = this;
        var meta = me.getMeta();
        var yScale = me.getScaleForId(meta.yAxisID);
        var value = Number(me.getDataset().data[index]);
        if (yScale.options.stacked || yScale.options.stacked === undefined && meta.stack !== undefined) {
            var base = yScale.getBaseValue();
            var sumPos = base, sumNeg = base;
            for (var i = 0; i < datasetIndex; i++) {
                var ds = me.chart.data.datasets[i];
                var dsMeta = me.chart.getDatasetMeta(i);
                if (dsMeta.bar && dsMeta.yAxisID === yScale.id && me.chart.isDatasetVisible(i) && meta.stack === dsMeta.stack) {
                    var stackedVal = Number(ds.data[index]);
                    if (stackedVal < 0) {
                        sumNeg += stackedVal || 0;
                    } else {
                        sumPos += stackedVal || 0;
                    }
                }
            }
            if (value < 0) {
                return yScale.getPixelForValue(sumNeg + value);
            }
            return yScale.getPixelForValue(sumPos + value);
        }
        return yScale.getPixelForValue(value);
    },
    draw: function (ease) {
        var me = this;
        var easingDecimal = ease || 1;
        var metaData = me.getMeta().data;
        var dataset = me.getDataset();
        var i, len;
        Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
        for (i = 0, len = metaData.length; i < len; ++i) {
            var d = dataset.data[i];
            if (d !== null && d !== undefined && !isNaN(d)) {
                metaData[i].transition(easingDecimal).draw();
            }
        }
        Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
    },
    setHoverStyle: function (rectangle) {
        var dataset = this.chart.data.datasets[rectangle._datasetIndex];
        var index = rectangle._index;
        var custom = rectangle.custom || {};
        var model = rectangle._model;
        model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
        model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));
        model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
    },
    removeHoverStyle: function (rectangle) {
        var dataset = this.chart.data.datasets[rectangle._datasetIndex];
        var index = rectangle._index;
        var custom = rectangle.custom || {};
        var model = rectangle._model;
        var rectangleElementOptions = this.chart.options.elements.rectangle;
        model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);
        model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);
        model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);
    }
});
Chart.defaults.horizontalBar = {
    hover: {
        mode: 'label'
    },
    scales: {
        xAxes: [{
                type: 'linear',
                position: 'bottom'
            }],
        yAxes: [{
                position: 'left',
                type: 'category',
                categoryPercentage: 0.8,
                barPercentage: 0.9,
                gridLines: {
                    offsetGridLines: true
                }
            }]
    },
    elements: {
        rectangle: {
            borderSkipped: 'left'
        }
    },
    tooltips: {
        callbacks: {
            title: function (tooltipItems, data) {
                var title = '';
                if (tooltipItems.length > 0) {
                    if (tooltipItems[0].yLabel) {
                        title = tooltipItems[0].yLabel;
                    } else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {
                        title = data.labels[tooltipItems[0].index];
                    }
                }
                return title;
            },
            label: function (tooltipItem, data) {
                var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
                return datasetLabel + ': ' + tooltipItem.xLabel;
            }
        }
    }
};
Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
    getStackCount: function () {
        var me = this;
        var meta = me.getMeta();
        var xScale = me.getScaleForId(meta.xAxisID);
        var stacks = [];
        helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
            var dsMeta = me.chart.getDatasetMeta(datasetIndex);
            if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) && (xScale.options.stacked === false || xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                stacks.push(dsMeta.stack);
            }
        }, me);
        return stacks.length;
    },
    updateElement: function (rectangle, index, reset) {
        var me = this;
        var meta = me.getMeta();
        var xScale = me.getScaleForId(meta.xAxisID);
        var yScale = me.getScaleForId(meta.yAxisID);
        var scaleBase = xScale.getBasePixel();
        var custom = rectangle.custom || {};
        var dataset = me.getDataset();
        var rectangleElementOptions = me.chart.options.elements.rectangle;
        rectangle._xScale = xScale;
        rectangle._yScale = yScale;
        rectangle._datasetIndex = me.index;
        rectangle._index = index;
        var ruler = me.getRuler(index);
        rectangle._model = {
            x: reset ? scaleBase : me.calculateBarX(index, me.index),
            y: me.calculateBarY(index, me.index, ruler),
            label: me.chart.data.labels[index],
            datasetLabel: dataset.label,
            horizontal: true,
            base: reset ? scaleBase : me.calculateBarBase(me.index, index),
            height: me.calculateBarHeight(ruler),
            backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
            borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
            borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
            borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
        };
        rectangle.pivot();
    },
    calculateBarBase: function (datasetIndex, index) {
        var me = this;
        var meta = me.getMeta();
        var xScale = me.getScaleForId(meta.xAxisID);
        var base = xScale.getBaseValue();
        var originalBase = base;
        if (xScale.options.stacked || xScale.options.stacked === undefined && meta.stack !== undefined) {
            var chart = me.chart;
            var datasets = chart.data.datasets;
            var value = Number(datasets[datasetIndex].data[index]);
            for (var i = 0; i < datasetIndex; i++) {
                var currentDs = datasets[i];
                var currentDsMeta = chart.getDatasetMeta(i);
                if (currentDsMeta.bar && currentDsMeta.xAxisID === xScale.id && chart.isDatasetVisible(i) && meta.stack === currentDsMeta.stack) {
                    var currentVal = Number(currentDs.data[index]);
                    base += value < 0 ? Math.min(currentVal, originalBase) : Math.max(currentVal, originalBase);
                }
            }
            return xScale.getPixelForValue(base);
        }
        return xScale.getBasePixel();
    },
    getRuler: function () {
        var me = this;
        var meta = me.getMeta();
        var yScale = me.getScaleForId(meta.yAxisID);
        var stackCount = me.getStackCount();
        var tickHeight = yScale.height / yScale.ticks.length;
        var categoryHeight = tickHeight * yScale.options.categoryPercentage;
        var categorySpacing = (tickHeight - tickHeight * yScale.options.categoryPercentage) / 2;
        var fullBarHeight = categoryHeight / stackCount;
        var barHeight = fullBarHeight * yScale.options.barPercentage;
        var barSpacing = fullBarHeight - fullBarHeight * yScale.options.barPercentage;
        return {
            stackCount: stackCount,
            tickHeight: tickHeight,
            categoryHeight: categoryHeight,
            categorySpacing: categorySpacing,
            fullBarHeight: fullBarHeight,
            barHeight: barHeight,
            barSpacing: barSpacing
        };
    },
    calculateBarHeight: function (ruler) {
        var me = this;
        var meta = me.getMeta();
        var yScale = me.getScaleForId(meta.yAxisID);
        if (yScale.options.barThickness) {
            return yScale.options.barThickness;
        }
        return ruler.barHeight;
    },
    getStackIndex: function (datasetIndex) {
        var me = this;
        var meta = me.chart.getDatasetMeta(datasetIndex);
        var xScale = me.getScaleForId(meta.xAxisID);
        var dsMeta, j;
        var stacks = [meta.stack];
        for (j = 0; j < datasetIndex; ++j) {
            dsMeta = this.chart.getDatasetMeta(j);
            if (dsMeta.bar && this.chart.isDatasetVisible(j) && (xScale.options.stacked === false || xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                stacks.push(dsMeta.stack);
            }
        }
        return stacks.length - 1;
    },
    calculateBarX: function (index, datasetIndex) {
        var me = this;
        var meta = me.getMeta();
        var xScale = me.getScaleForId(meta.xAxisID);
        var value = Number(me.getDataset().data[index]);
        if (xScale.options.stacked || xScale.options.stacked === undefined && meta.stack !== undefined) {
            var base = xScale.getBaseValue();
            var sumPos = base, sumNeg = base;
            for (var i = 0; i < datasetIndex; i++) {
                var ds = me.chart.data.datasets[i];
                var dsMeta = me.chart.getDatasetMeta(i);
                if (dsMeta.bar && dsMeta.xAxisID === xScale.id && me.chart.isDatasetVisible(i) && meta.stack === dsMeta.stack) {
                    var stackedVal = Number(ds.data[index]);
                    if (stackedVal < 0) {
                        sumNeg += stackedVal || 0;
                    } else {
                        sumPos += stackedVal || 0;
                    }
                }
            }
            if (value < 0) {
                return xScale.getPixelForValue(sumNeg + value);
            }
            return xScale.getPixelForValue(sumPos + value);
        }
        return xScale.getPixelForValue(value);
    },
    calculateBarY: function (index, datasetIndex, ruler) {
        var me = this;
        var meta = me.getMeta();
        var yScale = me.getScaleForId(meta.yAxisID);
        var stackIndex = me.getStackIndex(datasetIndex);
        var topTick = yScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
        topTick -= me.chart.isCombo ? ruler.tickHeight / 2 : 0;
        return topTick + ruler.barHeight / 2 + ruler.categorySpacing + ruler.barHeight * stackIndex + ruler.barSpacing / 2 + ruler.barSpacing * stackIndex;
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.defaults.bar = {
        hover: {
            mode: 'label'
        },
        scales: {
            xAxes: [{
                    type: 'category',
                    categoryPercentage: 0.8,
                    barPercentage: 0.9,
                    gridLines: {
                        offsetGridLines: true
                    }
                }],
            yAxes: [{
                    type: 'linear'
                }]
        }
    };
    Chart.controllers.bar = Chart.DatasetController.extend({
        dataElementType: Chart.elements.Rectangle,
        initialize: function (chart, datasetIndex) {
            Chart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);
            var me = this;
            var meta = me.getMeta();
            var dataset = me.getDataset();
            meta.stack = dataset.stack;
            meta.bar = true;
        },
        getStackCount: function () {
            var me = this;
            var meta = me.getMeta();
            var yScale = me.getScaleForId(meta.yAxisID);
            var stacks = [];
            helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
                var dsMeta = me.chart.getDatasetMeta(datasetIndex);
                if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) && (yScale.options.stacked === false || yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                    stacks.push(dsMeta.stack);
                }
            }, me);
            return stacks.length;
        },
        update: function (reset) {
            var me = this;
            helpers.each(me.getMeta().data, function (rectangle, index) {
                me.updateElement(rectangle, index, reset);
            }, me);
        },
        updateElement: function (rectangle, index, reset) {
            var me = this;
            var meta = me.getMeta();
            var xScale = me.getScaleForId(meta.xAxisID);
            var yScale = me.getScaleForId(meta.yAxisID);
            var scaleBase = yScale.getBasePixel();
            var rectangleElementOptions = me.chart.options.elements.rectangle;
            var custom = rectangle.custom || {};
            var dataset = me.getDataset();
            rectangle._xScale = xScale;
            rectangle._yScale = yScale;
            rectangle._datasetIndex = me.index;
            rectangle._index = index;
            var ruler = me.getRuler(index);
            rectangle._model = {
                x: me.calculateBarX(index, me.index, ruler),
                y: reset ? scaleBase : me.calculateBarY(index, me.index),
                label: me.chart.data.labels[index],
                datasetLabel: dataset.label,
                horizontal: false,
                base: reset ? scaleBase : me.calculateBarBase(me.index, index),
                width: me.calculateBarWidth(ruler),
                backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
                borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
                borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
                borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
            };
            rectangle.pivot();
        },
        calculateBarBase: function (datasetIndex, index) {
            var me = this;
            var meta = me.getMeta();
            var yScale = me.getScaleForId(meta.yAxisID);
            var base = yScale.getBaseValue();
            var original = base;
            if (yScale.options.stacked === true || yScale.options.stacked === undefined && meta.stack !== undefined) {
                var chart = me.chart;
                var datasets = chart.data.datasets;
                var value = Number(datasets[datasetIndex].data[index]);
                for (var i = 0; i < datasetIndex; i++) {
                    var currentDs = datasets[i];
                    var currentDsMeta = chart.getDatasetMeta(i);
                    if (currentDsMeta.bar && currentDsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i) && meta.stack === currentDsMeta.stack) {
                        var currentVal = Number(currentDs.data[index]);
                        base += value < 0 ? Math.min(currentVal, original) : Math.max(currentVal, original);
                    }
                }
                return yScale.getPixelForValue(base);
            }
            return yScale.getBasePixel();
        },
        getRuler: function () {
            var me = this;
            var meta = me.getMeta();
            var xScale = me.getScaleForId(meta.xAxisID);
            var stackCount = me.getStackCount();
            var tickWidth = xScale.width / xScale.ticks.length;
            var categoryWidth = tickWidth * xScale.options.categoryPercentage;
            var categorySpacing = (tickWidth - tickWidth * xScale.options.categoryPercentage) / 2;
            var fullBarWidth = categoryWidth / stackCount;
            var barWidth = fullBarWidth * xScale.options.barPercentage;
            var barSpacing = fullBarWidth - fullBarWidth * xScale.options.barPercentage;
            return {
                stackCount: stackCount,
                tickWidth: tickWidth,
                categoryWidth: categoryWidth,
                categorySpacing: categorySpacing,
                fullBarWidth: fullBarWidth,
                barWidth: barWidth,
                barSpacing: barSpacing
            };
        },
        calculateBarWidth: function (ruler) {
            var me = this;
            var meta = me.getMeta();
            var xScale = me.getScaleForId(meta.xAxisID);
            if (xScale.options.barThickness) {
                return xScale.options.barThickness;
            }
            return ruler.barWidth;
        },
        getStackIndex: function (datasetIndex) {
            var me = this;
            var meta = me.chart.getDatasetMeta(datasetIndex);
            var yScale = me.getScaleForId(meta.yAxisID);
            var dsMeta, j;
            var stacks = [meta.stack];
            for (j = 0; j < datasetIndex; ++j) {
                dsMeta = this.chart.getDatasetMeta(j);
                if (dsMeta.bar && this.chart.isDatasetVisible(j) && (yScale.options.stacked === false || yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                    stacks.push(dsMeta.stack);
                }
            }
            return stacks.length - 1;
        },
        calculateBarX: function (index, datasetIndex, ruler) {
            var me = this;
            var meta = me.getMeta();
            var xScale = me.getScaleForId(meta.xAxisID);
            var stackIndex = me.getStackIndex(datasetIndex);
            var leftTick = xScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
            leftTick -= me.chart.isCombo ? ruler.tickWidth / 2 : 0;
            return leftTick + ruler.barWidth / 2 + ruler.categorySpacing + ruler.barWidth * stackIndex + ruler.barSpacing / 2 + ruler.barSpacing * stackIndex;
        },
        calculateBarY: function (index, datasetIndex) {
            var me = this;
            var meta = me.getMeta();
            var yScale = me.getScaleForId(meta.yAxisID);
            var value = Number(me.getDataset().data[index]);
            if (yScale.options.stacked || yScale.options.stacked === undefined && meta.stack !== undefined) {
                var base = yScale.getBaseValue();
                var sumPos = base, sumNeg = base;
                for (var i = 0; i < datasetIndex; i++) {
                    var ds = me.chart.data.datasets[i];
                    var dsMeta = me.chart.getDatasetMeta(i);
                    if (dsMeta.bar && dsMeta.yAxisID === yScale.id && me.chart.isDatasetVisible(i) && meta.stack === dsMeta.stack) {
                        var stackedVal = Number(ds.data[index]);
                        if (stackedVal < 0) {
                            sumNeg += stackedVal || 0;
                        } else {
                            sumPos += stackedVal || 0;
                        }
                    }
                }
                if (value < 0) {
                    return yScale.getPixelForValue(sumNeg + value);
                }
                return yScale.getPixelForValue(sumPos + value);
            }
            return yScale.getPixelForValue(value);
        },
        draw: function (ease) {
            var me = this;
            var easingDecimal = ease || 1;
            var metaData = me.getMeta().data;
            var dataset = me.getDataset();
            var i, len;
            Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
            for (i = 0, len = metaData.length; i < len; ++i) {
                var d = dataset.data[i];
                if (d !== null && d !== undefined && !isNaN(d)) {
                    metaData[i].transition(easingDecimal).draw();
                }
            }
            Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
        },
        setHoverStyle: function (rectangle) {
            var dataset = this.chart.data.datasets[rectangle._datasetIndex];
            var index = rectangle._index;
            var custom = rectangle.custom || {};
            var model = rectangle._model;
            model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
            model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));
            model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
        },
        removeHoverStyle: function (rectangle) {
            var dataset = this.chart.data.datasets[rectangle._datasetIndex];
            var index = rectangle._index;
            var custom = rectangle.custom || {};
            var model = rectangle._model;
            var rectangleElementOptions = this.chart.options.elements.rectangle;
            model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);
            model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);
            model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);
        }
    });
    Chart.defaults.horizontalBar = {
        hover: {
            mode: 'label'
        },
        scales: {
            xAxes: [{
                    type: 'linear',
                    position: 'bottom'
                }],
            yAxes: [{
                    position: 'left',
                    type: 'category',
                    categoryPercentage: 0.8,
                    barPercentage: 0.9,
                    gridLines: {
                        offsetGridLines: true
                    }
                }]
        },
        elements: {
            rectangle: {
                borderSkipped: 'left'
            }
        },
        tooltips: {
            callbacks: {
                title: function (tooltipItems, data) {
                    var title = '';
                    if (tooltipItems.length > 0) {
                        if (tooltipItems[0].yLabel) {
                            title = tooltipItems[0].yLabel;
                        } else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {
                            title = data.labels[tooltipItems[0].index];
                        }
                    }
                    return title;
                },
                label: function (tooltipItem, data) {
                    var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
                    return datasetLabel + ': ' + tooltipItem.xLabel;
                }
            }
        }
    };
    Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
        getStackCount: function () {
            var me = this;
            var meta = me.getMeta();
            var xScale = me.getScaleForId(meta.xAxisID);
            var stacks = [];
            helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
                var dsMeta = me.chart.getDatasetMeta(datasetIndex);
                if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) && (xScale.options.stacked === false || xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                    stacks.push(dsMeta.stack);
                }
            }, me);
            return stacks.length;
        },
        updateElement: function (rectangle, index, reset) {
            var me = this;
            var meta = me.getMeta();
            var xScale = me.getScaleForId(meta.xAxisID);
            var yScale = me.getScaleForId(meta.yAxisID);
            var scaleBase = xScale.getBasePixel();
            var custom = rectangle.custom || {};
            var dataset = me.getDataset();
            var rectangleElementOptions = me.chart.options.elements.rectangle;
            rectangle._xScale = xScale;
            rectangle._yScale = yScale;
            rectangle._datasetIndex = me.index;
            rectangle._index = index;
            var ruler = me.getRuler(index);
            rectangle._model = {
                x: reset ? scaleBase : me.calculateBarX(index, me.index),
                y: me.calculateBarY(index, me.index, ruler),
                label: me.chart.data.labels[index],
                datasetLabel: dataset.label,
                horizontal: true,
                base: reset ? scaleBase : me.calculateBarBase(me.index, index),
                height: me.calculateBarHeight(ruler),
                backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
                borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
                borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
                borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
            };
            rectangle.pivot();
        },
        calculateBarBase: function (datasetIndex, index) {
            var me = this;
            var meta = me.getMeta();
            var xScale = me.getScaleForId(meta.xAxisID);
            var base = xScale.getBaseValue();
            var originalBase = base;
            if (xScale.options.stacked || xScale.options.stacked === undefined && meta.stack !== undefined) {
                var chart = me.chart;
                var datasets = chart.data.datasets;
                var value = Number(datasets[datasetIndex].data[index]);
                for (var i = 0; i < datasetIndex; i++) {
                    var currentDs = datasets[i];
                    var currentDsMeta = chart.getDatasetMeta(i);
                    if (currentDsMeta.bar && currentDsMeta.xAxisID === xScale.id && chart.isDatasetVisible(i) && meta.stack === currentDsMeta.stack) {
                        var currentVal = Number(currentDs.data[index]);
                        base += value < 0 ? Math.min(currentVal, originalBase) : Math.max(currentVal, originalBase);
                    }
                }
                return xScale.getPixelForValue(base);
            }
            return xScale.getBasePixel();
        },
        getRuler: function () {
            var me = this;
            var meta = me.getMeta();
            var yScale = me.getScaleForId(meta.yAxisID);
            var stackCount = me.getStackCount();
            var tickHeight = yScale.height / yScale.ticks.length;
            var categoryHeight = tickHeight * yScale.options.categoryPercentage;
            var categorySpacing = (tickHeight - tickHeight * yScale.options.categoryPercentage) / 2;
            var fullBarHeight = categoryHeight / stackCount;
            var barHeight = fullBarHeight * yScale.options.barPercentage;
            var barSpacing = fullBarHeight - fullBarHeight * yScale.options.barPercentage;
            return {
                stackCount: stackCount,
                tickHeight: tickHeight,
                categoryHeight: categoryHeight,
                categorySpacing: categorySpacing,
                fullBarHeight: fullBarHeight,
                barHeight: barHeight,
                barSpacing: barSpacing
            };
        },
        calculateBarHeight: function (ruler) {
            var me = this;
            var meta = me.getMeta();
            var yScale = me.getScaleForId(meta.yAxisID);
            if (yScale.options.barThickness) {
                return yScale.options.barThickness;
            }
            return ruler.barHeight;
        },
        getStackIndex: function (datasetIndex) {
            var me = this;
            var meta = me.chart.getDatasetMeta(datasetIndex);
            var xScale = me.getScaleForId(meta.xAxisID);
            var dsMeta, j;
            var stacks = [meta.stack];
            for (j = 0; j < datasetIndex; ++j) {
                dsMeta = this.chart.getDatasetMeta(j);
                if (dsMeta.bar && this.chart.isDatasetVisible(j) && (xScale.options.stacked === false || xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                    stacks.push(dsMeta.stack);
                }
            }
            return stacks.length - 1;
        },
        calculateBarX: function (index, datasetIndex) {
            var me = this;
            var meta = me.getMeta();
            var xScale = me.getScaleForId(meta.xAxisID);
            var value = Number(me.getDataset().data[index]);
            if (xScale.options.stacked || xScale.options.stacked === undefined && meta.stack !== undefined) {
                var base = xScale.getBaseValue();
                var sumPos = base, sumNeg = base;
                for (var i = 0; i < datasetIndex; i++) {
                    var ds = me.chart.data.datasets[i];
                    var dsMeta = me.chart.getDatasetMeta(i);
                    if (dsMeta.bar && dsMeta.xAxisID === xScale.id && me.chart.isDatasetVisible(i) && meta.stack === dsMeta.stack) {
                        var stackedVal = Number(ds.data[index]);
                        if (stackedVal < 0) {
                            sumNeg += stackedVal || 0;
                        } else {
                            sumPos += stackedVal || 0;
                        }
                    }
                }
                if (value < 0) {
                    return xScale.getPixelForValue(sumNeg + value);
                }
                return xScale.getPixelForValue(sumPos + value);
            }
            return xScale.getPixelForValue(value);
        },
        calculateBarY: function (index, datasetIndex, ruler) {
            var me = this;
            var meta = me.getMeta();
            var yScale = me.getScaleForId(meta.yAxisID);
            var stackIndex = me.getStackIndex(datasetIndex);
            var topTick = yScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
            topTick -= me.chart.isCombo ? ruler.tickHeight / 2 : 0;
            return topTick + ruler.barHeight / 2 + ruler.categorySpacing + ruler.barHeight * stackIndex + ruler.barSpacing / 2 + ruler.barSpacing * stackIndex;
        }
    });
};}, $__.fs.J$__v7918151485_324_20),
            $__.os.oid14 = {}
        ],
        16: [
            ($__.fs.J$__v7918151485_344_21 = function J$__v7918151485_344(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid258).exports = ($__.fs.J$__v7918151485_342_908 = function J$__v7918151485_342(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    ((Chart.defaults, $__.os.oid57), $__.os.oid57).bubble = $__.os.oid265 = {
        'hover': $__.os.oid259 = {
            'mode': 'single'
        },
        'scales': $__.os.oid262 = {
            'xAxes': [$__.os.oid260 = {
                    'type': 'linear',
                    'position': 'bottom',
                    'id': 'x-axis-0'
                }],
            'yAxes': [$__.os.oid261 = {
                    'type': 'linear',
                    'position': 'left',
                    'id': 'y-axis-0'
                }]
        },
        'tooltips': $__.os.oid264 = {
            'callbacks': $__.os.oid263 = {
                'title': ($__.fs.J$__v7918151485_326_909 = function J$__v7918151485_326() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '';}),
                'label': ($__.fs.J$__v7918151485_328_910 = function J$__v7918151485_328(tooltipItem, data) {
var vvv_return, vvv_switch, datasetLabel, dataPoint;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipItem = arguments[0], data = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
return datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';})
            }
        }
    };
    ((Chart.controllers, $__.os.oid118), $__.os.oid118).bubble = (vvv_tmp0 = TAJS_restrictToType(Chart.DatasetController, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid266 = {
        'dataElementType': TAJS_restrictToType(((Chart.elements, $__.os.oid107), $__.os.oid107).Point, 'function'),
        'update': ($__.fs.J$__v7918151485_332_911 = function J$__v7918151485_332(reset) {
var vvv_return, vvv_switch, me, meta, points;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
reset = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
points = meta.data;
helpers.each(points, function (point, index) {
    me.updateElement(point, index, reset);
});}, $__.fs.J$__v7918151485_332_911_668 = $__.fs.J$__v7918151485_332_911, $__.fs.J$__v7918151485_332_911),
        'updateElement': ($__.fs.J$__v7918151485_334_912 = function J$__v7918151485_334(point, index, reset) {
var vvv_return, vvv_switch, me, meta, xScale, yScale, custom, dataset, data, pointElementOptions, dsIndex, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0], index = arguments[1], reset = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
xScale = me.getScaleForId(meta.xAxisID);
yScale = me.getScaleForId(meta.yAxisID);
custom = point.custom || {};
dataset = me.getDataset();
data = dataset.data[index];
pointElementOptions = me.chart.options.elements.point;
dsIndex = me.index;
helpers.extend(point, {
    _xScale: xScale,
    _yScale: yScale,
    _datasetIndex: dsIndex,
    _index: index,
    _model: {
        x: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),
        y: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),
        radius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),
        hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
    }
});
Chart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);
model = point._model;
model.skip = custom.skip ? custom.skip : isNaN(model.x) || isNaN(model.y);
point.pivot();}, $__.fs.J$__v7918151485_334_912_670 = $__.fs.J$__v7918151485_334_912, $__.fs.J$__v7918151485_334_912),
        'getRadius': ($__.fs.J$__v7918151485_336_913 = function J$__v7918151485_336(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return value.r || this.chart.options.elements.point.radius;}, $__.fs.J$__v7918151485_336_913_672 = $__.fs.J$__v7918151485_336_913, $__.fs.J$__v7918151485_336_913),
        'setHoverStyle': ($__.fs.J$__v7918151485_338_914 = function J$__v7918151485_338(point) {
var vvv_return, vvv_switch, me, dataset, index, custom, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
Chart.DatasetController.prototype.setHoverStyle.call(me, point);
dataset = me.chart.data.datasets[point._datasetIndex];
index = point._index;
custom = point.custom || {};
model = point._model;
model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius) + me.getRadius(dataset.data[index]);}, $__.fs.J$__v7918151485_338_914_674 = $__.fs.J$__v7918151485_338_914, $__.fs.J$__v7918151485_338_914),
        'removeHoverStyle': ($__.fs.J$__v7918151485_340_915 = function J$__v7918151485_340(point) {
var vvv_return, vvv_switch, me, dataVal, custom, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
Chart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);
dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];
custom = point.custom || {};
model = point._model;
model.radius = custom.radius ? custom.radius : me.getRadius(dataVal);}, $__.fs.J$__v7918151485_340_915_676 = $__.fs.J$__v7918151485_340_915, $__.fs.J$__v7918151485_340_915)
    }, 18, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.defaults.bubble = {
    hover: {
        mode: 'single'
    },
    scales: {
        xAxes: [{
                type: 'linear',
                position: 'bottom',
                id: 'x-axis-0'
            }],
        yAxes: [{
                type: 'linear',
                position: 'left',
                id: 'y-axis-0'
            }]
    },
    tooltips: {
        callbacks: {
            title: function () {
                return '';
            },
            label: function (tooltipItem, data) {
                var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
                var dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                return datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';
            }
        }
    }
};
Chart.controllers.bubble = Chart.DatasetController.extend({
    dataElementType: Chart.elements.Point,
    update: function (reset) {
        var me = this;
        var meta = me.getMeta();
        var points = meta.data;
        helpers.each(points, function (point, index) {
            me.updateElement(point, index, reset);
        });
    },
    updateElement: function (point, index, reset) {
        var me = this;
        var meta = me.getMeta();
        var xScale = me.getScaleForId(meta.xAxisID);
        var yScale = me.getScaleForId(meta.yAxisID);
        var custom = point.custom || {};
        var dataset = me.getDataset();
        var data = dataset.data[index];
        var pointElementOptions = me.chart.options.elements.point;
        var dsIndex = me.index;
        helpers.extend(point, {
            _xScale: xScale,
            _yScale: yScale,
            _datasetIndex: dsIndex,
            _index: index,
            _model: {
                x: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),
                y: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),
                radius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),
                hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
            }
        });
        Chart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);
        var model = point._model;
        model.skip = custom.skip ? custom.skip : isNaN(model.x) || isNaN(model.y);
        point.pivot();
    },
    getRadius: function (value) {
        return value.r || this.chart.options.elements.point.radius;
    },
    setHoverStyle: function (point) {
        var me = this;
        Chart.DatasetController.prototype.setHoverStyle.call(me, point);
        var dataset = me.chart.data.datasets[point._datasetIndex];
        var index = point._index;
        var custom = point.custom || {};
        var model = point._model;
        model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius) + me.getRadius(dataset.data[index]);
    },
    removeHoverStyle: function (point) {
        var me = this;
        Chart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);
        var dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];
        var custom = point.custom || {};
        var model = point._model;
        model.radius = custom.radius ? custom.radius : me.getRadius(dataVal);
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.defaults.bubble = {
        hover: {
            mode: 'single'
        },
        scales: {
            xAxes: [{
                    type: 'linear',
                    position: 'bottom',
                    id: 'x-axis-0'
                }],
            yAxes: [{
                    type: 'linear',
                    position: 'left',
                    id: 'y-axis-0'
                }]
        },
        tooltips: {
            callbacks: {
                title: function () {
                    return '';
                },
                label: function (tooltipItem, data) {
                    var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
                    var dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                    return datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';
                }
            }
        }
    };
    Chart.controllers.bubble = Chart.DatasetController.extend({
        dataElementType: Chart.elements.Point,
        update: function (reset) {
            var me = this;
            var meta = me.getMeta();
            var points = meta.data;
            helpers.each(points, function (point, index) {
                me.updateElement(point, index, reset);
            });
        },
        updateElement: function (point, index, reset) {
            var me = this;
            var meta = me.getMeta();
            var xScale = me.getScaleForId(meta.xAxisID);
            var yScale = me.getScaleForId(meta.yAxisID);
            var custom = point.custom || {};
            var dataset = me.getDataset();
            var data = dataset.data[index];
            var pointElementOptions = me.chart.options.elements.point;
            var dsIndex = me.index;
            helpers.extend(point, {
                _xScale: xScale,
                _yScale: yScale,
                _datasetIndex: dsIndex,
                _index: index,
                _model: {
                    x: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),
                    y: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),
                    radius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),
                    hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
                }
            });
            Chart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);
            var model = point._model;
            model.skip = custom.skip ? custom.skip : isNaN(model.x) || isNaN(model.y);
            point.pivot();
        },
        getRadius: function (value) {
            return value.r || this.chart.options.elements.point.radius;
        },
        setHoverStyle: function (point) {
            var me = this;
            Chart.DatasetController.prototype.setHoverStyle.call(me, point);
            var dataset = me.chart.data.datasets[point._datasetIndex];
            var index = point._index;
            var custom = point.custom || {};
            var model = point._model;
            model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius) + me.getRadius(dataset.data[index]);
        },
        removeHoverStyle: function (point) {
            var me = this;
            Chart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);
            var dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];
            var custom = point.custom || {};
            var model = point._model;
            model.radius = custom.radius ? custom.radius : me.getRadius(dataVal);
        }
    });
};}, $__.fs.J$__v7918151485_344_21),
            $__.os.oid15 = {}
        ],
        17: [
            ($__.fs.J$__v7918151485_378_22 = function J$__v7918151485_378(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid268).exports = ($__.fs.J$__v7918151485_376_920 = function J$__v7918151485_376(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, vvv_tmp2, helpers, defaults;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    defaults = (Chart.defaults, $__.os.oid57);
    (defaults, $__.os.oid57).doughnut = $__.os.oid275 = {
        'animation': $__.os.oid269 = {
            'animateRotate': true,
            'animateScale': false
        },
        'aspectRatio': 1,
        'hover': $__.os.oid270 = {
            'mode': 'single'
        },
        'legendCallback': ($__.fs.J$__v7918151485_346_921 = function J$__v7918151485_346(chart) {
var vvv_return, vvv_switch, text, data, datasets, labels;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
text = [];
text.push('<ul class="' + chart.id + '-legend">');
data = chart.data;
datasets = data.datasets;
labels = data.labels;
if (datasets.length) {
    for (var i = 0; i < datasets[0].data.length; ++i) {
        text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
        if (labels[i]) {
            text.push(labels[i]);
        }
        text.push('</li>');
    }
}
text.push('</ul>');
return text.join('');}, $__.fs.J$__v7918151485_346_921_687 = $__.fs.J$__v7918151485_346_921, $__.fs.J$__v7918151485_346_921),
        'legend': $__.os.oid272 = {
            'labels': $__.os.oid271 = {
                'generateLabels': ($__.fs.J$__v7918151485_350_922 = function J$__v7918151485_350(chart) {
var vvv_return, vvv_switch, data;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
data = chart.data;
if (data.labels.length && data.datasets.length) {
    return data.labels.map(function (label, i) {
        var meta = chart.getDatasetMeta(0);
        var ds = data.datasets[0];
        var arc = meta.data[i];
        var custom = arc && arc.custom || {};
        var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
        var arcOpts = chart.options.elements.arc;
        var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
        var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
        var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
        return {
            text: label,
            fillStyle: fill,
            strokeStyle: stroke,
            lineWidth: bw,
            hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
            index: i
        };
    });
}
return [];}, $__.fs.J$__v7918151485_350_922_691 = $__.fs.J$__v7918151485_350_922, $__.fs.J$__v7918151485_350_922)
            },
            'onClick': ($__.fs.J$__v7918151485_352_923 = function J$__v7918151485_352(e, legendItem) {
var vvv_return, vvv_switch, index, chart, i, ilen, meta;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0], legendItem = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
index = legendItem.index;
chart = this.chart;
for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    meta = chart.getDatasetMeta(i);
    if (meta.data[index]) {
        meta.data[index].hidden = !meta.data[index].hidden;
    }
}
chart.update();}, $__.fs.J$__v7918151485_352_923_693 = $__.fs.J$__v7918151485_352_923, $__.fs.J$__v7918151485_352_923)
        },
        'cutoutPercentage': 50,
        'rotation': (Math.PI, 3.141592653589793) * -0.5,
        'circumference': (Math.PI, 3.141592653589793) * 2,
        'tooltips': $__.os.oid274 = {
            'callbacks': $__.os.oid273 = {
                'title': ($__.fs.J$__v7918151485_354_924 = function J$__v7918151485_354() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '';}, $__.fs.J$__v7918151485_354_924_700 = $__.fs.J$__v7918151485_354_924, $__.fs.J$__v7918151485_354_924),
                'label': ($__.fs.J$__v7918151485_356_925 = function J$__v7918151485_356(tooltipItem, data) {
var vvv_return, vvv_switch, dataLabel, value;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipItem = arguments[0], data = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dataLabel = data.labels[tooltipItem.index];
value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
if (helpers.isArray(dataLabel)) {
    dataLabel = dataLabel.slice();
    dataLabel[0] += value;
} else {
    dataLabel += value;
}
return dataLabel;}, $__.fs.J$__v7918151485_356_925_702 = $__.fs.J$__v7918151485_356_925, $__.fs.J$__v7918151485_356_925)
            }
        }
    };
    (defaults, $__.os.oid57).pie = (vvv_tmp0 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp0, ((defaults, $__.os.oid57).doughnut, $__.os.oid275), 19, true, $__.uid));
    vvv_tmp1 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp1, ((defaults, $__.os.oid57).pie, $__.os.oid276), $__.os.oid283 = {
        'cutoutPercentage': 0
    }, 23, true, $__.uid);
    ((Chart.controllers, $__.os.oid118), $__.os.oid118).doughnut = ((Chart.controllers, $__.os.oid118), $__.os.oid118).pie = (vvv_tmp2 = TAJS_restrictToType(Chart.DatasetController, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp2, $__.os.oid284 = {
        'dataElementType': TAJS_restrictToType(((Chart.elements, $__.os.oid107), $__.os.oid107).Arc, 'function'),
        'linkScales': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
        'getRingIndex': ($__.fs.J$__v7918151485_358_934 = function J$__v7918151485_358(datasetIndex) {
var vvv_return, vvv_switch, ringIndex;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
datasetIndex = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ringIndex = 0;
for (var j = 0; j < datasetIndex; ++j) {
    if (this.chart.isDatasetVisible(j)) {
        ++ringIndex;
    }
}
return ringIndex;}, $__.fs.J$__v7918151485_358_934_709 = $__.fs.J$__v7918151485_358_934, $__.fs.J$__v7918151485_358_934),
        'update': ($__.fs.J$__v7918151485_362_935 = function J$__v7918151485_362(reset) {
var vvv_return, vvv_switch, me, chart, chartArea, opts, arcOpts, availableWidth, availableHeight, minSize, offset, meta, cutoutPercentage, circumference, startAngle, endAngle, start, end, contains0, contains90, contains180, contains270, cutout, min, max, size;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
reset = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
chart = me.chart;
chartArea = chart.chartArea;
opts = chart.options;
arcOpts = opts.elements.arc;
availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth;
availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth;
minSize = Math.min(availableWidth, availableHeight);
offset = {
    x: 0,
    y: 0
};
meta = me.getMeta();
cutoutPercentage = opts.cutoutPercentage;
circumference = opts.circumference;
if (circumference < Math.PI * 2) {
    startAngle = opts.rotation % (Math.PI * 2);
    startAngle += Math.PI * 2 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
    endAngle = startAngle + circumference;
    start = {
        x: Math.cos(startAngle),
        y: Math.sin(startAngle)
    };
    end = {
        x: Math.cos(endAngle),
        y: Math.sin(endAngle)
    };
    contains0 = startAngle <= 0 && 0 <= endAngle || startAngle <= Math.PI * 2 && Math.PI * 2 <= endAngle;
    contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;
    contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;
    contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;
    cutout = cutoutPercentage / 100;
    min = {
        x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),
        y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))
    };
    max = {
        x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),
        y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))
    };
    size = {
        width: (max.x - min.x) * 0.5,
        height: (max.y - min.y) * 0.5
    };
    minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
    offset = {
        x: (max.x + min.x) * -0.5,
        y: (max.y + min.y) * -0.5
    };
}
chart.borderWidth = me.getMaxBorderWidth(meta.data);
chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);
chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
chart.offsetX = offset.x * chart.outerRadius;
chart.offsetY = offset.y * chart.outerRadius;
meta.total = me.calculateTotal();
me.outerRadius = chart.outerRadius - chart.radiusLength * me.getRingIndex(me.index);
me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
helpers.each(meta.data, function (arc, index) {
    me.updateElement(arc, index, reset);
});}, $__.fs.J$__v7918151485_362_935_711 = $__.fs.J$__v7918151485_362_935, $__.fs.J$__v7918151485_362_935),
        'updateElement': ($__.fs.J$__v7918151485_364_936 = function J$__v7918151485_364(arc, index, reset) {
var vvv_return, vvv_switch, me, chart, chartArea, opts, animationOpts, centerX, centerY, startAngle, endAngle, dataset, circumference, innerRadius, outerRadius, valueAtIndexOrDefault, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arc = arguments[0], index = arguments[1], reset = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
chart = me.chart;
chartArea = chart.chartArea;
opts = chart.options;
animationOpts = opts.animation;
centerX = (chartArea.left + chartArea.right) / 2;
centerY = (chartArea.top + chartArea.bottom) / 2;
startAngle = opts.rotation;
endAngle = opts.rotation;
dataset = me.getDataset();
circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2 * Math.PI));
innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
valueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
helpers.extend(arc, {
    _datasetIndex: me.index,
    _index: index,
    _model: {
        x: centerX + chart.offsetX,
        y: centerY + chart.offsetY,
        startAngle: startAngle,
        endAngle: endAngle,
        circumference: circumference,
        outerRadius: outerRadius,
        innerRadius: innerRadius,
        label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
    }
});
model = arc._model;
this.removeHoverStyle(arc);
if (!reset || !animationOpts.animateRotate) {
    if (index === 0) {
        model.startAngle = opts.rotation;
    } else {
        model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
    }
    model.endAngle = model.startAngle + model.circumference;
}
arc.pivot();}, $__.fs.J$__v7918151485_364_936_713 = $__.fs.J$__v7918151485_364_936, $__.fs.J$__v7918151485_364_936),
        'removeHoverStyle': ($__.fs.J$__v7918151485_366_937 = function J$__v7918151485_366(arc) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arc = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);}, $__.fs.J$__v7918151485_366_937_715 = $__.fs.J$__v7918151485_366_937, $__.fs.J$__v7918151485_366_937),
        'calculateTotal': ($__.fs.J$__v7918151485_370_938 = function J$__v7918151485_370() {
var vvv_return, vvv_switch, dataset, meta, total, value;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dataset = this.getDataset();
meta = this.getMeta();
total = 0;
helpers.each(meta.data, function (element, index) {
    value = dataset.data[index];
    if (!isNaN(value) && !element.hidden) {
        total += Math.abs(value);
    }
});
return total;}, $__.fs.J$__v7918151485_370_938_717 = $__.fs.J$__v7918151485_370_938, $__.fs.J$__v7918151485_370_938),
        'calculateCircumference': ($__.fs.J$__v7918151485_372_939 = function J$__v7918151485_372(value) {
var vvv_return, vvv_switch, total;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
total = this.getMeta().total;
if (total > 0 && !isNaN(value)) {
    return Math.PI * 2 * (value / total);
}
return 0;}, $__.fs.J$__v7918151485_372_939_719 = $__.fs.J$__v7918151485_372_939, $__.fs.J$__v7918151485_372_939),
        'getMaxBorderWidth': ($__.fs.J$__v7918151485_374_940 = function J$__v7918151485_374(elements) {
var vvv_return, vvv_switch, max, index, length, borderWidth, hoverWidth;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
elements = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
max = 0;
index = this.index;
length = elements.length;
for (var i = 0; i < length; i++) {
    borderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;
    hoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
    max = borderWidth > max ? borderWidth : max;
    max = hoverWidth > max ? hoverWidth : max;
}
return max;}, $__.fs.J$__v7918151485_374_940_721 = $__.fs.J$__v7918151485_374_940, $__.fs.J$__v7918151485_374_940)
    }, 19, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
defaults = Chart.defaults;
defaults.doughnut = {
    animation: {
        animateRotate: true,
        animateScale: false
    },
    aspectRatio: 1,
    hover: {
        mode: 'single'
    },
    legendCallback: function (chart) {
        var text = [];
        text.push('<ul class="' + chart.id + '-legend">');
        var data = chart.data;
        var datasets = data.datasets;
        var labels = data.labels;
        if (datasets.length) {
            for (var i = 0; i < datasets[0].data.length; ++i) {
                text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
                if (labels[i]) {
                    text.push(labels[i]);
                }
                text.push('</li>');
            }
        }
        text.push('</ul>');
        return text.join('');
    },
    legend: {
        labels: {
            generateLabels: function (chart) {
                var data = chart.data;
                if (data.labels.length && data.datasets.length) {
                    return data.labels.map(function (label, i) {
                        var meta = chart.getDatasetMeta(0);
                        var ds = data.datasets[0];
                        var arc = meta.data[i];
                        var custom = arc && arc.custom || {};
                        var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                        var arcOpts = chart.options.elements.arc;
                        var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                        var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                        var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                        return {
                            text: label,
                            fillStyle: fill,
                            strokeStyle: stroke,
                            lineWidth: bw,
                            hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                            index: i
                        };
                    });
                }
                return [];
            }
        },
        onClick: function (e, legendItem) {
            var index = legendItem.index;
            var chart = this.chart;
            var i, ilen, meta;
            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                meta = chart.getDatasetMeta(i);
                if (meta.data[index]) {
                    meta.data[index].hidden = !meta.data[index].hidden;
                }
            }
            chart.update();
        }
    },
    cutoutPercentage: 50,
    rotation: Math.PI * -0.5,
    circumference: Math.PI * 2,
    tooltips: {
        callbacks: {
            title: function () {
                return '';
            },
            label: function (tooltipItem, data) {
                var dataLabel = data.labels[tooltipItem.index];
                var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                if (helpers.isArray(dataLabel)) {
                    dataLabel = dataLabel.slice();
                    dataLabel[0] += value;
                } else {
                    dataLabel += value;
                }
                return dataLabel;
            }
        }
    }
};
defaults.pie = helpers.clone(defaults.doughnut);
helpers.extend(defaults.pie, {
    cutoutPercentage: 0
});
Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
    dataElementType: Chart.elements.Arc,
    linkScales: helpers.noop,
    getRingIndex: function (datasetIndex) {
        var ringIndex = 0;
        for (var j = 0; j < datasetIndex; ++j) {
            if (this.chart.isDatasetVisible(j)) {
                ++ringIndex;
            }
        }
        return ringIndex;
    },
    update: function (reset) {
        var me = this;
        var chart = me.chart, chartArea = chart.chartArea, opts = chart.options, arcOpts = opts.elements.arc, availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth, availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth, minSize = Math.min(availableWidth, availableHeight), offset = {
                x: 0,
                y: 0
            }, meta = me.getMeta(), cutoutPercentage = opts.cutoutPercentage, circumference = opts.circumference;
        if (circumference < Math.PI * 2) {
            var startAngle = opts.rotation % (Math.PI * 2);
            startAngle += Math.PI * 2 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
            var endAngle = startAngle + circumference;
            var start = {
                x: Math.cos(startAngle),
                y: Math.sin(startAngle)
            };
            var end = {
                x: Math.cos(endAngle),
                y: Math.sin(endAngle)
            };
            var contains0 = startAngle <= 0 && 0 <= endAngle || startAngle <= Math.PI * 2 && Math.PI * 2 <= endAngle;
            var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;
            var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;
            var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;
            var cutout = cutoutPercentage / 100;
            var min = {
                x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),
                y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))
            };
            var max = {
                x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),
                y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))
            };
            var size = {
                width: (max.x - min.x) * 0.5,
                height: (max.y - min.y) * 0.5
            };
            minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
            offset = {
                x: (max.x + min.x) * -0.5,
                y: (max.y + min.y) * -0.5
            };
        }
        chart.borderWidth = me.getMaxBorderWidth(meta.data);
        chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
        chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);
        chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
        chart.offsetX = offset.x * chart.outerRadius;
        chart.offsetY = offset.y * chart.outerRadius;
        meta.total = me.calculateTotal();
        me.outerRadius = chart.outerRadius - chart.radiusLength * me.getRingIndex(me.index);
        me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
        helpers.each(meta.data, function (arc, index) {
            me.updateElement(arc, index, reset);
        });
    },
    updateElement: function (arc, index, reset) {
        var me = this;
        var chart = me.chart, chartArea = chart.chartArea, opts = chart.options, animationOpts = opts.animation, centerX = (chartArea.left + chartArea.right) / 2, centerY = (chartArea.top + chartArea.bottom) / 2, startAngle = opts.rotation, endAngle = opts.rotation, dataset = me.getDataset(), circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2 * Math.PI)), innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius, outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius, valueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
        helpers.extend(arc, {
            _datasetIndex: me.index,
            _index: index,
            _model: {
                x: centerX + chart.offsetX,
                y: centerY + chart.offsetY,
                startAngle: startAngle,
                endAngle: endAngle,
                circumference: circumference,
                outerRadius: outerRadius,
                innerRadius: innerRadius,
                label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
            }
        });
        var model = arc._model;
        this.removeHoverStyle(arc);
        if (!reset || !animationOpts.animateRotate) {
            if (index === 0) {
                model.startAngle = opts.rotation;
            } else {
                model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
            }
            model.endAngle = model.startAngle + model.circumference;
        }
        arc.pivot();
    },
    removeHoverStyle: function (arc) {
        Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
    },
    calculateTotal: function () {
        var dataset = this.getDataset();
        var meta = this.getMeta();
        var total = 0;
        var value;
        helpers.each(meta.data, function (element, index) {
            value = dataset.data[index];
            if (!isNaN(value) && !element.hidden) {
                total += Math.abs(value);
            }
        });
        return total;
    },
    calculateCircumference: function (value) {
        var total = this.getMeta().total;
        if (total > 0 && !isNaN(value)) {
            return Math.PI * 2 * (value / total);
        }
        return 0;
    },
    getMaxBorderWidth: function (elements) {
        var max = 0, index = this.index, length = elements.length, borderWidth, hoverWidth;
        for (var i = 0; i < length; i++) {
            borderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;
            hoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
            max = borderWidth > max ? borderWidth : max;
            max = hoverWidth > max ? hoverWidth : max;
        }
        return max;
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers, defaults = Chart.defaults;
    defaults.doughnut = {
        animation: {
            animateRotate: true,
            animateScale: false
        },
        aspectRatio: 1,
        hover: {
            mode: 'single'
        },
        legendCallback: function (chart) {
            var text = [];
            text.push('<ul class="' + chart.id + '-legend">');
            var data = chart.data;
            var datasets = data.datasets;
            var labels = data.labels;
            if (datasets.length) {
                for (var i = 0; i < datasets[0].data.length; ++i) {
                    text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
                    if (labels[i]) {
                        text.push(labels[i]);
                    }
                    text.push('</li>');
                }
            }
            text.push('</ul>');
            return text.join('');
        },
        legend: {
            labels: {
                generateLabels: function (chart) {
                    var data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                        return data.labels.map(function (label, i) {
                            var meta = chart.getDatasetMeta(0);
                            var ds = data.datasets[0];
                            var arc = meta.data[i];
                            var custom = arc && arc.custom || {};
                            var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                            var arcOpts = chart.options.elements.arc;
                            var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                            var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                            var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                            return {
                                text: label,
                                fillStyle: fill,
                                strokeStyle: stroke,
                                lineWidth: bw,
                                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                                index: i
                            };
                        });
                    }
                    return [];
                }
            },
            onClick: function (e, legendItem) {
                var index = legendItem.index;
                var chart = this.chart;
                var i, ilen, meta;
                for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                    meta = chart.getDatasetMeta(i);
                    if (meta.data[index]) {
                        meta.data[index].hidden = !meta.data[index].hidden;
                    }
                }
                chart.update();
            }
        },
        cutoutPercentage: 50,
        rotation: Math.PI * -0.5,
        circumference: Math.PI * 2,
        tooltips: {
            callbacks: {
                title: function () {
                    return '';
                },
                label: function (tooltipItem, data) {
                    var dataLabel = data.labels[tooltipItem.index];
                    var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                    if (helpers.isArray(dataLabel)) {
                        dataLabel = dataLabel.slice();
                        dataLabel[0] += value;
                    } else {
                        dataLabel += value;
                    }
                    return dataLabel;
                }
            }
        }
    };
    defaults.pie = helpers.clone(defaults.doughnut);
    helpers.extend(defaults.pie, {
        cutoutPercentage: 0
    });
    Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
        dataElementType: Chart.elements.Arc,
        linkScales: helpers.noop,
        getRingIndex: function (datasetIndex) {
            var ringIndex = 0;
            for (var j = 0; j < datasetIndex; ++j) {
                if (this.chart.isDatasetVisible(j)) {
                    ++ringIndex;
                }
            }
            return ringIndex;
        },
        update: function (reset) {
            var me = this;
            var chart = me.chart, chartArea = chart.chartArea, opts = chart.options, arcOpts = opts.elements.arc, availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth, availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth, minSize = Math.min(availableWidth, availableHeight), offset = {
                    x: 0,
                    y: 0
                }, meta = me.getMeta(), cutoutPercentage = opts.cutoutPercentage, circumference = opts.circumference;
            if (circumference < Math.PI * 2) {
                var startAngle = opts.rotation % (Math.PI * 2);
                startAngle += Math.PI * 2 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
                var endAngle = startAngle + circumference;
                var start = {
                    x: Math.cos(startAngle),
                    y: Math.sin(startAngle)
                };
                var end = {
                    x: Math.cos(endAngle),
                    y: Math.sin(endAngle)
                };
                var contains0 = startAngle <= 0 && 0 <= endAngle || startAngle <= Math.PI * 2 && Math.PI * 2 <= endAngle;
                var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;
                var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;
                var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;
                var cutout = cutoutPercentage / 100;
                var min = {
                    x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),
                    y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))
                };
                var max = {
                    x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),
                    y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))
                };
                var size = {
                    width: (max.x - min.x) * 0.5,
                    height: (max.y - min.y) * 0.5
                };
                minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
                offset = {
                    x: (max.x + min.x) * -0.5,
                    y: (max.y + min.y) * -0.5
                };
            }
            chart.borderWidth = me.getMaxBorderWidth(meta.data);
            chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
            chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);
            chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
            chart.offsetX = offset.x * chart.outerRadius;
            chart.offsetY = offset.y * chart.outerRadius;
            meta.total = me.calculateTotal();
            me.outerRadius = chart.outerRadius - chart.radiusLength * me.getRingIndex(me.index);
            me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
            helpers.each(meta.data, function (arc, index) {
                me.updateElement(arc, index, reset);
            });
        },
        updateElement: function (arc, index, reset) {
            var me = this;
            var chart = me.chart, chartArea = chart.chartArea, opts = chart.options, animationOpts = opts.animation, centerX = (chartArea.left + chartArea.right) / 2, centerY = (chartArea.top + chartArea.bottom) / 2, startAngle = opts.rotation, endAngle = opts.rotation, dataset = me.getDataset(), circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2 * Math.PI)), innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius, outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius, valueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
            helpers.extend(arc, {
                _datasetIndex: me.index,
                _index: index,
                _model: {
                    x: centerX + chart.offsetX,
                    y: centerY + chart.offsetY,
                    startAngle: startAngle,
                    endAngle: endAngle,
                    circumference: circumference,
                    outerRadius: outerRadius,
                    innerRadius: innerRadius,
                    label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
                }
            });
            var model = arc._model;
            this.removeHoverStyle(arc);
            if (!reset || !animationOpts.animateRotate) {
                if (index === 0) {
                    model.startAngle = opts.rotation;
                } else {
                    model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
                }
                model.endAngle = model.startAngle + model.circumference;
            }
            arc.pivot();
        },
        removeHoverStyle: function (arc) {
            Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
        },
        calculateTotal: function () {
            var dataset = this.getDataset();
            var meta = this.getMeta();
            var total = 0;
            var value;
            helpers.each(meta.data, function (element, index) {
                value = dataset.data[index];
                if (!isNaN(value) && !element.hidden) {
                    total += Math.abs(value);
                }
            });
            return total;
        },
        calculateCircumference: function (value) {
            var total = this.getMeta().total;
            if (total > 0 && !isNaN(value)) {
                return Math.PI * 2 * (value / total);
            }
            return 0;
        },
        getMaxBorderWidth: function (elements) {
            var max = 0, index = this.index, length = elements.length, borderWidth, hoverWidth;
            for (var i = 0; i < length; i++) {
                borderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;
                hoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
                max = borderWidth > max ? borderWidth : max;
                max = hoverWidth > max ? hoverWidth : max;
            }
            return max;
        }
    });
};}, $__.fs.J$__v7918151485_378_22),
            $__.os.oid16 = {}
        ],
        18: [
            ($__.fs.J$__v7918151485_406_23 = function J$__v7918151485_406(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid286).exports = ($__.fs.J$__v7918151485_404_945 = function J$__v7918151485_404(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers, lineEnabled;
lineEnabled = function lineEnabled(dataset, options) {
    return helpers.getValueOrDefault(dataset.showLine, options.showLines);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    lineEnabled = ($__.fs.lineEnabled_946 = function lineEnabled(dataset, options) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
dataset = arguments[0], options = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return helpers.getValueOrDefault(dataset.showLine, options.showLines);});
    helpers = (Chart.helpers, $__.os.oid88);
    ((Chart.defaults, $__.os.oid57), $__.os.oid57).line = $__.os.oid291 = {
        'showLines': true,
        'spanGaps': false,
        'hover': $__.os.oid287 = {
            'mode': 'label'
        },
        'scales': $__.os.oid290 = {
            'xAxes': [$__.os.oid288 = {
                    'type': 'category',
                    'id': 'x-axis-0'
                }],
            'yAxes': [$__.os.oid289 = {
                    'type': 'linear',
                    'id': 'y-axis-0'
                }]
        }
    };
    ((Chart.controllers, $__.os.oid118), $__.os.oid118).line = (vvv_tmp0 = TAJS_restrictToType(Chart.DatasetController, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid292 = {
        'datasetElementType': TAJS_restrictToType(((Chart.elements, $__.os.oid107), $__.os.oid107).Line, 'function'),
        'dataElementType': TAJS_restrictToType(((Chart.elements, $__.os.oid107), $__.os.oid107).Point, 'function'),
        'update': ($__.fs.J$__v7918151485_381_947 = function J$__v7918151485_381(reset) {
var vvv_return, vvv_switch, me, meta, line, points, options, lineElementOptions, scale, i, ilen, custom, dataset, showLine;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
reset = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
line = meta.dataset;
points = meta.data || [];
options = me.chart.options;
lineElementOptions = options.elements.line;
scale = me.getScaleForId(meta.yAxisID);
dataset = me.getDataset();
showLine = lineEnabled(dataset, options);
if (showLine) {
    custom = line.custom || {};
    if (dataset.tension !== undefined && dataset.lineTension === undefined) {
        dataset.lineTension = dataset.tension;
    }
    line._scale = scale;
    line._datasetIndex = me.index;
    line._children = points;
    line._model = {
        spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
        tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
        backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
        borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
        borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
        borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
        borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
        borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
        borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
        fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
        steppedLine: custom.steppedLine ? custom.steppedLine : helpers.getValueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
        cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.getValueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),
        scaleTop: scale.top,
        scaleBottom: scale.bottom,
        scaleZero: scale.getBasePixel()
    };
    line.pivot();
}
for (i = 0, ilen = points.length; i < ilen; ++i) {
    me.updateElement(points[i], i, reset);
}
if (showLine && line._model.tension !== 0) {
    me.updateBezierControlPoints();
}
for (i = 0, ilen = points.length; i < ilen; ++i) {
    points[i].pivot();
}}, $__.fs.J$__v7918151485_381_947_730 = $__.fs.J$__v7918151485_381_947, $__.fs.J$__v7918151485_381_947),
        'getPointBackgroundColor': ($__.fs.J$__v7918151485_383_948 = function J$__v7918151485_383(point, index) {
var vvv_return, vvv_switch, backgroundColor, dataset, custom;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0], index = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
backgroundColor = this.chart.options.elements.point.backgroundColor;
dataset = this.getDataset();
custom = point.custom || {};
if (custom.backgroundColor) {
    backgroundColor = custom.backgroundColor;
} else if (dataset.pointBackgroundColor) {
    backgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
} else if (dataset.backgroundColor) {
    backgroundColor = dataset.backgroundColor;
}
return backgroundColor;}, $__.fs.J$__v7918151485_383_948_732 = $__.fs.J$__v7918151485_383_948, $__.fs.J$__v7918151485_383_948),
        'getPointBorderColor': ($__.fs.J$__v7918151485_385_949 = function J$__v7918151485_385(point, index) {
var vvv_return, vvv_switch, borderColor, dataset, custom;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0], index = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
borderColor = this.chart.options.elements.point.borderColor;
dataset = this.getDataset();
custom = point.custom || {};
if (custom.borderColor) {
    borderColor = custom.borderColor;
} else if (dataset.pointBorderColor) {
    borderColor = helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
} else if (dataset.borderColor) {
    borderColor = dataset.borderColor;
}
return borderColor;}, $__.fs.J$__v7918151485_385_949_734 = $__.fs.J$__v7918151485_385_949, $__.fs.J$__v7918151485_385_949),
        'getPointBorderWidth': ($__.fs.J$__v7918151485_387_950 = function J$__v7918151485_387(point, index) {
var vvv_return, vvv_switch, borderWidth, dataset, custom;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0], index = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
borderWidth = this.chart.options.elements.point.borderWidth;
dataset = this.getDataset();
custom = point.custom || {};
if (!isNaN(custom.borderWidth)) {
    borderWidth = custom.borderWidth;
} else if (!isNaN(dataset.pointBorderWidth)) {
    borderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
} else if (!isNaN(dataset.borderWidth)) {
    borderWidth = dataset.borderWidth;
}
return borderWidth;}, $__.fs.J$__v7918151485_387_950_736 = $__.fs.J$__v7918151485_387_950, $__.fs.J$__v7918151485_387_950),
        'updateElement': ($__.fs.J$__v7918151485_389_951 = function J$__v7918151485_389(point, index, reset) {
var vvv_return, vvv_switch, me, meta, custom, dataset, datasetIndex, value, yScale, xScale, pointOptions, x, y, labels, includeOffset;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0], index = arguments[1], reset = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
custom = point.custom || {};
dataset = me.getDataset();
datasetIndex = me.index;
value = dataset.data[index];
yScale = me.getScaleForId(meta.yAxisID);
xScale = me.getScaleForId(meta.xAxisID);
pointOptions = me.chart.options.elements.point;
labels = me.chart.data.labels || [];
includeOffset = labels.length === 1 || dataset.data.length === 1 || me.chart.isCombo;
if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
    dataset.pointRadius = dataset.radius;
}
if (dataset.hitRadius !== undefined && dataset.pointHitRadius === undefined) {
    dataset.pointHitRadius = dataset.hitRadius;
}
x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex, includeOffset);
y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
point._xScale = xScale;
point._yScale = yScale;
point._datasetIndex = datasetIndex;
point._index = index;
point._model = {
    x: x,
    y: y,
    skip: custom.skip || isNaN(x) || isNaN(y),
    radius: custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
    pointStyle: custom.pointStyle || helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
    backgroundColor: me.getPointBackgroundColor(point, index),
    borderColor: me.getPointBorderColor(point, index),
    borderWidth: me.getPointBorderWidth(point, index),
    tension: meta.dataset._model ? meta.dataset._model.tension : 0,
    steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
    hitRadius: custom.hitRadius || helpers.getValueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
};}, $__.fs.J$__v7918151485_389_951_738 = $__.fs.J$__v7918151485_389_951, $__.fs.J$__v7918151485_389_951),
        'calculatePointY': ($__.fs.J$__v7918151485_391_952 = function J$__v7918151485_391(value, index, datasetIndex) {
var vvv_return, vvv_switch, me, chart, meta, yScale, sumPos, sumNeg, i, ds, dsMeta, stackedRightValue, rightValue;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], index = arguments[1], datasetIndex = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
chart = me.chart;
meta = me.getMeta();
yScale = me.getScaleForId(meta.yAxisID);
sumPos = 0;
sumNeg = 0;
if (yScale.options.stacked) {
    for (i = 0; i < datasetIndex; i++) {
        ds = chart.data.datasets[i];
        dsMeta = chart.getDatasetMeta(i);
        if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
            stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
            if (stackedRightValue < 0) {
                sumNeg += stackedRightValue || 0;
            } else {
                sumPos += stackedRightValue || 0;
            }
        }
    }
    rightValue = Number(yScale.getRightValue(value));
    if (rightValue < 0) {
        return yScale.getPixelForValue(sumNeg + rightValue);
    }
    return yScale.getPixelForValue(sumPos + rightValue);
}
return yScale.getPixelForValue(value);}, $__.fs.J$__v7918151485_391_952_740 = $__.fs.J$__v7918151485_391_952, $__.fs.J$__v7918151485_391_952),
        'updateBezierControlPoints': ($__.fs.J$__v7918151485_396_953 = function J$__v7918151485_396() {
var vvv_return, vvv_switch, me, meta, area, points, i, ilen, point, model, controlPoints, capControlPoint;
capControlPoint = function capControlPoint(pt, min, max) {
    return Math.max(Math.min(pt, max), min);
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
area = me.chart.chartArea;
points = meta.data || [];
if (meta.dataset._model.spanGaps) {
    points = points.filter(function (pt) {
        return !pt._model.skip;
    });
}
if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
    helpers.splineCurveMonotone(points);
} else {
    for (i = 0, ilen = points.length; i < ilen; ++i) {
        point = points[i];
        model = point._model;
        controlPoints = helpers.splineCurve(helpers.previousItem(points, i)._model, model, helpers.nextItem(points, i)._model, meta.dataset._model.tension);
        model.controlPointPreviousX = controlPoints.previous.x;
        model.controlPointPreviousY = controlPoints.previous.y;
        model.controlPointNextX = controlPoints.next.x;
        model.controlPointNextY = controlPoints.next.y;
    }
}
if (me.chart.options.elements.line.capBezierPoints) {
    for (i = 0, ilen = points.length; i < ilen; ++i) {
        model = points[i]._model;
        model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
        model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
        model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
        model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
    }
}}, $__.fs.J$__v7918151485_396_953_742 = $__.fs.J$__v7918151485_396_953, $__.fs.J$__v7918151485_396_953),
        'draw': ($__.fs.J$__v7918151485_398_954 = function J$__v7918151485_398(ease) {
var vvv_return, vvv_switch, me, meta, points, easingDecimal, i, ilen;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ease = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
points = meta.data || [];
easingDecimal = ease || 1;
for (i = 0, ilen = points.length; i < ilen; ++i) {
    points[i].transition(easingDecimal);
}
Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
if (lineEnabled(me.getDataset(), me.chart.options)) {
    meta.dataset.transition(easingDecimal).draw();
}
Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
for (i = 0, ilen = points.length; i < ilen; ++i) {
    points[i].draw(me.chart.chartArea);
}}, $__.fs.J$__v7918151485_398_954_744 = $__.fs.J$__v7918151485_398_954, $__.fs.J$__v7918151485_398_954),
        'setHoverStyle': ($__.fs.J$__v7918151485_400_955 = function J$__v7918151485_400(point) {
var vvv_return, vvv_switch, dataset, index, custom, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dataset = this.chart.data.datasets[point._datasetIndex];
index = point._index;
custom = point.custom || {};
model = point._model;
model.radius = custom.hoverRadius || helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
model.backgroundColor = custom.hoverBackgroundColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
model.borderColor = custom.hoverBorderColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
model.borderWidth = custom.hoverBorderWidth || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);}, $__.fs.J$__v7918151485_400_955_746 = $__.fs.J$__v7918151485_400_955, $__.fs.J$__v7918151485_400_955),
        'removeHoverStyle': ($__.fs.J$__v7918151485_402_956 = function J$__v7918151485_402(point) {
var vvv_return, vvv_switch, me, dataset, index, custom, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
dataset = me.chart.data.datasets[point._datasetIndex];
index = point._index;
custom = point.custom || {};
model = point._model;
if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
    dataset.pointRadius = dataset.radius;
}
model.radius = custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);
model.backgroundColor = me.getPointBackgroundColor(point, index);
model.borderColor = me.getPointBorderColor(point, index);
model.borderWidth = me.getPointBorderWidth(point, index);}, $__.fs.J$__v7918151485_402_956_748 = $__.fs.J$__v7918151485_402_956, $__.fs.J$__v7918151485_402_956)
    }, 20, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.defaults.line = {
    showLines: true,
    spanGaps: false,
    hover: {
        mode: 'label'
    },
    scales: {
        xAxes: [{
                type: 'category',
                id: 'x-axis-0'
            }],
        yAxes: [{
                type: 'linear',
                id: 'y-axis-0'
            }]
    }
};
Chart.controllers.line = Chart.DatasetController.extend({
    datasetElementType: Chart.elements.Line,
    dataElementType: Chart.elements.Point,
    update: function (reset) {
        var me = this;
        var meta = me.getMeta();
        var line = meta.dataset;
        var points = meta.data || [];
        var options = me.chart.options;
        var lineElementOptions = options.elements.line;
        var scale = me.getScaleForId(meta.yAxisID);
        var i, ilen, custom;
        var dataset = me.getDataset();
        var showLine = lineEnabled(dataset, options);
        if (showLine) {
            custom = line.custom || {};
            if (dataset.tension !== undefined && dataset.lineTension === undefined) {
                dataset.lineTension = dataset.tension;
            }
            line._scale = scale;
            line._datasetIndex = me.index;
            line._children = points;
            line._model = {
                spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
                tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
                backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
                borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
                borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
                borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
                borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
                borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
                borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
                fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
                steppedLine: custom.steppedLine ? custom.steppedLine : helpers.getValueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
                cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.getValueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),
                scaleTop: scale.top,
                scaleBottom: scale.bottom,
                scaleZero: scale.getBasePixel()
            };
            line.pivot();
        }
        for (i = 0, ilen = points.length; i < ilen; ++i) {
            me.updateElement(points[i], i, reset);
        }
        if (showLine && line._model.tension !== 0) {
            me.updateBezierControlPoints();
        }
        for (i = 0, ilen = points.length; i < ilen; ++i) {
            points[i].pivot();
        }
    },
    getPointBackgroundColor: function (point, index) {
        var backgroundColor = this.chart.options.elements.point.backgroundColor;
        var dataset = this.getDataset();
        var custom = point.custom || {};
        if (custom.backgroundColor) {
            backgroundColor = custom.backgroundColor;
        } else if (dataset.pointBackgroundColor) {
            backgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
        } else if (dataset.backgroundColor) {
            backgroundColor = dataset.backgroundColor;
        }
        return backgroundColor;
    },
    getPointBorderColor: function (point, index) {
        var borderColor = this.chart.options.elements.point.borderColor;
        var dataset = this.getDataset();
        var custom = point.custom || {};
        if (custom.borderColor) {
            borderColor = custom.borderColor;
        } else if (dataset.pointBorderColor) {
            borderColor = helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
        } else if (dataset.borderColor) {
            borderColor = dataset.borderColor;
        }
        return borderColor;
    },
    getPointBorderWidth: function (point, index) {
        var borderWidth = this.chart.options.elements.point.borderWidth;
        var dataset = this.getDataset();
        var custom = point.custom || {};
        if (!isNaN(custom.borderWidth)) {
            borderWidth = custom.borderWidth;
        } else if (!isNaN(dataset.pointBorderWidth)) {
            borderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
        } else if (!isNaN(dataset.borderWidth)) {
            borderWidth = dataset.borderWidth;
        }
        return borderWidth;
    },
    updateElement: function (point, index, reset) {
        var me = this;
        var meta = me.getMeta();
        var custom = point.custom || {};
        var dataset = me.getDataset();
        var datasetIndex = me.index;
        var value = dataset.data[index];
        var yScale = me.getScaleForId(meta.yAxisID);
        var xScale = me.getScaleForId(meta.xAxisID);
        var pointOptions = me.chart.options.elements.point;
        var x, y;
        var labels = me.chart.data.labels || [];
        var includeOffset = labels.length === 1 || dataset.data.length === 1 || me.chart.isCombo;
        if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
            dataset.pointRadius = dataset.radius;
        }
        if (dataset.hitRadius !== undefined && dataset.pointHitRadius === undefined) {
            dataset.pointHitRadius = dataset.hitRadius;
        }
        x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex, includeOffset);
        y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
        point._xScale = xScale;
        point._yScale = yScale;
        point._datasetIndex = datasetIndex;
        point._index = index;
        point._model = {
            x: x,
            y: y,
            skip: custom.skip || isNaN(x) || isNaN(y),
            radius: custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
            pointStyle: custom.pointStyle || helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
            backgroundColor: me.getPointBackgroundColor(point, index),
            borderColor: me.getPointBorderColor(point, index),
            borderWidth: me.getPointBorderWidth(point, index),
            tension: meta.dataset._model ? meta.dataset._model.tension : 0,
            steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
            hitRadius: custom.hitRadius || helpers.getValueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
        };
    },
    calculatePointY: function (value, index, datasetIndex) {
        var me = this;
        var chart = me.chart;
        var meta = me.getMeta();
        var yScale = me.getScaleForId(meta.yAxisID);
        var sumPos = 0;
        var sumNeg = 0;
        var i, ds, dsMeta;
        if (yScale.options.stacked) {
            for (i = 0; i < datasetIndex; i++) {
                ds = chart.data.datasets[i];
                dsMeta = chart.getDatasetMeta(i);
                if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
                    var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
                    if (stackedRightValue < 0) {
                        sumNeg += stackedRightValue || 0;
                    } else {
                        sumPos += stackedRightValue || 0;
                    }
                }
            }
            var rightValue = Number(yScale.getRightValue(value));
            if (rightValue < 0) {
                return yScale.getPixelForValue(sumNeg + rightValue);
            }
            return yScale.getPixelForValue(sumPos + rightValue);
        }
        return yScale.getPixelForValue(value);
    },
    updateBezierControlPoints: function () {
        var me = this;
        var meta = me.getMeta();
        var area = me.chart.chartArea;
        var points = meta.data || [];
        var i, ilen, point, model, controlPoints;
        if (meta.dataset._model.spanGaps) {
            points = points.filter(function (pt) {
                return !pt._model.skip;
            });
        }
        function capControlPoint(pt, min, max) {
            return Math.max(Math.min(pt, max), min);
        }
        if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
            helpers.splineCurveMonotone(points);
        } else {
            for (i = 0, ilen = points.length; i < ilen; ++i) {
                point = points[i];
                model = point._model;
                controlPoints = helpers.splineCurve(helpers.previousItem(points, i)._model, model, helpers.nextItem(points, i)._model, meta.dataset._model.tension);
                model.controlPointPreviousX = controlPoints.previous.x;
                model.controlPointPreviousY = controlPoints.previous.y;
                model.controlPointNextX = controlPoints.next.x;
                model.controlPointNextY = controlPoints.next.y;
            }
        }
        if (me.chart.options.elements.line.capBezierPoints) {
            for (i = 0, ilen = points.length; i < ilen; ++i) {
                model = points[i]._model;
                model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
                model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
                model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
                model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
            }
        }
    },
    draw: function (ease) {
        var me = this;
        var meta = me.getMeta();
        var points = meta.data || [];
        var easingDecimal = ease || 1;
        var i, ilen;
        for (i = 0, ilen = points.length; i < ilen; ++i) {
            points[i].transition(easingDecimal);
        }
        Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
        if (lineEnabled(me.getDataset(), me.chart.options)) {
            meta.dataset.transition(easingDecimal).draw();
        }
        Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
        for (i = 0, ilen = points.length; i < ilen; ++i) {
            points[i].draw(me.chart.chartArea);
        }
    },
    setHoverStyle: function (point) {
        var dataset = this.chart.data.datasets[point._datasetIndex];
        var index = point._index;
        var custom = point.custom || {};
        var model = point._model;
        model.radius = custom.hoverRadius || helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
        model.backgroundColor = custom.hoverBackgroundColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
        model.borderColor = custom.hoverBorderColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
        model.borderWidth = custom.hoverBorderWidth || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
    },
    removeHoverStyle: function (point) {
        var me = this;
        var dataset = me.chart.data.datasets[point._datasetIndex];
        var index = point._index;
        var custom = point.custom || {};
        var model = point._model;
        if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
            dataset.pointRadius = dataset.radius;
        }
        model.radius = custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);
        model.backgroundColor = me.getPointBackgroundColor(point, index);
        model.borderColor = me.getPointBorderColor(point, index);
        model.borderWidth = me.getPointBorderWidth(point, index);
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.defaults.line = {
        showLines: true,
        spanGaps: false,
        hover: {
            mode: 'label'
        },
        scales: {
            xAxes: [{
                    type: 'category',
                    id: 'x-axis-0'
                }],
            yAxes: [{
                    type: 'linear',
                    id: 'y-axis-0'
                }]
        }
    };
    function lineEnabled(dataset, options) {
        return helpers.getValueOrDefault(dataset.showLine, options.showLines);
    }
    Chart.controllers.line = Chart.DatasetController.extend({
        datasetElementType: Chart.elements.Line,
        dataElementType: Chart.elements.Point,
        update: function (reset) {
            var me = this;
            var meta = me.getMeta();
            var line = meta.dataset;
            var points = meta.data || [];
            var options = me.chart.options;
            var lineElementOptions = options.elements.line;
            var scale = me.getScaleForId(meta.yAxisID);
            var i, ilen, custom;
            var dataset = me.getDataset();
            var showLine = lineEnabled(dataset, options);
            if (showLine) {
                custom = line.custom || {};
                if (dataset.tension !== undefined && dataset.lineTension === undefined) {
                    dataset.lineTension = dataset.tension;
                }
                line._scale = scale;
                line._datasetIndex = me.index;
                line._children = points;
                line._model = {
                    spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
                    tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
                    backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
                    borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
                    borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
                    borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
                    borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
                    borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
                    borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
                    fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
                    steppedLine: custom.steppedLine ? custom.steppedLine : helpers.getValueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
                    cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.getValueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),
                    scaleTop: scale.top,
                    scaleBottom: scale.bottom,
                    scaleZero: scale.getBasePixel()
                };
                line.pivot();
            }
            for (i = 0, ilen = points.length; i < ilen; ++i) {
                me.updateElement(points[i], i, reset);
            }
            if (showLine && line._model.tension !== 0) {
                me.updateBezierControlPoints();
            }
            for (i = 0, ilen = points.length; i < ilen; ++i) {
                points[i].pivot();
            }
        },
        getPointBackgroundColor: function (point, index) {
            var backgroundColor = this.chart.options.elements.point.backgroundColor;
            var dataset = this.getDataset();
            var custom = point.custom || {};
            if (custom.backgroundColor) {
                backgroundColor = custom.backgroundColor;
            } else if (dataset.pointBackgroundColor) {
                backgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
            } else if (dataset.backgroundColor) {
                backgroundColor = dataset.backgroundColor;
            }
            return backgroundColor;
        },
        getPointBorderColor: function (point, index) {
            var borderColor = this.chart.options.elements.point.borderColor;
            var dataset = this.getDataset();
            var custom = point.custom || {};
            if (custom.borderColor) {
                borderColor = custom.borderColor;
            } else if (dataset.pointBorderColor) {
                borderColor = helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
            } else if (dataset.borderColor) {
                borderColor = dataset.borderColor;
            }
            return borderColor;
        },
        getPointBorderWidth: function (point, index) {
            var borderWidth = this.chart.options.elements.point.borderWidth;
            var dataset = this.getDataset();
            var custom = point.custom || {};
            if (!isNaN(custom.borderWidth)) {
                borderWidth = custom.borderWidth;
            } else if (!isNaN(dataset.pointBorderWidth)) {
                borderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
            } else if (!isNaN(dataset.borderWidth)) {
                borderWidth = dataset.borderWidth;
            }
            return borderWidth;
        },
        updateElement: function (point, index, reset) {
            var me = this;
            var meta = me.getMeta();
            var custom = point.custom || {};
            var dataset = me.getDataset();
            var datasetIndex = me.index;
            var value = dataset.data[index];
            var yScale = me.getScaleForId(meta.yAxisID);
            var xScale = me.getScaleForId(meta.xAxisID);
            var pointOptions = me.chart.options.elements.point;
            var x, y;
            var labels = me.chart.data.labels || [];
            var includeOffset = labels.length === 1 || dataset.data.length === 1 || me.chart.isCombo;
            if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
                dataset.pointRadius = dataset.radius;
            }
            if (dataset.hitRadius !== undefined && dataset.pointHitRadius === undefined) {
                dataset.pointHitRadius = dataset.hitRadius;
            }
            x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex, includeOffset);
            y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
            point._xScale = xScale;
            point._yScale = yScale;
            point._datasetIndex = datasetIndex;
            point._index = index;
            point._model = {
                x: x,
                y: y,
                skip: custom.skip || isNaN(x) || isNaN(y),
                radius: custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
                pointStyle: custom.pointStyle || helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
                backgroundColor: me.getPointBackgroundColor(point, index),
                borderColor: me.getPointBorderColor(point, index),
                borderWidth: me.getPointBorderWidth(point, index),
                tension: meta.dataset._model ? meta.dataset._model.tension : 0,
                steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
                hitRadius: custom.hitRadius || helpers.getValueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
            };
        },
        calculatePointY: function (value, index, datasetIndex) {
            var me = this;
            var chart = me.chart;
            var meta = me.getMeta();
            var yScale = me.getScaleForId(meta.yAxisID);
            var sumPos = 0;
            var sumNeg = 0;
            var i, ds, dsMeta;
            if (yScale.options.stacked) {
                for (i = 0; i < datasetIndex; i++) {
                    ds = chart.data.datasets[i];
                    dsMeta = chart.getDatasetMeta(i);
                    if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
                        var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
                        if (stackedRightValue < 0) {
                            sumNeg += stackedRightValue || 0;
                        } else {
                            sumPos += stackedRightValue || 0;
                        }
                    }
                }
                var rightValue = Number(yScale.getRightValue(value));
                if (rightValue < 0) {
                    return yScale.getPixelForValue(sumNeg + rightValue);
                }
                return yScale.getPixelForValue(sumPos + rightValue);
            }
            return yScale.getPixelForValue(value);
        },
        updateBezierControlPoints: function () {
            var me = this;
            var meta = me.getMeta();
            var area = me.chart.chartArea;
            var points = meta.data || [];
            var i, ilen, point, model, controlPoints;
            if (meta.dataset._model.spanGaps) {
                points = points.filter(function (pt) {
                    return !pt._model.skip;
                });
            }
            function capControlPoint(pt, min, max) {
                return Math.max(Math.min(pt, max), min);
            }
            if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
                helpers.splineCurveMonotone(points);
            } else {
                for (i = 0, ilen = points.length; i < ilen; ++i) {
                    point = points[i];
                    model = point._model;
                    controlPoints = helpers.splineCurve(helpers.previousItem(points, i)._model, model, helpers.nextItem(points, i)._model, meta.dataset._model.tension);
                    model.controlPointPreviousX = controlPoints.previous.x;
                    model.controlPointPreviousY = controlPoints.previous.y;
                    model.controlPointNextX = controlPoints.next.x;
                    model.controlPointNextY = controlPoints.next.y;
                }
            }
            if (me.chart.options.elements.line.capBezierPoints) {
                for (i = 0, ilen = points.length; i < ilen; ++i) {
                    model = points[i]._model;
                    model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
                    model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
                    model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
                    model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
                }
            }
        },
        draw: function (ease) {
            var me = this;
            var meta = me.getMeta();
            var points = meta.data || [];
            var easingDecimal = ease || 1;
            var i, ilen;
            for (i = 0, ilen = points.length; i < ilen; ++i) {
                points[i].transition(easingDecimal);
            }
            Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
            if (lineEnabled(me.getDataset(), me.chart.options)) {
                meta.dataset.transition(easingDecimal).draw();
            }
            Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
            for (i = 0, ilen = points.length; i < ilen; ++i) {
                points[i].draw(me.chart.chartArea);
            }
        },
        setHoverStyle: function (point) {
            var dataset = this.chart.data.datasets[point._datasetIndex];
            var index = point._index;
            var custom = point.custom || {};
            var model = point._model;
            model.radius = custom.hoverRadius || helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
            model.backgroundColor = custom.hoverBackgroundColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
            model.borderColor = custom.hoverBorderColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
            model.borderWidth = custom.hoverBorderWidth || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
        },
        removeHoverStyle: function (point) {
            var me = this;
            var dataset = me.chart.data.datasets[point._datasetIndex];
            var index = point._index;
            var custom = point.custom || {};
            var model = point._model;
            if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
                dataset.pointRadius = dataset.radius;
            }
            model.radius = custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);
            model.backgroundColor = me.getPointBackgroundColor(point, index);
            model.borderColor = me.getPointBorderColor(point, index);
            model.borderWidth = me.getPointBorderWidth(point, index);
        }
    });
};}, $__.fs.J$__v7918151485_406_23),
            $__.os.oid17 = {}
        ],
        19: [
            ($__.fs.J$__v7918151485_436_24 = function J$__v7918151485_436(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid294).exports = ($__.fs.J$__v7918151485_434_961 = function J$__v7918151485_434(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    ((Chart.defaults, $__.os.oid57), $__.os.oid57).polarArea = $__.os.oid302 = {
        'scale': $__.os.oid296 = {
            'type': 'radialLinear',
            'lineArc': true,
            'ticks': $__.os.oid295 = {
                'beginAtZero': true
            }
        },
        'animation': $__.os.oid297 = {
            'animateRotate': true,
            'animateScale': true
        },
        'startAngle': -0.5 * (Math.PI, 3.141592653589793),
        'aspectRatio': 1,
        'legendCallback': ($__.fs.J$__v7918151485_408_962 = function J$__v7918151485_408(chart) {
var vvv_return, vvv_switch, text, data, datasets, labels;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
text = [];
text.push('<ul class="' + chart.id + '-legend">');
data = chart.data;
datasets = data.datasets;
labels = data.labels;
if (datasets.length) {
    for (var i = 0; i < datasets[0].data.length; ++i) {
        text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
        if (labels[i]) {
            text.push(labels[i]);
        }
        text.push('</li>');
    }
}
text.push('</ul>');
return text.join('');}),
        'legend': $__.os.oid299 = {
            'labels': $__.os.oid298 = {
                'generateLabels': ($__.fs.J$__v7918151485_412_963 = function J$__v7918151485_412(chart) {
var vvv_return, vvv_switch, data;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
data = chart.data;
if (data.labels.length && data.datasets.length) {
    return data.labels.map(function (label, i) {
        var meta = chart.getDatasetMeta(0);
        var ds = data.datasets[0];
        var arc = meta.data[i];
        var custom = arc.custom || {};
        var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
        var arcOpts = chart.options.elements.arc;
        var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
        var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
        var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
        return {
            text: label,
            fillStyle: fill,
            strokeStyle: stroke,
            lineWidth: bw,
            hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
            index: i
        };
    });
}
return [];})
            },
            'onClick': ($__.fs.J$__v7918151485_414_964 = function J$__v7918151485_414(e, legendItem) {
var vvv_return, vvv_switch, index, chart, i, ilen, meta;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0], legendItem = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
index = legendItem.index;
chart = this.chart;
for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    meta = chart.getDatasetMeta(i);
    meta.data[index].hidden = !meta.data[index].hidden;
}
chart.update();})
        },
        'tooltips': $__.os.oid301 = {
            'callbacks': $__.os.oid300 = {
                'title': ($__.fs.J$__v7918151485_416_965 = function J$__v7918151485_416() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return '';}),
                'label': ($__.fs.J$__v7918151485_418_966 = function J$__v7918151485_418(tooltipItem, data) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipItem = arguments[0], data = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;})
            }
        }
    };
    ((Chart.controllers, $__.os.oid118), $__.os.oid118).polarArea = (vvv_tmp0 = TAJS_restrictToType(Chart.DatasetController, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid303 = {
        'dataElementType': TAJS_restrictToType(((Chart.elements, $__.os.oid107), $__.os.oid107).Arc, 'function'),
        'linkScales': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
        'update': ($__.fs.J$__v7918151485_422_967 = function J$__v7918151485_422(reset) {
var vvv_return, vvv_switch, me, chart, chartArea, meta, opts, arcOpts, minSize;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
reset = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
chart = me.chart;
chartArea = chart.chartArea;
meta = me.getMeta();
opts = chart.options;
arcOpts = opts.elements.arc;
minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
me.innerRadius = me.outerRadius - chart.radiusLength;
meta.count = me.countVisibleElements();
helpers.each(meta.data, function (arc, index) {
    me.updateElement(arc, index, reset);
});}, $__.fs.J$__v7918151485_422_967_757 = $__.fs.J$__v7918151485_422_967, $__.fs.J$__v7918151485_422_967),
        'updateElement': ($__.fs.J$__v7918151485_424_968 = function J$__v7918151485_424(arc, index, reset) {
var vvv_return, vvv_switch, me, chart, dataset, opts, animationOpts, scale, getValueAtIndexOrDefault, labels, circumference, centerX, centerY, visibleCount, meta, datasetStartAngle, distance, startAngle, endAngle, resetRadius;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arc = arguments[0], index = arguments[1], reset = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
chart = me.chart;
dataset = me.getDataset();
opts = chart.options;
animationOpts = opts.animation;
scale = chart.scale;
getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
labels = chart.data.labels;
circumference = me.calculateCircumference(dataset.data[index]);
centerX = scale.xCenter;
centerY = scale.yCenter;
visibleCount = 0;
meta = me.getMeta();
for (var i = 0; i < index; ++i) {
    if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
        ++visibleCount;
    }
}
datasetStartAngle = opts.startAngle;
distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
startAngle = datasetStartAngle + circumference * visibleCount;
endAngle = startAngle + (arc.hidden ? 0 : circumference);
resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
helpers.extend(arc, {
    _datasetIndex: me.index,
    _index: index,
    _scale: scale,
    _model: {
        x: centerX,
        y: centerY,
        innerRadius: 0,
        outerRadius: reset ? resetRadius : distance,
        startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
        endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
        label: getValueAtIndexOrDefault(labels, index, labels[index])
    }
});
me.removeHoverStyle(arc);
arc.pivot();}, $__.fs.J$__v7918151485_424_968_759 = $__.fs.J$__v7918151485_424_968, $__.fs.J$__v7918151485_424_968),
        'removeHoverStyle': ($__.fs.J$__v7918151485_426_969 = function J$__v7918151485_426(arc) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arc = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);}, $__.fs.J$__v7918151485_426_969_761 = $__.fs.J$__v7918151485_426_969, $__.fs.J$__v7918151485_426_969),
        'countVisibleElements': ($__.fs.J$__v7918151485_430_970 = function J$__v7918151485_430() {
var vvv_return, vvv_switch, dataset, meta, count;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dataset = this.getDataset();
meta = this.getMeta();
count = 0;
helpers.each(meta.data, function (element, index) {
    if (!isNaN(dataset.data[index]) && !element.hidden) {
        count++;
    }
});
return count;}, $__.fs.J$__v7918151485_430_970_763 = $__.fs.J$__v7918151485_430_970, $__.fs.J$__v7918151485_430_970),
        'calculateCircumference': ($__.fs.J$__v7918151485_432_971 = function J$__v7918151485_432(value) {
var vvv_return, vvv_switch, count;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
count = this.getMeta().count;
if (count > 0 && !isNaN(value)) {
    return 2 * Math.PI / count;
}
return 0;}, $__.fs.J$__v7918151485_432_971_765 = $__.fs.J$__v7918151485_432_971, $__.fs.J$__v7918151485_432_971)
    }, 21, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.defaults.polarArea = {
    scale: {
        type: 'radialLinear',
        lineArc: true,
        ticks: {
            beginAtZero: true
        }
    },
    animation: {
        animateRotate: true,
        animateScale: true
    },
    startAngle: -0.5 * Math.PI,
    aspectRatio: 1,
    legendCallback: function (chart) {
        var text = [];
        text.push('<ul class="' + chart.id + '-legend">');
        var data = chart.data;
        var datasets = data.datasets;
        var labels = data.labels;
        if (datasets.length) {
            for (var i = 0; i < datasets[0].data.length; ++i) {
                text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
                if (labels[i]) {
                    text.push(labels[i]);
                }
                text.push('</li>');
            }
        }
        text.push('</ul>');
        return text.join('');
    },
    legend: {
        labels: {
            generateLabels: function (chart) {
                var data = chart.data;
                if (data.labels.length && data.datasets.length) {
                    return data.labels.map(function (label, i) {
                        var meta = chart.getDatasetMeta(0);
                        var ds = data.datasets[0];
                        var arc = meta.data[i];
                        var custom = arc.custom || {};
                        var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                        var arcOpts = chart.options.elements.arc;
                        var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                        var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                        var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                        return {
                            text: label,
                            fillStyle: fill,
                            strokeStyle: stroke,
                            lineWidth: bw,
                            hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                            index: i
                        };
                    });
                }
                return [];
            }
        },
        onClick: function (e, legendItem) {
            var index = legendItem.index;
            var chart = this.chart;
            var i, ilen, meta;
            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                meta = chart.getDatasetMeta(i);
                meta.data[index].hidden = !meta.data[index].hidden;
            }
            chart.update();
        }
    },
    tooltips: {
        callbacks: {
            title: function () {
                return '';
            },
            label: function (tooltipItem, data) {
                return data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;
            }
        }
    }
};
Chart.controllers.polarArea = Chart.DatasetController.extend({
    dataElementType: Chart.elements.Arc,
    linkScales: helpers.noop,
    update: function (reset) {
        var me = this;
        var chart = me.chart;
        var chartArea = chart.chartArea;
        var meta = me.getMeta();
        var opts = chart.options;
        var arcOpts = opts.elements.arc;
        var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
        chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
        chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
        chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
        me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
        me.innerRadius = me.outerRadius - chart.radiusLength;
        meta.count = me.countVisibleElements();
        helpers.each(meta.data, function (arc, index) {
            me.updateElement(arc, index, reset);
        });
    },
    updateElement: function (arc, index, reset) {
        var me = this;
        var chart = me.chart;
        var dataset = me.getDataset();
        var opts = chart.options;
        var animationOpts = opts.animation;
        var scale = chart.scale;
        var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
        var labels = chart.data.labels;
        var circumference = me.calculateCircumference(dataset.data[index]);
        var centerX = scale.xCenter;
        var centerY = scale.yCenter;
        var visibleCount = 0;
        var meta = me.getMeta();
        for (var i = 0; i < index; ++i) {
            if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
                ++visibleCount;
            }
        }
        var datasetStartAngle = opts.startAngle;
        var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
        var startAngle = datasetStartAngle + circumference * visibleCount;
        var endAngle = startAngle + (arc.hidden ? 0 : circumference);
        var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
        helpers.extend(arc, {
            _datasetIndex: me.index,
            _index: index,
            _scale: scale,
            _model: {
                x: centerX,
                y: centerY,
                innerRadius: 0,
                outerRadius: reset ? resetRadius : distance,
                startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
                endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
                label: getValueAtIndexOrDefault(labels, index, labels[index])
            }
        });
        me.removeHoverStyle(arc);
        arc.pivot();
    },
    removeHoverStyle: function (arc) {
        Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
    },
    countVisibleElements: function () {
        var dataset = this.getDataset();
        var meta = this.getMeta();
        var count = 0;
        helpers.each(meta.data, function (element, index) {
            if (!isNaN(dataset.data[index]) && !element.hidden) {
                count++;
            }
        });
        return count;
    },
    calculateCircumference: function (value) {
        var count = this.getMeta().count;
        if (count > 0 && !isNaN(value)) {
            return 2 * Math.PI / count;
        }
        return 0;
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.defaults.polarArea = {
        scale: {
            type: 'radialLinear',
            lineArc: true,
            ticks: {
                beginAtZero: true
            }
        },
        animation: {
            animateRotate: true,
            animateScale: true
        },
        startAngle: -0.5 * Math.PI,
        aspectRatio: 1,
        legendCallback: function (chart) {
            var text = [];
            text.push('<ul class="' + chart.id + '-legend">');
            var data = chart.data;
            var datasets = data.datasets;
            var labels = data.labels;
            if (datasets.length) {
                for (var i = 0; i < datasets[0].data.length; ++i) {
                    text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
                    if (labels[i]) {
                        text.push(labels[i]);
                    }
                    text.push('</li>');
                }
            }
            text.push('</ul>');
            return text.join('');
        },
        legend: {
            labels: {
                generateLabels: function (chart) {
                    var data = chart.data;
                    if (data.labels.length && data.datasets.length) {
                        return data.labels.map(function (label, i) {
                            var meta = chart.getDatasetMeta(0);
                            var ds = data.datasets[0];
                            var arc = meta.data[i];
                            var custom = arc.custom || {};
                            var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                            var arcOpts = chart.options.elements.arc;
                            var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                            var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                            var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                            return {
                                text: label,
                                fillStyle: fill,
                                strokeStyle: stroke,
                                lineWidth: bw,
                                hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                                index: i
                            };
                        });
                    }
                    return [];
                }
            },
            onClick: function (e, legendItem) {
                var index = legendItem.index;
                var chart = this.chart;
                var i, ilen, meta;
                for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                    meta = chart.getDatasetMeta(i);
                    meta.data[index].hidden = !meta.data[index].hidden;
                }
                chart.update();
            }
        },
        tooltips: {
            callbacks: {
                title: function () {
                    return '';
                },
                label: function (tooltipItem, data) {
                    return data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;
                }
            }
        }
    };
    Chart.controllers.polarArea = Chart.DatasetController.extend({
        dataElementType: Chart.elements.Arc,
        linkScales: helpers.noop,
        update: function (reset) {
            var me = this;
            var chart = me.chart;
            var chartArea = chart.chartArea;
            var meta = me.getMeta();
            var opts = chart.options;
            var arcOpts = opts.elements.arc;
            var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
            chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
            chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
            chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
            me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
            me.innerRadius = me.outerRadius - chart.radiusLength;
            meta.count = me.countVisibleElements();
            helpers.each(meta.data, function (arc, index) {
                me.updateElement(arc, index, reset);
            });
        },
        updateElement: function (arc, index, reset) {
            var me = this;
            var chart = me.chart;
            var dataset = me.getDataset();
            var opts = chart.options;
            var animationOpts = opts.animation;
            var scale = chart.scale;
            var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
            var labels = chart.data.labels;
            var circumference = me.calculateCircumference(dataset.data[index]);
            var centerX = scale.xCenter;
            var centerY = scale.yCenter;
            var visibleCount = 0;
            var meta = me.getMeta();
            for (var i = 0; i < index; ++i) {
                if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
                    ++visibleCount;
                }
            }
            var datasetStartAngle = opts.startAngle;
            var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
            var startAngle = datasetStartAngle + circumference * visibleCount;
            var endAngle = startAngle + (arc.hidden ? 0 : circumference);
            var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
            helpers.extend(arc, {
                _datasetIndex: me.index,
                _index: index,
                _scale: scale,
                _model: {
                    x: centerX,
                    y: centerY,
                    innerRadius: 0,
                    outerRadius: reset ? resetRadius : distance,
                    startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
                    endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
                    label: getValueAtIndexOrDefault(labels, index, labels[index])
                }
            });
            me.removeHoverStyle(arc);
            arc.pivot();
        },
        removeHoverStyle: function (arc) {
            Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
        },
        countVisibleElements: function () {
            var dataset = this.getDataset();
            var meta = this.getMeta();
            var count = 0;
            helpers.each(meta.data, function (element, index) {
                if (!isNaN(dataset.data[index]) && !element.hidden) {
                    count++;
                }
            });
            return count;
        },
        calculateCircumference: function (value) {
            var count = this.getMeta().count;
            if (count > 0 && !isNaN(value)) {
                return 2 * Math.PI / count;
            }
            return 0;
        }
    });
};}, $__.fs.J$__v7918151485_436_24),
            $__.os.oid18 = {}
        ],
        20: [
            ($__.fs.J$__v7918151485_460_25 = function J$__v7918151485_460(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid305).exports = ($__.fs.J$__v7918151485_458_976 = function J$__v7918151485_458(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    ((Chart.defaults, $__.os.oid57), $__.os.oid57).radar = $__.os.oid309 = {
        'aspectRatio': 1,
        'scale': $__.os.oid306 = {
            'type': 'radialLinear'
        },
        'elements': $__.os.oid308 = {
            'line': $__.os.oid307 = {
                'tension': 0
            }
        }
    };
    ((Chart.controllers, $__.os.oid118), $__.os.oid118).radar = (vvv_tmp0 = TAJS_restrictToType(Chart.DatasetController, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid310 = {
        'datasetElementType': TAJS_restrictToType(((Chart.elements, $__.os.oid107), $__.os.oid107).Line, 'function'),
        'dataElementType': TAJS_restrictToType(((Chart.elements, $__.os.oid107), $__.os.oid107).Point, 'function'),
        'linkScales': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
        'update': ($__.fs.J$__v7918151485_440_977 = function J$__v7918151485_440(reset) {
var vvv_return, vvv_switch, me, meta, line, points, custom, dataset, lineElementOptions, scale;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
reset = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
line = meta.dataset;
points = meta.data;
custom = line.custom || {};
dataset = me.getDataset();
lineElementOptions = me.chart.options.elements.line;
scale = me.chart.scale;
if (dataset.tension !== undefined && dataset.lineTension === undefined) {
    dataset.lineTension = dataset.tension;
}
helpers.extend(meta.dataset, {
    _datasetIndex: me.index,
    _children: points,
    _loop: true,
    _model: {
        tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
        backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
        borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
        borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
        fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
        borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
        borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
        borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
        borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
        scaleTop: scale.top,
        scaleBottom: scale.bottom,
        scaleZero: scale.getBasePosition()
    }
});
meta.dataset.pivot();
helpers.each(points, function (point, index) {
    me.updateElement(point, index, reset);
}, me);
me.updateBezierControlPoints();}, $__.fs.J$__v7918151485_440_977_776 = $__.fs.J$__v7918151485_440_977, $__.fs.J$__v7918151485_440_977),
        'updateElement': ($__.fs.J$__v7918151485_442_978 = function J$__v7918151485_442(point, index, reset) {
var vvv_return, vvv_switch, me, custom, dataset, scale, pointElementOptions, pointPosition;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0], index = arguments[1], reset = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
custom = point.custom || {};
dataset = me.getDataset();
scale = me.chart.scale;
pointElementOptions = me.chart.options.elements.point;
pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
helpers.extend(point, {
    _datasetIndex: me.index,
    _index: index,
    _scale: scale,
    _model: {
        x: reset ? scale.xCenter : pointPosition.x,
        y: reset ? scale.yCenter : pointPosition.y,
        tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
        radius: custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
        backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
        borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
        borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
        pointStyle: custom.pointStyle ? custom.pointStyle : helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
        hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
    }
});
point._model.skip = custom.skip ? custom.skip : isNaN(point._model.x) || isNaN(point._model.y);}, $__.fs.J$__v7918151485_442_978_778 = $__.fs.J$__v7918151485_442_978, $__.fs.J$__v7918151485_442_978),
        'updateBezierControlPoints': ($__.fs.J$__v7918151485_446_979 = function J$__v7918151485_446() {
var vvv_return, vvv_switch, chartArea, meta;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
chartArea = this.chart.chartArea;
meta = this.getMeta();
helpers.each(meta.data, function (point, index) {
    var model = point._model;
    var controlPoints = helpers.splineCurve(helpers.previousItem(meta.data, index, true)._model, model, helpers.nextItem(meta.data, index, true)._model, model.tension);
    model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
    model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
    model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
    model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);
    point.pivot();
});}, $__.fs.J$__v7918151485_446_979_780 = $__.fs.J$__v7918151485_446_979, $__.fs.J$__v7918151485_446_979),
        'draw': ($__.fs.J$__v7918151485_452_980 = function J$__v7918151485_452(ease) {
var vvv_return, vvv_switch, meta, easingDecimal;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ease = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
meta = this.getMeta();
easingDecimal = ease || 1;
helpers.each(meta.data, function (point) {
    point.transition(easingDecimal);
});
meta.dataset.transition(easingDecimal).draw();
helpers.each(meta.data, function (point) {
    point.draw();
});}, $__.fs.J$__v7918151485_452_980_782 = $__.fs.J$__v7918151485_452_980, $__.fs.J$__v7918151485_452_980),
        'setHoverStyle': ($__.fs.J$__v7918151485_454_981 = function J$__v7918151485_454(point) {
var vvv_return, vvv_switch, dataset, custom, index, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dataset = this.chart.data.datasets[point._datasetIndex];
custom = point.custom || {};
index = point._index;
model = point._model;
model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);}, $__.fs.J$__v7918151485_454_981_784 = $__.fs.J$__v7918151485_454_981, $__.fs.J$__v7918151485_454_981),
        'removeHoverStyle': ($__.fs.J$__v7918151485_456_982 = function J$__v7918151485_456(point) {
var vvv_return, vvv_switch, dataset, custom, index, model, pointElementOptions;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
point = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dataset = this.chart.data.datasets[point._datasetIndex];
custom = point.custom || {};
index = point._index;
model = point._model;
pointElementOptions = this.chart.options.elements.point;
model.radius = custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.radius, index, pointElementOptions.radius);
model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);
model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);
model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);}, $__.fs.J$__v7918151485_456_982_786 = $__.fs.J$__v7918151485_456_982, $__.fs.J$__v7918151485_456_982)
    }, 22, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.defaults.radar = {
    aspectRatio: 1,
    scale: {
        type: 'radialLinear'
    },
    elements: {
        line: {
            tension: 0
        }
    }
};
Chart.controllers.radar = Chart.DatasetController.extend({
    datasetElementType: Chart.elements.Line,
    dataElementType: Chart.elements.Point,
    linkScales: helpers.noop,
    update: function (reset) {
        var me = this;
        var meta = me.getMeta();
        var line = meta.dataset;
        var points = meta.data;
        var custom = line.custom || {};
        var dataset = me.getDataset();
        var lineElementOptions = me.chart.options.elements.line;
        var scale = me.chart.scale;
        if (dataset.tension !== undefined && dataset.lineTension === undefined) {
            dataset.lineTension = dataset.tension;
        }
        helpers.extend(meta.dataset, {
            _datasetIndex: me.index,
            _children: points,
            _loop: true,
            _model: {
                tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
                backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
                borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
                borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
                fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
                borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
                borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
                borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
                borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
                scaleTop: scale.top,
                scaleBottom: scale.bottom,
                scaleZero: scale.getBasePosition()
            }
        });
        meta.dataset.pivot();
        helpers.each(points, function (point, index) {
            me.updateElement(point, index, reset);
        }, me);
        me.updateBezierControlPoints();
    },
    updateElement: function (point, index, reset) {
        var me = this;
        var custom = point.custom || {};
        var dataset = me.getDataset();
        var scale = me.chart.scale;
        var pointElementOptions = me.chart.options.elements.point;
        var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
        helpers.extend(point, {
            _datasetIndex: me.index,
            _index: index,
            _scale: scale,
            _model: {
                x: reset ? scale.xCenter : pointPosition.x,
                y: reset ? scale.yCenter : pointPosition.y,
                tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
                radius: custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
                backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
                borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
                borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
                pointStyle: custom.pointStyle ? custom.pointStyle : helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
                hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
            }
        });
        point._model.skip = custom.skip ? custom.skip : isNaN(point._model.x) || isNaN(point._model.y);
    },
    updateBezierControlPoints: function () {
        var chartArea = this.chart.chartArea;
        var meta = this.getMeta();
        helpers.each(meta.data, function (point, index) {
            var model = point._model;
            var controlPoints = helpers.splineCurve(helpers.previousItem(meta.data, index, true)._model, model, helpers.nextItem(meta.data, index, true)._model, model.tension);
            model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
            model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
            model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
            model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);
            point.pivot();
        });
    },
    draw: function (ease) {
        var meta = this.getMeta();
        var easingDecimal = ease || 1;
        helpers.each(meta.data, function (point) {
            point.transition(easingDecimal);
        });
        meta.dataset.transition(easingDecimal).draw();
        helpers.each(meta.data, function (point) {
            point.draw();
        });
    },
    setHoverStyle: function (point) {
        var dataset = this.chart.data.datasets[point._datasetIndex];
        var custom = point.custom || {};
        var index = point._index;
        var model = point._model;
        model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
        model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
        model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
        model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
    },
    removeHoverStyle: function (point) {
        var dataset = this.chart.data.datasets[point._datasetIndex];
        var custom = point.custom || {};
        var index = point._index;
        var model = point._model;
        var pointElementOptions = this.chart.options.elements.point;
        model.radius = custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.radius, index, pointElementOptions.radius);
        model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);
        model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);
        model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.defaults.radar = {
        aspectRatio: 1,
        scale: {
            type: 'radialLinear'
        },
        elements: {
            line: {
                tension: 0
            }
        }
    };
    Chart.controllers.radar = Chart.DatasetController.extend({
        datasetElementType: Chart.elements.Line,
        dataElementType: Chart.elements.Point,
        linkScales: helpers.noop,
        update: function (reset) {
            var me = this;
            var meta = me.getMeta();
            var line = meta.dataset;
            var points = meta.data;
            var custom = line.custom || {};
            var dataset = me.getDataset();
            var lineElementOptions = me.chart.options.elements.line;
            var scale = me.chart.scale;
            if (dataset.tension !== undefined && dataset.lineTension === undefined) {
                dataset.lineTension = dataset.tension;
            }
            helpers.extend(meta.dataset, {
                _datasetIndex: me.index,
                _children: points,
                _loop: true,
                _model: {
                    tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
                    backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
                    borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
                    borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
                    fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
                    borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
                    borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
                    borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
                    borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
                    scaleTop: scale.top,
                    scaleBottom: scale.bottom,
                    scaleZero: scale.getBasePosition()
                }
            });
            meta.dataset.pivot();
            helpers.each(points, function (point, index) {
                me.updateElement(point, index, reset);
            }, me);
            me.updateBezierControlPoints();
        },
        updateElement: function (point, index, reset) {
            var me = this;
            var custom = point.custom || {};
            var dataset = me.getDataset();
            var scale = me.chart.scale;
            var pointElementOptions = me.chart.options.elements.point;
            var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
            helpers.extend(point, {
                _datasetIndex: me.index,
                _index: index,
                _scale: scale,
                _model: {
                    x: reset ? scale.xCenter : pointPosition.x,
                    y: reset ? scale.yCenter : pointPosition.y,
                    tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
                    radius: custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
                    backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
                    borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
                    borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
                    pointStyle: custom.pointStyle ? custom.pointStyle : helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
                    hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
                }
            });
            point._model.skip = custom.skip ? custom.skip : isNaN(point._model.x) || isNaN(point._model.y);
        },
        updateBezierControlPoints: function () {
            var chartArea = this.chart.chartArea;
            var meta = this.getMeta();
            helpers.each(meta.data, function (point, index) {
                var model = point._model;
                var controlPoints = helpers.splineCurve(helpers.previousItem(meta.data, index, true)._model, model, helpers.nextItem(meta.data, index, true)._model, model.tension);
                model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
                model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
                model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
                model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);
                point.pivot();
            });
        },
        draw: function (ease) {
            var meta = this.getMeta();
            var easingDecimal = ease || 1;
            helpers.each(meta.data, function (point) {
                point.transition(easingDecimal);
            });
            meta.dataset.transition(easingDecimal).draw();
            helpers.each(meta.data, function (point) {
                point.draw();
            });
        },
        setHoverStyle: function (point) {
            var dataset = this.chart.data.datasets[point._datasetIndex];
            var custom = point.custom || {};
            var index = point._index;
            var model = point._model;
            model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
            model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
            model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
            model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
        },
        removeHoverStyle: function (point) {
            var dataset = this.chart.data.datasets[point._datasetIndex];
            var custom = point.custom || {};
            var index = point._index;
            var model = point._model;
            var pointElementOptions = this.chart.options.elements.point;
            model.radius = custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.radius, index, pointElementOptions.radius);
            model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);
            model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);
            model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);
        }
    });
};}, $__.fs.J$__v7918151485_460_25),
            $__.os.oid19 = {}
        ],
        21: [
            ($__.fs.J$__v7918151485_476_26 = function J$__v7918151485_476(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid110).exports = ($__.fs.J$__v7918151485_474_510 = function J$__v7918151485_474(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    ((((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56), $__.os.oid56).animation = $__.os.oid111 = {
        'duration': 1000,
        'easing': 'easeOutQuart',
        'onProgress': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
        'onComplete': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function')
    };
    Chart.Animation = (vvv_tmp0 = TAJS_restrictToType(Chart.Element, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid112 = {
        'currentStep': null,
        'numSteps': 60,
        'easing': '',
        'render': null,
        'onAnimationProgress': null,
        'onAnimationComplete': null
    }, 1, true, $__.uid));
    Chart.animationService = $__.os.oid113 = {
        'frameDuration': 17,
        'animations': [],
        'dropFrames': 0,
        'request': null,
        'addAnimation': ($__.fs.J$__v7918151485_462_514 = function J$__v7918151485_462(chartInstance, animationObject, duration, lazy) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0], animationObject = arguments[1], duration = arguments[2], lazy = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (!lazy) {
    chartInstance.animating = true;
}
for (var index = 0; index < me.animations.length; ++index) {
    if (me.animations[index].chartInstance === chartInstance) {
        me.animations[index].animationObject = animationObject;
        return;
    }
}
me.animations.push({
    chartInstance: chartInstance,
    animationObject: animationObject
});
if (me.animations.length === 1) {
    me.requestAnimationFrame();
}}),
        'cancelAnimation': ($__.fs.J$__v7918151485_466_515 = function J$__v7918151485_466(chartInstance) {
var vvv_return, vvv_switch, index;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
index = helpers.findIndex(this.animations, function (animationWrapper) {
    return animationWrapper.chartInstance === chartInstance;
});
if (index !== -1) {
    this.animations.splice(index, 1);
    chartInstance.animating = false;
}}),
        'requestAnimationFrame': ($__.fs.J$__v7918151485_470_516 = function J$__v7918151485_470() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (me.request === null) {
    me.request = helpers.requestAnimFrame.call(window, function () {
        me.request = null;
        me.startDigest();
    });
}}),
        'startDigest': ($__.fs.J$__v7918151485_472_517 = function J$__v7918151485_472() {
var vvv_return, vvv_switch, me, startTime, framesToDrop, i, endTime, dropFrames;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
startTime = Date.now();
framesToDrop = 0;
if (me.dropFrames > 1) {
    framesToDrop = Math.floor(me.dropFrames);
    me.dropFrames = me.dropFrames % 1;
}
i = 0;
while (i < me.animations.length) {
    if (me.animations[i].animationObject.currentStep === null) {
        me.animations[i].animationObject.currentStep = 0;
    }
    me.animations[i].animationObject.currentStep += 1 + framesToDrop;
    if (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {
        me.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;
    }
    me.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);
    if (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {
        me.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);
    }
    if (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {
        if (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {
            me.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);
        }
        me.animations[i].chartInstance.animating = false;
        me.animations.splice(i, 1);
    } else {
        ++i;
    }
}
endTime = Date.now();
dropFrames = (endTime - startTime) / me.frameDuration;
me.dropFrames += dropFrames;
if (me.animations.length > 0) {
    me.requestAnimationFrame();
}})
    };
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.defaults.global.animation = {
    duration: 1000,
    easing: 'easeOutQuart',
    onProgress: helpers.noop,
    onComplete: helpers.noop
};
Chart.Animation = Chart.Element.extend({
    currentStep: null,
    numSteps: 60,
    easing: '',
    render: null,
    onAnimationProgress: null,
    onAnimationComplete: null
});
Chart.animationService = {
    frameDuration: 17,
    animations: [],
    dropFrames: 0,
    request: null,
    addAnimation: function (chartInstance, animationObject, duration, lazy) {
        var me = this;
        if (!lazy) {
            chartInstance.animating = true;
        }
        for (var index = 0; index < me.animations.length; ++index) {
            if (me.animations[index].chartInstance === chartInstance) {
                me.animations[index].animationObject = animationObject;
                return;
            }
        }
        me.animations.push({
            chartInstance: chartInstance,
            animationObject: animationObject
        });
        if (me.animations.length === 1) {
            me.requestAnimationFrame();
        }
    },
    cancelAnimation: function (chartInstance) {
        var index = helpers.findIndex(this.animations, function (animationWrapper) {
            return animationWrapper.chartInstance === chartInstance;
        });
        if (index !== -1) {
            this.animations.splice(index, 1);
            chartInstance.animating = false;
        }
    },
    requestAnimationFrame: function () {
        var me = this;
        if (me.request === null) {
            me.request = helpers.requestAnimFrame.call(window, function () {
                me.request = null;
                me.startDigest();
            });
        }
    },
    startDigest: function () {
        var me = this;
        var startTime = Date.now();
        var framesToDrop = 0;
        if (me.dropFrames > 1) {
            framesToDrop = Math.floor(me.dropFrames);
            me.dropFrames = me.dropFrames % 1;
        }
        var i = 0;
        while (i < me.animations.length) {
            if (me.animations[i].animationObject.currentStep === null) {
                me.animations[i].animationObject.currentStep = 0;
            }
            me.animations[i].animationObject.currentStep += 1 + framesToDrop;
            if (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {
                me.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;
            }
            me.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);
            if (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {
                me.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);
            }
            if (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {
                if (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {
                    me.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);
                }
                me.animations[i].chartInstance.animating = false;
                me.animations.splice(i, 1);
            } else {
                ++i;
            }
        }
        var endTime = Date.now();
        var dropFrames = (endTime - startTime) / me.frameDuration;
        me.dropFrames += dropFrames;
        if (me.animations.length > 0) {
            me.requestAnimationFrame();
        }
    }
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.defaults.global.animation = {
        duration: 1000,
        easing: 'easeOutQuart',
        onProgress: helpers.noop,
        onComplete: helpers.noop
    };
    Chart.Animation = Chart.Element.extend({
        currentStep: null,
        numSteps: 60,
        easing: '',
        render: null,
        onAnimationProgress: null,
        onAnimationComplete: null
    });
    Chart.animationService = {
        frameDuration: 17,
        animations: [],
        dropFrames: 0,
        request: null,
        addAnimation: function (chartInstance, animationObject, duration, lazy) {
            var me = this;
            if (!lazy) {
                chartInstance.animating = true;
            }
            for (var index = 0; index < me.animations.length; ++index) {
                if (me.animations[index].chartInstance === chartInstance) {
                    me.animations[index].animationObject = animationObject;
                    return;
                }
            }
            me.animations.push({
                chartInstance: chartInstance,
                animationObject: animationObject
            });
            if (me.animations.length === 1) {
                me.requestAnimationFrame();
            }
        },
        cancelAnimation: function (chartInstance) {
            var index = helpers.findIndex(this.animations, function (animationWrapper) {
                return animationWrapper.chartInstance === chartInstance;
            });
            if (index !== -1) {
                this.animations.splice(index, 1);
                chartInstance.animating = false;
            }
        },
        requestAnimationFrame: function () {
            var me = this;
            if (me.request === null) {
                me.request = helpers.requestAnimFrame.call(window, function () {
                    me.request = null;
                    me.startDigest();
                });
            }
        },
        startDigest: function () {
            var me = this;
            var startTime = Date.now();
            var framesToDrop = 0;
            if (me.dropFrames > 1) {
                framesToDrop = Math.floor(me.dropFrames);
                me.dropFrames = me.dropFrames % 1;
            }
            var i = 0;
            while (i < me.animations.length) {
                if (me.animations[i].animationObject.currentStep === null) {
                    me.animations[i].animationObject.currentStep = 0;
                }
                me.animations[i].animationObject.currentStep += 1 + framesToDrop;
                if (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {
                    me.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;
                }
                me.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);
                if (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {
                    me.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);
                }
                if (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {
                    if (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {
                        me.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);
                    }
                    me.animations[i].chartInstance.animating = false;
                    me.animations.splice(i, 1);
                } else {
                    ++i;
                }
            }
            var endTime = Date.now();
            var dropFrames = (endTime - startTime) / me.frameDuration;
            me.dropFrames += dropFrames;
            if (me.animations.length > 0) {
                me.requestAnimationFrame();
            }
        }
    };
};}, $__.fs.J$__v7918151485_476_26),
            $__.os.oid20 = {}
        ],
        22: [
            ($__.fs.J$__v7918151485_486_27 = function J$__v7918151485_486(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid98).exports = ($__.fs.J$__v7918151485_484_484 = function J$__v7918151485_484(Chart) {
var vvv_return, vvv_switch, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = Chart.canvasHelpers = $__.os.oid99 = {};
    (helpers, $__.os.oid99).drawPoint = ($__.fs.J$__v7918151485_478_485 = function J$__v7918151485_478(ctx, pointStyle, radius, x, y) {
var vvv_return, vvv_switch, type, edgeLength, xOffset, yOffset, height, size, offset, leftX, topY, sideSize;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ctx = arguments[0], pointStyle = arguments[1], radius = arguments[2], x = arguments[3], y = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof pointStyle === 'object') {
    type = pointStyle.toString();
    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
        ctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);
        return;
    }
}
if (isNaN(radius) || radius <= 0) {
    return;
}
switch (pointStyle) {
case 'triangle':
    ctx.beginPath();
    edgeLength = 3 * radius / Math.sqrt(3);
    height = edgeLength * Math.sqrt(3) / 2;
    ctx.moveTo(x - edgeLength / 2, y + height / 3);
    ctx.lineTo(x + edgeLength / 2, y + height / 3);
    ctx.lineTo(x, y - 2 * height / 3);
    ctx.closePath();
    ctx.fill();
    break;
case 'rect':
    size = 1 / Math.SQRT2 * radius;
    ctx.beginPath();
    ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
    ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
    break;
case 'rectRounded':
    offset = radius / Math.SQRT2;
    leftX = x - offset;
    topY = y - offset;
    sideSize = Math.SQRT2 * radius;
    Chart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);
    ctx.fill();
    break;
case 'rectRot':
    size = 1 / Math.SQRT2 * radius;
    ctx.beginPath();
    ctx.moveTo(x - size, y);
    ctx.lineTo(x, y + size);
    ctx.lineTo(x + size, y);
    ctx.lineTo(x, y - size);
    ctx.closePath();
    ctx.fill();
    break;
case 'cross':
    ctx.beginPath();
    ctx.moveTo(x, y + radius);
    ctx.lineTo(x, y - radius);
    ctx.moveTo(x - radius, y);
    ctx.lineTo(x + radius, y);
    ctx.closePath();
    break;
case 'crossRot':
    ctx.beginPath();
    xOffset = Math.cos(Math.PI / 4) * radius;
    yOffset = Math.sin(Math.PI / 4) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    ctx.moveTo(x - xOffset, y + yOffset);
    ctx.lineTo(x + xOffset, y - yOffset);
    ctx.closePath();
    break;
case 'star':
    ctx.beginPath();
    ctx.moveTo(x, y + radius);
    ctx.lineTo(x, y - radius);
    ctx.moveTo(x - radius, y);
    ctx.lineTo(x + radius, y);
    xOffset = Math.cos(Math.PI / 4) * radius;
    yOffset = Math.sin(Math.PI / 4) * radius;
    ctx.moveTo(x - xOffset, y - yOffset);
    ctx.lineTo(x + xOffset, y + yOffset);
    ctx.moveTo(x - xOffset, y + yOffset);
    ctx.lineTo(x + xOffset, y - yOffset);
    ctx.closePath();
    break;
case 'line':
    ctx.beginPath();
    ctx.moveTo(x - radius, y);
    ctx.lineTo(x + radius, y);
    ctx.closePath();
    break;
case 'dash':
    ctx.beginPath();
    ctx.moveTo(x, y);
    ctx.lineTo(x + radius, y);
    ctx.closePath();
    break;
default:
    ctx.beginPath();
    ctx.arc(x, y, radius, 0, Math.PI * 2);
    ctx.closePath();
    ctx.fill();
    break;
}
ctx.stroke();});
    (helpers, $__.os.oid99).clipArea = ($__.fs.J$__v7918151485_480_486 = function J$__v7918151485_480(ctx, clipArea) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ctx = arguments[0], clipArea = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ctx.save();
ctx.beginPath();
ctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);
ctx.clip();});
    (helpers, $__.os.oid99).unclipArea = ($__.fs.J$__v7918151485_482_487 = function J$__v7918151485_482(ctx) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ctx = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ctx.restore();});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.canvasHelpers = {};
helpers.drawPoint = function (ctx, pointStyle, radius, x, y) {
    var type, edgeLength, xOffset, yOffset, height, size;
    if (typeof pointStyle === 'object') {
        type = pointStyle.toString();
        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
            ctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);
            return;
        }
    }
    if (isNaN(radius) || radius <= 0) {
        return;
    }
    switch (pointStyle) {
    case 'triangle':
        ctx.beginPath();
        edgeLength = 3 * radius / Math.sqrt(3);
        height = edgeLength * Math.sqrt(3) / 2;
        ctx.moveTo(x - edgeLength / 2, y + height / 3);
        ctx.lineTo(x + edgeLength / 2, y + height / 3);
        ctx.lineTo(x, y - 2 * height / 3);
        ctx.closePath();
        ctx.fill();
        break;
    case 'rect':
        size = 1 / Math.SQRT2 * radius;
        ctx.beginPath();
        ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
        ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
        break;
    case 'rectRounded':
        var offset = radius / Math.SQRT2;
        var leftX = x - offset;
        var topY = y - offset;
        var sideSize = Math.SQRT2 * radius;
        Chart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);
        ctx.fill();
        break;
    case 'rectRot':
        size = 1 / Math.SQRT2 * radius;
        ctx.beginPath();
        ctx.moveTo(x - size, y);
        ctx.lineTo(x, y + size);
        ctx.lineTo(x + size, y);
        ctx.lineTo(x, y - size);
        ctx.closePath();
        ctx.fill();
        break;
    case 'cross':
        ctx.beginPath();
        ctx.moveTo(x, y + radius);
        ctx.lineTo(x, y - radius);
        ctx.moveTo(x - radius, y);
        ctx.lineTo(x + radius, y);
        ctx.closePath();
        break;
    case 'crossRot':
        ctx.beginPath();
        xOffset = Math.cos(Math.PI / 4) * radius;
        yOffset = Math.sin(Math.PI / 4) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        ctx.moveTo(x - xOffset, y + yOffset);
        ctx.lineTo(x + xOffset, y - yOffset);
        ctx.closePath();
        break;
    case 'star':
        ctx.beginPath();
        ctx.moveTo(x, y + radius);
        ctx.lineTo(x, y - radius);
        ctx.moveTo(x - radius, y);
        ctx.lineTo(x + radius, y);
        xOffset = Math.cos(Math.PI / 4) * radius;
        yOffset = Math.sin(Math.PI / 4) * radius;
        ctx.moveTo(x - xOffset, y - yOffset);
        ctx.lineTo(x + xOffset, y + yOffset);
        ctx.moveTo(x - xOffset, y + yOffset);
        ctx.lineTo(x + xOffset, y - yOffset);
        ctx.closePath();
        break;
    case 'line':
        ctx.beginPath();
        ctx.moveTo(x - radius, y);
        ctx.lineTo(x + radius, y);
        ctx.closePath();
        break;
    case 'dash':
        ctx.beginPath();
        ctx.moveTo(x, y);
        ctx.lineTo(x + radius, y);
        ctx.closePath();
        break;
    default:
        ctx.beginPath();
        ctx.arc(x, y, radius, 0, Math.PI * 2);
        ctx.closePath();
        ctx.fill();
        break;
    }
    ctx.stroke();
};
helpers.clipArea = function (ctx, clipArea) {
    ctx.save();
    ctx.beginPath();
    ctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);
    ctx.clip();
};
helpers.unclipArea = function (ctx) {
    ctx.restore();
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.canvasHelpers = {};
    helpers.drawPoint = function (ctx, pointStyle, radius, x, y) {
        var type, edgeLength, xOffset, yOffset, height, size;
        if (typeof pointStyle === 'object') {
            type = pointStyle.toString();
            if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
                ctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);
                return;
            }
        }
        if (isNaN(radius) || radius <= 0) {
            return;
        }
        switch (pointStyle) {
        case 'triangle':
            ctx.beginPath();
            edgeLength = 3 * radius / Math.sqrt(3);
            height = edgeLength * Math.sqrt(3) / 2;
            ctx.moveTo(x - edgeLength / 2, y + height / 3);
            ctx.lineTo(x + edgeLength / 2, y + height / 3);
            ctx.lineTo(x, y - 2 * height / 3);
            ctx.closePath();
            ctx.fill();
            break;
        case 'rect':
            size = 1 / Math.SQRT2 * radius;
            ctx.beginPath();
            ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
            ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
            break;
        case 'rectRounded':
            var offset = radius / Math.SQRT2;
            var leftX = x - offset;
            var topY = y - offset;
            var sideSize = Math.SQRT2 * radius;
            Chart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);
            ctx.fill();
            break;
        case 'rectRot':
            size = 1 / Math.SQRT2 * radius;
            ctx.beginPath();
            ctx.moveTo(x - size, y);
            ctx.lineTo(x, y + size);
            ctx.lineTo(x + size, y);
            ctx.lineTo(x, y - size);
            ctx.closePath();
            ctx.fill();
            break;
        case 'cross':
            ctx.beginPath();
            ctx.moveTo(x, y + radius);
            ctx.lineTo(x, y - radius);
            ctx.moveTo(x - radius, y);
            ctx.lineTo(x + radius, y);
            ctx.closePath();
            break;
        case 'crossRot':
            ctx.beginPath();
            xOffset = Math.cos(Math.PI / 4) * radius;
            yOffset = Math.sin(Math.PI / 4) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.moveTo(x - xOffset, y + yOffset);
            ctx.lineTo(x + xOffset, y - yOffset);
            ctx.closePath();
            break;
        case 'star':
            ctx.beginPath();
            ctx.moveTo(x, y + radius);
            ctx.lineTo(x, y - radius);
            ctx.moveTo(x - radius, y);
            ctx.lineTo(x + radius, y);
            xOffset = Math.cos(Math.PI / 4) * radius;
            yOffset = Math.sin(Math.PI / 4) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            ctx.moveTo(x - xOffset, y + yOffset);
            ctx.lineTo(x + xOffset, y - yOffset);
            ctx.closePath();
            break;
        case 'line':
            ctx.beginPath();
            ctx.moveTo(x - radius, y);
            ctx.lineTo(x + radius, y);
            ctx.closePath();
            break;
        case 'dash':
            ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.lineTo(x + radius, y);
            ctx.closePath();
            break;
        default:
            ctx.beginPath();
            ctx.arc(x, y, radius, 0, Math.PI * 2);
            ctx.closePath();
            ctx.fill();
            break;
        }
        ctx.stroke();
    };
    helpers.clipArea = function (ctx, clipArea) {
        ctx.save();
        ctx.beginPath();
        ctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);
        ctx.clip();
    };
    helpers.unclipArea = function (ctx) {
        ctx.restore();
    };
};}, $__.fs.J$__v7918151485_486_27),
            $__.os.oid21 = {}
        ],
        23: [
            ($__.fs.J$__v7918151485_596_28 = function J$__v7918151485_596(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid115).exports = ($__.fs.J$__v7918151485_594_519 = function J$__v7918151485_594(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers, plugins, platform, initConfig, updateConfig;
initConfig = function initConfig(config) {
    config = config || {};
    var data = config.data = config.data || {};
    data.datasets = data.datasets || [];
    data.labels = data.labels || [];
    config.options = helpers.configMerge(Chart.defaults.global, Chart.defaults[config.type], config.options || {});
    return config;
};
updateConfig = function updateConfig(chart) {
    var newOptions = chart.options;
    if (newOptions.scale) {
        chart.scale.options = newOptions.scale;
    } else if (newOptions.scales) {
        newOptions.scales.xAxes.concat(newOptions.scales.yAxes).forEach(function (scaleOptions) {
            chart.scales[scaleOptions.id].options = scaleOptions;
        });
    }
    chart.tooltip._options = newOptions.tooltips;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    initConfig = ($__.fs.initConfig_520 = function initConfig(config) {
var vvv_return, vvv_switch, data;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
config = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
config = config || {};
data = config.data = config.data || {};
data.datasets = data.datasets || [];
data.labels = data.labels || [];
config.options = helpers.configMerge(Chart.defaults.global, Chart.defaults[config.type], config.options || {});
return config;});
    updateConfig = ($__.fs.updateConfig_521 = function updateConfig(chart) {
var vvv_return, vvv_switch, newOptions;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
newOptions = chart.options;
if (newOptions.scale) {
    chart.scale.options = newOptions.scale;
} else if (newOptions.scales) {
    newOptions.scales.xAxes.concat(newOptions.scales.yAxes).forEach(function (scaleOptions) {
        chart.scales[scaleOptions.id].options = scaleOptions;
    });
}
chart.tooltip._options = newOptions.tooltips;});
    helpers = (Chart.helpers, $__.os.oid88);
    plugins = (Chart.plugins, $__.os.oid103);
    platform = (Chart.platform, $__.os.oid94);
    Chart.types = $__.os.oid116 = {};
    Chart.instances = $__.os.oid117 = {};
    Chart.controllers = $__.os.oid118 = {};
    Chart.Controller = ($__.fs.J$__v7918151485_494_522 = function J$__v7918151485_494(item, config, instance) {
var vvv_return, vvv_switch, me, context, canvas, height, width;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
item = arguments[0], config = arguments[1], instance = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
config = initConfig(config);
context = platform.acquireContext(item, config);
canvas = context && context.canvas;
height = canvas && canvas.height;
width = canvas && canvas.width;
instance.ctx = context;
instance.canvas = canvas;
instance.config = config;
instance.width = width;
instance.height = height;
instance.aspectRatio = height ? width / height : null;
me.id = helpers.uid();
me.chart = instance;
me.config = config;
me.options = config.options;
me._bufferedRender = false;
Chart.instances[me.id] = me;
Object.defineProperty(me, 'data', {
    get: function () {
        return me.config.data;
    }
});
if (!context || !canvas) {
    console.error('Failed to create chart: can\'t acquire context from the given item');
    return me;
}
me.initialize();
me.update();
return me;});
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(TAJS_restrictToType(Chart.Controller, 'function').prototype, 'object'), $__.os.oid119 = {
        'initialize': ($__.fs.J$__v7918151485_496_523 = function J$__v7918151485_496() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
plugins.notify(me, 'beforeInit');
helpers.retinaScale(me.chart);
me.bindEvents();
if (me.options.responsive) {
    me.resize(true);
}
me.ensureScalesHaveIDs();
me.buildScales();
me.initToolTip();
plugins.notify(me, 'afterInit');
return me;}, $__.fs.J$__v7918151485_496_523_75 = $__.fs.J$__v7918151485_496_523, $__.fs.J$__v7918151485_496_523),
        'clear': ($__.fs.J$__v7918151485_498_524 = function J$__v7918151485_498() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.clear(this.chart);
return this;}, $__.fs.J$__v7918151485_498_524_77 = $__.fs.J$__v7918151485_498_524, $__.fs.J$__v7918151485_498_524),
        'stop': ($__.fs.J$__v7918151485_500_525 = function J$__v7918151485_500() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.animationService.cancelAnimation(this);
return this;}, $__.fs.J$__v7918151485_500_525_79 = $__.fs.J$__v7918151485_500_525, $__.fs.J$__v7918151485_500_525),
        'resize': ($__.fs.J$__v7918151485_502_526 = function J$__v7918151485_502(silent) {
var vvv_return, vvv_switch, me, chart, options, canvas, aspectRatio, newWidth, newHeight, newSize;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
silent = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
chart = me.chart;
options = me.options;
canvas = chart.canvas;
aspectRatio = options.maintainAspectRatio && chart.aspectRatio || null;
newWidth = Math.floor(helpers.getMaximumWidth(canvas));
newHeight = Math.floor(aspectRatio ? newWidth / aspectRatio : helpers.getMaximumHeight(canvas));
if (chart.width === newWidth && chart.height === newHeight) {
    return;
}
canvas.width = chart.width = newWidth;
canvas.height = chart.height = newHeight;
canvas.style.width = newWidth + 'px';
canvas.style.height = newHeight + 'px';
helpers.retinaScale(chart);
if (!silent) {
    newSize = {
        width: newWidth,
        height: newHeight
    };
    plugins.notify(me, 'resize', [newSize]);
    if (me.options.onResize) {
        me.options.onResize(me, newSize);
    }
    me.stop();
    me.update(me.options.responsiveAnimationDuration);
}}, $__.fs.J$__v7918151485_502_526_81 = $__.fs.J$__v7918151485_502_526, $__.fs.J$__v7918151485_502_526),
        'ensureScalesHaveIDs': ($__.fs.J$__v7918151485_508_527 = function J$__v7918151485_508() {
var vvv_return, vvv_switch, options, scalesOptions, scaleOptions;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
options = this.options;
scalesOptions = options.scales || {};
scaleOptions = options.scale;
helpers.each(scalesOptions.xAxes, function (xAxisOptions, index) {
    xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;
});
helpers.each(scalesOptions.yAxes, function (yAxisOptions, index) {
    yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;
});
if (scaleOptions) {
    scaleOptions.id = scaleOptions.id || 'scale';
}}, $__.fs.J$__v7918151485_508_527_83 = $__.fs.J$__v7918151485_508_527, $__.fs.J$__v7918151485_508_527),
        'buildScales': ($__.fs.J$__v7918151485_516_528 = function J$__v7918151485_516() {
var vvv_return, vvv_switch, me, options, scales, items;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
options = me.options;
scales = me.scales = {};
items = [];
if (options.scales) {
    items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {
        return {
            options: xAxisOptions,
            dtype: 'category'
        };
    }), (options.scales.yAxes || []).map(function (yAxisOptions) {
        return {
            options: yAxisOptions,
            dtype: 'linear'
        };
    }));
}
if (options.scale) {
    items.push({
        options: options.scale,
        dtype: 'radialLinear',
        isDefault: true
    });
}
helpers.each(items, function (item) {
    var scaleOptions = item.options;
    var scaleType = helpers.getValueOrDefault(scaleOptions.type, item.dtype);
    var scaleClass = Chart.scaleService.getScaleConstructor(scaleType);
    if (!scaleClass) {
        return;
    }
    var scale = new scaleClass({
        id: scaleOptions.id,
        options: scaleOptions,
        ctx: me.chart.ctx,
        chart: me
    });
    scales[scale.id] = scale;
    if (item.isDefault) {
        me.scale = scale;
    }
});
Chart.scaleService.addScalesToLayout(this);}, $__.fs.J$__v7918151485_516_528_85 = $__.fs.J$__v7918151485_516_528, $__.fs.J$__v7918151485_516_528),
        'buildOrUpdateControllers': ($__.fs.J$__v7918151485_520_529 = function J$__v7918151485_520() {
var vvv_return, vvv_switch, me, types, newControllers;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
types = [];
newControllers = [];
helpers.each(me.data.datasets, function (dataset, datasetIndex) {
    var meta = me.getDatasetMeta(datasetIndex);
    if (!meta.type) {
        meta.type = dataset.type || me.config.type;
    }
    types.push(meta.type);
    if (meta.controller) {
        meta.controller.updateIndex(datasetIndex);
    } else {
        meta.controller = new Chart.controllers[meta.type](me, datasetIndex);
        newControllers.push(meta.controller);
    }
}, me);
if (types.length > 1) {
    for (var i = 1; i < types.length; i++) {
        if (types[i] !== types[i - 1]) {
            me.isCombo = true;
            break;
        }
    }
}
return newControllers;}, $__.fs.J$__v7918151485_520_529_87 = $__.fs.J$__v7918151485_520_529, $__.fs.J$__v7918151485_520_529),
        'resetElements': ($__.fs.J$__v7918151485_524_530 = function J$__v7918151485_524() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
helpers.each(me.data.datasets, function (dataset, datasetIndex) {
    me.getDatasetMeta(datasetIndex).controller.reset();
}, me);}, $__.fs.J$__v7918151485_524_530_89 = $__.fs.J$__v7918151485_524_530, $__.fs.J$__v7918151485_524_530),
        'reset': ($__.fs.J$__v7918151485_526_531 = function J$__v7918151485_526() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.resetElements();
this.tooltip.initialize();}, $__.fs.J$__v7918151485_526_531_91 = $__.fs.J$__v7918151485_526_531, $__.fs.J$__v7918151485_526_531),
        'update': ($__.fs.J$__v7918151485_532_532 = function J$__v7918151485_532(animationDuration, lazy) {
var vvv_return, vvv_switch, me, newControllers;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
animationDuration = arguments[0], lazy = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
updateConfig(me);
if (plugins.notify(me, 'beforeUpdate') === false) {
    return;
}
me.tooltip._data = me.data;
newControllers = me.buildOrUpdateControllers();
helpers.each(me.data.datasets, function (dataset, datasetIndex) {
    me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
}, me);
me.updateLayout();
helpers.each(newControllers, function (controller) {
    controller.reset();
});
me.updateDatasets();
plugins.notify(me, 'afterUpdate');
if (me._bufferedRender) {
    me._bufferedRequest = {
        lazy: lazy,
        duration: animationDuration
    };
} else {
    me.render(animationDuration, lazy);
}}, $__.fs.J$__v7918151485_532_532_93 = $__.fs.J$__v7918151485_532_532, $__.fs.J$__v7918151485_532_532),
        'updateLayout': ($__.fs.J$__v7918151485_534_533 = function J$__v7918151485_534() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (plugins.notify(me, 'beforeLayout') === false) {
    return;
}
Chart.layoutService.update(this, this.chart.width, this.chart.height);
plugins.notify(me, 'afterScaleUpdate');
plugins.notify(me, 'afterLayout');}, $__.fs.J$__v7918151485_534_533_95 = $__.fs.J$__v7918151485_534_533, $__.fs.J$__v7918151485_534_533),
        'updateDatasets': ($__.fs.J$__v7918151485_536_534 = function J$__v7918151485_536() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (plugins.notify(me, 'beforeDatasetsUpdate') === false) {
    return;
}
for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
    me.getDatasetMeta(i).controller.update();
}
plugins.notify(me, 'afterDatasetsUpdate');}, $__.fs.J$__v7918151485_536_534_97 = $__.fs.J$__v7918151485_536_534, $__.fs.J$__v7918151485_536_534),
        'render': ($__.fs.J$__v7918151485_542_535 = function J$__v7918151485_542(duration, lazy) {
var vvv_return, vvv_switch, me, animationOptions, onComplete, animation;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
duration = arguments[0], lazy = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (plugins.notify(me, 'beforeRender') === false) {
    return;
}
animationOptions = me.options.animation;
onComplete = function () {
    plugins.notify(me, 'afterRender');
    var callback = animationOptions && animationOptions.onComplete;
    if (callback && callback.call) {
        callback.call(me);
    }
};
if (animationOptions && (typeof duration !== 'undefined' && duration !== 0 || typeof duration === 'undefined' && animationOptions.duration !== 0)) {
    animation = new Chart.Animation();
    animation.numSteps = (duration || animationOptions.duration) / 16.66;
    animation.easing = animationOptions.easing;
    animation.render = function (chartInstance, animationObject) {
        var easingFunction = helpers.easingEffects[animationObject.easing];
        var stepDecimal = animationObject.currentStep / animationObject.numSteps;
        var easeDecimal = easingFunction(stepDecimal);
        chartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);
    };
    animation.onAnimationProgress = animationOptions.onProgress;
    animation.onAnimationComplete = onComplete;
    Chart.animationService.addAnimation(me, animation, duration, lazy);
} else {
    me.draw();
    onComplete();
}
return me;}, $__.fs.J$__v7918151485_542_535_99 = $__.fs.J$__v7918151485_542_535, $__.fs.J$__v7918151485_542_535),
        'draw': ($__.fs.J$__v7918151485_546_536 = function J$__v7918151485_546(easingValue) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
easingValue = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.clear();
if (easingValue === undefined || easingValue === null) {
    easingValue = 1;
}
if (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
    return;
}
helpers.each(me.boxes, function (box) {
    box.draw(me.chartArea);
}, me);
if (me.scale) {
    me.scale.draw();
}
me.drawDatasets(easingValue);
me.tooltip.transition(easingValue).draw();
plugins.notify(me, 'afterDraw', [easingValue]);}, $__.fs.J$__v7918151485_546_536_101 = $__.fs.J$__v7918151485_546_536, $__.fs.J$__v7918151485_546_536),
        'drawDatasets': ($__.fs.J$__v7918151485_550_537 = function J$__v7918151485_550(easingValue) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
easingValue = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
    return;
}
helpers.each(me.data.datasets, function (dataset, datasetIndex) {
    if (me.isDatasetVisible(datasetIndex)) {
        me.getDatasetMeta(datasetIndex).controller.draw(easingValue);
    }
}, me, true);
plugins.notify(me, 'afterDatasetsDraw', [easingValue]);}, $__.fs.J$__v7918151485_550_537_103 = $__.fs.J$__v7918151485_550_537, $__.fs.J$__v7918151485_550_537),
        'getElementAtEvent': ($__.fs.J$__v7918151485_552_538 = function J$__v7918151485_552(e) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Chart.Interaction.modes.single(this, e);}, $__.fs.J$__v7918151485_552_538_105 = $__.fs.J$__v7918151485_552_538, $__.fs.J$__v7918151485_552_538),
        'getElementsAtEvent': ($__.fs.J$__v7918151485_554_539 = function J$__v7918151485_554(e) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Chart.Interaction.modes.label(this, e, {
    intersect: true
});}, $__.fs.J$__v7918151485_554_539_107 = $__.fs.J$__v7918151485_554_539, $__.fs.J$__v7918151485_554_539),
        'getElementsAtXAxis': ($__.fs.J$__v7918151485_556_540 = function J$__v7918151485_556(e) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Chart.Interaction.modes['x-axis'](this, e, {
    intersect: true
});}, $__.fs.J$__v7918151485_556_540_109 = $__.fs.J$__v7918151485_556_540, $__.fs.J$__v7918151485_556_540),
        'getElementsAtEventForMode': ($__.fs.J$__v7918151485_558_541 = function J$__v7918151485_558(e, mode, options) {
var vvv_return, vvv_switch, method;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0], mode = arguments[1], options = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
method = Chart.Interaction.modes[mode];
if (typeof method === 'function') {
    return method(this, e, options);
}
return [];}, $__.fs.J$__v7918151485_558_541_111 = $__.fs.J$__v7918151485_558_541, $__.fs.J$__v7918151485_558_541),
        'getDatasetAtEvent': ($__.fs.J$__v7918151485_560_542 = function J$__v7918151485_560(e) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Chart.Interaction.modes.dataset(this, e, {
    intersect: true
});}, $__.fs.J$__v7918151485_560_542_113 = $__.fs.J$__v7918151485_560_542, $__.fs.J$__v7918151485_560_542),
        'getDatasetMeta': ($__.fs.J$__v7918151485_562_543 = function J$__v7918151485_562(datasetIndex) {
var vvv_return, vvv_switch, me, dataset, meta;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
datasetIndex = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
dataset = me.data.datasets[datasetIndex];
if (!dataset._meta) {
    dataset._meta = {};
}
meta = dataset._meta[me.id];
if (!meta) {
    meta = dataset._meta[me.id] = {
        type: null,
        data: [],
        dataset: null,
        controller: null,
        hidden: null,
        xAxisID: null,
        yAxisID: null
    };
}
return meta;}, $__.fs.J$__v7918151485_562_543_115 = $__.fs.J$__v7918151485_562_543, $__.fs.J$__v7918151485_562_543),
        'getVisibleDatasetCount': ($__.fs.J$__v7918151485_564_544 = function J$__v7918151485_564() {
var vvv_return, vvv_switch, count;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
count = 0;
for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
    if (this.isDatasetVisible(i)) {
        count++;
    }
}
return count;}, $__.fs.J$__v7918151485_564_544_117 = $__.fs.J$__v7918151485_564_544, $__.fs.J$__v7918151485_564_544),
        'isDatasetVisible': ($__.fs.J$__v7918151485_566_545 = function J$__v7918151485_566(datasetIndex) {
var vvv_return, vvv_switch, meta;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
datasetIndex = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
meta = this.getDatasetMeta(datasetIndex);
return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;}, $__.fs.J$__v7918151485_566_545_119 = $__.fs.J$__v7918151485_566_545, $__.fs.J$__v7918151485_566_545),
        'generateLegend': ($__.fs.J$__v7918151485_568_546 = function J$__v7918151485_568() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.options.legendCallback(this);}, $__.fs.J$__v7918151485_568_546_121 = $__.fs.J$__v7918151485_568_546, $__.fs.J$__v7918151485_568_546),
        'destroy': ($__.fs.J$__v7918151485_570_547 = function J$__v7918151485_570() {
var vvv_return, vvv_switch, me, canvas, meta, i, ilen;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
canvas = me.chart.canvas;
me.stop();
for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
    meta = me.getDatasetMeta(i);
    if (meta.controller) {
        meta.controller.destroy();
        meta.controller = null;
    }
}
if (canvas) {
    me.unbindEvents();
    helpers.clear(me.chart);
    platform.releaseContext(me.chart.ctx);
    me.chart.canvas = null;
    me.chart.ctx = null;
}
plugins.notify(me, 'destroy');
delete Chart.instances[me.id];}, $__.fs.J$__v7918151485_570_547_123 = $__.fs.J$__v7918151485_570_547, $__.fs.J$__v7918151485_570_547),
        'toBase64Image': ($__.fs.J$__v7918151485_572_548 = function J$__v7918151485_572() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);}, $__.fs.J$__v7918151485_572_548_125 = $__.fs.J$__v7918151485_572_548, $__.fs.J$__v7918151485_572_548),
        'initToolTip': ($__.fs.J$__v7918151485_574_549 = function J$__v7918151485_574() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.tooltip = new Chart.Tooltip({
    _chart: me.chart,
    _chartInstance: me,
    _data: me.data,
    _options: me.options.tooltips
}, me);
me.tooltip.initialize();}, $__.fs.J$__v7918151485_574_549_127 = $__.fs.J$__v7918151485_574_549, $__.fs.J$__v7918151485_574_549),
        'bindEvents': ($__.fs.J$__v7918151485_582_550 = function J$__v7918151485_582() {
var vvv_return, vvv_switch, me, listeners, listener;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
listeners = me._listeners = {};
listener = function () {
    me.eventHandler.apply(me, arguments);
};
helpers.each(me.options.events, function (type) {
    platform.addEventListener(me, type, listener);
    listeners[type] = listener;
});
if (me.options.responsive) {
    listener = function () {
        me.resize();
    };
    platform.addEventListener(me, 'resize', listener);
    listeners.resize = listener;
}}, $__.fs.J$__v7918151485_582_550_129 = $__.fs.J$__v7918151485_582_550, $__.fs.J$__v7918151485_582_550),
        'unbindEvents': ($__.fs.J$__v7918151485_586_551 = function J$__v7918151485_586() {
var vvv_return, vvv_switch, me, listeners;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
listeners = me._listeners;
if (!listeners) {
    return;
}
delete me._listeners;
helpers.each(listeners, function (listener, type) {
    platform.removeEventListener(me, type, listener);
});}, $__.fs.J$__v7918151485_586_551_131 = $__.fs.J$__v7918151485_586_551, $__.fs.J$__v7918151485_586_551),
        'updateHoverStyle': ($__.fs.J$__v7918151485_588_552 = function J$__v7918151485_588(elements, mode, enabled) {
var vvv_return, vvv_switch, method, element, i, ilen;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
elements = arguments[0], mode = arguments[1], enabled = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
method = enabled ? 'setHoverStyle' : 'removeHoverStyle';
for (i = 0, ilen = elements.length; i < ilen; ++i) {
    element = elements[i];
    if (element) {
        this.getDatasetMeta(element._datasetIndex).controller[method](element);
    }
}}, $__.fs.J$__v7918151485_588_552_133 = $__.fs.J$__v7918151485_588_552, $__.fs.J$__v7918151485_588_552),
        'eventHandler': ($__.fs.J$__v7918151485_590_553 = function J$__v7918151485_590(e) {
var vvv_return, vvv_switch, me, tooltip, changed, bufferedRequest;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
tooltip = me.tooltip;
if (plugins.notify(me, 'beforeEvent', [e]) === false) {
    return;
}
me._bufferedRender = true;
me._bufferedRequest = null;
changed = me.handleEvent(e);
changed |= tooltip && tooltip.handleEvent(e);
plugins.notify(me, 'afterEvent', [e]);
bufferedRequest = me._bufferedRequest;
if (bufferedRequest) {
    me.render(bufferedRequest.duration, bufferedRequest.lazy);
} else if (changed && !me.animating) {
    me.stop();
    me.render(me.options.hover.animationDuration, true);
}
me._bufferedRender = false;
me._bufferedRequest = null;
return me;}, $__.fs.J$__v7918151485_590_553_135 = $__.fs.J$__v7918151485_590_553, $__.fs.J$__v7918151485_590_553),
        'handleEvent': ($__.fs.J$__v7918151485_592_554 = function J$__v7918151485_592(e) {
var vvv_return, vvv_switch, me, options, hoverOptions, changed;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
options = me.options || {};
hoverOptions = options.hover;
changed = false;
me.lastActive = me.lastActive || [];
if (e.type === 'mouseout') {
    me.active = [];
} else {
    me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
}
if (hoverOptions.onHover) {
    hoverOptions.onHover.call(me, e.native, me.active);
}
if (e.type === 'mouseup' || e.type === 'click') {
    if (options.onClick) {
        options.onClick.call(me, e.native, me.active);
    }
}
if (me.lastActive.length) {
    me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
}
if (me.active.length && hoverOptions.mode) {
    me.updateHoverStyle(me.active, hoverOptions.mode, true);
}
changed = !helpers.arrayEquals(me.active, me.lastActive);
me.lastActive = me.active;
return changed;}, $__.fs.J$__v7918151485_592_554_137 = $__.fs.J$__v7918151485_592_554, $__.fs.J$__v7918151485_592_554)
    }, 4, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
plugins = Chart.plugins;
platform = Chart.platform;
Chart.types = {};
Chart.instances = {};
Chart.controllers = {};
Chart.Controller = function (item, config, instance) {
    var me = this;
    config = initConfig(config);
    var context = platform.acquireContext(item, config);
    var canvas = context && context.canvas;
    var height = canvas && canvas.height;
    var width = canvas && canvas.width;
    instance.ctx = context;
    instance.canvas = canvas;
    instance.config = config;
    instance.width = width;
    instance.height = height;
    instance.aspectRatio = height ? width / height : null;
    me.id = helpers.uid();
    me.chart = instance;
    me.config = config;
    me.options = config.options;
    me._bufferedRender = false;
    Chart.instances[me.id] = me;
    Object.defineProperty(me, 'data', {
        get: function () {
            return me.config.data;
        }
    });
    if (!context || !canvas) {
        console.error('Failed to create chart: can\'t acquire context from the given item');
        return me;
    }
    me.initialize();
    me.update();
    return me;
};
helpers.extend(Chart.Controller.prototype, {
    initialize: function () {
        var me = this;
        plugins.notify(me, 'beforeInit');
        helpers.retinaScale(me.chart);
        me.bindEvents();
        if (me.options.responsive) {
            me.resize(true);
        }
        me.ensureScalesHaveIDs();
        me.buildScales();
        me.initToolTip();
        plugins.notify(me, 'afterInit');
        return me;
    },
    clear: function () {
        helpers.clear(this.chart);
        return this;
    },
    stop: function () {
        Chart.animationService.cancelAnimation(this);
        return this;
    },
    resize: function (silent) {
        var me = this;
        var chart = me.chart;
        var options = me.options;
        var canvas = chart.canvas;
        var aspectRatio = options.maintainAspectRatio && chart.aspectRatio || null;
        var newWidth = Math.floor(helpers.getMaximumWidth(canvas));
        var newHeight = Math.floor(aspectRatio ? newWidth / aspectRatio : helpers.getMaximumHeight(canvas));
        if (chart.width === newWidth && chart.height === newHeight) {
            return;
        }
        canvas.width = chart.width = newWidth;
        canvas.height = chart.height = newHeight;
        canvas.style.width = newWidth + 'px';
        canvas.style.height = newHeight + 'px';
        helpers.retinaScale(chart);
        if (!silent) {
            var newSize = {
                width: newWidth,
                height: newHeight
            };
            plugins.notify(me, 'resize', [newSize]);
            if (me.options.onResize) {
                me.options.onResize(me, newSize);
            }
            me.stop();
            me.update(me.options.responsiveAnimationDuration);
        }
    },
    ensureScalesHaveIDs: function () {
        var options = this.options;
        var scalesOptions = options.scales || {};
        var scaleOptions = options.scale;
        helpers.each(scalesOptions.xAxes, function (xAxisOptions, index) {
            xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;
        });
        helpers.each(scalesOptions.yAxes, function (yAxisOptions, index) {
            yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;
        });
        if (scaleOptions) {
            scaleOptions.id = scaleOptions.id || 'scale';
        }
    },
    buildScales: function () {
        var me = this;
        var options = me.options;
        var scales = me.scales = {};
        var items = [];
        if (options.scales) {
            items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {
                return {
                    options: xAxisOptions,
                    dtype: 'category'
                };
            }), (options.scales.yAxes || []).map(function (yAxisOptions) {
                return {
                    options: yAxisOptions,
                    dtype: 'linear'
                };
            }));
        }
        if (options.scale) {
            items.push({
                options: options.scale,
                dtype: 'radialLinear',
                isDefault: true
            });
        }
        helpers.each(items, function (item) {
            var scaleOptions = item.options;
            var scaleType = helpers.getValueOrDefault(scaleOptions.type, item.dtype);
            var scaleClass = Chart.scaleService.getScaleConstructor(scaleType);
            if (!scaleClass) {
                return;
            }
            var scale = new scaleClass({
                id: scaleOptions.id,
                options: scaleOptions,
                ctx: me.chart.ctx,
                chart: me
            });
            scales[scale.id] = scale;
            if (item.isDefault) {
                me.scale = scale;
            }
        });
        Chart.scaleService.addScalesToLayout(this);
    },
    buildOrUpdateControllers: function () {
        var me = this;
        var types = [];
        var newControllers = [];
        helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            var meta = me.getDatasetMeta(datasetIndex);
            if (!meta.type) {
                meta.type = dataset.type || me.config.type;
            }
            types.push(meta.type);
            if (meta.controller) {
                meta.controller.updateIndex(datasetIndex);
            } else {
                meta.controller = new Chart.controllers[meta.type](me, datasetIndex);
                newControllers.push(meta.controller);
            }
        }, me);
        if (types.length > 1) {
            for (var i = 1; i < types.length; i++) {
                if (types[i] !== types[i - 1]) {
                    me.isCombo = true;
                    break;
                }
            }
        }
        return newControllers;
    },
    resetElements: function () {
        var me = this;
        helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            me.getDatasetMeta(datasetIndex).controller.reset();
        }, me);
    },
    reset: function () {
        this.resetElements();
        this.tooltip.initialize();
    },
    update: function (animationDuration, lazy) {
        var me = this;
        updateConfig(me);
        if (plugins.notify(me, 'beforeUpdate') === false) {
            return;
        }
        me.tooltip._data = me.data;
        var newControllers = me.buildOrUpdateControllers();
        helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
        }, me);
        me.updateLayout();
        helpers.each(newControllers, function (controller) {
            controller.reset();
        });
        me.updateDatasets();
        plugins.notify(me, 'afterUpdate');
        if (me._bufferedRender) {
            me._bufferedRequest = {
                lazy: lazy,
                duration: animationDuration
            };
        } else {
            me.render(animationDuration, lazy);
        }
    },
    updateLayout: function () {
        var me = this;
        if (plugins.notify(me, 'beforeLayout') === false) {
            return;
        }
        Chart.layoutService.update(this, this.chart.width, this.chart.height);
        plugins.notify(me, 'afterScaleUpdate');
        plugins.notify(me, 'afterLayout');
    },
    updateDatasets: function () {
        var me = this;
        if (plugins.notify(me, 'beforeDatasetsUpdate') === false) {
            return;
        }
        for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
            me.getDatasetMeta(i).controller.update();
        }
        plugins.notify(me, 'afterDatasetsUpdate');
    },
    render: function (duration, lazy) {
        var me = this;
        if (plugins.notify(me, 'beforeRender') === false) {
            return;
        }
        var animationOptions = me.options.animation;
        var onComplete = function () {
            plugins.notify(me, 'afterRender');
            var callback = animationOptions && animationOptions.onComplete;
            if (callback && callback.call) {
                callback.call(me);
            }
        };
        if (animationOptions && (typeof duration !== 'undefined' && duration !== 0 || typeof duration === 'undefined' && animationOptions.duration !== 0)) {
            var animation = new Chart.Animation();
            animation.numSteps = (duration || animationOptions.duration) / 16.66;
            animation.easing = animationOptions.easing;
            animation.render = function (chartInstance, animationObject) {
                var easingFunction = helpers.easingEffects[animationObject.easing];
                var stepDecimal = animationObject.currentStep / animationObject.numSteps;
                var easeDecimal = easingFunction(stepDecimal);
                chartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);
            };
            animation.onAnimationProgress = animationOptions.onProgress;
            animation.onAnimationComplete = onComplete;
            Chart.animationService.addAnimation(me, animation, duration, lazy);
        } else {
            me.draw();
            onComplete();
        }
        return me;
    },
    draw: function (easingValue) {
        var me = this;
        me.clear();
        if (easingValue === undefined || easingValue === null) {
            easingValue = 1;
        }
        if (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
            return;
        }
        helpers.each(me.boxes, function (box) {
            box.draw(me.chartArea);
        }, me);
        if (me.scale) {
            me.scale.draw();
        }
        me.drawDatasets(easingValue);
        me.tooltip.transition(easingValue).draw();
        plugins.notify(me, 'afterDraw', [easingValue]);
    },
    drawDatasets: function (easingValue) {
        var me = this;
        if (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
            return;
        }
        helpers.each(me.data.datasets, function (dataset, datasetIndex) {
            if (me.isDatasetVisible(datasetIndex)) {
                me.getDatasetMeta(datasetIndex).controller.draw(easingValue);
            }
        }, me, true);
        plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
    },
    getElementAtEvent: function (e) {
        return Chart.Interaction.modes.single(this, e);
    },
    getElementsAtEvent: function (e) {
        return Chart.Interaction.modes.label(this, e, {
            intersect: true
        });
    },
    getElementsAtXAxis: function (e) {
        return Chart.Interaction.modes['x-axis'](this, e, {
            intersect: true
        });
    },
    getElementsAtEventForMode: function (e, mode, options) {
        var method = Chart.Interaction.modes[mode];
        if (typeof method === 'function') {
            return method(this, e, options);
        }
        return [];
    },
    getDatasetAtEvent: function (e) {
        return Chart.Interaction.modes.dataset(this, e, {
            intersect: true
        });
    },
    getDatasetMeta: function (datasetIndex) {
        var me = this;
        var dataset = me.data.datasets[datasetIndex];
        if (!dataset._meta) {
            dataset._meta = {};
        }
        var meta = dataset._meta[me.id];
        if (!meta) {
            meta = dataset._meta[me.id] = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                xAxisID: null,
                yAxisID: null
            };
        }
        return meta;
    },
    getVisibleDatasetCount: function () {
        var count = 0;
        for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
            if (this.isDatasetVisible(i)) {
                count++;
            }
        }
        return count;
    },
    isDatasetVisible: function (datasetIndex) {
        var meta = this.getDatasetMeta(datasetIndex);
        return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
    },
    generateLegend: function () {
        return this.options.legendCallback(this);
    },
    destroy: function () {
        var me = this;
        var canvas = me.chart.canvas;
        var meta, i, ilen;
        me.stop();
        for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
            meta = me.getDatasetMeta(i);
            if (meta.controller) {
                meta.controller.destroy();
                meta.controller = null;
            }
        }
        if (canvas) {
            me.unbindEvents();
            helpers.clear(me.chart);
            platform.releaseContext(me.chart.ctx);
            me.chart.canvas = null;
            me.chart.ctx = null;
        }
        plugins.notify(me, 'destroy');
        delete Chart.instances[me.id];
    },
    toBase64Image: function () {
        return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
    },
    initToolTip: function () {
        var me = this;
        me.tooltip = new Chart.Tooltip({
            _chart: me.chart,
            _chartInstance: me,
            _data: me.data,
            _options: me.options.tooltips
        }, me);
        me.tooltip.initialize();
    },
    bindEvents: function () {
        var me = this;
        var listeners = me._listeners = {};
        var listener = function () {
            me.eventHandler.apply(me, arguments);
        };
        helpers.each(me.options.events, function (type) {
            platform.addEventListener(me, type, listener);
            listeners[type] = listener;
        });
        if (me.options.responsive) {
            listener = function () {
                me.resize();
            };
            platform.addEventListener(me, 'resize', listener);
            listeners.resize = listener;
        }
    },
    unbindEvents: function () {
        var me = this;
        var listeners = me._listeners;
        if (!listeners) {
            return;
        }
        delete me._listeners;
        helpers.each(listeners, function (listener, type) {
            platform.removeEventListener(me, type, listener);
        });
    },
    updateHoverStyle: function (elements, mode, enabled) {
        var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';
        var element, i, ilen;
        for (i = 0, ilen = elements.length; i < ilen; ++i) {
            element = elements[i];
            if (element) {
                this.getDatasetMeta(element._datasetIndex).controller[method](element);
            }
        }
    },
    eventHandler: function (e) {
        var me = this;
        var tooltip = me.tooltip;
        if (plugins.notify(me, 'beforeEvent', [e]) === false) {
            return;
        }
        me._bufferedRender = true;
        me._bufferedRequest = null;
        var changed = me.handleEvent(e);
        changed |= tooltip && tooltip.handleEvent(e);
        plugins.notify(me, 'afterEvent', [e]);
        var bufferedRequest = me._bufferedRequest;
        if (bufferedRequest) {
            me.render(bufferedRequest.duration, bufferedRequest.lazy);
        } else if (changed && !me.animating) {
            me.stop();
            me.render(me.options.hover.animationDuration, true);
        }
        me._bufferedRender = false;
        me._bufferedRequest = null;
        return me;
    },
    handleEvent: function (e) {
        var me = this;
        var options = me.options || {};
        var hoverOptions = options.hover;
        var changed = false;
        me.lastActive = me.lastActive || [];
        if (e.type === 'mouseout') {
            me.active = [];
        } else {
            me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
        }
        if (hoverOptions.onHover) {
            hoverOptions.onHover.call(me, e.native, me.active);
        }
        if (e.type === 'mouseup' || e.type === 'click') {
            if (options.onClick) {
                options.onClick.call(me, e.native, me.active);
            }
        }
        if (me.lastActive.length) {
            me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
        }
        if (me.active.length && hoverOptions.mode) {
            me.updateHoverStyle(me.active, hoverOptions.mode, true);
        }
        changed = !helpers.arrayEquals(me.active, me.lastActive);
        me.lastActive = me.active;
        return changed;
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    var plugins = Chart.plugins;
    var platform = Chart.platform;
    Chart.types = {};
    Chart.instances = {};
    Chart.controllers = {};
    function initConfig(config) {
        config = config || {};
        var data = config.data = config.data || {};
        data.datasets = data.datasets || [];
        data.labels = data.labels || [];
        config.options = helpers.configMerge(Chart.defaults.global, Chart.defaults[config.type], config.options || {});
        return config;
    }
    function updateConfig(chart) {
        var newOptions = chart.options;
        if (newOptions.scale) {
            chart.scale.options = newOptions.scale;
        } else if (newOptions.scales) {
            newOptions.scales.xAxes.concat(newOptions.scales.yAxes).forEach(function (scaleOptions) {
                chart.scales[scaleOptions.id].options = scaleOptions;
            });
        }
        chart.tooltip._options = newOptions.tooltips;
    }
    Chart.Controller = function (item, config, instance) {
        var me = this;
        config = initConfig(config);
        var context = platform.acquireContext(item, config);
        var canvas = context && context.canvas;
        var height = canvas && canvas.height;
        var width = canvas && canvas.width;
        instance.ctx = context;
        instance.canvas = canvas;
        instance.config = config;
        instance.width = width;
        instance.height = height;
        instance.aspectRatio = height ? width / height : null;
        me.id = helpers.uid();
        me.chart = instance;
        me.config = config;
        me.options = config.options;
        me._bufferedRender = false;
        Chart.instances[me.id] = me;
        Object.defineProperty(me, 'data', {
            get: function () {
                return me.config.data;
            }
        });
        if (!context || !canvas) {
            console.error('Failed to create chart: can\'t acquire context from the given item');
            return me;
        }
        me.initialize();
        me.update();
        return me;
    };
    helpers.extend(Chart.Controller.prototype, {
        initialize: function () {
            var me = this;
            plugins.notify(me, 'beforeInit');
            helpers.retinaScale(me.chart);
            me.bindEvents();
            if (me.options.responsive) {
                me.resize(true);
            }
            me.ensureScalesHaveIDs();
            me.buildScales();
            me.initToolTip();
            plugins.notify(me, 'afterInit');
            return me;
        },
        clear: function () {
            helpers.clear(this.chart);
            return this;
        },
        stop: function () {
            Chart.animationService.cancelAnimation(this);
            return this;
        },
        resize: function (silent) {
            var me = this;
            var chart = me.chart;
            var options = me.options;
            var canvas = chart.canvas;
            var aspectRatio = options.maintainAspectRatio && chart.aspectRatio || null;
            var newWidth = Math.floor(helpers.getMaximumWidth(canvas));
            var newHeight = Math.floor(aspectRatio ? newWidth / aspectRatio : helpers.getMaximumHeight(canvas));
            if (chart.width === newWidth && chart.height === newHeight) {
                return;
            }
            canvas.width = chart.width = newWidth;
            canvas.height = chart.height = newHeight;
            canvas.style.width = newWidth + 'px';
            canvas.style.height = newHeight + 'px';
            helpers.retinaScale(chart);
            if (!silent) {
                var newSize = {
                    width: newWidth,
                    height: newHeight
                };
                plugins.notify(me, 'resize', [newSize]);
                if (me.options.onResize) {
                    me.options.onResize(me, newSize);
                }
                me.stop();
                me.update(me.options.responsiveAnimationDuration);
            }
        },
        ensureScalesHaveIDs: function () {
            var options = this.options;
            var scalesOptions = options.scales || {};
            var scaleOptions = options.scale;
            helpers.each(scalesOptions.xAxes, function (xAxisOptions, index) {
                xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;
            });
            helpers.each(scalesOptions.yAxes, function (yAxisOptions, index) {
                yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;
            });
            if (scaleOptions) {
                scaleOptions.id = scaleOptions.id || 'scale';
            }
        },
        buildScales: function () {
            var me = this;
            var options = me.options;
            var scales = me.scales = {};
            var items = [];
            if (options.scales) {
                items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {
                    return {
                        options: xAxisOptions,
                        dtype: 'category'
                    };
                }), (options.scales.yAxes || []).map(function (yAxisOptions) {
                    return {
                        options: yAxisOptions,
                        dtype: 'linear'
                    };
                }));
            }
            if (options.scale) {
                items.push({
                    options: options.scale,
                    dtype: 'radialLinear',
                    isDefault: true
                });
            }
            helpers.each(items, function (item) {
                var scaleOptions = item.options;
                var scaleType = helpers.getValueOrDefault(scaleOptions.type, item.dtype);
                var scaleClass = Chart.scaleService.getScaleConstructor(scaleType);
                if (!scaleClass) {
                    return;
                }
                var scale = new scaleClass({
                    id: scaleOptions.id,
                    options: scaleOptions,
                    ctx: me.chart.ctx,
                    chart: me
                });
                scales[scale.id] = scale;
                if (item.isDefault) {
                    me.scale = scale;
                }
            });
            Chart.scaleService.addScalesToLayout(this);
        },
        buildOrUpdateControllers: function () {
            var me = this;
            var types = [];
            var newControllers = [];
            helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                var meta = me.getDatasetMeta(datasetIndex);
                if (!meta.type) {
                    meta.type = dataset.type || me.config.type;
                }
                types.push(meta.type);
                if (meta.controller) {
                    meta.controller.updateIndex(datasetIndex);
                } else {
                    meta.controller = new Chart.controllers[meta.type](me, datasetIndex);
                    newControllers.push(meta.controller);
                }
            }, me);
            if (types.length > 1) {
                for (var i = 1; i < types.length; i++) {
                    if (types[i] !== types[i - 1]) {
                        me.isCombo = true;
                        break;
                    }
                }
            }
            return newControllers;
        },
        resetElements: function () {
            var me = this;
            helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                me.getDatasetMeta(datasetIndex).controller.reset();
            }, me);
        },
        reset: function () {
            this.resetElements();
            this.tooltip.initialize();
        },
        update: function (animationDuration, lazy) {
            var me = this;
            updateConfig(me);
            if (plugins.notify(me, 'beforeUpdate') === false) {
                return;
            }
            me.tooltip._data = me.data;
            var newControllers = me.buildOrUpdateControllers();
            helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
            }, me);
            me.updateLayout();
            helpers.each(newControllers, function (controller) {
                controller.reset();
            });
            me.updateDatasets();
            plugins.notify(me, 'afterUpdate');
            if (me._bufferedRender) {
                me._bufferedRequest = {
                    lazy: lazy,
                    duration: animationDuration
                };
            } else {
                me.render(animationDuration, lazy);
            }
        },
        updateLayout: function () {
            var me = this;
            if (plugins.notify(me, 'beforeLayout') === false) {
                return;
            }
            Chart.layoutService.update(this, this.chart.width, this.chart.height);
            plugins.notify(me, 'afterScaleUpdate');
            plugins.notify(me, 'afterLayout');
        },
        updateDatasets: function () {
            var me = this;
            if (plugins.notify(me, 'beforeDatasetsUpdate') === false) {
                return;
            }
            for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
                me.getDatasetMeta(i).controller.update();
            }
            plugins.notify(me, 'afterDatasetsUpdate');
        },
        render: function (duration, lazy) {
            var me = this;
            if (plugins.notify(me, 'beforeRender') === false) {
                return;
            }
            var animationOptions = me.options.animation;
            var onComplete = function () {
                plugins.notify(me, 'afterRender');
                var callback = animationOptions && animationOptions.onComplete;
                if (callback && callback.call) {
                    callback.call(me);
                }
            };
            if (animationOptions && (typeof duration !== 'undefined' && duration !== 0 || typeof duration === 'undefined' && animationOptions.duration !== 0)) {
                var animation = new Chart.Animation();
                animation.numSteps = (duration || animationOptions.duration) / 16.66;
                animation.easing = animationOptions.easing;
                animation.render = function (chartInstance, animationObject) {
                    var easingFunction = helpers.easingEffects[animationObject.easing];
                    var stepDecimal = animationObject.currentStep / animationObject.numSteps;
                    var easeDecimal = easingFunction(stepDecimal);
                    chartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);
                };
                animation.onAnimationProgress = animationOptions.onProgress;
                animation.onAnimationComplete = onComplete;
                Chart.animationService.addAnimation(me, animation, duration, lazy);
            } else {
                me.draw();
                onComplete();
            }
            return me;
        },
        draw: function (easingValue) {
            var me = this;
            me.clear();
            if (easingValue === undefined || easingValue === null) {
                easingValue = 1;
            }
            if (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
                return;
            }
            helpers.each(me.boxes, function (box) {
                box.draw(me.chartArea);
            }, me);
            if (me.scale) {
                me.scale.draw();
            }
            me.drawDatasets(easingValue);
            me.tooltip.transition(easingValue).draw();
            plugins.notify(me, 'afterDraw', [easingValue]);
        },
        drawDatasets: function (easingValue) {
            var me = this;
            if (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
                return;
            }
            helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                if (me.isDatasetVisible(datasetIndex)) {
                    me.getDatasetMeta(datasetIndex).controller.draw(easingValue);
                }
            }, me, true);
            plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
        },
        getElementAtEvent: function (e) {
            return Chart.Interaction.modes.single(this, e);
        },
        getElementsAtEvent: function (e) {
            return Chart.Interaction.modes.label(this, e, {
                intersect: true
            });
        },
        getElementsAtXAxis: function (e) {
            return Chart.Interaction.modes['x-axis'](this, e, {
                intersect: true
            });
        },
        getElementsAtEventForMode: function (e, mode, options) {
            var method = Chart.Interaction.modes[mode];
            if (typeof method === 'function') {
                return method(this, e, options);
            }
            return [];
        },
        getDatasetAtEvent: function (e) {
            return Chart.Interaction.modes.dataset(this, e, {
                intersect: true
            });
        },
        getDatasetMeta: function (datasetIndex) {
            var me = this;
            var dataset = me.data.datasets[datasetIndex];
            if (!dataset._meta) {
                dataset._meta = {};
            }
            var meta = dataset._meta[me.id];
            if (!meta) {
                meta = dataset._meta[me.id] = {
                    type: null,
                    data: [],
                    dataset: null,
                    controller: null,
                    hidden: null,
                    xAxisID: null,
                    yAxisID: null
                };
            }
            return meta;
        },
        getVisibleDatasetCount: function () {
            var count = 0;
            for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
                if (this.isDatasetVisible(i)) {
                    count++;
                }
            }
            return count;
        },
        isDatasetVisible: function (datasetIndex) {
            var meta = this.getDatasetMeta(datasetIndex);
            return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
        },
        generateLegend: function () {
            return this.options.legendCallback(this);
        },
        destroy: function () {
            var me = this;
            var canvas = me.chart.canvas;
            var meta, i, ilen;
            me.stop();
            for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
                meta = me.getDatasetMeta(i);
                if (meta.controller) {
                    meta.controller.destroy();
                    meta.controller = null;
                }
            }
            if (canvas) {
                me.unbindEvents();
                helpers.clear(me.chart);
                platform.releaseContext(me.chart.ctx);
                me.chart.canvas = null;
                me.chart.ctx = null;
            }
            plugins.notify(me, 'destroy');
            delete Chart.instances[me.id];
        },
        toBase64Image: function () {
            return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
        },
        initToolTip: function () {
            var me = this;
            me.tooltip = new Chart.Tooltip({
                _chart: me.chart,
                _chartInstance: me,
                _data: me.data,
                _options: me.options.tooltips
            }, me);
            me.tooltip.initialize();
        },
        bindEvents: function () {
            var me = this;
            var listeners = me._listeners = {};
            var listener = function () {
                me.eventHandler.apply(me, arguments);
            };
            helpers.each(me.options.events, function (type) {
                platform.addEventListener(me, type, listener);
                listeners[type] = listener;
            });
            if (me.options.responsive) {
                listener = function () {
                    me.resize();
                };
                platform.addEventListener(me, 'resize', listener);
                listeners.resize = listener;
            }
        },
        unbindEvents: function () {
            var me = this;
            var listeners = me._listeners;
            if (!listeners) {
                return;
            }
            delete me._listeners;
            helpers.each(listeners, function (listener, type) {
                platform.removeEventListener(me, type, listener);
            });
        },
        updateHoverStyle: function (elements, mode, enabled) {
            var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';
            var element, i, ilen;
            for (i = 0, ilen = elements.length; i < ilen; ++i) {
                element = elements[i];
                if (element) {
                    this.getDatasetMeta(element._datasetIndex).controller[method](element);
                }
            }
        },
        eventHandler: function (e) {
            var me = this;
            var tooltip = me.tooltip;
            if (plugins.notify(me, 'beforeEvent', [e]) === false) {
                return;
            }
            me._bufferedRender = true;
            me._bufferedRequest = null;
            var changed = me.handleEvent(e);
            changed |= tooltip && tooltip.handleEvent(e);
            plugins.notify(me, 'afterEvent', [e]);
            var bufferedRequest = me._bufferedRequest;
            if (bufferedRequest) {
                me.render(bufferedRequest.duration, bufferedRequest.lazy);
            } else if (changed && !me.animating) {
                me.stop();
                me.render(me.options.hover.animationDuration, true);
            }
            me._bufferedRender = false;
            me._bufferedRequest = null;
            return me;
        },
        handleEvent: function (e) {
            var me = this;
            var options = me.options || {};
            var hoverOptions = options.hover;
            var changed = false;
            me.lastActive = me.lastActive || [];
            if (e.type === 'mouseout') {
                me.active = [];
            } else {
                me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
            }
            if (hoverOptions.onHover) {
                hoverOptions.onHover.call(me, e.native, me.active);
            }
            if (e.type === 'mouseup' || e.type === 'click') {
                if (options.onClick) {
                    options.onClick.call(me, e.native, me.active);
                }
            }
            if (me.lastActive.length) {
                me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
            }
            if (me.active.length && hoverOptions.mode) {
                me.updateHoverStyle(me.active, hoverOptions.mode, true);
            }
            changed = !helpers.arrayEquals(me.active, me.lastActive);
            me.lastActive = me.active;
            return changed;
        }
    });
};}, $__.fs.J$__v7918151485_596_28),
            $__.os.oid22 = {}
        ],
        24: [
            ($__.fs.J$__v7918151485_658_29 = function J$__v7918151485_658(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid121).exports = ($__.fs.J$__v7918151485_656_557 = function J$__v7918151485_656(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers, arrayEvents, listenArrayEvents, unlistenArrayEvents;
listenArrayEvents = function listenArrayEvents(array, listener) {
    if (array._chartjs) {
        array._chartjs.listeners.push(listener);
        return;
    }
    Object.defineProperty(array, '_chartjs', {
        configurable: true,
        enumerable: false,
        value: {
            listeners: [listener]
        }
    });
    arrayEvents.forEach(function (key) {
        var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
        var base = array[key];
        Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value: function () {
                var args = Array.prototype.slice.call(arguments);
                var res = base.apply(this, args);
                helpers.each(array._chartjs.listeners, function (object) {
                    if (typeof object[method] === 'function') {
                        object[method].apply(object, args);
                    }
                });
                return res;
            }
        });
    });
};
unlistenArrayEvents = function unlistenArrayEvents(array, listener) {
    var stub = array._chartjs;
    if (!stub) {
        return;
    }
    var listeners = stub.listeners;
    var index = listeners.indexOf(listener);
    if (index !== -1) {
        listeners.splice(index, 1);
    }
    if (listeners.length > 0) {
        return;
    }
    arrayEvents.forEach(function (key) {
        delete array[key];
    });
    delete array._chartjs;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    listenArrayEvents = ($__.fs.listenArrayEvents_558 = function listenArrayEvents(array, listener) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], listener = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (array._chartjs) {
    array._chartjs.listeners.push(listener);
    return;
}
Object.defineProperty(array, '_chartjs', {
    configurable: true,
    enumerable: false,
    value: {
        listeners: [listener]
    }
});
arrayEvents.forEach(function (key) {
    var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
    var base = array[key];
    Object.defineProperty(array, key, {
        configurable: true,
        enumerable: false,
        value: function () {
            var args = Array.prototype.slice.call(arguments);
            var res = base.apply(this, args);
            helpers.each(array._chartjs.listeners, function (object) {
                if (typeof object[method] === 'function') {
                    object[method].apply(object, args);
                }
            });
            return res;
        }
    });
});});
    unlistenArrayEvents = ($__.fs.unlistenArrayEvents_559 = function unlistenArrayEvents(array, listener) {
var vvv_return, vvv_switch, stub, listeners, index;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], listener = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
stub = array._chartjs;
if (!stub) {
    return;
}
listeners = stub.listeners;
index = listeners.indexOf(listener);
if (index !== -1) {
    listeners.splice(index, 1);
}
if (listeners.length > 0) {
    return;
}
arrayEvents.forEach(function (key) {
    delete array[key];
});
delete array._chartjs;});
    helpers = (Chart.helpers, $__.os.oid88);
    arrayEvents = [
        'push',
        'pop',
        'shift',
        'splice',
        'unshift'
    ];
    Chart.DatasetController = ($__.fs.J$__v7918151485_608_560 = function J$__v7918151485_608(chart, datasetIndex) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], datasetIndex = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.initialize(chart, datasetIndex);});
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(TAJS_restrictToType(Chart.DatasetController, 'function').prototype, 'object'), $__.os.oid122 = {
        'datasetElementType': null,
        'dataElementType': null,
        'initialize': ($__.fs.J$__v7918151485_610_561 = function J$__v7918151485_610(chart, datasetIndex) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], datasetIndex = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.chart = chart;
me.index = datasetIndex;
me.linkScales();
me.addElements();}, $__.fs.J$__v7918151485_610_561_144 = $__.fs.J$__v7918151485_610_561, $__.fs.J$__v7918151485_610_561),
        'updateIndex': ($__.fs.J$__v7918151485_612_562 = function J$__v7918151485_612(datasetIndex) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
datasetIndex = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.index = datasetIndex;}, $__.fs.J$__v7918151485_612_562_146 = $__.fs.J$__v7918151485_612_562, $__.fs.J$__v7918151485_612_562),
        'linkScales': ($__.fs.J$__v7918151485_614_563 = function J$__v7918151485_614() {
var vvv_return, vvv_switch, me, meta, dataset;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
dataset = me.getDataset();
if (meta.xAxisID === null) {
    meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
}
if (meta.yAxisID === null) {
    meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
}}, $__.fs.J$__v7918151485_614_563_148 = $__.fs.J$__v7918151485_614_563, $__.fs.J$__v7918151485_614_563),
        'getDataset': ($__.fs.J$__v7918151485_616_564 = function J$__v7918151485_616() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.chart.data.datasets[this.index];}, $__.fs.J$__v7918151485_616_564_150 = $__.fs.J$__v7918151485_616_564, $__.fs.J$__v7918151485_616_564),
        'getMeta': ($__.fs.J$__v7918151485_618_565 = function J$__v7918151485_618() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.chart.getDatasetMeta(this.index);}, $__.fs.J$__v7918151485_618_565_152 = $__.fs.J$__v7918151485_618_565, $__.fs.J$__v7918151485_618_565),
        'getScaleForId': ($__.fs.J$__v7918151485_620_566 = function J$__v7918151485_620(scaleID) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scaleID = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.chart.scales[scaleID];}, $__.fs.J$__v7918151485_620_566_154 = $__.fs.J$__v7918151485_620_566, $__.fs.J$__v7918151485_620_566),
        'reset': ($__.fs.J$__v7918151485_622_567 = function J$__v7918151485_622() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.update(true);}, $__.fs.J$__v7918151485_622_567_156 = $__.fs.J$__v7918151485_622_567, $__.fs.J$__v7918151485_622_567),
        'destroy': ($__.fs.J$__v7918151485_624_568 = function J$__v7918151485_624() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this._data) {
    unlistenArrayEvents(this._data, this);
}}, $__.fs.J$__v7918151485_624_568_158 = $__.fs.J$__v7918151485_624_568, $__.fs.J$__v7918151485_624_568),
        'createMetaDataset': ($__.fs.J$__v7918151485_626_569 = function J$__v7918151485_626() {
var vvv_return, vvv_switch, me, type;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
type = me.datasetElementType;
return type && new type({
    _chart: me.chart.chart,
    _datasetIndex: me.index
});}, $__.fs.J$__v7918151485_626_569_160 = $__.fs.J$__v7918151485_626_569, $__.fs.J$__v7918151485_626_569),
        'createMetaData': ($__.fs.J$__v7918151485_628_570 = function J$__v7918151485_628(index) {
var vvv_return, vvv_switch, me, type;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
type = me.dataElementType;
return type && new type({
    _chart: me.chart.chart,
    _datasetIndex: me.index,
    _index: index
});}, $__.fs.J$__v7918151485_628_570_162 = $__.fs.J$__v7918151485_628_570, $__.fs.J$__v7918151485_628_570),
        'addElements': ($__.fs.J$__v7918151485_630_571 = function J$__v7918151485_630() {
var vvv_return, vvv_switch, me, meta, data, metaData, i, ilen;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
data = me.getDataset().data || [];
metaData = meta.data;
for (i = 0, ilen = data.length; i < ilen; ++i) {
    metaData[i] = metaData[i] || me.createMetaData(i);
}
meta.dataset = meta.dataset || me.createMetaDataset();}, $__.fs.J$__v7918151485_630_571_164 = $__.fs.J$__v7918151485_630_571, $__.fs.J$__v7918151485_630_571),
        'addElementAndReset': ($__.fs.J$__v7918151485_632_572 = function J$__v7918151485_632(index) {
var vvv_return, vvv_switch, element;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
element = this.createMetaData(index);
this.getMeta().data.splice(index, 0, element);
this.updateElement(element, index, true);}, $__.fs.J$__v7918151485_632_572_166 = $__.fs.J$__v7918151485_632_572, $__.fs.J$__v7918151485_632_572),
        'buildOrUpdateElements': ($__.fs.J$__v7918151485_634_573 = function J$__v7918151485_634() {
var vvv_return, vvv_switch, me, dataset, data;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
dataset = me.getDataset();
data = dataset.data || (dataset.data = []);
if (me._data !== data) {
    if (me._data) {
        unlistenArrayEvents(me._data, me);
    }
    listenArrayEvents(data, me);
    me._data = data;
}
me.resyncElements();}, $__.fs.J$__v7918151485_634_573_168 = $__.fs.J$__v7918151485_634_573, $__.fs.J$__v7918151485_634_573),
        'update': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
        'draw': ($__.fs.J$__v7918151485_636_574 = function J$__v7918151485_636(ease) {
var vvv_return, vvv_switch, easingDecimal, i, len, metaData;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ease = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
easingDecimal = ease || 1;
metaData = this.getMeta().data;
for (i = 0, len = metaData.length; i < len; ++i) {
    metaData[i].transition(easingDecimal).draw();
}}, $__.fs.J$__v7918151485_636_574_172 = $__.fs.J$__v7918151485_636_574, $__.fs.J$__v7918151485_636_574),
        'removeHoverStyle': ($__.fs.J$__v7918151485_638_575 = function J$__v7918151485_638(element, elementOpts) {
var vvv_return, vvv_switch, dataset, index, custom, valueOrDefault, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
element = arguments[0], elementOpts = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dataset = this.chart.data.datasets[element._datasetIndex];
index = element._index;
custom = element.custom || {};
valueOrDefault = helpers.getValueAtIndexOrDefault;
model = element._model;
model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);}, $__.fs.J$__v7918151485_638_575_174 = $__.fs.J$__v7918151485_638_575, $__.fs.J$__v7918151485_638_575),
        'setHoverStyle': ($__.fs.J$__v7918151485_640_576 = function J$__v7918151485_640(element) {
var vvv_return, vvv_switch, dataset, index, custom, valueOrDefault, getHoverColor, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
element = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
dataset = this.chart.data.datasets[element._datasetIndex];
index = element._index;
custom = element.custom || {};
valueOrDefault = helpers.getValueAtIndexOrDefault;
getHoverColor = helpers.getHoverColor;
model = element._model;
model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);}, $__.fs.J$__v7918151485_640_576_176 = $__.fs.J$__v7918151485_640_576, $__.fs.J$__v7918151485_640_576),
        'resyncElements': ($__.fs.J$__v7918151485_642_577 = function J$__v7918151485_642() {
var vvv_return, vvv_switch, me, meta, data, numMeta, numData;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
meta = me.getMeta();
data = me.getDataset().data;
numMeta = meta.data.length;
numData = data.length;
if (numData < numMeta) {
    meta.data.splice(numData, numMeta - numData);
} else if (numData > numMeta) {
    me.insertElements(numMeta, numData - numMeta);
}}, $__.fs.J$__v7918151485_642_577_178 = $__.fs.J$__v7918151485_642_577, $__.fs.J$__v7918151485_642_577),
        'insertElements': ($__.fs.J$__v7918151485_644_578 = function J$__v7918151485_644(start, count) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], count = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
for (var i = 0; i < count; ++i) {
    this.addElementAndReset(start + i);
}}, $__.fs.J$__v7918151485_644_578_180 = $__.fs.J$__v7918151485_644_578, $__.fs.J$__v7918151485_644_578),
        'onDataPush': ($__.fs.J$__v7918151485_646_579 = function J$__v7918151485_646() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.insertElements(this.getDataset().data.length - 1, arguments.length);}, $__.fs.J$__v7918151485_646_579_182 = $__.fs.J$__v7918151485_646_579, $__.fs.J$__v7918151485_646_579),
        'onDataPop': ($__.fs.J$__v7918151485_648_580 = function J$__v7918151485_648() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.getMeta().data.pop();}, $__.fs.J$__v7918151485_648_580_184 = $__.fs.J$__v7918151485_648_580, $__.fs.J$__v7918151485_648_580),
        'onDataShift': ($__.fs.J$__v7918151485_650_581 = function J$__v7918151485_650() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.getMeta().data.shift();}, $__.fs.J$__v7918151485_650_581_186 = $__.fs.J$__v7918151485_650_581, $__.fs.J$__v7918151485_650_581),
        'onDataSplice': ($__.fs.J$__v7918151485_652_582 = function J$__v7918151485_652(start, count) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
start = arguments[0], count = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.getMeta().data.splice(start, count);
this.insertElements(start, arguments.length - 2);}, $__.fs.J$__v7918151485_652_582_188 = $__.fs.J$__v7918151485_652_582, $__.fs.J$__v7918151485_652_582),
        'onDataUnshift': ($__.fs.J$__v7918151485_654_583 = function J$__v7918151485_654() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.insertElements(0, arguments.length);}, $__.fs.J$__v7918151485_654_583_190 = $__.fs.J$__v7918151485_654_583, $__.fs.J$__v7918151485_654_583)
    }, 5, true, $__.uid);
    TAJS_restrictToType(Chart.DatasetController, 'function').extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
arrayEvents = [
    'push',
    'pop',
    'shift',
    'splice',
    'unshift'
];
Chart.DatasetController = function (chart, datasetIndex) {
    this.initialize(chart, datasetIndex);
};
helpers.extend(Chart.DatasetController.prototype, {
    datasetElementType: null,
    dataElementType: null,
    initialize: function (chart, datasetIndex) {
        var me = this;
        me.chart = chart;
        me.index = datasetIndex;
        me.linkScales();
        me.addElements();
    },
    updateIndex: function (datasetIndex) {
        this.index = datasetIndex;
    },
    linkScales: function () {
        var me = this;
        var meta = me.getMeta();
        var dataset = me.getDataset();
        if (meta.xAxisID === null) {
            meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
        }
        if (meta.yAxisID === null) {
            meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
        }
    },
    getDataset: function () {
        return this.chart.data.datasets[this.index];
    },
    getMeta: function () {
        return this.chart.getDatasetMeta(this.index);
    },
    getScaleForId: function (scaleID) {
        return this.chart.scales[scaleID];
    },
    reset: function () {
        this.update(true);
    },
    destroy: function () {
        if (this._data) {
            unlistenArrayEvents(this._data, this);
        }
    },
    createMetaDataset: function () {
        var me = this;
        var type = me.datasetElementType;
        return type && new type({
            _chart: me.chart.chart,
            _datasetIndex: me.index
        });
    },
    createMetaData: function (index) {
        var me = this;
        var type = me.dataElementType;
        return type && new type({
            _chart: me.chart.chart,
            _datasetIndex: me.index,
            _index: index
        });
    },
    addElements: function () {
        var me = this;
        var meta = me.getMeta();
        var data = me.getDataset().data || [];
        var metaData = meta.data;
        var i, ilen;
        for (i = 0, ilen = data.length; i < ilen; ++i) {
            metaData[i] = metaData[i] || me.createMetaData(i);
        }
        meta.dataset = meta.dataset || me.createMetaDataset();
    },
    addElementAndReset: function (index) {
        var element = this.createMetaData(index);
        this.getMeta().data.splice(index, 0, element);
        this.updateElement(element, index, true);
    },
    buildOrUpdateElements: function () {
        var me = this;
        var dataset = me.getDataset();
        var data = dataset.data || (dataset.data = []);
        if (me._data !== data) {
            if (me._data) {
                unlistenArrayEvents(me._data, me);
            }
            listenArrayEvents(data, me);
            me._data = data;
        }
        me.resyncElements();
    },
    update: helpers.noop,
    draw: function (ease) {
        var easingDecimal = ease || 1;
        var i, len;
        var metaData = this.getMeta().data;
        for (i = 0, len = metaData.length; i < len; ++i) {
            metaData[i].transition(easingDecimal).draw();
        }
    },
    removeHoverStyle: function (element, elementOpts) {
        var dataset = this.chart.data.datasets[element._datasetIndex], index = element._index, custom = element.custom || {}, valueOrDefault = helpers.getValueAtIndexOrDefault, model = element._model;
        model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
        model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
        model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
    },
    setHoverStyle: function (element) {
        var dataset = this.chart.data.datasets[element._datasetIndex], index = element._index, custom = element.custom || {}, valueOrDefault = helpers.getValueAtIndexOrDefault, getHoverColor = helpers.getHoverColor, model = element._model;
        model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
        model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
        model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
    },
    resyncElements: function () {
        var me = this;
        var meta = me.getMeta();
        var data = me.getDataset().data;
        var numMeta = meta.data.length;
        var numData = data.length;
        if (numData < numMeta) {
            meta.data.splice(numData, numMeta - numData);
        } else if (numData > numMeta) {
            me.insertElements(numMeta, numData - numMeta);
        }
    },
    insertElements: function (start, count) {
        for (var i = 0; i < count; ++i) {
            this.addElementAndReset(start + i);
        }
    },
    onDataPush: function () {
        this.insertElements(this.getDataset().data.length - 1, arguments.length);
    },
    onDataPop: function () {
        this.getMeta().data.pop();
    },
    onDataShift: function () {
        this.getMeta().data.shift();
    },
    onDataSplice: function (start, count) {
        this.getMeta().data.splice(start, count);
        this.insertElements(start, arguments.length - 2);
    },
    onDataUnshift: function () {
        this.insertElements(0, arguments.length);
    }
});
Chart.DatasetController.extend = helpers.inherits;});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    var arrayEvents = [
        'push',
        'pop',
        'shift',
        'splice',
        'unshift'
    ];
    function listenArrayEvents(array, listener) {
        if (array._chartjs) {
            array._chartjs.listeners.push(listener);
            return;
        }
        Object.defineProperty(array, '_chartjs', {
            configurable: true,
            enumerable: false,
            value: {
                listeners: [listener]
            }
        });
        arrayEvents.forEach(function (key) {
            var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
            var base = array[key];
            Object.defineProperty(array, key, {
                configurable: true,
                enumerable: false,
                value: function () {
                    var args = Array.prototype.slice.call(arguments);
                    var res = base.apply(this, args);
                    helpers.each(array._chartjs.listeners, function (object) {
                        if (typeof object[method] === 'function') {
                            object[method].apply(object, args);
                        }
                    });
                    return res;
                }
            });
        });
    }
    function unlistenArrayEvents(array, listener) {
        var stub = array._chartjs;
        if (!stub) {
            return;
        }
        var listeners = stub.listeners;
        var index = listeners.indexOf(listener);
        if (index !== -1) {
            listeners.splice(index, 1);
        }
        if (listeners.length > 0) {
            return;
        }
        arrayEvents.forEach(function (key) {
            delete array[key];
        });
        delete array._chartjs;
    }
    Chart.DatasetController = function (chart, datasetIndex) {
        this.initialize(chart, datasetIndex);
    };
    helpers.extend(Chart.DatasetController.prototype, {
        datasetElementType: null,
        dataElementType: null,
        initialize: function (chart, datasetIndex) {
            var me = this;
            me.chart = chart;
            me.index = datasetIndex;
            me.linkScales();
            me.addElements();
        },
        updateIndex: function (datasetIndex) {
            this.index = datasetIndex;
        },
        linkScales: function () {
            var me = this;
            var meta = me.getMeta();
            var dataset = me.getDataset();
            if (meta.xAxisID === null) {
                meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
            }
            if (meta.yAxisID === null) {
                meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
            }
        },
        getDataset: function () {
            return this.chart.data.datasets[this.index];
        },
        getMeta: function () {
            return this.chart.getDatasetMeta(this.index);
        },
        getScaleForId: function (scaleID) {
            return this.chart.scales[scaleID];
        },
        reset: function () {
            this.update(true);
        },
        destroy: function () {
            if (this._data) {
                unlistenArrayEvents(this._data, this);
            }
        },
        createMetaDataset: function () {
            var me = this;
            var type = me.datasetElementType;
            return type && new type({
                _chart: me.chart.chart,
                _datasetIndex: me.index
            });
        },
        createMetaData: function (index) {
            var me = this;
            var type = me.dataElementType;
            return type && new type({
                _chart: me.chart.chart,
                _datasetIndex: me.index,
                _index: index
            });
        },
        addElements: function () {
            var me = this;
            var meta = me.getMeta();
            var data = me.getDataset().data || [];
            var metaData = meta.data;
            var i, ilen;
            for (i = 0, ilen = data.length; i < ilen; ++i) {
                metaData[i] = metaData[i] || me.createMetaData(i);
            }
            meta.dataset = meta.dataset || me.createMetaDataset();
        },
        addElementAndReset: function (index) {
            var element = this.createMetaData(index);
            this.getMeta().data.splice(index, 0, element);
            this.updateElement(element, index, true);
        },
        buildOrUpdateElements: function () {
            var me = this;
            var dataset = me.getDataset();
            var data = dataset.data || (dataset.data = []);
            if (me._data !== data) {
                if (me._data) {
                    unlistenArrayEvents(me._data, me);
                }
                listenArrayEvents(data, me);
                me._data = data;
            }
            me.resyncElements();
        },
        update: helpers.noop,
        draw: function (ease) {
            var easingDecimal = ease || 1;
            var i, len;
            var metaData = this.getMeta().data;
            for (i = 0, len = metaData.length; i < len; ++i) {
                metaData[i].transition(easingDecimal).draw();
            }
        },
        removeHoverStyle: function (element, elementOpts) {
            var dataset = this.chart.data.datasets[element._datasetIndex], index = element._index, custom = element.custom || {}, valueOrDefault = helpers.getValueAtIndexOrDefault, model = element._model;
            model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
            model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
            model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
        },
        setHoverStyle: function (element) {
            var dataset = this.chart.data.datasets[element._datasetIndex], index = element._index, custom = element.custom || {}, valueOrDefault = helpers.getValueAtIndexOrDefault, getHoverColor = helpers.getHoverColor, model = element._model;
            model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
            model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
            model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
        },
        resyncElements: function () {
            var me = this;
            var meta = me.getMeta();
            var data = me.getDataset().data;
            var numMeta = meta.data.length;
            var numData = data.length;
            if (numData < numMeta) {
                meta.data.splice(numData, numMeta - numData);
            } else if (numData > numMeta) {
                me.insertElements(numMeta, numData - numMeta);
            }
        },
        insertElements: function (start, count) {
            for (var i = 0; i < count; ++i) {
                this.addElementAndReset(start + i);
            }
        },
        onDataPush: function () {
            this.insertElements(this.getDataset().data.length - 1, arguments.length);
        },
        onDataPop: function () {
            this.getMeta().data.pop();
        },
        onDataShift: function () {
            this.getMeta().data.shift();
        },
        onDataSplice: function (start, count) {
            this.getMeta().data.splice(start, count);
            this.insertElements(start, arguments.length - 2);
        },
        onDataUnshift: function () {
            this.insertElements(0, arguments.length);
        }
    });
    Chart.DatasetController.extend = helpers.inherits;
};}, $__.fs.J$__v7918151485_658_29),
            $__.os.oid23 = {}
        ],
        25: [
            ($__.fs.J$__v7918151485_676_30 = function J$__v7918151485_676(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid106).exports = ($__.fs.J$__v7918151485_674_501 = function J$__v7918151485_674(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    Chart.elements = $__.os.oid107 = {};
    Chart.Element = ($__.fs.J$__v7918151485_660_502 = function J$__v7918151485_660(configuration) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
configuration = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.extend(this, configuration);
this.initialize.apply(this, arguments);});
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(TAJS_restrictToType(Chart.Element, 'function').prototype, 'object'), $__.os.oid108 = {
        'initialize': ($__.fs.J$__v7918151485_662_503 = function J$__v7918151485_662() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.hidden = false;}, $__.fs.J$__v7918151485_662_503_53 = $__.fs.J$__v7918151485_662_503, $__.fs.J$__v7918151485_662_503),
        'pivot': ($__.fs.J$__v7918151485_664_504 = function J$__v7918151485_664() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (!me._view) {
    me._view = helpers.clone(me._model);
}
me._start = helpers.clone(me._view);
return me;}, $__.fs.J$__v7918151485_664_504_55 = $__.fs.J$__v7918151485_664_504, $__.fs.J$__v7918151485_664_504),
        'transition': ($__.fs.J$__v7918151485_668_505 = function J$__v7918151485_668(ease) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ease = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (!me._view) {
    me._view = helpers.clone(me._model);
}
if (ease === 1) {
    me._view = me._model;
    me._start = null;
    return me;
}
if (!me._start) {
    me.pivot();
}
helpers.each(me._model, function (value, key) {
    if (key[0] === '_') {
    } else if (!me._view.hasOwnProperty(key)) {
        if (typeof value === 'number' && !isNaN(me._view[key])) {
            me._view[key] = value * ease;
        } else {
            me._view[key] = value;
        }
    } else if (value === me._view[key]) {
    } else if (typeof value === 'string') {
        try {
            var color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);
            me._view[key] = color.rgbString();
        } catch (err) {
            me._view[key] = value;
        }
    } else if (typeof value === 'number') {
        var startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;
        me._view[key] = (me._model[key] - startVal) * ease + startVal;
    } else {
        me._view[key] = value;
    }
}, me);
return me;}, $__.fs.J$__v7918151485_668_505_57 = $__.fs.J$__v7918151485_668_505, $__.fs.J$__v7918151485_668_505),
        'tooltipPosition': ($__.fs.J$__v7918151485_670_506 = function J$__v7918151485_670() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return {
    x: this._model.x,
    y: this._model.y
};}, $__.fs.J$__v7918151485_670_506_59 = $__.fs.J$__v7918151485_670_506, $__.fs.J$__v7918151485_670_506),
        'hasValue': ($__.fs.J$__v7918151485_672_507 = function J$__v7918151485_672() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);}, $__.fs.J$__v7918151485_672_507_61 = $__.fs.J$__v7918151485_672_507, $__.fs.J$__v7918151485_672_507)
    }, 2, true, $__.uid);
    TAJS_restrictToType(Chart.Element, 'function').extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.elements = {};
Chart.Element = function (configuration) {
    helpers.extend(this, configuration);
    this.initialize.apply(this, arguments);
};
helpers.extend(Chart.Element.prototype, {
    initialize: function () {
        this.hidden = false;
    },
    pivot: function () {
        var me = this;
        if (!me._view) {
            me._view = helpers.clone(me._model);
        }
        me._start = helpers.clone(me._view);
        return me;
    },
    transition: function (ease) {
        var me = this;
        if (!me._view) {
            me._view = helpers.clone(me._model);
        }
        if (ease === 1) {
            me._view = me._model;
            me._start = null;
            return me;
        }
        if (!me._start) {
            me.pivot();
        }
        helpers.each(me._model, function (value, key) {
            if (key[0] === '_') {
            } else if (!me._view.hasOwnProperty(key)) {
                if (typeof value === 'number' && !isNaN(me._view[key])) {
                    me._view[key] = value * ease;
                } else {
                    me._view[key] = value;
                }
            } else if (value === me._view[key]) {
            } else if (typeof value === 'string') {
                try {
                    var color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);
                    me._view[key] = color.rgbString();
                } catch (err) {
                    me._view[key] = value;
                }
            } else if (typeof value === 'number') {
                var startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;
                me._view[key] = (me._model[key] - startVal) * ease + startVal;
            } else {
                me._view[key] = value;
            }
        }, me);
        return me;
    },
    tooltipPosition: function () {
        return {
            x: this._model.x,
            y: this._model.y
        };
    },
    hasValue: function () {
        return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
    }
});
Chart.Element.extend = helpers.inherits;});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.elements = {};
    Chart.Element = function (configuration) {
        helpers.extend(this, configuration);
        this.initialize.apply(this, arguments);
    };
    helpers.extend(Chart.Element.prototype, {
        initialize: function () {
            this.hidden = false;
        },
        pivot: function () {
            var me = this;
            if (!me._view) {
                me._view = helpers.clone(me._model);
            }
            me._start = helpers.clone(me._view);
            return me;
        },
        transition: function (ease) {
            var me = this;
            if (!me._view) {
                me._view = helpers.clone(me._model);
            }
            if (ease === 1) {
                me._view = me._model;
                me._start = null;
                return me;
            }
            if (!me._start) {
                me.pivot();
            }
            helpers.each(me._model, function (value, key) {
                if (key[0] === '_') {
                } else if (!me._view.hasOwnProperty(key)) {
                    if (typeof value === 'number' && !isNaN(me._view[key])) {
                        me._view[key] = value * ease;
                    } else {
                        me._view[key] = value;
                    }
                } else if (value === me._view[key]) {
                } else if (typeof value === 'string') {
                    try {
                        var color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);
                        me._view[key] = color.rgbString();
                    } catch (err) {
                        me._view[key] = value;
                    }
                } else if (typeof value === 'number') {
                    var startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;
                    me._view[key] = (me._model[key] - startVal) * ease + startVal;
                } else {
                    me._view[key] = value;
                }
            }, me);
            return me;
        },
        tooltipPosition: function () {
            return {
                x: this._model.x,
                y: this._model.y
            };
        },
        hasValue: function () {
            return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
        }
    });
    Chart.Element.extend = helpers.inherits;
};}, $__.fs.J$__v7918151485_676_30),
            $__.os.oid24 = {}
        ],
        26: [
            ($__.fs.J$__v7918151485_897_31 = function J$__v7918151485_897(require, module, exports) {
'use strict';
var vvv_return, vvv_switch, color;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    color = (require, $__.fs.J$__v7918151485_3_60)(3, 0, true, $__.uid);
    (module, $__.os.oid59).exports = ($__.fs.J$__v7918151485_895_374 = function J$__v7918151485_895(Chart) {
var vvv_return, vvv_switch, helpers, easingEffects, parseMaxStyle, isConstrainedValue, getConstraintDimension;
parseMaxStyle = function parseMaxStyle(styleValue, node, parentProperty) {
    var valueInPixels;
    if (typeof styleValue === 'string') {
        valueInPixels = parseInt(styleValue, 10);
        if (styleValue.indexOf('%') !== -1) {
            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
        }
    } else {
        valueInPixels = styleValue;
    }
    return valueInPixels;
};
isConstrainedValue = function isConstrainedValue(value) {
    return value !== undefined && value !== null && value !== 'none';
};
getConstraintDimension = function getConstraintDimension(domNode, maxStyle, percentageProperty) {
    var view = document.defaultView;
    var parentNode = domNode.parentNode;
    var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
    var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
    var hasCNode = isConstrainedValue(constrainedNode);
    var hasCContainer = isConstrainedValue(constrainedContainer);
    var infinity = Number.POSITIVE_INFINITY;
    if (hasCNode || hasCContainer) {
        return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
    }
    return 'none';
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    parseMaxStyle = ($__.fs.parseMaxStyle_375 = function parseMaxStyle(styleValue, node, parentProperty) {
var vvv_return, vvv_switch, valueInPixels;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
styleValue = arguments[0], node = arguments[1], parentProperty = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof styleValue === 'string') {
    valueInPixels = parseInt(styleValue, 10);
    if (styleValue.indexOf('%') !== -1) {
        valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    }
} else {
    valueInPixels = styleValue;
}
return valueInPixels;});
    isConstrainedValue = ($__.fs.isConstrainedValue_376 = function isConstrainedValue(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return value !== undefined && value !== null && value !== 'none';});
    getConstraintDimension = ($__.fs.getConstraintDimension_377 = function getConstraintDimension(domNode, maxStyle, percentageProperty) {
var vvv_return, vvv_switch, view, parentNode, constrainedNode, constrainedContainer, hasCNode, hasCContainer, infinity;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
domNode = arguments[0], maxStyle = arguments[1], percentageProperty = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
view = document.defaultView;
parentNode = domNode.parentNode;
constrainedNode = view.getComputedStyle(domNode)[maxStyle];
constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
hasCNode = isConstrainedValue(constrainedNode);
hasCContainer = isConstrainedValue(constrainedContainer);
infinity = Number.POSITIVE_INFINITY;
if (hasCNode || hasCContainer) {
    return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
}
return 'none';});
    helpers = Chart.helpers = $__.os.oid88 = {};
    (helpers, $__.os.oid88).each = ($__.fs.J$__v7918151485_678_378 = function J$__v7918151485_678(loopable, callback, self, reverse) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, vvv_tmp2, vvv_tmp3, vvv_tmp4, i, len, keys, vvv_tmp5, vvv_tmp6, vvv_tmp7, vvv_tmp8, vvv_tmp9, vvv_tmp10, vvv_tmp11, vvv_tmp12, vvv_tmp13, vvv_tmp14, vvv_tmp15, vvv_tmp16, vvv_tmp17, vvv_tmp18, vvv_tmp19, vvv_tmp20, vvv_tmp21, vvv_tmp22, vvv_tmp23, vvv_tmp24, vvv_tmp25, vvv_tmp26, vvv_tmp27, vvv_tmp28, vvv_tmp29, vvv_tmp30, vvv_tmp31, vvv_tmp32, vvv_tmp33, vvv_tmp34;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
loopable = arguments[0], callback = arguments[1], self = arguments[2], reverse = arguments[3];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 0, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt45(res) {
        res.length = 4;
        if (res.length != 4)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt45, -2);
    }((Object['keys'](loopable), [
        'acquireContext',
        'releaseContext',
        'addEventListener',
        'removeEventListener'
    ]));
    len = (keys.length, 4);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_482).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid96)[TAJS_restrictToType(keys[i, 0], 'string'), 'acquireContext'], 'function'), $__.fs.J$__v7918151485_1359_478), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_482).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid96)[TAJS_restrictToType(keys[i, 1], 'string'), 'releaseContext'], 'function'), $__.fs.J$__v7918151485_1365_479), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_482).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid96)[TAJS_restrictToType(keys[i, 2], 'string'), 'addEventListener'], 'function'), $__.fs.J$__v7918151485_1369_480), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_482).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid96)[TAJS_restrictToType(keys[i, 3], 'string'), 'removeEventListener'], 'function'), $__.fs.J$__v7918151485_1371_481), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 1, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt46(res) {
        res.length = 0;
        if (res.length != 0)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt46, -2);
    }((Object['keys'](loopable), []));
    len = (keys.length, 0);
    i = 0;
    i < len;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 2, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt47(res) {
        res.length = 5;
        if (res.length != 5)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt47, -2);
    }((Object['keys'](loopable), [
        'initialize',
        'pivot',
        'transition',
        'tooltipPosition',
        'hasValue'
    ]));
    len = (keys.length, 5);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_508).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid108)[TAJS_restrictToType(keys[i, 0], 'string'), 'initialize'], 'function'), $__.fs.J$__v7918151485_662_503), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_508).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid108)[TAJS_restrictToType(keys[i, 1], 'string'), 'pivot'], 'function'), $__.fs.J$__v7918151485_664_504), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_508).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid108)[TAJS_restrictToType(keys[i, 2], 'string'), 'transition'], 'function'), $__.fs.J$__v7918151485_668_505), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_508).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid108)[TAJS_restrictToType(keys[i, 3], 'string'), 'tooltipPosition'], 'function'), $__.fs.J$__v7918151485_670_506), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_508).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid108)[TAJS_restrictToType(keys[i, 4], 'string'), 'hasValue'], 'function'), $__.fs.J$__v7918151485_672_507), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 3, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt48(res) {
        res.length = 6;
        if (res.length != 6)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt48, -2);
    }((Object['keys'](loopable), [
        'currentStep',
        'numSteps',
        'easing',
        'render',
        'onAnimationProgress',
        'onAnimationComplete'
    ]));
    len = (keys.length, 6);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_513).call(vvv_tmp1, ((loopable, $__.os.oid112)[TAJS_restrictToType(keys[i, 0], 'string'), 'currentStep'], null), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_513).call(vvv_tmp2, ((loopable, $__.os.oid112)[TAJS_restrictToType(keys[i, 1], 'string'), 'numSteps'], 60), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_513).call(vvv_tmp3, TAJS_restrictToType((loopable, $__.os.oid112)[TAJS_restrictToType(keys[i, 2], 'string'), 'easing'], 'string'), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_513).call(vvv_tmp4, ((loopable, $__.os.oid112)[TAJS_restrictToType(keys[i, 3], 'string'), 'render'], null), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_513).call(vvv_tmp5, ((loopable, $__.os.oid112)[TAJS_restrictToType(keys[i, 4], 'string'), 'onAnimationProgress'], null), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_513).call(vvv_tmp6, ((loopable, $__.os.oid112)[TAJS_restrictToType(keys[i, 5], 'string'), 'onAnimationComplete'], null), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 4, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt49(res) {
        res.length = 32;
        if (res.length != 32)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt49, -2);
    }((Object['keys'](loopable), [
        'initialize',
        'clear',
        'stop',
        'resize',
        'ensureScalesHaveIDs',
        'buildScales',
        'buildOrUpdateControllers',
        'resetElements',
        'reset',
        'update',
        'updateLayout',
        'updateDatasets',
        'render',
        'draw',
        'drawDatasets',
        'getElementAtEvent',
        'getElementsAtEvent',
        'getElementsAtXAxis',
        'getElementsAtEventForMode',
        'getDatasetAtEvent',
        'getDatasetMeta',
        'getVisibleDatasetCount',
        'isDatasetVisible',
        'generateLegend',
        'destroy',
        'toBase64Image',
        'initToolTip',
        'bindEvents',
        'unbindEvents',
        'updateHoverStyle',
        'eventHandler',
        'handleEvent'
    ]));
    len = (keys.length, 32);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 0], 'string'), 'initialize'], 'function'), $__.fs.J$__v7918151485_496_523), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 1], 'string'), 'clear'], 'function'), $__.fs.J$__v7918151485_498_524), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 2], 'string'), 'stop'], 'function'), $__.fs.J$__v7918151485_500_525), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 3], 'string'), 'resize'], 'function'), $__.fs.J$__v7918151485_502_526), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 4], 'string'), 'ensureScalesHaveIDs'], 'function'), $__.fs.J$__v7918151485_508_527), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 5], 'string'), 'buildScales'], 'function'), $__.fs.J$__v7918151485_516_528), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 6], 'string'), 'buildOrUpdateControllers'], 'function'), $__.fs.J$__v7918151485_520_529), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 7], 'string'), 'resetElements'], 'function'), $__.fs.J$__v7918151485_524_530), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 8], 'string'), 'reset'], 'function'), $__.fs.J$__v7918151485_526_531), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp10 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp10, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 9], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_532_532), TAJS_restrictToType(keys[i, 9], 'string'), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp11 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp11, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 10], 'string'), 'updateLayout'], 'function'), $__.fs.J$__v7918151485_534_533), TAJS_restrictToType(keys[i, 10], 'string'), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp12 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp12, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 11], 'string'), 'updateDatasets'], 'function'), $__.fs.J$__v7918151485_536_534), TAJS_restrictToType(keys[i, 11], 'string'), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp13 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp13, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 12], 'string'), 'render'], 'function'), $__.fs.J$__v7918151485_542_535), TAJS_restrictToType(keys[i, 12], 'string'), 12, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp14 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp14, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 13], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_546_536), TAJS_restrictToType(keys[i, 13], 'string'), 13, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp15 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp15, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 14], 'string'), 'drawDatasets'], 'function'), $__.fs.J$__v7918151485_550_537), TAJS_restrictToType(keys[i, 14], 'string'), 14, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp16 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp16, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 15], 'string'), 'getElementAtEvent'], 'function'), $__.fs.J$__v7918151485_552_538), TAJS_restrictToType(keys[i, 15], 'string'), 15, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp17 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp17, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 16], 'string'), 'getElementsAtEvent'], 'function'), $__.fs.J$__v7918151485_554_539), TAJS_restrictToType(keys[i, 16], 'string'), 16, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp18 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp18, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 17], 'string'), 'getElementsAtXAxis'], 'function'), $__.fs.J$__v7918151485_556_540), TAJS_restrictToType(keys[i, 17], 'string'), 17, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp19 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp19, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 18], 'string'), 'getElementsAtEventForMode'], 'function'), $__.fs.J$__v7918151485_558_541), TAJS_restrictToType(keys[i, 18], 'string'), 18, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp20 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp20, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 19], 'string'), 'getDatasetAtEvent'], 'function'), $__.fs.J$__v7918151485_560_542), TAJS_restrictToType(keys[i, 19], 'string'), 19, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp21 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp21, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 20], 'string'), 'getDatasetMeta'], 'function'), $__.fs.J$__v7918151485_562_543), TAJS_restrictToType(keys[i, 20], 'string'), 20, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp22 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp22, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 21], 'string'), 'getVisibleDatasetCount'], 'function'), $__.fs.J$__v7918151485_564_544), TAJS_restrictToType(keys[i, 21], 'string'), 21, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp23 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp23, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 22], 'string'), 'isDatasetVisible'], 'function'), $__.fs.J$__v7918151485_566_545), TAJS_restrictToType(keys[i, 22], 'string'), 22, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp24 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp24, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 23], 'string'), 'generateLegend'], 'function'), $__.fs.J$__v7918151485_568_546), TAJS_restrictToType(keys[i, 23], 'string'), 23, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp25 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp25, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 24], 'string'), 'destroy'], 'function'), $__.fs.J$__v7918151485_570_547), TAJS_restrictToType(keys[i, 24], 'string'), 24, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp26 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp26, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 25], 'string'), 'toBase64Image'], 'function'), $__.fs.J$__v7918151485_572_548), TAJS_restrictToType(keys[i, 25], 'string'), 25, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp27 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp27, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 26], 'string'), 'initToolTip'], 'function'), $__.fs.J$__v7918151485_574_549), TAJS_restrictToType(keys[i, 26], 'string'), 26, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp28 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp28, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 27], 'string'), 'bindEvents'], 'function'), $__.fs.J$__v7918151485_582_550), TAJS_restrictToType(keys[i, 27], 'string'), 27, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp29 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp29, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 28], 'string'), 'unbindEvents'], 'function'), $__.fs.J$__v7918151485_586_551), TAJS_restrictToType(keys[i, 28], 'string'), 28, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp30 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp30, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 29], 'string'), 'updateHoverStyle'], 'function'), $__.fs.J$__v7918151485_588_552), TAJS_restrictToType(keys[i, 29], 'string'), 29, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp31 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp31, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 30], 'string'), 'eventHandler'], 'function'), $__.fs.J$__v7918151485_590_553), TAJS_restrictToType(keys[i, 30], 'string'), 30, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp32 = self, (callback, $__.fs.J$__v7918151485_684_555).call(vvv_tmp32, (TAJS_restrictToType((loopable, $__.os.oid119)[TAJS_restrictToType(keys[i, 31], 'string'), 'handleEvent'], 'function'), $__.fs.J$__v7918151485_592_554), TAJS_restrictToType(keys[i, 31], 'string'), 31, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 5, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt50(res) {
        res.length = 26;
        if (res.length != 26)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt50, -2);
    }((Object['keys'](loopable), [
        'datasetElementType',
        'dataElementType',
        'initialize',
        'updateIndex',
        'linkScales',
        'getDataset',
        'getMeta',
        'getScaleForId',
        'reset',
        'destroy',
        'createMetaDataset',
        'createMetaData',
        'addElements',
        'addElementAndReset',
        'buildOrUpdateElements',
        'update',
        'draw',
        'removeHoverStyle',
        'setHoverStyle',
        'resyncElements',
        'insertElements',
        'onDataPush',
        'onDataPop',
        'onDataShift',
        'onDataSplice',
        'onDataUnshift'
    ]));
    len = (keys.length, 26);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp1, ((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 0], 'string'), 'datasetElementType'], null), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp2, ((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 1], 'string'), 'dataElementType'], null), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 2], 'string'), 'initialize'], 'function'), $__.fs.J$__v7918151485_610_561), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 3], 'string'), 'updateIndex'], 'function'), $__.fs.J$__v7918151485_612_562), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 4], 'string'), 'linkScales'], 'function'), $__.fs.J$__v7918151485_614_563), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 5], 'string'), 'getDataset'], 'function'), $__.fs.J$__v7918151485_616_564), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 6], 'string'), 'getMeta'], 'function'), $__.fs.J$__v7918151485_618_565), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 7], 'string'), 'getScaleForId'], 'function'), $__.fs.J$__v7918151485_620_566), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 8], 'string'), 'reset'], 'function'), $__.fs.J$__v7918151485_622_567), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp10 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp10, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 9], 'string'), 'destroy'], 'function'), $__.fs.J$__v7918151485_624_568), TAJS_restrictToType(keys[i, 9], 'string'), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp11 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp11, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 10], 'string'), 'createMetaDataset'], 'function'), $__.fs.J$__v7918151485_626_569), TAJS_restrictToType(keys[i, 10], 'string'), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp12 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp12, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 11], 'string'), 'createMetaData'], 'function'), $__.fs.J$__v7918151485_628_570), TAJS_restrictToType(keys[i, 11], 'string'), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp13 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp13, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 12], 'string'), 'addElements'], 'function'), $__.fs.J$__v7918151485_630_571), TAJS_restrictToType(keys[i, 12], 'string'), 12, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp14 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp14, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 13], 'string'), 'addElementAndReset'], 'function'), $__.fs.J$__v7918151485_632_572), TAJS_restrictToType(keys[i, 13], 'string'), 13, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp15 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp15, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 14], 'string'), 'buildOrUpdateElements'], 'function'), $__.fs.J$__v7918151485_634_573), TAJS_restrictToType(keys[i, 14], 'string'), 14, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp16 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp16, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 15], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 15], 'string'), 15, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp17 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp17, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 16], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_636_574), TAJS_restrictToType(keys[i, 16], 'string'), 16, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp18 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp18, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 17], 'string'), 'removeHoverStyle'], 'function'), $__.fs.J$__v7918151485_638_575), TAJS_restrictToType(keys[i, 17], 'string'), 17, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp19 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp19, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 18], 'string'), 'setHoverStyle'], 'function'), $__.fs.J$__v7918151485_640_576), TAJS_restrictToType(keys[i, 18], 'string'), 18, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp20 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp20, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 19], 'string'), 'resyncElements'], 'function'), $__.fs.J$__v7918151485_642_577), TAJS_restrictToType(keys[i, 19], 'string'), 19, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp21 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp21, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 20], 'string'), 'insertElements'], 'function'), $__.fs.J$__v7918151485_644_578), TAJS_restrictToType(keys[i, 20], 'string'), 20, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp22 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp22, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 21], 'string'), 'onDataPush'], 'function'), $__.fs.J$__v7918151485_646_579), TAJS_restrictToType(keys[i, 21], 'string'), 21, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp23 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp23, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 22], 'string'), 'onDataPop'], 'function'), $__.fs.J$__v7918151485_648_580), TAJS_restrictToType(keys[i, 22], 'string'), 22, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp24 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp24, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 23], 'string'), 'onDataShift'], 'function'), $__.fs.J$__v7918151485_650_581), TAJS_restrictToType(keys[i, 23], 'string'), 23, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp25 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp25, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 24], 'string'), 'onDataSplice'], 'function'), $__.fs.J$__v7918151485_652_582), TAJS_restrictToType(keys[i, 24], 'string'), 24, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp26 = self, (callback, $__.fs.J$__v7918151485_684_584).call(vvv_tmp26, (TAJS_restrictToType((loopable, $__.os.oid122)[TAJS_restrictToType(keys[i, 25], 'string'), 'onDataUnshift'], 'function'), $__.fs.J$__v7918151485_654_583), TAJS_restrictToType(keys[i, 25], 'string'), 25, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 6, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt51(res) {
        res.length = 34;
        if (res.length != 34)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt51, -2);
    }((Object['keys'](loopable), [
        'getPadding',
        'beforeUpdate',
        'update',
        'afterUpdate',
        'beforeSetDimensions',
        'setDimensions',
        'afterSetDimensions',
        'beforeDataLimits',
        'determineDataLimits',
        'afterDataLimits',
        'beforeBuildTicks',
        'buildTicks',
        'afterBuildTicks',
        'beforeTickToLabelConversion',
        'convertTicksToLabels',
        'afterTickToLabelConversion',
        'beforeCalculateTickRotation',
        'calculateTickRotation',
        'afterCalculateTickRotation',
        'beforeFit',
        'fit',
        'handleMargins',
        'afterFit',
        'isHorizontal',
        'isFullWidth',
        'getRightValue',
        'getLabelForIndex',
        'getPixelForValue',
        'getValueForPixel',
        'getPixelForTick',
        'getPixelForDecimal',
        'getBasePixel',
        'getBaseValue',
        'draw'
    ]));
    len = (keys.length, 34);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 0], 'string'), 'getPadding'], 'function'), $__.fs.J$__v7918151485_1080_608), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 1], 'string'), 'beforeUpdate'], 'function'), $__.fs.J$__v7918151485_1082_609), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 2], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_1084_610), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 3], 'string'), 'afterUpdate'], 'function'), $__.fs.J$__v7918151485_1086_611), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 4], 'string'), 'beforeSetDimensions'], 'function'), $__.fs.J$__v7918151485_1088_612), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 5], 'string'), 'setDimensions'], 'function'), $__.fs.J$__v7918151485_1090_613), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 6], 'string'), 'afterSetDimensions'], 'function'), $__.fs.J$__v7918151485_1092_614), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 7], 'string'), 'beforeDataLimits'], 'function'), $__.fs.J$__v7918151485_1094_615), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 8], 'string'), 'determineDataLimits'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp10 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp10, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 9], 'string'), 'afterDataLimits'], 'function'), $__.fs.J$__v7918151485_1096_616), TAJS_restrictToType(keys[i, 9], 'string'), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp11 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp11, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 10], 'string'), 'beforeBuildTicks'], 'function'), $__.fs.J$__v7918151485_1098_617), TAJS_restrictToType(keys[i, 10], 'string'), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp12 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp12, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 11], 'string'), 'buildTicks'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 11], 'string'), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp13 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp13, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 12], 'string'), 'afterBuildTicks'], 'function'), $__.fs.J$__v7918151485_1100_618), TAJS_restrictToType(keys[i, 12], 'string'), 12, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp14 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp14, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 13], 'string'), 'beforeTickToLabelConversion'], 'function'), $__.fs.J$__v7918151485_1102_619), TAJS_restrictToType(keys[i, 13], 'string'), 13, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp15 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp15, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 14], 'string'), 'convertTicksToLabels'], 'function'), $__.fs.J$__v7918151485_1104_620), TAJS_restrictToType(keys[i, 14], 'string'), 14, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp16 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp16, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 15], 'string'), 'afterTickToLabelConversion'], 'function'), $__.fs.J$__v7918151485_1106_621), TAJS_restrictToType(keys[i, 15], 'string'), 15, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp17 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp17, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 16], 'string'), 'beforeCalculateTickRotation'], 'function'), $__.fs.J$__v7918151485_1108_622), TAJS_restrictToType(keys[i, 16], 'string'), 16, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp18 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp18, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 17], 'string'), 'calculateTickRotation'], 'function'), $__.fs.J$__v7918151485_1110_623), TAJS_restrictToType(keys[i, 17], 'string'), 17, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp19 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp19, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 18], 'string'), 'afterCalculateTickRotation'], 'function'), $__.fs.J$__v7918151485_1112_624), TAJS_restrictToType(keys[i, 18], 'string'), 18, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp20 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp20, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 19], 'string'), 'beforeFit'], 'function'), $__.fs.J$__v7918151485_1114_625), TAJS_restrictToType(keys[i, 19], 'string'), 19, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp21 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp21, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 20], 'string'), 'fit'], 'function'), $__.fs.J$__v7918151485_1116_626), TAJS_restrictToType(keys[i, 20], 'string'), 20, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp22 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp22, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 21], 'string'), 'handleMargins'], 'function'), $__.fs.J$__v7918151485_1118_627), TAJS_restrictToType(keys[i, 21], 'string'), 21, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp23 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp23, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 22], 'string'), 'afterFit'], 'function'), $__.fs.J$__v7918151485_1120_628), TAJS_restrictToType(keys[i, 22], 'string'), 22, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp24 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp24, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 23], 'string'), 'isHorizontal'], 'function'), $__.fs.J$__v7918151485_1122_629), TAJS_restrictToType(keys[i, 23], 'string'), 23, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp25 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp25, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 24], 'string'), 'isFullWidth'], 'function'), $__.fs.J$__v7918151485_1124_630), TAJS_restrictToType(keys[i, 24], 'string'), 24, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp26 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp26, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 25], 'string'), 'getRightValue'], 'function'), $__.fs.J$__v7918151485_1126_631), TAJS_restrictToType(keys[i, 25], 'string'), 25, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp27 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp27, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 26], 'string'), 'getLabelForIndex'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 26], 'string'), 26, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp28 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp28, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 27], 'string'), 'getPixelForValue'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 27], 'string'), 27, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp29 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp29, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 28], 'string'), 'getValueForPixel'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 28], 'string'), 28, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp30 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp30, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 29], 'string'), 'getPixelForTick'], 'function'), $__.fs.J$__v7918151485_1128_632), TAJS_restrictToType(keys[i, 29], 'string'), 29, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp31 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp31, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 30], 'string'), 'getPixelForDecimal'], 'function'), $__.fs.J$__v7918151485_1130_633), TAJS_restrictToType(keys[i, 30], 'string'), 30, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp32 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp32, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 31], 'string'), 'getBasePixel'], 'function'), $__.fs.J$__v7918151485_1132_634), TAJS_restrictToType(keys[i, 31], 'string'), 31, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp33 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp33, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 32], 'string'), 'getBaseValue'], 'function'), $__.fs.J$__v7918151485_1134_635), TAJS_restrictToType(keys[i, 32], 'string'), 32, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp34 = self, (callback, $__.fs.J$__v7918151485_684_639).call(vvv_tmp34, (TAJS_restrictToType((loopable, $__.os.oid143)[TAJS_restrictToType(keys[i, 33], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_1140_636), TAJS_restrictToType(keys[i, 33], 'string'), 33, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 7, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt52(res) {
        res.length = 15;
        if (res.length != 15)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt52, -2);
    }((Object['keys'](loopable), [
        'initialize',
        'beforeUpdate',
        'update',
        'afterUpdate',
        'beforeSetDimensions',
        'setDimensions',
        'afterSetDimensions',
        'beforeBuildLabels',
        'buildLabels',
        'afterBuildLabels',
        'beforeFit',
        'fit',
        'afterFit',
        'isHorizontal',
        'draw'
    ]));
    len = (keys.length, 15);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 0], 'string'), 'initialize'], 'function'), $__.fs.J$__v7918151485_1176_643), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 1], 'string'), 'beforeUpdate'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 2], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_1178_644), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 3], 'string'), 'afterUpdate'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 4], 'string'), 'beforeSetDimensions'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 5], 'string'), 'setDimensions'], 'function'), $__.fs.J$__v7918151485_1180_645), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 6], 'string'), 'afterSetDimensions'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 7], 'string'), 'beforeBuildLabels'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 8], 'string'), 'buildLabels'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp10 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp10, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 9], 'string'), 'afterBuildLabels'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 9], 'string'), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp11 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp11, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 10], 'string'), 'beforeFit'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 10], 'string'), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp12 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp12, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 11], 'string'), 'fit'], 'function'), $__.fs.J$__v7918151485_1182_646), TAJS_restrictToType(keys[i, 11], 'string'), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp13 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp13, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 12], 'string'), 'afterFit'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 12], 'string'), 12, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp14 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp14, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 13], 'string'), 'isHorizontal'], 'function'), $__.fs.J$__v7918151485_1184_647), TAJS_restrictToType(keys[i, 13], 'string'), 13, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp15 = self, (callback, $__.fs.J$__v7918151485_684_651).call(vvv_tmp15, (TAJS_restrictToType((loopable, $__.os.oid147)[TAJS_restrictToType(keys[i, 14], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_1186_648), TAJS_restrictToType(keys[i, 14], 'string'), 14, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 8, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt55(res) {
        res.length = 16;
        if (res.length != 16)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt55, -2);
    }((Object['keys'](loopable), [
        'initialize',
        'beforeUpdate',
        'update',
        'afterUpdate',
        'beforeSetDimensions',
        'setDimensions',
        'afterSetDimensions',
        'beforeBuildLabels',
        'buildLabels',
        'afterBuildLabels',
        'beforeFit',
        'fit',
        'afterFit',
        'isHorizontal',
        'draw',
        'handleEvent'
    ]));
    len = (keys.length, 16);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 0], 'string'), 'initialize'], 'function'), $__.fs.J$__v7918151485_1015_661), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 1], 'string'), 'beforeUpdate'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 2], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_1017_662), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 3], 'string'), 'afterUpdate'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 4], 'string'), 'beforeSetDimensions'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 5], 'string'), 'setDimensions'], 'function'), $__.fs.J$__v7918151485_1019_663), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 6], 'string'), 'afterSetDimensions'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 7], 'string'), 'beforeBuildLabels'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 8], 'string'), 'buildLabels'], 'function'), $__.fs.J$__v7918151485_1023_664), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp10 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp10, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 9], 'string'), 'afterBuildLabels'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 9], 'string'), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp11 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp11, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 10], 'string'), 'beforeFit'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 10], 'string'), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp12 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp12, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 11], 'string'), 'fit'], 'function'), $__.fs.J$__v7918151485_1029_665), TAJS_restrictToType(keys[i, 11], 'string'), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp13 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp13, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 12], 'string'), 'afterFit'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 12], 'string'), 12, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp14 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp14, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 13], 'string'), 'isHorizontal'], 'function'), $__.fs.J$__v7918151485_1031_666), TAJS_restrictToType(keys[i, 13], 'string'), 13, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp15 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp15, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 14], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_1039_667), TAJS_restrictToType(keys[i, 14], 'string'), 14, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp16 = self, (callback, $__.fs.J$__v7918151485_684_671).call(vvv_tmp16, (TAJS_restrictToType((loopable, $__.os.oid153)[TAJS_restrictToType(keys[i, 15], 'string'), 'handleEvent'], 'function'), $__.fs.J$__v7918151485_1041_668), TAJS_restrictToType(keys[i, 15], 'string'), 15, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 9, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt58(res) {
        res.length = 14;
        if (res.length != 14)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt58, -2);
    }((Object['keys'](loopable), [
        'initialize',
        'getTitle',
        'getBeforeBody',
        'getBody',
        'getAfterBody',
        'getFooter',
        'update',
        'drawCaret',
        'drawTitle',
        'drawBody',
        'drawFooter',
        'drawBackground',
        'draw',
        'handleEvent'
    ]));
    len = (keys.length, 14);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 0], 'string'), 'initialize'], 'function'), $__.fs.J$__v7918151485_1230_702), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 1], 'string'), 'getTitle'], 'function'), $__.fs.J$__v7918151485_1232_703), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 2], 'string'), 'getBeforeBody'], 'function'), $__.fs.J$__v7918151485_1234_704), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 3], 'string'), 'getBody'], 'function'), $__.fs.J$__v7918151485_1238_705), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 4], 'string'), 'getAfterBody'], 'function'), $__.fs.J$__v7918151485_1240_706), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 5], 'string'), 'getFooter'], 'function'), $__.fs.J$__v7918151485_1242_707), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 6], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_1250_708), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 7], 'string'), 'drawCaret'], 'function'), $__.fs.J$__v7918151485_1252_709), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 8], 'string'), 'drawTitle'], 'function'), $__.fs.J$__v7918151485_1254_710), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp10 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp10, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 9], 'string'), 'drawBody'], 'function'), $__.fs.J$__v7918151485_1262_711), TAJS_restrictToType(keys[i, 9], 'string'), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp11 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp11, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 10], 'string'), 'drawFooter'], 'function'), $__.fs.J$__v7918151485_1266_712), TAJS_restrictToType(keys[i, 10], 'string'), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp12 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp12, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 11], 'string'), 'drawBackground'], 'function'), $__.fs.J$__v7918151485_1268_713), TAJS_restrictToType(keys[i, 11], 'string'), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp13 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp13, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 12], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_1270_714), TAJS_restrictToType(keys[i, 12], 'string'), 12, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp14 = self, (callback, $__.fs.J$__v7918151485_684_718).call(vvv_tmp14, (TAJS_restrictToType((loopable, $__.os.oid163)[TAJS_restrictToType(keys[i, 13], 'string'), 'handleEvent'], 'function'), $__.fs.J$__v7918151485_1272_715), TAJS_restrictToType(keys[i, 13], 'string'), 13, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 10, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt59(res) {
        res.length = 6;
        if (res.length != 6)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt59, -2);
    }((Object['keys'](loopable), [
        'inLabelRange',
        'inRange',
        'getCenterPoint',
        'getArea',
        'tooltipPosition',
        'draw'
    ]));
    len = (keys.length, 6);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_731).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid168)[TAJS_restrictToType(keys[i, 0], 'string'), 'inLabelRange'], 'function'), $__.fs.J$__v7918151485_1282_723), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_731).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid168)[TAJS_restrictToType(keys[i, 1], 'string'), 'inRange'], 'function'), $__.fs.J$__v7918151485_1284_724), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_731).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid168)[TAJS_restrictToType(keys[i, 2], 'string'), 'getCenterPoint'], 'function'), $__.fs.J$__v7918151485_1286_725), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_731).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid168)[TAJS_restrictToType(keys[i, 3], 'string'), 'getArea'], 'function'), $__.fs.J$__v7918151485_1288_726), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_731).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid168)[TAJS_restrictToType(keys[i, 4], 'string'), 'tooltipPosition'], 'function'), $__.fs.J$__v7918151485_1290_727), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_731).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid168)[TAJS_restrictToType(keys[i, 5], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_1292_728), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 11, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt60(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt60, -2);
    }((Object['keys'](loopable), ['draw']));
    len = (keys.length, 1);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_737).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid172)[TAJS_restrictToType(keys[i, 0], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_1299_734), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 12, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt61(res) {
        res.length = 8;
        if (res.length != 8)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt61, -2);
    }((Object['keys'](loopable), [
        'inRange',
        'inLabelRange',
        'inXRange',
        'inYRange',
        'getCenterPoint',
        'getArea',
        'tooltipPosition',
        'draw'
    ]));
    len = (keys.length, 8);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_749).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid176)[TAJS_restrictToType(keys[i, 0], 'string'), 'inRange'], 'function'), $__.fs.J$__v7918151485_1307_742), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_749).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid176)[TAJS_restrictToType(keys[i, 1], 'string'), 'inLabelRange'], 'function'), $__.fs.xRange_740), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_749).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid176)[TAJS_restrictToType(keys[i, 2], 'string'), 'inXRange'], 'function'), $__.fs.xRange_740), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_749).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid176)[TAJS_restrictToType(keys[i, 3], 'string'), 'inYRange'], 'function'), $__.fs.yRange_741), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_749).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid176)[TAJS_restrictToType(keys[i, 4], 'string'), 'getCenterPoint'], 'function'), $__.fs.J$__v7918151485_1309_743), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_749).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid176)[TAJS_restrictToType(keys[i, 5], 'string'), 'getArea'], 'function'), $__.fs.J$__v7918151485_1311_744), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_749).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid176)[TAJS_restrictToType(keys[i, 6], 'string'), 'tooltipPosition'], 'function'), $__.fs.J$__v7918151485_1313_745), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_749).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid176)[TAJS_restrictToType(keys[i, 7], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_1315_746), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 13, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt62(res) {
        res.length = 9;
        if (res.length != 9)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt62, -2);
    }((Object['keys'](loopable), [
        'draw',
        'height',
        'inRange',
        'inLabelRange',
        'inXRange',
        'inYRange',
        'getCenterPoint',
        'getArea',
        'tooltipPosition'
    ]));
    len = (keys.length, 9);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_765).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid180)[TAJS_restrictToType(keys[i, 0], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_1324_754), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_765).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid180)[TAJS_restrictToType(keys[i, 1], 'string'), 'height'], 'function'), $__.fs.J$__v7918151485_1326_755), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_765).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid180)[TAJS_restrictToType(keys[i, 2], 'string'), 'inRange'], 'function'), $__.fs.J$__v7918151485_1328_756), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_765).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid180)[TAJS_restrictToType(keys[i, 3], 'string'), 'inLabelRange'], 'function'), $__.fs.J$__v7918151485_1330_757), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_765).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid180)[TAJS_restrictToType(keys[i, 4], 'string'), 'inXRange'], 'function'), $__.fs.J$__v7918151485_1332_758), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_765).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid180)[TAJS_restrictToType(keys[i, 5], 'string'), 'inYRange'], 'function'), $__.fs.J$__v7918151485_1334_759), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_765).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid180)[TAJS_restrictToType(keys[i, 6], 'string'), 'getCenterPoint'], 'function'), $__.fs.J$__v7918151485_1336_760), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_765).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid180)[TAJS_restrictToType(keys[i, 7], 'string'), 'getArea'], 'function'), $__.fs.J$__v7918151485_1338_761), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_765).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid180)[TAJS_restrictToType(keys[i, 8], 'string'), 'tooltipPosition'], 'function'), $__.fs.J$__v7918151485_1340_762), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 14, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt63(res) {
        res.length = 5;
        if (res.length != 5)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt63, -2);
    }((Object['keys'](loopable), [
        'handleTickRangeOptions',
        'getTickLimit',
        'handleDirectionalChanges',
        'buildTicks',
        'convertTicksToLabels'
    ]));
    len = (keys.length, 5);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_773).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid183)[TAJS_restrictToType(keys[i, 0], 'string'), 'handleTickRangeOptions'], 'function'), $__.fs.J$__v7918151485_1440_768), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_773).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid183)[TAJS_restrictToType(keys[i, 1], 'string'), 'getTickLimit'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_773).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid183)[TAJS_restrictToType(keys[i, 2], 'string'), 'handleDirectionalChanges'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_773).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid183)[TAJS_restrictToType(keys[i, 3], 'string'), 'buildTicks'], 'function'), $__.fs.J$__v7918151485_1442_769), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_773).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid183)[TAJS_restrictToType(keys[i, 4], 'string'), 'convertTicksToLabels'], 'function'), $__.fs.J$__v7918151485_1444_770), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 15, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt64(res) {
        res.length = 8;
        if (res.length != 8)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt64, -2);
    }((Object['keys'](loopable), [
        'getLabels',
        'determineDataLimits',
        'buildTicks',
        'getLabelForIndex',
        'getPixelForValue',
        'getPixelForTick',
        'getValueForPixel',
        'getBasePixel'
    ]));
    len = (keys.length, 8);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_786).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid187)[TAJS_restrictToType(keys[i, 0], 'string'), 'getLabels'], 'function'), $__.fs.J$__v7918151485_1389_776), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_786).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid187)[TAJS_restrictToType(keys[i, 1], 'string'), 'determineDataLimits'], 'function'), $__.fs.J$__v7918151485_1391_777), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_786).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid187)[TAJS_restrictToType(keys[i, 2], 'string'), 'buildTicks'], 'function'), $__.fs.J$__v7918151485_1393_778), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_786).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid187)[TAJS_restrictToType(keys[i, 3], 'string'), 'getLabelForIndex'], 'function'), $__.fs.J$__v7918151485_1395_779), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_786).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid187)[TAJS_restrictToType(keys[i, 4], 'string'), 'getPixelForValue'], 'function'), $__.fs.J$__v7918151485_1397_780), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_786).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid187)[TAJS_restrictToType(keys[i, 5], 'string'), 'getPixelForTick'], 'function'), $__.fs.J$__v7918151485_1399_781), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_786).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid187)[TAJS_restrictToType(keys[i, 6], 'string'), 'getValueForPixel'], 'function'), $__.fs.J$__v7918151485_1401_782), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_786).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid187)[TAJS_restrictToType(keys[i, 7], 'string'), 'getBasePixel'], 'function'), $__.fs.J$__v7918151485_1403_783), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 16:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 16);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 16, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt65(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt65, -2);
    }((Object['keys'](loopable), ['position']));
    len = (keys.length, 1);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_787).call(vvv_tmp1, TAJS_restrictToType((loopable, $__.os.oid186)[TAJS_restrictToType(keys[i, 0], 'string'), 'position'], 'string'), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 17:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 17);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 18, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt66(res) {
        res.length = 7;
        if (res.length != 7)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt66, -2);
    }((Object['keys'](loopable), [
        'determineDataLimits',
        'getTickLimit',
        'handleDirectionalChanges',
        'getLabelForIndex',
        'getPixelForValue',
        'getValueForPixel',
        'getPixelForTick'
    ]));
    len = (keys.length, 7);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_799).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid193)[TAJS_restrictToType(keys[i, 0], 'string'), 'determineDataLimits'], 'function'), $__.fs.J$__v7918151485_1422_790), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_799).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid193)[TAJS_restrictToType(keys[i, 1], 'string'), 'getTickLimit'], 'function'), $__.fs.J$__v7918151485_1424_791), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_799).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid193)[TAJS_restrictToType(keys[i, 2], 'string'), 'handleDirectionalChanges'], 'function'), $__.fs.J$__v7918151485_1426_792), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_799).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid193)[TAJS_restrictToType(keys[i, 3], 'string'), 'getLabelForIndex'], 'function'), $__.fs.J$__v7918151485_1428_793), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_799).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid193)[TAJS_restrictToType(keys[i, 4], 'string'), 'getPixelForValue'], 'function'), $__.fs.J$__v7918151485_1430_794), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_799).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid193)[TAJS_restrictToType(keys[i, 5], 'string'), 'getValueForPixel'], 'function'), $__.fs.J$__v7918151485_1432_795), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_799).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid193)[TAJS_restrictToType(keys[i, 6], 'string'), 'getPixelForTick'], 'function'), $__.fs.J$__v7918151485_1434_796), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 18:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 18);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 22, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt68(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt68, -2);
    }((Object['keys'](loopable), ['callback']));
    len = (keys.length, 1);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_801).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid191)[TAJS_restrictToType(keys[i, 0], 'string'), 'callback'], 'function'), $__.fs.J$__v7918151485_1168_602), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 19);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 19, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt67(res) {
        res.length = 2;
        if (res.length != 2)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt67, -2);
    }((Object['keys'](loopable), [
        'position',
        'ticks'
    ]));
    len = (keys.length, 2);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_800).call(vvv_tmp1, TAJS_restrictToType((loopable, $__.os.oid192)[TAJS_restrictToType(keys[i, 0], 'string'), 'position'], 'string'), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_800).call(vvv_tmp2, ((loopable, $__.os.oid192)[TAJS_restrictToType(keys[i, 1], 'string'), 'ticks'], $__.os.oid191), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 20:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 20);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 24, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt69(res) {
        res.length = 7;
        if (res.length != 7)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt69, -2);
    }((Object['keys'](loopable), [
        'determineDataLimits',
        'buildTicks',
        'convertTicksToLabels',
        'getLabelForIndex',
        'getPixelForTick',
        'getPixelForValue',
        'getValueForPixel'
    ]));
    len = (keys.length, 7);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_813).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid200)[TAJS_restrictToType(keys[i, 0], 'string'), 'determineDataLimits'], 'function'), $__.fs.J$__v7918151485_1463_804), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_813).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid200)[TAJS_restrictToType(keys[i, 1], 'string'), 'buildTicks'], 'function'), $__.fs.J$__v7918151485_1465_805), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_813).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid200)[TAJS_restrictToType(keys[i, 2], 'string'), 'convertTicksToLabels'], 'function'), $__.fs.J$__v7918151485_1467_806), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_813).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid200)[TAJS_restrictToType(keys[i, 3], 'string'), 'getLabelForIndex'], 'function'), $__.fs.J$__v7918151485_1469_807), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_813).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid200)[TAJS_restrictToType(keys[i, 4], 'string'), 'getPixelForTick'], 'function'), $__.fs.J$__v7918151485_1471_808), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_813).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid200)[TAJS_restrictToType(keys[i, 5], 'string'), 'getPixelForValue'], 'function'), $__.fs.J$__v7918151485_1473_809), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_813).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid200)[TAJS_restrictToType(keys[i, 6], 'string'), 'getValueForPixel'], 'function'), $__.fs.J$__v7918151485_1475_810), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 21:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 21);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 28, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt71(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt71, -2);
    }((Object['keys'](loopable), ['callback']));
    len = (keys.length, 1);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_815).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid198)[TAJS_restrictToType(keys[i, 0], 'string'), 'callback'], 'function'), $__.fs.J$__v7918151485_1170_603), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 22:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 22);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 25, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt70(res) {
        res.length = 2;
        if (res.length != 2)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt70, -2);
    }((Object['keys'](loopable), [
        'position',
        'ticks'
    ]));
    len = (keys.length, 2);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_814).call(vvv_tmp1, TAJS_restrictToType((loopable, $__.os.oid199)[TAJS_restrictToType(keys[i, 0], 'string'), 'position'], 'string'), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_814).call(vvv_tmp2, ((loopable, $__.os.oid199)[TAJS_restrictToType(keys[i, 1], 'string'), 'ticks'], $__.os.oid198), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 23:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 23);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 30, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt72(res) {
        res.length = 14;
        if (res.length != 14)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt72, -2);
    }((Object['keys'](loopable), [
        'setDimensions',
        'determineDataLimits',
        'getTickLimit',
        'convertTicksToLabels',
        'getLabelForIndex',
        'fit',
        'setReductions',
        'setCenterPoint',
        'getIndexAngle',
        'getDistanceFromCenterForValue',
        'getPointPosition',
        'getPointPositionForValue',
        'getBasePosition',
        'draw'
    ]));
    len = (keys.length, 14);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 0], 'string'), 'setDimensions'], 'function'), $__.fs.J$__v7918151485_1495_831), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 1], 'string'), 'determineDataLimits'], 'function'), $__.fs.J$__v7918151485_1501_832), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 2], 'string'), 'getTickLimit'], 'function'), $__.fs.J$__v7918151485_1503_833), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 3], 'string'), 'convertTicksToLabels'], 'function'), $__.fs.J$__v7918151485_1505_834), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 4], 'string'), 'getLabelForIndex'], 'function'), $__.fs.J$__v7918151485_1507_835), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 5], 'string'), 'fit'], 'function'), $__.fs.J$__v7918151485_1509_836), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 6], 'string'), 'setReductions'], 'function'), $__.fs.J$__v7918151485_1511_837), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 7], 'string'), 'setCenterPoint'], 'function'), $__.fs.J$__v7918151485_1513_838), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 8], 'string'), 'getIndexAngle'], 'function'), $__.fs.J$__v7918151485_1515_839), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp10 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp10, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 9], 'string'), 'getDistanceFromCenterForValue'], 'function'), $__.fs.J$__v7918151485_1517_840), TAJS_restrictToType(keys[i, 9], 'string'), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp11 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp11, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 10], 'string'), 'getPointPosition'], 'function'), $__.fs.J$__v7918151485_1519_841), TAJS_restrictToType(keys[i, 10], 'string'), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp12 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp12, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 11], 'string'), 'getPointPositionForValue'], 'function'), $__.fs.J$__v7918151485_1521_842), TAJS_restrictToType(keys[i, 11], 'string'), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp13 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp13, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 12], 'string'), 'getBasePosition'], 'function'), $__.fs.J$__v7918151485_1523_843), TAJS_restrictToType(keys[i, 12], 'string'), 12, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp14 = self, (callback, $__.fs.J$__v7918151485_684_847).call(vvv_tmp14, (TAJS_restrictToType((loopable, $__.os.oid209)[TAJS_restrictToType(keys[i, 13], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_1527_844), TAJS_restrictToType(keys[i, 13], 'string'), 13, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 24:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 24);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 37, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt74(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt74, -2);
    }((Object['keys'](loopable), [
        'display',
        'color',
        'lineWidth'
    ]));
    len = (keys.length, 3);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_849).call(vvv_tmp1, ((loopable, $__.os.oid205)[TAJS_restrictToType(keys[i, 0], 'string'), 'display'], true), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_849).call(vvv_tmp2, TAJS_restrictToType((loopable, $__.os.oid205)[TAJS_restrictToType(keys[i, 1], 'string'), 'color'], 'string'), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_680_849).call(vvv_tmp3, ((loopable, $__.os.oid205)[TAJS_restrictToType(keys[i, 2], 'string'), 'lineWidth'], 1), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 25:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 25);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 42, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt75(res) {
        res.length = 5;
        if (res.length != 5)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt75, -2);
    }((Object['keys'](loopable), [
        'showLabelBackdrop',
        'backdropColor',
        'backdropPaddingY',
        'backdropPaddingX',
        'callback'
    ]));
    len = (keys.length, 5);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_850).call(vvv_tmp1, ((loopable, $__.os.oid206)[TAJS_restrictToType(keys[i, 0], 'string'), 'showLabelBackdrop'], true), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_850).call(vvv_tmp2, TAJS_restrictToType((loopable, $__.os.oid206)[TAJS_restrictToType(keys[i, 1], 'string'), 'backdropColor'], 'string'), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_680_850).call(vvv_tmp3, ((loopable, $__.os.oid206)[TAJS_restrictToType(keys[i, 2], 'string'), 'backdropPaddingY'], 2), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_680_850).call(vvv_tmp4, ((loopable, $__.os.oid206)[TAJS_restrictToType(keys[i, 3], 'string'), 'backdropPaddingX'], 2), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_680_850).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid206)[TAJS_restrictToType(keys[i, 4], 'string'), 'callback'], 'function'), $__.fs.J$__v7918151485_1168_602), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 26:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 26);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 49, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt76(res) {
        res.length = 2;
        if (res.length != 2)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt76, -2);
    }((Object['keys'](loopable), [
        'fontSize',
        'callback'
    ]));
    len = (keys.length, 2);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_851).call(vvv_tmp1, ((loopable, $__.os.oid207)[TAJS_restrictToType(keys[i, 0], 'string'), 'fontSize'], 10), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_851).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid207)[TAJS_restrictToType(keys[i, 1], 'string'), 'callback'], 'function'), $__.fs.J$__v7918151485_1481_830), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 27:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 27);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 31, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt73(res) {
        res.length = 7;
        if (res.length != 7)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt73, -2);
    }((Object['keys'](loopable), [
        'display',
        'animate',
        'lineArc',
        'position',
        'angleLines',
        'ticks',
        'pointLabels'
    ]));
    len = (keys.length, 7);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_848).call(vvv_tmp1, ((loopable, $__.os.oid208)[TAJS_restrictToType(keys[i, 0], 'string'), 'display'], true), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_848).call(vvv_tmp2, ((loopable, $__.os.oid208)[TAJS_restrictToType(keys[i, 1], 'string'), 'animate'], true), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_680_848).call(vvv_tmp3, ((loopable, $__.os.oid208)[TAJS_restrictToType(keys[i, 2], 'string'), 'lineArc'], false), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_680_848).call(vvv_tmp4, TAJS_restrictToType((loopable, $__.os.oid208)[TAJS_restrictToType(keys[i, 3], 'string'), 'position'], 'string'), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_680_848).call(vvv_tmp5, ((loopable, $__.os.oid208)[TAJS_restrictToType(keys[i, 4], 'string'), 'angleLines'], $__.os.oid205), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_680_848).call(vvv_tmp6, ((loopable, $__.os.oid208)[TAJS_restrictToType(keys[i, 5], 'string'), 'ticks'], $__.os.oid206), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_680_848).call(vvv_tmp7, ((loopable, $__.os.oid208)[TAJS_restrictToType(keys[i, 6], 'string'), 'pointLabels'], $__.os.oid207), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 28:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 28);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 52, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt77(res) {
        res.length = 14;
        if (res.length != 14)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt77, -2);
    }((Object['keys'](loopable), [
        'initialize',
        'getLabelMoment',
        'getLabelDiff',
        'getMomentStartOf',
        'determineDataLimits',
        'buildLabelDiffs',
        'buildTicks',
        'getLabelForIndex',
        'tickFormatFunction',
        'convertTicksToLabels',
        'getPixelForValue',
        'getPixelForTick',
        'getValueForPixel',
        'parseTime'
    ]));
    len = (keys.length, 14);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 0], 'string'), 'initialize'], 'function'), $__.fs.J$__v7918151485_1533_855), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 1], 'string'), 'getLabelMoment'], 'function'), $__.fs.J$__v7918151485_1535_856), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 2], 'string'), 'getLabelDiff'], 'function'), $__.fs.J$__v7918151485_1537_857), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 3], 'string'), 'getMomentStartOf'], 'function'), $__.fs.J$__v7918151485_1539_858), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 4], 'string'), 'determineDataLimits'], 'function'), $__.fs.J$__v7918151485_1547_859), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 5], 'string'), 'buildLabelDiffs'], 'function'), $__.fs.J$__v7918151485_1555_860), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 6], 'string'), 'buildTicks'], 'function'), $__.fs.J$__v7918151485_1557_861), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 7], 'string'), 'getLabelForIndex'], 'function'), $__.fs.J$__v7918151485_1559_862), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 8], 'string'), 'tickFormatFunction'], 'function'), $__.fs.J$__v7918151485_1561_863), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp10 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp10, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 9], 'string'), 'convertTicksToLabels'], 'function'), $__.fs.J$__v7918151485_1563_864), TAJS_restrictToType(keys[i, 9], 'string'), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp11 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp11, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 10], 'string'), 'getPixelForValue'], 'function'), $__.fs.J$__v7918151485_1565_865), TAJS_restrictToType(keys[i, 10], 'string'), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp12 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp12, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 11], 'string'), 'getPixelForTick'], 'function'), $__.fs.J$__v7918151485_1567_866), TAJS_restrictToType(keys[i, 11], 'string'), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp13 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp13, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 12], 'string'), 'getValueForPixel'], 'function'), $__.fs.J$__v7918151485_1569_867), TAJS_restrictToType(keys[i, 12], 'string'), 12, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp14 = self, (callback, $__.fs.J$__v7918151485_684_871).call(vvv_tmp14, (TAJS_restrictToType((loopable, $__.os.oid232)[TAJS_restrictToType(keys[i, 13], 'string'), 'parseTime'], 'function'), $__.fs.J$__v7918151485_1571_868), TAJS_restrictToType(keys[i, 13], 'string'), 13, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 29:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 29);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 65, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt80(res) {
        res.length = 9;
        if (res.length != 9)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt80, -2);
    }((Object['keys'](loopable), [
        'millisecond',
        'second',
        'minute',
        'hour',
        'day',
        'week',
        'month',
        'quarter',
        'year'
    ]));
    len = (keys.length, 9);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_874).call(vvv_tmp1, TAJS_restrictToType((loopable, $__.os.oid228)[TAJS_restrictToType(keys[i, 0], 'string'), 'millisecond'], 'string'), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_874).call(vvv_tmp2, TAJS_restrictToType((loopable, $__.os.oid228)[TAJS_restrictToType(keys[i, 1], 'string'), 'second'], 'string'), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_680_874).call(vvv_tmp3, TAJS_restrictToType((loopable, $__.os.oid228)[TAJS_restrictToType(keys[i, 2], 'string'), 'minute'], 'string'), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_680_874).call(vvv_tmp4, TAJS_restrictToType((loopable, $__.os.oid228)[TAJS_restrictToType(keys[i, 3], 'string'), 'hour'], 'string'), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_680_874).call(vvv_tmp5, TAJS_restrictToType((loopable, $__.os.oid228)[TAJS_restrictToType(keys[i, 4], 'string'), 'day'], 'string'), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_680_874).call(vvv_tmp6, TAJS_restrictToType((loopable, $__.os.oid228)[TAJS_restrictToType(keys[i, 5], 'string'), 'week'], 'string'), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_680_874).call(vvv_tmp7, TAJS_restrictToType((loopable, $__.os.oid228)[TAJS_restrictToType(keys[i, 6], 'string'), 'month'], 'string'), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_680_874).call(vvv_tmp8, TAJS_restrictToType((loopable, $__.os.oid228)[TAJS_restrictToType(keys[i, 7], 'string'), 'quarter'], 'string'), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_680_874).call(vvv_tmp9, TAJS_restrictToType((loopable, $__.os.oid228)[TAJS_restrictToType(keys[i, 8], 'string'), 'year'], 'string'), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 30:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 30);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 56, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt79(res) {
        res.length = 8;
        if (res.length != 8)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt79, -2);
    }((Object['keys'](loopable), [
        'parser',
        'format',
        'unit',
        'round',
        'displayFormat',
        'isoWeekday',
        'minUnit',
        'displayFormats'
    ]));
    len = (keys.length, 8);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_873).call(vvv_tmp1, ((loopable, $__.os.oid229)[TAJS_restrictToType(keys[i, 0], 'string'), 'parser'], false), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_873).call(vvv_tmp2, ((loopable, $__.os.oid229)[TAJS_restrictToType(keys[i, 1], 'string'), 'format'], false), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_680_873).call(vvv_tmp3, ((loopable, $__.os.oid229)[TAJS_restrictToType(keys[i, 2], 'string'), 'unit'], false), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_680_873).call(vvv_tmp4, ((loopable, $__.os.oid229)[TAJS_restrictToType(keys[i, 3], 'string'), 'round'], false), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_680_873).call(vvv_tmp5, ((loopable, $__.os.oid229)[TAJS_restrictToType(keys[i, 4], 'string'), 'displayFormat'], false), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_680_873).call(vvv_tmp6, ((loopable, $__.os.oid229)[TAJS_restrictToType(keys[i, 5], 'string'), 'isoWeekday'], false), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_680_873).call(vvv_tmp7, TAJS_restrictToType((loopable, $__.os.oid229)[TAJS_restrictToType(keys[i, 6], 'string'), 'minUnit'], 'string'), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_680_873).call(vvv_tmp8, ((loopable, $__.os.oid229)[TAJS_restrictToType(keys[i, 7], 'string'), 'displayFormats'], $__.os.oid228), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 31:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 31);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 76, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt81(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt81, -2);
    }((Object['keys'](loopable), ['autoSkip']));
    len = (keys.length, 1);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_875).call(vvv_tmp1, ((loopable, $__.os.oid230)[TAJS_restrictToType(keys[i, 0], 'string'), 'autoSkip'], false), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 32:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 32);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 53, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt78(res) {
        res.length = 3;
        if (res.length != 3)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt78, -2);
    }((Object['keys'](loopable), [
        'position',
        'time',
        'ticks'
    ]));
    len = (keys.length, 3);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_872).call(vvv_tmp1, TAJS_restrictToType((loopable, $__.os.oid231)[TAJS_restrictToType(keys[i, 0], 'string'), 'position'], 'string'), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_872).call(vvv_tmp2, ((loopable, $__.os.oid231)[TAJS_restrictToType(keys[i, 1], 'string'), 'time'], $__.os.oid229), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_680_872).call(vvv_tmp3, ((loopable, $__.os.oid231)[TAJS_restrictToType(keys[i, 2], 'string'), 'ticks'], $__.os.oid230), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 33:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 33);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 78, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt82(res) {
        res.length = 14;
        if (res.length != 14)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt82, -2);
    }((Object['keys'](loopable), [
        'dataElementType',
        'initialize',
        'getStackCount',
        'update',
        'updateElement',
        'calculateBarBase',
        'getRuler',
        'calculateBarWidth',
        'getStackIndex',
        'calculateBarX',
        'calculateBarY',
        'draw',
        'setHoverStyle',
        'removeHoverStyle'
    ]));
    len = (keys.length, 14);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 0], 'string'), 'dataElementType'], 'function'), $__.fs.J$__v7918151485_722_763), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 1], 'string'), 'initialize'], 'function'), $__.fs.J$__v7918151485_270_878), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 2], 'string'), 'getStackCount'], 'function'), $__.fs.J$__v7918151485_274_879), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 3], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_278_880), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 4], 'string'), 'updateElement'], 'function'), $__.fs.J$__v7918151485_280_881), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 5], 'string'), 'calculateBarBase'], 'function'), $__.fs.J$__v7918151485_282_882), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 6], 'string'), 'getRuler'], 'function'), $__.fs.J$__v7918151485_284_883), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 7], 'string'), 'calculateBarWidth'], 'function'), $__.fs.J$__v7918151485_286_884), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 8], 'string'), 'getStackIndex'], 'function'), $__.fs.J$__v7918151485_288_885), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp10 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp10, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 9], 'string'), 'calculateBarX'], 'function'), $__.fs.J$__v7918151485_290_886), TAJS_restrictToType(keys[i, 9], 'string'), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp11 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp11, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 10], 'string'), 'calculateBarY'], 'function'), $__.fs.J$__v7918151485_292_887), TAJS_restrictToType(keys[i, 10], 'string'), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp12 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp12, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 11], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_294_888), TAJS_restrictToType(keys[i, 11], 'string'), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp13 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp13, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 12], 'string'), 'setHoverStyle'], 'function'), $__.fs.J$__v7918151485_296_889), TAJS_restrictToType(keys[i, 12], 'string'), 12, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp14 = self, (callback, $__.fs.J$__v7918151485_684_893).call(vvv_tmp14, (TAJS_restrictToType((loopable, $__.os.oid245)[TAJS_restrictToType(keys[i, 13], 'string'), 'removeHoverStyle'], 'function'), $__.fs.J$__v7918151485_298_890), TAJS_restrictToType(keys[i, 13], 'string'), 13, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 34:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 34);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 79, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt83(res) {
        res.length = 8;
        if (res.length != 8)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt83, -2);
    }((Object['keys'](loopable), [
        'getStackCount',
        'updateElement',
        'calculateBarBase',
        'getRuler',
        'calculateBarHeight',
        'getStackIndex',
        'calculateBarX',
        'calculateBarY'
    ]));
    len = (keys.length, 8);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_906).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid256)[TAJS_restrictToType(keys[i, 0], 'string'), 'getStackCount'], 'function'), $__.fs.J$__v7918151485_306_896), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_906).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid256)[TAJS_restrictToType(keys[i, 1], 'string'), 'updateElement'], 'function'), $__.fs.J$__v7918151485_308_897), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_906).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid256)[TAJS_restrictToType(keys[i, 2], 'string'), 'calculateBarBase'], 'function'), $__.fs.J$__v7918151485_310_898), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_906).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid256)[TAJS_restrictToType(keys[i, 3], 'string'), 'getRuler'], 'function'), $__.fs.J$__v7918151485_312_899), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_906).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid256)[TAJS_restrictToType(keys[i, 4], 'string'), 'calculateBarHeight'], 'function'), $__.fs.J$__v7918151485_314_900), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_906).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid256)[TAJS_restrictToType(keys[i, 5], 'string'), 'getStackIndex'], 'function'), $__.fs.J$__v7918151485_316_901), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_906).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid256)[TAJS_restrictToType(keys[i, 6], 'string'), 'calculateBarX'], 'function'), $__.fs.J$__v7918151485_318_902), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_906).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid256)[TAJS_restrictToType(keys[i, 7], 'string'), 'calculateBarY'], 'function'), $__.fs.J$__v7918151485_320_903), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 35:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 35);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 80, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt84(res) {
        res.length = 6;
        if (res.length != 6)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt84, -2);
    }((Object['keys'](loopable), [
        'dataElementType',
        'update',
        'updateElement',
        'getRadius',
        'setHoverStyle',
        'removeHoverStyle'
    ]));
    len = (keys.length, 6);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_918).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid266)[TAJS_restrictToType(keys[i, 0], 'string'), 'dataElementType'], 'function'), $__.fs.J$__v7918151485_722_747), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_918).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid266)[TAJS_restrictToType(keys[i, 1], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_332_911), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_918).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid266)[TAJS_restrictToType(keys[i, 2], 'string'), 'updateElement'], 'function'), $__.fs.J$__v7918151485_334_912), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_918).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid266)[TAJS_restrictToType(keys[i, 3], 'string'), 'getRadius'], 'function'), $__.fs.J$__v7918151485_336_913), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_918).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid266)[TAJS_restrictToType(keys[i, 4], 'string'), 'setHoverStyle'], 'function'), $__.fs.J$__v7918151485_338_914), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_918).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid266)[TAJS_restrictToType(keys[i, 5], 'string'), 'removeHoverStyle'], 'function'), $__.fs.J$__v7918151485_340_915), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 36:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 36);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 83, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt86(res) {
        res.length = 2;
        if (res.length != 2)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt86, -2);
    }((Object['keys'](loopable), [
        'animateRotate',
        'animateScale'
    ]));
    len = (keys.length, 2);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_927).call(vvv_tmp1, ((loopable, $__.os.oid269)[TAJS_restrictToType(keys[i, 0], 'string'), 'animateRotate'], true), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_927).call(vvv_tmp2, ((loopable, $__.os.oid269)[TAJS_restrictToType(keys[i, 1], 'string'), 'animateScale'], false), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 37:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 37);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 88, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt87(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt87, -2);
    }((Object['keys'](loopable), ['mode']));
    len = (keys.length, 1);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_928).call(vvv_tmp1, TAJS_restrictToType((loopable, $__.os.oid270)[TAJS_restrictToType(keys[i, 0], 'string'), 'mode'], 'string'), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 38:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 38);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 94, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt89(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt89, -2);
    }((Object['keys'](loopable), ['generateLabels']));
    len = (keys.length, 1);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_930).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid271)[TAJS_restrictToType(keys[i, 0], 'string'), 'generateLabels'], 'function'), $__.fs.J$__v7918151485_350_922), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 39:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 39);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 92, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt88(res) {
        res.length = 2;
        if (res.length != 2)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt88, -2);
    }((Object['keys'](loopable), [
        'labels',
        'onClick'
    ]));
    len = (keys.length, 2);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_929).call(vvv_tmp1, ((loopable, $__.os.oid272)[TAJS_restrictToType(keys[i, 0], 'string'), 'labels'], $__.os.oid271), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_929).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid272)[TAJS_restrictToType(keys[i, 1], 'string'), 'onClick'], 'function'), $__.fs.J$__v7918151485_352_923), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 40:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 40);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 103, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt91(res) {
        res.length = 2;
        if (res.length != 2)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt91, -2);
    }((Object['keys'](loopable), [
        'title',
        'label'
    ]));
    len = (keys.length, 2);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_932).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid273)[TAJS_restrictToType(keys[i, 0], 'string'), 'title'], 'function'), $__.fs.J$__v7918151485_354_924), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_932).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid273)[TAJS_restrictToType(keys[i, 1], 'string'), 'label'], 'function'), $__.fs.J$__v7918151485_356_925), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 41:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 41);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 101, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt90(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt90, -2);
    }((Object['keys'](loopable), ['callbacks']));
    len = (keys.length, 1);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_931).call(vvv_tmp1, ((loopable, $__.os.oid274)[TAJS_restrictToType(keys[i, 0], 'string'), 'callbacks'], $__.os.oid273), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 42:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 42);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 81, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt85(res) {
        res.length = 9;
        if (res.length != 9)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt85, -2);
    }((Object['keys'](loopable), [
        'animation',
        'aspectRatio',
        'hover',
        'legendCallback',
        'legend',
        'cutoutPercentage',
        'rotation',
        'circumference',
        'tooltips'
    ]));
    len = (keys.length, 9);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_680_926).call(vvv_tmp1, ((loopable, $__.os.oid275)[TAJS_restrictToType(keys[i, 0], 'string'), 'animation'], $__.os.oid269), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_680_926).call(vvv_tmp2, ((loopable, $__.os.oid275)[TAJS_restrictToType(keys[i, 1], 'string'), 'aspectRatio'], 1), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_680_926).call(vvv_tmp3, ((loopable, $__.os.oid275)[TAJS_restrictToType(keys[i, 2], 'string'), 'hover'], $__.os.oid270), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_680_926).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid275)[TAJS_restrictToType(keys[i, 3], 'string'), 'legendCallback'], 'function'), $__.fs.J$__v7918151485_346_921), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_680_926).call(vvv_tmp5, ((loopable, $__.os.oid275)[TAJS_restrictToType(keys[i, 4], 'string'), 'legend'], $__.os.oid272), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_680_926).call(vvv_tmp6, ((loopable, $__.os.oid275)[TAJS_restrictToType(keys[i, 5], 'string'), 'cutoutPercentage'], 50), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_680_926).call(vvv_tmp7, ((loopable, $__.os.oid275)[TAJS_restrictToType(keys[i, 6], 'string'), 'rotation'], -1.5707963267948966), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_680_926).call(vvv_tmp8, ((loopable, $__.os.oid275)[TAJS_restrictToType(keys[i, 7], 'string'), 'circumference'], 6.283185307179586), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_680_926).call(vvv_tmp9, ((loopable, $__.os.oid275)[TAJS_restrictToType(keys[i, 8], 'string'), 'tooltips'], $__.os.oid274), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 43:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 43);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 106, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt92(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt92, -2);
    }((Object['keys'](loopable), ['cutoutPercentage']));
    len = (keys.length, 1);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_933).call(vvv_tmp1, ((loopable, $__.os.oid283)[TAJS_restrictToType(keys[i, 0], 'string'), 'cutoutPercentage'], 0), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 44:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 44);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 107, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt93(res) {
        res.length = 9;
        if (res.length != 9)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt93, -2);
    }((Object['keys'](loopable), [
        'dataElementType',
        'linkScales',
        'getRingIndex',
        'update',
        'updateElement',
        'removeHoverStyle',
        'calculateTotal',
        'calculateCircumference',
        'getMaxBorderWidth'
    ]));
    len = (keys.length, 9);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_943).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid284)[TAJS_restrictToType(keys[i, 0], 'string'), 'dataElementType'], 'function'), $__.fs.J$__v7918151485_722_729), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_943).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid284)[TAJS_restrictToType(keys[i, 1], 'string'), 'linkScales'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_943).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid284)[TAJS_restrictToType(keys[i, 2], 'string'), 'getRingIndex'], 'function'), $__.fs.J$__v7918151485_358_934), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_943).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid284)[TAJS_restrictToType(keys[i, 3], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_362_935), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_943).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid284)[TAJS_restrictToType(keys[i, 4], 'string'), 'updateElement'], 'function'), $__.fs.J$__v7918151485_364_936), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_943).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid284)[TAJS_restrictToType(keys[i, 5], 'string'), 'removeHoverStyle'], 'function'), $__.fs.J$__v7918151485_366_937), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_943).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid284)[TAJS_restrictToType(keys[i, 6], 'string'), 'calculateTotal'], 'function'), $__.fs.J$__v7918151485_370_938), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_943).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid284)[TAJS_restrictToType(keys[i, 7], 'string'), 'calculateCircumference'], 'function'), $__.fs.J$__v7918151485_372_939), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_943).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid284)[TAJS_restrictToType(keys[i, 8], 'string'), 'getMaxBorderWidth'], 'function'), $__.fs.J$__v7918151485_374_940), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 45:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 45);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 108, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt94(res) {
        res.length = 12;
        if (res.length != 12)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt94, -2);
    }((Object['keys'](loopable), [
        'datasetElementType',
        'dataElementType',
        'update',
        'getPointBackgroundColor',
        'getPointBorderColor',
        'getPointBorderWidth',
        'updateElement',
        'calculatePointY',
        'updateBezierControlPoints',
        'draw',
        'setHoverStyle',
        'removeHoverStyle'
    ]));
    len = (keys.length, 12);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 0], 'string'), 'datasetElementType'], 'function'), $__.fs.J$__v7918151485_722_735), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 1], 'string'), 'dataElementType'], 'function'), $__.fs.J$__v7918151485_722_747), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 2], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_381_947), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 3], 'string'), 'getPointBackgroundColor'], 'function'), $__.fs.J$__v7918151485_383_948), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 4], 'string'), 'getPointBorderColor'], 'function'), $__.fs.J$__v7918151485_385_949), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 5], 'string'), 'getPointBorderWidth'], 'function'), $__.fs.J$__v7918151485_387_950), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 6], 'string'), 'updateElement'], 'function'), $__.fs.J$__v7918151485_389_951), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 7], 'string'), 'calculatePointY'], 'function'), $__.fs.J$__v7918151485_391_952), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 8], 'string'), 'updateBezierControlPoints'], 'function'), $__.fs.J$__v7918151485_396_953), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp10 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp10, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 9], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_398_954), TAJS_restrictToType(keys[i, 9], 'string'), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp11 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp11, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 10], 'string'), 'setHoverStyle'], 'function'), $__.fs.J$__v7918151485_400_955), TAJS_restrictToType(keys[i, 10], 'string'), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp12 = self, (callback, $__.fs.J$__v7918151485_684_959).call(vvv_tmp12, (TAJS_restrictToType((loopable, $__.os.oid292)[TAJS_restrictToType(keys[i, 11], 'string'), 'removeHoverStyle'], 'function'), $__.fs.J$__v7918151485_402_956), TAJS_restrictToType(keys[i, 11], 'string'), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 46:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 46);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 109, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt95(res) {
        res.length = 7;
        if (res.length != 7)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt95, -2);
    }((Object['keys'](loopable), [
        'dataElementType',
        'linkScales',
        'update',
        'updateElement',
        'removeHoverStyle',
        'countVisibleElements',
        'calculateCircumference'
    ]));
    len = (keys.length, 7);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_974).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid303)[TAJS_restrictToType(keys[i, 0], 'string'), 'dataElementType'], 'function'), $__.fs.J$__v7918151485_722_729), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_974).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid303)[TAJS_restrictToType(keys[i, 1], 'string'), 'linkScales'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_974).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid303)[TAJS_restrictToType(keys[i, 2], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_422_967), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_974).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid303)[TAJS_restrictToType(keys[i, 3], 'string'), 'updateElement'], 'function'), $__.fs.J$__v7918151485_424_968), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_974).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid303)[TAJS_restrictToType(keys[i, 4], 'string'), 'removeHoverStyle'], 'function'), $__.fs.J$__v7918151485_426_969), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_974).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid303)[TAJS_restrictToType(keys[i, 5], 'string'), 'countVisibleElements'], 'function'), $__.fs.J$__v7918151485_430_970), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_974).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid303)[TAJS_restrictToType(keys[i, 6], 'string'), 'calculateCircumference'], 'function'), $__.fs.J$__v7918151485_432_971), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
case 47:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 47);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, loopable, 110, true, $__.uid);
    typeof loopable === 'object';
    keys = function $__lt96(res) {
        res.length = 9;
        if (res.length != 9)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt96, -2);
    }((Object['keys'](loopable), [
        'datasetElementType',
        'dataElementType',
        'linkScales',
        'update',
        'updateElement',
        'updateBezierControlPoints',
        'draw',
        'setHoverStyle',
        'removeHoverStyle'
    ]));
    len = (keys.length, 9);
    i = 0;
    i < len;
    vvv_tmp1 = self, (callback, $__.fs.J$__v7918151485_684_985).call(vvv_tmp1, (TAJS_restrictToType((loopable, $__.os.oid310)[TAJS_restrictToType(keys[i, 0], 'string'), 'datasetElementType'], 'function'), $__.fs.J$__v7918151485_722_735), TAJS_restrictToType(keys[i, 0], 'string'), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp2 = self, (callback, $__.fs.J$__v7918151485_684_985).call(vvv_tmp2, (TAJS_restrictToType((loopable, $__.os.oid310)[TAJS_restrictToType(keys[i, 1], 'string'), 'dataElementType'], 'function'), $__.fs.J$__v7918151485_722_747), TAJS_restrictToType(keys[i, 1], 'string'), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp3 = self, (callback, $__.fs.J$__v7918151485_684_985).call(vvv_tmp3, (TAJS_restrictToType((loopable, $__.os.oid310)[TAJS_restrictToType(keys[i, 2], 'string'), 'linkScales'], 'function'), $__.fs.J$__v7918151485_728_391), TAJS_restrictToType(keys[i, 2], 'string'), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp4 = self, (callback, $__.fs.J$__v7918151485_684_985).call(vvv_tmp4, (TAJS_restrictToType((loopable, $__.os.oid310)[TAJS_restrictToType(keys[i, 3], 'string'), 'update'], 'function'), $__.fs.J$__v7918151485_440_977), TAJS_restrictToType(keys[i, 3], 'string'), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp5 = self, (callback, $__.fs.J$__v7918151485_684_985).call(vvv_tmp5, (TAJS_restrictToType((loopable, $__.os.oid310)[TAJS_restrictToType(keys[i, 4], 'string'), 'updateElement'], 'function'), $__.fs.J$__v7918151485_442_978), TAJS_restrictToType(keys[i, 4], 'string'), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp6 = self, (callback, $__.fs.J$__v7918151485_684_985).call(vvv_tmp6, (TAJS_restrictToType((loopable, $__.os.oid310)[TAJS_restrictToType(keys[i, 5], 'string'), 'updateBezierControlPoints'], 'function'), $__.fs.J$__v7918151485_446_979), TAJS_restrictToType(keys[i, 5], 'string'), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp7 = self, (callback, $__.fs.J$__v7918151485_684_985).call(vvv_tmp7, (TAJS_restrictToType((loopable, $__.os.oid310)[TAJS_restrictToType(keys[i, 6], 'string'), 'draw'], 'function'), $__.fs.J$__v7918151485_452_980), TAJS_restrictToType(keys[i, 6], 'string'), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp8 = self, (callback, $__.fs.J$__v7918151485_684_985).call(vvv_tmp8, (TAJS_restrictToType((loopable, $__.os.oid310)[TAJS_restrictToType(keys[i, 7], 'string'), 'setHoverStyle'], 'function'), $__.fs.J$__v7918151485_454_981), TAJS_restrictToType(keys[i, 7], 'string'), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    vvv_tmp9 = self, (callback, $__.fs.J$__v7918151485_684_985).call(vvv_tmp9, (TAJS_restrictToType((loopable, $__.os.oid310)[TAJS_restrictToType(keys[i, 8], 'string'), 'removeHoverStyle'], 'function'), $__.fs.J$__v7918151485_456_982), TAJS_restrictToType(keys[i, 8], 'string'), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < len;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(loopable)) {
    len = loopable.length;
    if (reverse) {
        for (i = len - 1; i >= 0; i--) {
            callback.call(self, loopable[i], i);
        }
    } else {
        for (i = 0; i < len; i++) {
            callback.call(self, loopable[i], i);
        }
    }
} else if (typeof loopable === 'object') {
    keys = Object.keys(loopable);
    len = keys.length;
    for (i = 0; i < len; i++) {
        callback.call(self, loopable[keys[i]], keys[i]);
    }
}});
    (helpers, $__.os.oid88).clone = ($__.fs.J$__v7918151485_682_379 = function J$__v7918151485_682(obj) {
var vvv_return, vvv_switch, vvv_tmp0, objClone;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
obj = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    objClone = $__.os.oid188 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_787 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 17, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid188)[key, 'position'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_787), 16, true, $__.uid);
    return objClone;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    objClone = $__.os.oid195 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_801 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, (value, $__.fs.J$__v7918151485_1168_602), 23, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid195)[key, 'callback'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_801), 18, true, $__.uid);
    return objClone;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    objClone = $__.os.oid194 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_800 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 20, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid194)[key, 'position'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 21, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid194)[key, 'ticks'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 1, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_800), 19, true, $__.uid);
    return objClone;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    objClone = $__.os.oid202 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_815 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, (value, $__.fs.J$__v7918151485_1170_603), 29, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid202)[key, 'callback'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_815), 21, true, $__.uid);
    return objClone;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    objClone = $__.os.oid201 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_814 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 26, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid201)[key, 'position'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 27, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid201)[key, 'ticks'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 3, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_814), 22, true, $__.uid);
    return objClone;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    objClone = $__.os.oid211 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_849 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 38, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid211)[key, 'display'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 39, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid211)[key, 'color'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 40, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid211)[key, 'lineWidth'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_849), 24, true, $__.uid);
    return objClone;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    objClone = $__.os.oid212 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_850 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 43, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid212)[key, 'showLabelBackdrop'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 44, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid212)[key, 'backdropColor'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 45, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid212)[key, 'backdropPaddingY'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 46, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid212)[key, 'backdropPaddingX'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, (value, $__.fs.J$__v7918151485_1168_602), 47, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid212)[key, 'callback'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_850), 25, true, $__.uid);
    return objClone;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    objClone = $__.os.oid213 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_851 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 50, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid213)[key, 'fontSize'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, (value, $__.fs.J$__v7918151485_1481_830), 51, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid213)[key, 'callback'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_851), 26, true, $__.uid);
    return objClone;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    objClone = $__.os.oid210 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_848 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 32, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid210)[key, 'display'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 33, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid210)[key, 'animate'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 34, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid210)[key, 'lineArc'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 35, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid210)[key, 'position'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 36, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid210)[key, 'angleLines'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 5, true, $__.uid));
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 41, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid210)[key, 'ticks'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 6, true, $__.uid));
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 48, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid210)[key, 'pointLabels'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 7, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_848), 27, true, $__.uid);
    return objClone;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    objClone = $__.os.oid235 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_874 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 66, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid235)[key, 'millisecond'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 67, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid235)[key, 'second'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 68, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid235)[key, 'minute'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 69, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid235)[key, 'hour'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 70, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid235)[key, 'day'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 71, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid235)[key, 'week'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 72, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid235)[key, 'month'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 73, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid235)[key, 'quarter'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 74, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid235)[key, 'year'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_874), 29, true, $__.uid);
    return objClone;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    objClone = $__.os.oid234 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_873 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 57, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid234)[key, 'parser'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 58, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid234)[key, 'format'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 59, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid234)[key, 'unit'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 60, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid234)[key, 'round'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 61, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid234)[key, 'displayFormat'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 62, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid234)[key, 'isoWeekday'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 63, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid234)[key, 'minUnit'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 64, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid234)[key, 'displayFormats'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 9, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_873), 30, true, $__.uid);
    return objClone;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    objClone = $__.os.oid236 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_875 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 77, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid236)[key, 'autoSkip'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_875), 31, true, $__.uid);
    return objClone;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    objClone = $__.os.oid233 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_872 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 54, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid233)[key, 'position'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 55, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid233)[key, 'time'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 10, true, $__.uid));
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 75, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid233)[key, 'ticks'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 11, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_872), 32, true, $__.uid);
    return objClone;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    objClone = $__.os.oid277 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_927 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 84, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid277)[key, 'animateRotate'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 85, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid277)[key, 'animateScale'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_927), 36, true, $__.uid);
    return objClone;
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    objClone = $__.os.oid278 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_928 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 89, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid278)[key, 'mode'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_928), 37, true, $__.uid);
    return objClone;
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    objClone = $__.os.oid280 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_930 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, (value, $__.fs.J$__v7918151485_350_922), 95, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid280)[key, 'generateLabels'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_930), 38, true, $__.uid);
    return objClone;
case 16:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 16);
    objClone = $__.os.oid279 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_929 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 93, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid279)[key, 'labels'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 15, true, $__.uid));
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, (value, $__.fs.J$__v7918151485_352_923), 96, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid279)[key, 'onClick'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_929), 39, true, $__.uid);
    return objClone;
case 17:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 17);
    objClone = $__.os.oid282 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_932 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, (value, $__.fs.J$__v7918151485_354_924), 104, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid282)[key, 'title'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, (value, $__.fs.J$__v7918151485_356_925), 105, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid282)[key, 'label'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_932), 40, true, $__.uid);
    return objClone;
case 18:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 18);
    objClone = $__.os.oid281 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_931 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 102, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid281)[key, 'callbacks'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 17, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_931), 41, true, $__.uid);
    return objClone;
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 19);
    objClone = $__.os.oid276 = {};
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, obj, ($__.fs.J$__v7918151485_680_926 = function J$__v7918151485_680(value, key) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 82, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid276)[key, 'animation'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 13, true, $__.uid));
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 86, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid276)[key, 'aspectRatio'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 87, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid276)[key, 'hover'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 14, true, $__.uid));
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, (value, $__.fs.J$__v7918151485_346_921), 90, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid276)[key, 'legendCallback'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 91, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid276)[key, 'legend'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 16, true, $__.uid));
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 97, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid276)[key, 'cutoutPercentage'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 98, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid276)[key, 'rotation'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 99, true, $__.uid);
    typeof value === 'object';
    (objClone, $__.os.oid276)[key, 'circumference'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    vvv_tmp0 = helpers, 'isArray', $__.fs.J$__v7918151485_885_459.call(vvv_tmp0, value, 100, true, $__.uid);
    typeof value === 'object', value !== null;
    (objClone, $__.os.oid276)[key, 'tooltips'] = (vvv_tmp1 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp1, value, 18, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(value)) {
    objClone[key] = value.slice(0);
} else if (typeof value === 'object' && value !== null) {
    objClone[key] = helpers.clone(value);
} else {
    objClone[key] = value;
}}, $__.fs.J$__v7918151485_680_926), 42, true, $__.uid);
    return objClone;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
objClone = {};
helpers.each(obj, function (value, key) {
    if (helpers.isArray(value)) {
        objClone[key] = value.slice(0);
    } else if (typeof value === 'object' && value !== null) {
        objClone[key] = helpers.clone(value);
    } else {
        objClone[key] = value;
    }
});
return objClone;});
    (helpers, $__.os.oid88).extend = ($__.fs.J$__v7918151485_686_380 = function J$__v7918151485_686(base) {
var vvv_return, vvv_switch, vvv_tmp0, setFn, i, ilen;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
base = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    setFn = ($__.fs.J$__v7918151485_684_482 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (base, $__.os.oid94)[key, 'acquireContext'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    (base, $__.os.oid94)[key, 'releaseContext'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    (base, $__.os.oid94)[key, 'addEventListener'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    (base, $__.os.oid94)[key, 'removeEventListener'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_482);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid96), (setFn, $__.fs.J$__v7918151485_684_482), 0, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    setFn = ($__.fs.J$__v7918151485_684_499 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;});
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid104), (setFn, $__.fs.J$__v7918151485_684_499), 1, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    setFn = ($__.fs.J$__v7918151485_684_508 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'initialize'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'pivot'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'transition'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'tooltipPosition'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'hasValue'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_508);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid108), (setFn, $__.fs.J$__v7918151485_684_508), 2, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    setFn = ($__.fs.J$__v7918151485_684_513 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'currentStep'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'numSteps'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'easing'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'render'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'onAnimationProgress'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'onAnimationComplete'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_513);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid112), (setFn, $__.fs.J$__v7918151485_684_513), 3, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    setFn = ($__.fs.J$__v7918151485_684_555 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'initialize'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'clear'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'stop'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'resize'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'ensureScalesHaveIDs'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'buildScales'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'buildOrUpdateControllers'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'resetElements'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'reset'] = value;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    base[key, 'update'] = value;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    base[key, 'updateLayout'] = value;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    base[key, 'updateDatasets'] = value;
    return;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    base[key, 'render'] = value;
    return;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    base[key, 'draw'] = value;
    return;
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    base[key, 'drawDatasets'] = value;
    return;
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    base[key, 'getElementAtEvent'] = value;
    return;
case 16:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 16);
    base[key, 'getElementsAtEvent'] = value;
    return;
case 17:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 17);
    base[key, 'getElementsAtXAxis'] = value;
    return;
case 18:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 18);
    base[key, 'getElementsAtEventForMode'] = value;
    return;
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 19);
    base[key, 'getDatasetAtEvent'] = value;
    return;
case 20:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 20);
    base[key, 'getDatasetMeta'] = value;
    return;
case 21:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 21);
    base[key, 'getVisibleDatasetCount'] = value;
    return;
case 22:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 22);
    base[key, 'isDatasetVisible'] = value;
    return;
case 23:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 23);
    base[key, 'generateLegend'] = value;
    return;
case 24:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 24);
    base[key, 'destroy'] = value;
    return;
case 25:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 25);
    base[key, 'toBase64Image'] = value;
    return;
case 26:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 26);
    base[key, 'initToolTip'] = value;
    return;
case 27:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 27);
    base[key, 'bindEvents'] = value;
    return;
case 28:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 28);
    base[key, 'unbindEvents'] = value;
    return;
case 29:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 29);
    base[key, 'updateHoverStyle'] = value;
    return;
case 30:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 30);
    base[key, 'eventHandler'] = value;
    return;
case 31:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 31);
    base[key, 'handleEvent'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_555);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid119), (setFn, $__.fs.J$__v7918151485_684_555), 4, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    setFn = ($__.fs.J$__v7918151485_684_584 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'datasetElementType'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'dataElementType'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'initialize'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'updateIndex'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'linkScales'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'getDataset'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'getMeta'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'getScaleForId'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'reset'] = value;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    base[key, 'destroy'] = value;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    base[key, 'createMetaDataset'] = value;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    base[key, 'createMetaData'] = value;
    return;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    base[key, 'addElements'] = value;
    return;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    base[key, 'addElementAndReset'] = value;
    return;
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    base[key, 'buildOrUpdateElements'] = value;
    return;
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    base[key, 'update'] = value;
    return;
case 16:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 16);
    base[key, 'draw'] = value;
    return;
case 17:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 17);
    base[key, 'removeHoverStyle'] = value;
    return;
case 18:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 18);
    base[key, 'setHoverStyle'] = value;
    return;
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 19);
    base[key, 'resyncElements'] = value;
    return;
case 20:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 20);
    base[key, 'insertElements'] = value;
    return;
case 21:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 21);
    base[key, 'onDataPush'] = value;
    return;
case 22:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 22);
    base[key, 'onDataPop'] = value;
    return;
case 23:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 23);
    base[key, 'onDataShift'] = value;
    return;
case 24:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 24);
    base[key, 'onDataSplice'] = value;
    return;
case 25:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 25);
    base[key, 'onDataUnshift'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_584);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid122), (setFn, $__.fs.J$__v7918151485_684_584), 5, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    setFn = ($__.fs.J$__v7918151485_684_639 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'getPadding'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'beforeUpdate'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'update'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'afterUpdate'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'beforeSetDimensions'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'setDimensions'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'afterSetDimensions'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'beforeDataLimits'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'determineDataLimits'] = value;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    base[key, 'afterDataLimits'] = value;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    base[key, 'beforeBuildTicks'] = value;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    base[key, 'buildTicks'] = value;
    return;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    base[key, 'afterBuildTicks'] = value;
    return;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    base[key, 'beforeTickToLabelConversion'] = value;
    return;
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    base[key, 'convertTicksToLabels'] = value;
    return;
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    base[key, 'afterTickToLabelConversion'] = value;
    return;
case 16:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 16);
    base[key, 'beforeCalculateTickRotation'] = value;
    return;
case 17:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 17);
    base[key, 'calculateTickRotation'] = value;
    return;
case 18:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 18);
    base[key, 'afterCalculateTickRotation'] = value;
    return;
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 19);
    base[key, 'beforeFit'] = value;
    return;
case 20:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 20);
    base[key, 'fit'] = value;
    return;
case 21:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 21);
    base[key, 'handleMargins'] = value;
    return;
case 22:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 22);
    base[key, 'afterFit'] = value;
    return;
case 23:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 23);
    base[key, 'isHorizontal'] = value;
    return;
case 24:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 24);
    base[key, 'isFullWidth'] = value;
    return;
case 25:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 25);
    base[key, 'getRightValue'] = value;
    return;
case 26:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 26);
    base[key, 'getLabelForIndex'] = value;
    return;
case 27:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 27);
    base[key, 'getPixelForValue'] = value;
    return;
case 28:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 28);
    base[key, 'getValueForPixel'] = value;
    return;
case 29:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 29);
    base[key, 'getPixelForTick'] = value;
    return;
case 30:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 30);
    base[key, 'getPixelForDecimal'] = value;
    return;
case 31:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 31);
    base[key, 'getBasePixel'] = value;
    return;
case 32:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 32);
    base[key, 'getBaseValue'] = value;
    return;
case 33:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 33);
    base[key, 'draw'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_639);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid143), (setFn, $__.fs.J$__v7918151485_684_639), 6, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    setFn = ($__.fs.J$__v7918151485_684_651 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'initialize'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'beforeUpdate'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'update'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'afterUpdate'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'beforeSetDimensions'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'setDimensions'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'afterSetDimensions'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'beforeBuildLabels'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'buildLabels'] = value;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    base[key, 'afterBuildLabels'] = value;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    base[key, 'beforeFit'] = value;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    base[key, 'fit'] = value;
    return;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    base[key, 'afterFit'] = value;
    return;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    base[key, 'isHorizontal'] = value;
    return;
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    base[key, 'draw'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_651);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid147), (setFn, $__.fs.J$__v7918151485_684_651), 7, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    setFn = ($__.fs.J$__v7918151485_684_671 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'initialize'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'beforeUpdate'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'update'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'afterUpdate'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'beforeSetDimensions'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'setDimensions'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'afterSetDimensions'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'beforeBuildLabels'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'buildLabels'] = value;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    base[key, 'afterBuildLabels'] = value;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    base[key, 'beforeFit'] = value;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    base[key, 'fit'] = value;
    return;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    base[key, 'afterFit'] = value;
    return;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    base[key, 'isHorizontal'] = value;
    return;
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    base[key, 'draw'] = value;
    return;
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    base[key, 'handleEvent'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_671);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid153), (setFn, $__.fs.J$__v7918151485_684_671), 8, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    setFn = ($__.fs.J$__v7918151485_684_718 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'initialize'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'getTitle'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'getBeforeBody'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'getBody'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'getAfterBody'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'getFooter'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'update'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'drawCaret'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'drawTitle'] = value;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    base[key, 'drawBody'] = value;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    base[key, 'drawFooter'] = value;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    base[key, 'drawBackground'] = value;
    return;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    base[key, 'draw'] = value;
    return;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    base[key, 'handleEvent'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_718);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid163), (setFn, $__.fs.J$__v7918151485_684_718), 9, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    setFn = ($__.fs.J$__v7918151485_684_731 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'inLabelRange'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'inRange'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'getCenterPoint'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'getArea'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'tooltipPosition'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'draw'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_731);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid168), (setFn, $__.fs.J$__v7918151485_684_731), 10, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    setFn = ($__.fs.J$__v7918151485_684_737 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'draw'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_737);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid172), (setFn, $__.fs.J$__v7918151485_684_737), 11, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    setFn = ($__.fs.J$__v7918151485_684_749 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'inRange'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'inLabelRange'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'inXRange'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'inYRange'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'getCenterPoint'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'getArea'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'tooltipPosition'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'draw'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_749);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid176), (setFn, $__.fs.J$__v7918151485_684_749), 12, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    setFn = ($__.fs.J$__v7918151485_684_765 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'draw'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'height'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'inRange'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'inLabelRange'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'inXRange'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'inYRange'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'getCenterPoint'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'getArea'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'tooltipPosition'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_765);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid180), (setFn, $__.fs.J$__v7918151485_684_765), 13, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    setFn = ($__.fs.J$__v7918151485_684_773 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'handleTickRangeOptions'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'getTickLimit'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'handleDirectionalChanges'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'buildTicks'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'convertTicksToLabels'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_773);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid183), (setFn, $__.fs.J$__v7918151485_684_773), 14, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    setFn = ($__.fs.J$__v7918151485_684_786 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'getLabels'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'determineDataLimits'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'buildTicks'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'getLabelForIndex'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'getPixelForValue'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'getPixelForTick'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'getValueForPixel'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'getBasePixel'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_786);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid187), (setFn, $__.fs.J$__v7918151485_684_786), 15, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 16:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 16);
    setFn = ($__.fs.J$__v7918151485_684_799 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'determineDataLimits'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'getTickLimit'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'handleDirectionalChanges'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'getLabelForIndex'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'getPixelForValue'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'getValueForPixel'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'getPixelForTick'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_799);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid193), (setFn, $__.fs.J$__v7918151485_684_799), 17, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 17:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 17);
    setFn = ($__.fs.J$__v7918151485_684_813 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'determineDataLimits'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'buildTicks'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'convertTicksToLabels'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'getLabelForIndex'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'getPixelForTick'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'getPixelForValue'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'getValueForPixel'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_813);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid200), (setFn, $__.fs.J$__v7918151485_684_813), 20, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 18:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 18);
    setFn = ($__.fs.J$__v7918151485_684_847 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'setDimensions'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'determineDataLimits'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'getTickLimit'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'convertTicksToLabels'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'getLabelForIndex'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'fit'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'setReductions'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'setCenterPoint'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'getIndexAngle'] = value;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    base[key, 'getDistanceFromCenterForValue'] = value;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    base[key, 'getPointPosition'] = value;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    base[key, 'getPointPositionForValue'] = value;
    return;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    base[key, 'getBasePosition'] = value;
    return;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    base[key, 'draw'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_847);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid209), (setFn, $__.fs.J$__v7918151485_684_847), 23, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 19);
    setFn = ($__.fs.J$__v7918151485_684_871 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'initialize'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'getLabelMoment'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'getLabelDiff'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'getMomentStartOf'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'determineDataLimits'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'buildLabelDiffs'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'buildTicks'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'getLabelForIndex'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'tickFormatFunction'] = value;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    base[key, 'convertTicksToLabels'] = value;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    base[key, 'getPixelForValue'] = value;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    base[key, 'getPixelForTick'] = value;
    return;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    base[key, 'getValueForPixel'] = value;
    return;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    base[key, 'parseTime'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_871);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid232), (setFn, $__.fs.J$__v7918151485_684_871), 28, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 20:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 20);
    setFn = ($__.fs.J$__v7918151485_684_893 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'dataElementType'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'initialize'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'getStackCount'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'update'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'updateElement'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'calculateBarBase'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'getRuler'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'calculateBarWidth'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'getStackIndex'] = value;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    base[key, 'calculateBarX'] = value;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    base[key, 'calculateBarY'] = value;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    base[key, 'draw'] = value;
    return;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    base[key, 'setHoverStyle'] = value;
    return;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    base[key, 'removeHoverStyle'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_893);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid245), (setFn, $__.fs.J$__v7918151485_684_893), 33, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 21:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 21);
    setFn = ($__.fs.J$__v7918151485_684_906 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'getStackCount'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'updateElement'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'calculateBarBase'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'getRuler'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'calculateBarHeight'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'getStackIndex'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'calculateBarX'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'calculateBarY'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_906);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid256), (setFn, $__.fs.J$__v7918151485_684_906), 34, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 22:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 22);
    setFn = ($__.fs.J$__v7918151485_684_918 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'dataElementType'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'update'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'updateElement'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'getRadius'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'setHoverStyle'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'removeHoverStyle'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_918);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid266), (setFn, $__.fs.J$__v7918151485_684_918), 35, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 23:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 23);
    setFn = ($__.fs.J$__v7918151485_684_933 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (base, $__.os.oid276)[key, 'cutoutPercentage'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_933);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid283), (setFn, $__.fs.J$__v7918151485_684_933), 43, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 24:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 24);
    setFn = ($__.fs.J$__v7918151485_684_943 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'dataElementType'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'linkScales'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'getRingIndex'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'update'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'updateElement'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'removeHoverStyle'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'calculateTotal'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'calculateCircumference'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'getMaxBorderWidth'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_943);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid284), (setFn, $__.fs.J$__v7918151485_684_943), 44, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 25:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 25);
    setFn = ($__.fs.J$__v7918151485_684_959 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'datasetElementType'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'dataElementType'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'update'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'getPointBackgroundColor'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'getPointBorderColor'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'getPointBorderWidth'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'updateElement'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'calculatePointY'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'updateBezierControlPoints'] = value;
    return;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    base[key, 'draw'] = value;
    return;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    base[key, 'setHoverStyle'] = value;
    return;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    base[key, 'removeHoverStyle'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_959);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid292), (setFn, $__.fs.J$__v7918151485_684_959), 45, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 26:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 26);
    setFn = ($__.fs.J$__v7918151485_684_974 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'dataElementType'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'linkScales'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'update'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'updateElement'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'removeHoverStyle'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'countVisibleElements'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'calculateCircumference'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_974);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid303), (setFn, $__.fs.J$__v7918151485_684_974), 46, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
case 27:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 27);
    setFn = ($__.fs.J$__v7918151485_684_985 = function J$__v7918151485_684(value, key) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], key = arguments[1];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    base[key, 'datasetElementType'] = value;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    base[key, 'dataElementType'] = value;
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    base[key, 'linkScales'] = value;
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    base[key, 'update'] = value;
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    base[key, 'updateElement'] = value;
    return;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    base[key, 'updateBezierControlPoints'] = value;
    return;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    base[key, 'draw'] = value;
    return;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    base[key, 'setHoverStyle'] = value;
    return;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    base[key, 'removeHoverStyle'] = value;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base[key] = value;}, $__.fs.J$__v7918151485_684_985);
    i = 1;
    ilen = (arguments.length, 2);
    i < ilen;
    vvv_tmp0 = helpers, 'each', $__.fs.J$__v7918151485_678_378.call(vvv_tmp0, (arguments[i, 1], $__.os.oid310), (setFn, $__.fs.J$__v7918151485_684_985), 47, true, $__.uid);
    (i = +i + 1) - 1;
    i < ilen;
    return base;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
setFn = function (value, key) {
    base[key] = value;
};
for (var i = 1, ilen = arguments.length; i < ilen; i++) {
    helpers.each(arguments[i], setFn);
}
return base;});
    (helpers, $__.os.oid88).configMerge = ($__.fs.J$__v7918151485_692_381 = function J$__v7918151485_692(_base) {
var vvv_return, vvv_switch, base;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
_base = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base = helpers.clone(_base);
helpers.each(Array.prototype.slice.call(arguments, 1), function (extension) {
    helpers.each(extension, function (value, key) {
        var baseHasProperty = base.hasOwnProperty(key);
        var baseVal = baseHasProperty ? base[key] : {};
        if (key === 'scales') {
            base[key] = helpers.scaleMerge(baseVal, value);
        } else if (key === 'scale') {
            base[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);
        } else if (baseHasProperty && typeof baseVal === 'object' && !helpers.isArray(baseVal) && baseVal !== null && typeof value === 'object' && !helpers.isArray(value)) {
            base[key] = helpers.configMerge(baseVal, value);
        } else {
            base[key] = value;
        }
    });
});
return base;});
    (helpers, $__.os.oid88).scaleMerge = ($__.fs.J$__v7918151485_700_382 = function J$__v7918151485_700(_base, extension) {
var vvv_return, vvv_switch, base;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
_base = arguments[0], extension = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
base = helpers.clone(_base);
helpers.each(extension, function (value, key) {
    if (key === 'xAxes' || key === 'yAxes') {
        if (base.hasOwnProperty(key)) {
            helpers.each(value, function (valueObj, index) {
                var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
                var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);
                if (index >= base[key].length || !base[key][index].type) {
                    base[key].push(helpers.configMerge(axisDefaults, valueObj));
                } else if (valueObj.type && valueObj.type !== base[key][index].type) {
                    base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
                } else {
                    base[key][index] = helpers.configMerge(base[key][index], valueObj);
                }
            });
        } else {
            base[key] = [];
            helpers.each(value, function (valueObj) {
                var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
                base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
            });
        }
    } else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {
        base[key] = helpers.configMerge(base[key], value);
    } else {
        base[key] = value;
    }
});
return base;});
    (helpers, $__.os.oid88).getValueAtIndexOrDefault = ($__.fs.J$__v7918151485_702_383 = function J$__v7918151485_702(value, index, defaultValue) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], index = arguments[1], defaultValue = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (value === undefined || value === null) {
    return defaultValue;
}
if (helpers.isArray(value)) {
    return index < value.length ? value[index] : defaultValue;
}
return value;});
    (helpers, $__.os.oid88).getValueOrDefault = ($__.fs.J$__v7918151485_704_384 = function J$__v7918151485_704(value, defaultValue) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], defaultValue = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return value === undefined ? defaultValue : value;});
    (helpers, $__.os.oid88).indexOf = (TAJS_restrictToType(TAJS_restrictToType(Array.prototype, 'object').indexOf, 'function'), ($__.fs.J$__v7918151485_706_385 = function J$__v7918151485_706(array, item) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], item = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return array.indexOf(item);}));
    (helpers, $__.os.oid88).where = ($__.fs.J$__v7918151485_712_386 = function J$__v7918151485_712(collection, filterCallback) {
var vvv_return, vvv_switch, filtered;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
collection = arguments[0], filterCallback = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(collection) && Array.prototype.filter) {
    return collection.filter(filterCallback);
}
filtered = [];
helpers.each(collection, function (item) {
    if (filterCallback(item)) {
        filtered.push(item);
    }
});
return filtered;});
    (helpers, $__.os.oid88).findIndex = (TAJS_restrictToType(TAJS_restrictToType(Array.prototype, 'object').findIndex, 'function'), ($__.fs.J$__v7918151485_714_387 = function J$__v7918151485_714(array, callback, scope) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0], callback = arguments[1], scope = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return array.findIndex(callback, scope);}));
    (helpers, $__.os.oid88).findNextWhere = ($__.fs.J$__v7918151485_718_388 = function J$__v7918151485_718(arrayToSearch, filterCallback, startIndex) {
var vvv_return, vvv_switch, currentItem;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arrayToSearch = arguments[0], filterCallback = arguments[1], startIndex = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (startIndex === undefined || startIndex === null) {
    startIndex = -1;
}
for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
    currentItem = arrayToSearch[i];
    if (filterCallback(currentItem)) {
        return currentItem;
    }
}});
    (helpers, $__.os.oid88).findPreviousWhere = ($__.fs.J$__v7918151485_720_389 = function J$__v7918151485_720(arrayToSearch, filterCallback, startIndex) {
var vvv_return, vvv_switch, currentItem;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arrayToSearch = arguments[0], filterCallback = arguments[1], startIndex = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (startIndex === undefined || startIndex === null) {
    startIndex = arrayToSearch.length;
}
for (var i = startIndex - 1; i >= 0; i--) {
    currentItem = arrayToSearch[i];
    if (filterCallback(currentItem)) {
        return currentItem;
    }
}});
    (helpers, $__.os.oid88).inherits = ($__.fs.J$__v7918151485_726_390 = function J$__v7918151485_726(extensions) {
var vvv_return, vvv_switch, vvv_tmp0, me, ChartElement, Surrogate;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
extensions = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_497 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_498 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType((me, $__.os.oid88).prototype, 'undefined');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_498)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 1, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType((me, $__.os.oid88).prototype, 'undefined');
    return ChartElement;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_511 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_512 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_512)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 3, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_637 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_638 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_638)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 6, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_649 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_650 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_650)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 7, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_669 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_670 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_670)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 8, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 5:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 5);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_716 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_717 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_717)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 9, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 6:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 6);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_729 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}, $__.fs.J$__v7918151485_722_729_705 = $__.fs.J$__v7918151485_722_729, $__.fs.J$__v7918151485_722_729_753 = $__.fs.J$__v7918151485_722_729, $__.fs.J$__v7918151485_722_729));
    Surrogate = ($__.fs.J$__v7918151485_724_730 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_730)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 10, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 7:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 7);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_735 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}, $__.fs.J$__v7918151485_722_735_726 = $__.fs.J$__v7918151485_722_735, $__.fs.J$__v7918151485_722_735_770 = $__.fs.J$__v7918151485_722_735, $__.fs.J$__v7918151485_722_735));
    Surrogate = ($__.fs.J$__v7918151485_724_736 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_736)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 11, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 8:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 8);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_747 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}, $__.fs.J$__v7918151485_722_747_666 = $__.fs.J$__v7918151485_722_747, $__.fs.J$__v7918151485_722_747_728 = $__.fs.J$__v7918151485_722_747, $__.fs.J$__v7918151485_722_747_772 = $__.fs.J$__v7918151485_722_747, $__.fs.J$__v7918151485_722_747));
    Surrogate = ($__.fs.J$__v7918151485_724_748 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_748)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 12, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 9:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 9);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_763 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}, $__.fs.J$__v7918151485_722_763_619 = $__.fs.J$__v7918151485_722_763, $__.fs.J$__v7918151485_722_763));
    Surrogate = ($__.fs.J$__v7918151485_724_764 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_764)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 13, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 10:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 10);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_771 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_772 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_772)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 14, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 11:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 11);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_784 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_785 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_785)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 15, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 12:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 12);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_797 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_798 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_798)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 16, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 13:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 13);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_811 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_812 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_812)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 17, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 14:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 14);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_845 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_846 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_846)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 18, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 15:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 15);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_869 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_870 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_870)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 19, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 16:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 16);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_891 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_892 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_892)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 20, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 17:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 17);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_904 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_905 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_905)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 21, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 18:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 18);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_916 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_917 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_917)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 22, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 19:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 19);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_941 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_942 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_942)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 24, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 20:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 20);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_957 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_958 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_958)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 25, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 21:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 21);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_972 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_973 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_973)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 26, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
case 22:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 22);
    me = this;
    ChartElement = ((extensions, extensions['hasOwnProperty']('constructor')), ($__.fs.J$__v7918151485_722_983 = function J$__v7918151485_722() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return me.apply(this, arguments);}));
    Surrogate = ($__.fs.J$__v7918151485_724_984 = function J$__v7918151485_724() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    this.constructor = ChartElement;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructor = ChartElement;});
    Surrogate.prototype = TAJS_restrictToType(me.prototype, 'object');
    ChartElement.prototype = new (Surrogate, $__.fs.J$__v7918151485_724_984)(0, true, $__.uid);
    ChartElement.extend = TAJS_restrictToType((helpers, $__.os.oid88).inherits, 'function');
    extensions;
    vvv_tmp0 = helpers, 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, TAJS_restrictToType(ChartElement.prototype, 'object'), extensions, 27, true, $__.uid);
    ChartElement.__super__ = TAJS_restrictToType(me.prototype, 'object');
    return ChartElement;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {
    return me.apply(this, arguments);
};
Surrogate = function () {
    this.constructor = ChartElement;
};
Surrogate.prototype = me.prototype;
ChartElement.prototype = new Surrogate();
ChartElement.extend = helpers.inherits;
if (extensions) {
    helpers.extend(ChartElement.prototype, extensions);
}
ChartElement.__super__ = me.prototype;
return ChartElement;});
    (helpers, $__.os.oid88).noop = ($__.fs.J$__v7918151485_728_391 = function J$__v7918151485_728() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');}, $__.fs.J$__v7918151485_728_391_170 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_220 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_226 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_256 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_258 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_260 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_277 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_281 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_283 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_287 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_289 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_291 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_293 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_295 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_299 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_311 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_315 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_317 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_321 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_323 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_327 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_329 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_333 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_441 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_443 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_707 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_755 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391_774 = $__.fs.J$__v7918151485_728_391, $__.fs.J$__v7918151485_728_391);
    (helpers, $__.os.oid88).uid = (($__.fs.J$__v7918151485_732_392 = function J$__v7918151485_732() {
var vvv_return, vvv_switch, id;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    id = 0;
    return ($__.fs.J$__v7918151485_730_393 = function J$__v7918151485_730() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return id++;});
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
id = 0;
return function () {
    return id++;
};}), $__.fs.J$__v7918151485_732_392)(0, true, $__.uid);
    (helpers, $__.os.oid88).isNumber = ($__.fs.J$__v7918151485_734_394 = function J$__v7918151485_734(n) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
n = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return !isNaN(parseFloat(n)) && isFinite(n);});
    (helpers, $__.os.oid88).almostEquals = ($__.fs.J$__v7918151485_736_395 = function J$__v7918151485_736(x, y, epsilon) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], y = arguments[1], epsilon = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.abs(x - y) < epsilon;});
    (helpers, $__.os.oid88).almostWhole = ($__.fs.J$__v7918151485_738_396 = function J$__v7918151485_738(x, epsilon) {
var vvv_return, vvv_switch, rounded;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0], epsilon = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
rounded = Math.round(x);
return rounded - epsilon < x && rounded + epsilon > x;});
    (helpers, $__.os.oid88).max = ($__.fs.J$__v7918151485_742_397 = function J$__v7918151485_742(array) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return array.reduce(function (max, value) {
    if (!isNaN(value)) {
        return Math.max(max, value);
    }
    return max;
}, Number.NEGATIVE_INFINITY);});
    (helpers, $__.os.oid88).min = ($__.fs.J$__v7918151485_746_398 = function J$__v7918151485_746(array) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
array = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return array.reduce(function (min, value) {
    if (!isNaN(value)) {
        return Math.min(min, value);
    }
    return min;
}, Number.POSITIVE_INFINITY);});
    (helpers, $__.os.oid88).sign = (TAJS_restrictToType(Math.sign, 'function'), ($__.fs.J$__v7918151485_748_399 = function J$__v7918151485_748(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.sign(x);}));
    (helpers, $__.os.oid88).log10 = (TAJS_restrictToType(Math.log10, 'function'), ($__.fs.J$__v7918151485_752_400 = function J$__v7918151485_752(x) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
x = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.log10(x);}));
    (helpers, $__.os.oid88).toRadians = ($__.fs.J$__v7918151485_756_401 = function J$__v7918151485_756(degrees) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
degrees = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return degrees * (Math.PI / 180);});
    (helpers, $__.os.oid88).toDegrees = ($__.fs.J$__v7918151485_758_402 = function J$__v7918151485_758(radians) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
radians = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return radians * (180 / Math.PI);});
    (helpers, $__.os.oid88).getAngleFromPoint = ($__.fs.J$__v7918151485_760_403 = function J$__v7918151485_760(centrePoint, anglePoint) {
var vvv_return, vvv_switch, distanceFromXCenter, distanceFromYCenter, radialDistanceFromCenter, angle;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
centrePoint = arguments[0], anglePoint = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
distanceFromXCenter = anglePoint.x - centrePoint.x;
distanceFromYCenter = anglePoint.y - centrePoint.y;
radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
if (angle < -0.5 * Math.PI) {
    angle += 2 * Math.PI;
}
return {
    angle: angle,
    distance: radialDistanceFromCenter
};});
    (helpers, $__.os.oid88).distanceBetweenPoints = ($__.fs.J$__v7918151485_762_404 = function J$__v7918151485_762(pt1, pt2) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pt1 = arguments[0], pt2 = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));});
    (helpers, $__.os.oid88).aliasPixel = ($__.fs.J$__v7918151485_764_405 = function J$__v7918151485_764(pixelWidth) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pixelWidth = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return pixelWidth % 2 === 0 ? 0 : 0.5;});
    (helpers, $__.os.oid88).splineCurve = ($__.fs.J$__v7918151485_766_406 = function J$__v7918151485_766(firstPoint, middlePoint, afterPoint, t) {
var vvv_return, vvv_switch, previous, current, next, d01, d12, s01, s12, fa, fb;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
firstPoint = arguments[0], middlePoint = arguments[1], afterPoint = arguments[2], t = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
previous = firstPoint.skip ? middlePoint : firstPoint;
current = middlePoint;
next = afterPoint.skip ? middlePoint : afterPoint;
d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
s01 = d01 / (d01 + d12);
s12 = d12 / (d01 + d12);
s01 = isNaN(s01) ? 0 : s01;
s12 = isNaN(s12) ? 0 : s12;
fa = t * s01;
fb = t * s12;
return {
    previous: {
        x: current.x - fa * (next.x - previous.x),
        y: current.y - fa * (next.y - previous.y)
    },
    next: {
        x: current.x + fb * (next.x - previous.x),
        y: current.y + fb * (next.y - previous.y)
    }
};});
    (helpers, $__.os.oid88).EPSILON = (Number.EPSILON, 2.220446049250313e-16);
    (helpers, $__.os.oid88).splineCurveMonotone = ($__.fs.J$__v7918151485_770_407 = function J$__v7918151485_770(points) {
var vvv_return, vvv_switch, pointsWithTangents, pointsLen, i, pointBefore, pointCurrent, pointAfter, slopeDeltaX, alphaK, betaK, tauK, squaredMagnitude, deltaX;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
points = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
pointsWithTangents = (points || []).map(function (point) {
    return {
        model: point._model,
        deltaK: 0,
        mK: 0
    };
});
pointsLen = pointsWithTangents.length;
for (i = 0; i < pointsLen; ++i) {
    pointCurrent = pointsWithTangents[i];
    if (pointCurrent.model.skip) {
        continue;
    }
    pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    if (pointAfter && !pointAfter.model.skip) {
        slopeDeltaX = pointAfter.model.x - pointCurrent.model.x;
        pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
    }
    if (!pointBefore || pointBefore.model.skip) {
        pointCurrent.mK = pointCurrent.deltaK;
    } else if (!pointAfter || pointAfter.model.skip) {
        pointCurrent.mK = pointBefore.deltaK;
    } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
        pointCurrent.mK = 0;
    } else {
        pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
    }
}
for (i = 0; i < pointsLen - 1; ++i) {
    pointCurrent = pointsWithTangents[i];
    pointAfter = pointsWithTangents[i + 1];
    if (pointCurrent.model.skip || pointAfter.model.skip) {
        continue;
    }
    if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
        pointCurrent.mK = pointAfter.mK = 0;
        continue;
    }
    alphaK = pointCurrent.mK / pointCurrent.deltaK;
    betaK = pointAfter.mK / pointCurrent.deltaK;
    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    if (squaredMagnitude <= 9) {
        continue;
    }
    tauK = 3 / Math.sqrt(squaredMagnitude);
    pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
    pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
}
for (i = 0; i < pointsLen; ++i) {
    pointCurrent = pointsWithTangents[i];
    if (pointCurrent.model.skip) {
        continue;
    }
    pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    if (pointBefore && !pointBefore.model.skip) {
        deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
        pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
        pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
    }
    if (pointAfter && !pointAfter.model.skip) {
        deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
        pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
        pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
    }
}});
    (helpers, $__.os.oid88).nextItem = ($__.fs.J$__v7918151485_772_408 = function J$__v7918151485_772(collection, index, loop) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
collection = arguments[0], index = arguments[1], loop = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (loop) {
    return index >= collection.length - 1 ? collection[0] : collection[index + 1];
}
return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];});
    (helpers, $__.os.oid88).previousItem = ($__.fs.J$__v7918151485_774_409 = function J$__v7918151485_774(collection, index, loop) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
collection = arguments[0], index = arguments[1], loop = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (loop) {
    return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
}
return index <= 0 ? collection[0] : collection[index - 1];});
    (helpers, $__.os.oid88).niceNum = ($__.fs.J$__v7918151485_776_410 = function J$__v7918151485_776(range, round) {
var vvv_return, vvv_switch, exponent, fraction, niceFraction;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
range = arguments[0], round = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
exponent = Math.floor(helpers.log10(range));
fraction = range / Math.pow(10, exponent);
if (round) {
    if (fraction < 1.5) {
        niceFraction = 1;
    } else if (fraction < 3) {
        niceFraction = 2;
    } else if (fraction < 7) {
        niceFraction = 5;
    } else {
        niceFraction = 10;
    }
} else if (fraction <= 1) {
    niceFraction = 1;
} else if (fraction <= 2) {
    niceFraction = 2;
} else if (fraction <= 5) {
    niceFraction = 5;
} else {
    niceFraction = 10;
}
return niceFraction * Math.pow(10, exponent);});
    easingEffects = (helpers, $__.os.oid88).easingEffects = $__.os.oid89 = {
        'linear': ($__.fs.J$__v7918151485_778_411 = function J$__v7918151485_778(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t;}),
        'easeInQuad': ($__.fs.J$__v7918151485_780_412 = function J$__v7918151485_780(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t * t;}),
        'easeOutQuad': ($__.fs.J$__v7918151485_782_413 = function J$__v7918151485_782(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return -1 * t * (t - 2);}),
        'easeInOutQuad': ($__.fs.J$__v7918151485_784_414 = function J$__v7918151485_784(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if ((t /= 1 / 2) < 1) {
    return 1 / 2 * t * t;
}
return -1 / 2 * (--t * (t - 2) - 1);}),
        'easeInCubic': ($__.fs.J$__v7918151485_786_415 = function J$__v7918151485_786(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t * t * t;}),
        'easeOutCubic': ($__.fs.J$__v7918151485_788_416 = function J$__v7918151485_788(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 * ((t = t / 1 - 1) * t * t + 1);}),
        'easeInOutCubic': ($__.fs.J$__v7918151485_790_417 = function J$__v7918151485_790(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if ((t /= 1 / 2) < 1) {
    return 1 / 2 * t * t * t;
}
return 1 / 2 * ((t -= 2) * t * t + 2);}),
        'easeInQuart': ($__.fs.J$__v7918151485_792_418 = function J$__v7918151485_792(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t * t * t * t;}),
        'easeOutQuart': ($__.fs.J$__v7918151485_794_419 = function J$__v7918151485_794(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return -1 * ((t = t / 1 - 1) * t * t * t - 1);}),
        'easeInOutQuart': ($__.fs.J$__v7918151485_796_420 = function J$__v7918151485_796(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if ((t /= 1 / 2) < 1) {
    return 1 / 2 * t * t * t * t;
}
return -1 / 2 * ((t -= 2) * t * t * t - 2);}),
        'easeInQuint': ($__.fs.J$__v7918151485_798_421 = function J$__v7918151485_798(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 * (t /= 1) * t * t * t * t;}),
        'easeOutQuint': ($__.fs.J$__v7918151485_800_422 = function J$__v7918151485_800(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);}),
        'easeInOutQuint': ($__.fs.J$__v7918151485_802_423 = function J$__v7918151485_802(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if ((t /= 1 / 2) < 1) {
    return 1 / 2 * t * t * t * t * t;
}
return 1 / 2 * ((t -= 2) * t * t * t * t + 2);}),
        'easeInSine': ($__.fs.J$__v7918151485_804_424 = function J$__v7918151485_804(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;}),
        'easeOutSine': ($__.fs.J$__v7918151485_806_425 = function J$__v7918151485_806(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 * Math.sin(t / 1 * (Math.PI / 2));}),
        'easeInOutSine': ($__.fs.J$__v7918151485_808_426 = function J$__v7918151485_808(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);}),
        'easeInExpo': ($__.fs.J$__v7918151485_810_427 = function J$__v7918151485_810(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t === 0 ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));}),
        'easeOutExpo': ($__.fs.J$__v7918151485_812_428 = function J$__v7918151485_812(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return t === 1 ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);}),
        'easeInOutExpo': ($__.fs.J$__v7918151485_814_429 = function J$__v7918151485_814(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (t === 0) {
    return 0;
}
if (t === 1) {
    return 1;
}
if ((t /= 1 / 2) < 1) {
    return 1 / 2 * Math.pow(2, 10 * (t - 1));
}
return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);}),
        'easeInCirc': ($__.fs.J$__v7918151485_816_430 = function J$__v7918151485_816(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (t >= 1) {
    return t;
}
return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);}),
        'easeOutCirc': ($__.fs.J$__v7918151485_818_431 = function J$__v7918151485_818(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);}),
        'easeInOutCirc': ($__.fs.J$__v7918151485_820_432 = function J$__v7918151485_820(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if ((t /= 1 / 2) < 1) {
    return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
}
return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);}),
        'easeInElastic': ($__.fs.J$__v7918151485_822_433 = function J$__v7918151485_822(t) {
var vvv_return, vvv_switch, s, p, a;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = 1.70158;
p = 0;
a = 1;
if (t === 0) {
    return 0;
}
if ((t /= 1) === 1) {
    return 1;
}
if (!p) {
    p = 1 * 0.3;
}
if (a < Math.abs(1)) {
    a = 1;
    s = p / 4;
} else {
    s = p / (2 * Math.PI) * Math.asin(1 / a);
}
return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));}),
        'easeOutElastic': ($__.fs.J$__v7918151485_824_434 = function J$__v7918151485_824(t) {
var vvv_return, vvv_switch, s, p, a;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = 1.70158;
p = 0;
a = 1;
if (t === 0) {
    return 0;
}
if ((t /= 1) === 1) {
    return 1;
}
if (!p) {
    p = 1 * 0.3;
}
if (a < Math.abs(1)) {
    a = 1;
    s = p / 4;
} else {
    s = p / (2 * Math.PI) * Math.asin(1 / a);
}
return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;}),
        'easeInOutElastic': ($__.fs.J$__v7918151485_826_435 = function J$__v7918151485_826(t) {
var vvv_return, vvv_switch, s, p, a;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = 1.70158;
p = 0;
a = 1;
if (t === 0) {
    return 0;
}
if ((t /= 1 / 2) === 2) {
    return 1;
}
if (!p) {
    p = 1 * (0.3 * 1.5);
}
if (a < Math.abs(1)) {
    a = 1;
    s = p / 4;
} else {
    s = p / (2 * Math.PI) * Math.asin(1 / a);
}
if (t < 1) {
    return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
}
return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;}),
        'easeInBack': ($__.fs.J$__v7918151485_828_436 = function J$__v7918151485_828(t) {
var vvv_return, vvv_switch, s;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = 1.70158;
return 1 * (t /= 1) * t * ((s + 1) * t - s);}),
        'easeOutBack': ($__.fs.J$__v7918151485_830_437 = function J$__v7918151485_830(t) {
var vvv_return, vvv_switch, s;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = 1.70158;
return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);}),
        'easeInOutBack': ($__.fs.J$__v7918151485_832_438 = function J$__v7918151485_832(t) {
var vvv_return, vvv_switch, s;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
s = 1.70158;
if ((t /= 1 / 2) < 1) {
    return 1 / 2 * (t * t * (((s *= 1.525) + 1) * t - s));
}
return 1 / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);}),
        'easeInBounce': ($__.fs.J$__v7918151485_834_439 = function J$__v7918151485_834(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return 1 - easingEffects.easeOutBounce(1 - t);}),
        'easeOutBounce': ($__.fs.J$__v7918151485_836_440 = function J$__v7918151485_836(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if ((t /= 1) < 1 / 2.75) {
    return 1 * (7.5625 * t * t);
} else if (t < 2 / 2.75) {
    return 1 * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75);
} else if (t < 2.5 / 2.75) {
    return 1 * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375);
}
return 1 * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);}),
        'easeInOutBounce': ($__.fs.J$__v7918151485_838_441 = function J$__v7918151485_838(t) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
t = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (t < 1 / 2) {
    return easingEffects.easeInBounce(t * 2) * 0.5;
}
return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;})
    };
    (helpers, $__.os.oid88).requestAnimFrame = (($__.fs.J$__v7918151485_842_442 = function J$__v7918151485_842() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    return TAJS_restrictToType(window.requestAnimationFrame, 'function');
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
    return window.setTimeout(callback, 1000 / 60);
};}), $__.fs.J$__v7918151485_842_442)(0, true, $__.uid);
    (helpers, $__.os.oid88).getRelativePosition = ($__.fs.J$__v7918151485_844_443 = function J$__v7918151485_844(evt, chart) {
var vvv_return, vvv_switch, mouseX, mouseY, e, canvas, boundingRect, touches, paddingLeft, paddingTop, paddingRight, paddingBottom, width, height;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
evt = arguments[0], chart = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
e = evt.originalEvent || evt;
canvas = evt.currentTarget || evt.srcElement;
boundingRect = canvas.getBoundingClientRect();
touches = e.touches;
if (touches && touches.length > 0) {
    mouseX = touches[0].clientX;
    mouseY = touches[0].clientY;
} else {
    mouseX = e.clientX;
    mouseY = e.clientY;
}
paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);
mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);
return {
    x: mouseX,
    y: mouseY
};});
    (helpers, $__.os.oid88).addEvent = ($__.fs.J$__v7918151485_846_444 = function J$__v7918151485_846(node, eventType, method) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], eventType = arguments[1], method = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (node.addEventListener) {
    node.addEventListener(eventType, method);
} else if (node.attachEvent) {
    node.attachEvent('on' + eventType, method);
} else {
    node['on' + eventType] = method;
}});
    (helpers, $__.os.oid88).removeEvent = ($__.fs.J$__v7918151485_848_445 = function J$__v7918151485_848(node, eventType, handler) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], eventType = arguments[1], handler = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (node.removeEventListener) {
    node.removeEventListener(eventType, handler, false);
} else if (node.detachEvent) {
    node.detachEvent('on' + eventType, handler);
} else {
    node['on' + eventType] = helpers.noop;
}});
    (helpers, $__.os.oid88).getConstraintWidth = ($__.fs.J$__v7918151485_853_446 = function J$__v7918151485_853(domNode) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
domNode = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return getConstraintDimension(domNode, 'max-width', 'clientWidth');});
    (helpers, $__.os.oid88).getConstraintHeight = ($__.fs.J$__v7918151485_855_447 = function J$__v7918151485_855(domNode) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
domNode = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return getConstraintDimension(domNode, 'max-height', 'clientHeight');});
    (helpers, $__.os.oid88).getMaximumWidth = ($__.fs.J$__v7918151485_857_448 = function J$__v7918151485_857(domNode) {
var vvv_return, vvv_switch, container, paddingLeft, paddingRight, w, cw;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
domNode = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
container = domNode.parentNode;
paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
w = container.clientWidth - paddingLeft - paddingRight;
cw = helpers.getConstraintWidth(domNode);
return isNaN(cw) ? w : Math.min(w, cw);});
    (helpers, $__.os.oid88).getMaximumHeight = ($__.fs.J$__v7918151485_859_449 = function J$__v7918151485_859(domNode) {
var vvv_return, vvv_switch, container, paddingTop, paddingBottom, h, ch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
domNode = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
container = domNode.parentNode;
paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
h = container.clientHeight - paddingTop - paddingBottom;
ch = helpers.getConstraintHeight(domNode);
return isNaN(ch) ? h : Math.min(h, ch);});
    (helpers, $__.os.oid88).getStyle = ($__.fs.J$__v7918151485_861_450 = function J$__v7918151485_861(el, property) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
el = arguments[0], property = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);});
    (helpers, $__.os.oid88).retinaScale = ($__.fs.J$__v7918151485_863_451 = function J$__v7918151485_863(chart) {
var vvv_return, vvv_switch, pixelRatio, canvas, height, width;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;
if (pixelRatio === 1) {
    return;
}
canvas = chart.canvas;
height = chart.height;
width = chart.width;
canvas.height = height * pixelRatio;
canvas.width = width * pixelRatio;
chart.ctx.scale(pixelRatio, pixelRatio);
canvas.style.height = height + 'px';
canvas.style.width = width + 'px';});
    (helpers, $__.os.oid88).clear = ($__.fs.J$__v7918151485_865_452 = function J$__v7918151485_865(chart) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
chart.ctx.clearRect(0, 0, chart.width, chart.height);});
    (helpers, $__.os.oid88).fontString = ($__.fs.J$__v7918151485_867_453 = function J$__v7918151485_867(pixelSize, fontStyle, fontFamily) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pixelSize = arguments[0], fontStyle = arguments[1], fontFamily = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;});
    (helpers, $__.os.oid88).longestText = ($__.fs.J$__v7918151485_873_454 = function J$__v7918151485_873(ctx, font, arrayOfThings, cache) {
var vvv_return, vvv_switch, data, gc, longest, gcLen;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ctx = arguments[0], font = arguments[1], arrayOfThings = arguments[2], cache = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cache = cache || {};
data = cache.data = cache.data || {};
gc = cache.garbageCollect = cache.garbageCollect || [];
if (cache.font !== font) {
    data = cache.data = {};
    gc = cache.garbageCollect = [];
    cache.font = font;
}
ctx.font = font;
longest = 0;
helpers.each(arrayOfThings, function (thing) {
    if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
        longest = helpers.measureText(ctx, data, gc, longest, thing);
    } else if (helpers.isArray(thing)) {
        helpers.each(thing, function (nestedThing) {
            if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
                longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
            }
        });
    }
});
gcLen = gc.length / 2;
if (gcLen > arrayOfThings.length) {
    for (var i = 0; i < gcLen; i++) {
        delete data[gc[i]];
    }
    gc.splice(0, gcLen);
}
return longest;});
    (helpers, $__.os.oid88).measureText = ($__.fs.J$__v7918151485_875_455 = function J$__v7918151485_875(ctx, data, gc, longest, string) {
var vvv_return, vvv_switch, textWidth;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ctx = arguments[0], data = arguments[1], gc = arguments[2], longest = arguments[3], string = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
textWidth = data[string];
if (!textWidth) {
    textWidth = data[string] = ctx.measureText(string).width;
    gc.push(string);
}
if (textWidth > longest) {
    longest = textWidth;
}
return longest;});
    (helpers, $__.os.oid88).numberOfLabelLines = ($__.fs.J$__v7918151485_879_456 = function J$__v7918151485_879(arrayOfThings) {
var vvv_return, vvv_switch, numberOfLines;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
arrayOfThings = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
numberOfLines = 1;
helpers.each(arrayOfThings, function (thing) {
    if (helpers.isArray(thing)) {
        if (thing.length > numberOfLines) {
            numberOfLines = thing.length;
        }
    }
});
return numberOfLines;});
    (helpers, $__.os.oid88).drawRoundedRectangle = ($__.fs.J$__v7918151485_881_457 = function J$__v7918151485_881(ctx, x, y, width, height, radius) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ctx = arguments[0], x = arguments[1], y = arguments[2], width = arguments[3], height = arguments[4], radius = arguments[5];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ctx.beginPath();
ctx.moveTo(x + radius, y);
ctx.lineTo(x + width - radius, y);
ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
ctx.lineTo(x + width, y + height - radius);
ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
ctx.lineTo(x + radius, y + height);
ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
ctx.lineTo(x, y + radius);
ctx.quadraticCurveTo(x, y, x + radius, y);
ctx.closePath();});
    (helpers, $__.os.oid88).color = ($__.fs.J$__v7918151485_883_458 = function J$__v7918151485_883(c) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
c = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!color) {
    console.error('Color.js not found!');
    return c;
}
if (c instanceof CanvasGradient) {
    return color(Chart.defaults.global.defaultColor);
}
return color(c);});
    (helpers, $__.os.oid88).isArray = (TAJS_restrictToType(Array.isArray, 'function'), ($__.fs.J$__v7918151485_885_459 = function J$__v7918151485_885(obj) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
obj = arguments[0];
switch (vvv_switch) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
case 7:
case 8:
case 9:
case 10:
case 11:
case 12:
case 13:
case 14:
case 15:
case 16:
case 17:
case 18:
case 19:
case 20:
case 21:
case 22:
case 24:
case 25:
case 26:
case 27:
case 28:
case 30:
case 31:
case 32:
case 33:
case 34:
case 35:
case 36:
case 37:
case 38:
case 39:
case 40:
case 41:
case 42:
case 43:
case 44:
case 45:
case 46:
case 48:
case 49:
case 50:
case 52:
case 53:
case 54:
case 55:
case 56:
case 57:
case 58:
case 59:
case 60:
case 61:
case 62:
case 63:
case 64:
case 65:
case 66:
case 67:
case 68:
case 69:
case 70:
case 71:
case 72:
case 73:
case 74:
case 75:
case 76:
case 77:
case 78:
case 79:
case 80:
case 81:
case 82:
case 83:
case 84:
case 85:
case 86:
case 87:
case 88:
case 89:
case 91:
case 92:
case 93:
case 94:
case 97:
case 98:
case 99:
case 100:
case 101:
case 102:
case 103:
case 106:
case 107:
case 108:
case 109:
case 110:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(0 <= vvv_switch && vvv_switch <= 110);
    return Array['isArray'](obj);
case 23:
case 47:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(23 <= vvv_switch && vvv_switch <= 47);
    return Array['isArray']((obj, $__.fs.J$__v7918151485_1168_602));
case 29:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 29);
    return Array['isArray']((obj, $__.fs.J$__v7918151485_1170_603));
case 51:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 51);
    return Array['isArray']((obj, $__.fs.J$__v7918151485_1481_830));
case 90:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 90);
    return Array['isArray']((obj, $__.fs.J$__v7918151485_346_921));
case 95:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 95);
    return Array['isArray']((obj, $__.fs.J$__v7918151485_350_922));
case 96:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 96);
    return Array['isArray']((obj, $__.fs.J$__v7918151485_352_923));
case 104:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 104);
    return Array['isArray']((obj, $__.fs.J$__v7918151485_354_924));
case 105:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 105);
    return Array['isArray']((obj, $__.fs.J$__v7918151485_356_925));
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Array.isArray(obj);}));
    (helpers, $__.os.oid88).arrayEquals = ($__.fs.J$__v7918151485_889_460 = function J$__v7918151485_889(a0, a1) {
var vvv_return, vvv_switch, i, ilen, v0, v1;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
a0 = arguments[0], a1 = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!a0 || !a1 || a0.length !== a1.length) {
    return false;
}
for (i = 0, ilen = a0.length; i < ilen; ++i) {
    v0 = a0[i];
    v1 = a1[i];
    if (v0 instanceof Array && v1 instanceof Array) {
        if (!helpers.arrayEquals(v0, v1)) {
            return false;
        }
    } else if (v0 !== v1) {
        return false;
    }
}
return true;});
    (helpers, $__.os.oid88).callCallback = ($__.fs.J$__v7918151485_891_461 = function J$__v7918151485_891(fn, args, _tArg) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
fn = arguments[0], args = arguments[1], _tArg = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (fn && typeof fn.call === 'function') {
    fn.apply(_tArg, args);
}});
    (helpers, $__.os.oid88).getHoverColor = ($__.fs.J$__v7918151485_893_462 = function J$__v7918151485_893(colorValue) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
colorValue = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return colorValue instanceof CanvasPattern ? colorValue : helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers = {};
helpers.each = function (loopable, callback, self, reverse) {
    var i, len;
    if (helpers.isArray(loopable)) {
        len = loopable.length;
        if (reverse) {
            for (i = len - 1; i >= 0; i--) {
                callback.call(self, loopable[i], i);
            }
        } else {
            for (i = 0; i < len; i++) {
                callback.call(self, loopable[i], i);
            }
        }
    } else if (typeof loopable === 'object') {
        var keys = Object.keys(loopable);
        len = keys.length;
        for (i = 0; i < len; i++) {
            callback.call(self, loopable[keys[i]], keys[i]);
        }
    }
};
helpers.clone = function (obj) {
    var objClone = {};
    helpers.each(obj, function (value, key) {
        if (helpers.isArray(value)) {
            objClone[key] = value.slice(0);
        } else if (typeof value === 'object' && value !== null) {
            objClone[key] = helpers.clone(value);
        } else {
            objClone[key] = value;
        }
    });
    return objClone;
};
helpers.extend = function (base) {
    var setFn = function (value, key) {
        base[key] = value;
    };
    for (var i = 1, ilen = arguments.length; i < ilen; i++) {
        helpers.each(arguments[i], setFn);
    }
    return base;
};
helpers.configMerge = function (_base) {
    var base = helpers.clone(_base);
    helpers.each(Array.prototype.slice.call(arguments, 1), function (extension) {
        helpers.each(extension, function (value, key) {
            var baseHasProperty = base.hasOwnProperty(key);
            var baseVal = baseHasProperty ? base[key] : {};
            if (key === 'scales') {
                base[key] = helpers.scaleMerge(baseVal, value);
            } else if (key === 'scale') {
                base[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);
            } else if (baseHasProperty && typeof baseVal === 'object' && !helpers.isArray(baseVal) && baseVal !== null && typeof value === 'object' && !helpers.isArray(value)) {
                base[key] = helpers.configMerge(baseVal, value);
            } else {
                base[key] = value;
            }
        });
    });
    return base;
};
helpers.scaleMerge = function (_base, extension) {
    var base = helpers.clone(_base);
    helpers.each(extension, function (value, key) {
        if (key === 'xAxes' || key === 'yAxes') {
            if (base.hasOwnProperty(key)) {
                helpers.each(value, function (valueObj, index) {
                    var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
                    var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);
                    if (index >= base[key].length || !base[key][index].type) {
                        base[key].push(helpers.configMerge(axisDefaults, valueObj));
                    } else if (valueObj.type && valueObj.type !== base[key][index].type) {
                        base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
                    } else {
                        base[key][index] = helpers.configMerge(base[key][index], valueObj);
                    }
                });
            } else {
                base[key] = [];
                helpers.each(value, function (valueObj) {
                    var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
                    base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
                });
            }
        } else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {
            base[key] = helpers.configMerge(base[key], value);
        } else {
            base[key] = value;
        }
    });
    return base;
};
helpers.getValueAtIndexOrDefault = function (value, index, defaultValue) {
    if (value === undefined || value === null) {
        return defaultValue;
    }
    if (helpers.isArray(value)) {
        return index < value.length ? value[index] : defaultValue;
    }
    return value;
};
helpers.getValueOrDefault = function (value, defaultValue) {
    return value === undefined ? defaultValue : value;
};
helpers.indexOf = Array.prototype.indexOf ? function (array, item) {
    return array.indexOf(item);
} : function (array, item) {
    for (var i = 0, ilen = array.length; i < ilen; ++i) {
        if (array[i] === item) {
            return i;
        }
    }
    return -1;
};
helpers.where = function (collection, filterCallback) {
    if (helpers.isArray(collection) && Array.prototype.filter) {
        return collection.filter(filterCallback);
    }
    var filtered = [];
    helpers.each(collection, function (item) {
        if (filterCallback(item)) {
            filtered.push(item);
        }
    });
    return filtered;
};
helpers.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {
    return array.findIndex(callback, scope);
} : function (array, callback, scope) {
    scope = scope === undefined ? array : scope;
    for (var i = 0, ilen = array.length; i < ilen; ++i) {
        if (callback.call(scope, array[i], i, array)) {
            return i;
        }
    }
    return -1;
};
helpers.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {
    if (startIndex === undefined || startIndex === null) {
        startIndex = -1;
    }
    for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
        var currentItem = arrayToSearch[i];
        if (filterCallback(currentItem)) {
            return currentItem;
        }
    }
};
helpers.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {
    if (startIndex === undefined || startIndex === null) {
        startIndex = arrayToSearch.length;
    }
    for (var i = startIndex - 1; i >= 0; i--) {
        var currentItem = arrayToSearch[i];
        if (filterCallback(currentItem)) {
            return currentItem;
        }
    }
};
helpers.inherits = function (extensions) {
    var me = this;
    var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {
        return me.apply(this, arguments);
    };
    var Surrogate = function () {
        this.constructor = ChartElement;
    };
    Surrogate.prototype = me.prototype;
    ChartElement.prototype = new Surrogate();
    ChartElement.extend = helpers.inherits;
    if (extensions) {
        helpers.extend(ChartElement.prototype, extensions);
    }
    ChartElement.__super__ = me.prototype;
    return ChartElement;
};
helpers.noop = function () {
};
helpers.uid = function () {
    var id = 0;
    return function () {
        return id++;
    };
}();
helpers.isNumber = function (n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
};
helpers.almostEquals = function (x, y, epsilon) {
    return Math.abs(x - y) < epsilon;
};
helpers.almostWhole = function (x, epsilon) {
    var rounded = Math.round(x);
    return rounded - epsilon < x && rounded + epsilon > x;
};
helpers.max = function (array) {
    return array.reduce(function (max, value) {
        if (!isNaN(value)) {
            return Math.max(max, value);
        }
        return max;
    }, Number.NEGATIVE_INFINITY);
};
helpers.min = function (array) {
    return array.reduce(function (min, value) {
        if (!isNaN(value)) {
            return Math.min(min, value);
        }
        return min;
    }, Number.POSITIVE_INFINITY);
};
helpers.sign = Math.sign ? function (x) {
    return Math.sign(x);
} : function (x) {
    x = +x;
    if (x === 0 || isNaN(x)) {
        return x;
    }
    return x > 0 ? 1 : -1;
};
helpers.log10 = Math.log10 ? function (x) {
    return Math.log10(x);
} : function (x) {
    return Math.log(x) / Math.LN10;
};
helpers.toRadians = function (degrees) {
    return degrees * (Math.PI / 180);
};
helpers.toDegrees = function (radians) {
    return radians * (180 / Math.PI);
};
helpers.getAngleFromPoint = function (centrePoint, anglePoint) {
    var distanceFromXCenter = anglePoint.x - centrePoint.x, distanceFromYCenter = anglePoint.y - centrePoint.y, radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
    var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
    if (angle < -0.5 * Math.PI) {
        angle += 2 * Math.PI;
    }
    return {
        angle: angle,
        distance: radialDistanceFromCenter
    };
};
helpers.distanceBetweenPoints = function (pt1, pt2) {
    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
};
helpers.aliasPixel = function (pixelWidth) {
    return pixelWidth % 2 === 0 ? 0 : 0.5;
};
helpers.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {
    var previous = firstPoint.skip ? middlePoint : firstPoint, current = middlePoint, next = afterPoint.skip ? middlePoint : afterPoint;
    var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
    var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
    var s01 = d01 / (d01 + d12);
    var s12 = d12 / (d01 + d12);
    s01 = isNaN(s01) ? 0 : s01;
    s12 = isNaN(s12) ? 0 : s12;
    var fa = t * s01;
    var fb = t * s12;
    return {
        previous: {
            x: current.x - fa * (next.x - previous.x),
            y: current.y - fa * (next.y - previous.y)
        },
        next: {
            x: current.x + fb * (next.x - previous.x),
            y: current.y + fb * (next.y - previous.y)
        }
    };
};
helpers.EPSILON = Number.EPSILON || 1e-14;
helpers.splineCurveMonotone = function (points) {
    var pointsWithTangents = (points || []).map(function (point) {
        return {
            model: point._model,
            deltaK: 0,
            mK: 0
        };
    });
    var pointsLen = pointsWithTangents.length;
    var i, pointBefore, pointCurrent, pointAfter;
    for (i = 0; i < pointsLen; ++i) {
        pointCurrent = pointsWithTangents[i];
        if (pointCurrent.model.skip) {
            continue;
        }
        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
        if (pointAfter && !pointAfter.model.skip) {
            var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x;
            pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
        }
        if (!pointBefore || pointBefore.model.skip) {
            pointCurrent.mK = pointCurrent.deltaK;
        } else if (!pointAfter || pointAfter.model.skip) {
            pointCurrent.mK = pointBefore.deltaK;
        } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
            pointCurrent.mK = 0;
        } else {
            pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
        }
    }
    var alphaK, betaK, tauK, squaredMagnitude;
    for (i = 0; i < pointsLen - 1; ++i) {
        pointCurrent = pointsWithTangents[i];
        pointAfter = pointsWithTangents[i + 1];
        if (pointCurrent.model.skip || pointAfter.model.skip) {
            continue;
        }
        if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
            pointCurrent.mK = pointAfter.mK = 0;
            continue;
        }
        alphaK = pointCurrent.mK / pointCurrent.deltaK;
        betaK = pointAfter.mK / pointCurrent.deltaK;
        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
        if (squaredMagnitude <= 9) {
            continue;
        }
        tauK = 3 / Math.sqrt(squaredMagnitude);
        pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
        pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
    }
    var deltaX;
    for (i = 0; i < pointsLen; ++i) {
        pointCurrent = pointsWithTangents[i];
        if (pointCurrent.model.skip) {
            continue;
        }
        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
        if (pointBefore && !pointBefore.model.skip) {
            deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
            pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
            pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
        }
        if (pointAfter && !pointAfter.model.skip) {
            deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
            pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
            pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
        }
    }
};
helpers.nextItem = function (collection, index, loop) {
    if (loop) {
        return index >= collection.length - 1 ? collection[0] : collection[index + 1];
    }
    return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
};
helpers.previousItem = function (collection, index, loop) {
    if (loop) {
        return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
    }
    return index <= 0 ? collection[0] : collection[index - 1];
};
helpers.niceNum = function (range, round) {
    var exponent = Math.floor(helpers.log10(range));
    var fraction = range / Math.pow(10, exponent);
    var niceFraction;
    if (round) {
        if (fraction < 1.5) {
            niceFraction = 1;
        } else if (fraction < 3) {
            niceFraction = 2;
        } else if (fraction < 7) {
            niceFraction = 5;
        } else {
            niceFraction = 10;
        }
    } else if (fraction <= 1) {
        niceFraction = 1;
    } else if (fraction <= 2) {
        niceFraction = 2;
    } else if (fraction <= 5) {
        niceFraction = 5;
    } else {
        niceFraction = 10;
    }
    return niceFraction * Math.pow(10, exponent);
};
easingEffects = helpers.easingEffects = {
    linear: function (t) {
        return t;
    },
    easeInQuad: function (t) {
        return t * t;
    },
    easeOutQuad: function (t) {
        return -1 * t * (t - 2);
    },
    easeInOutQuad: function (t) {
        if ((t /= 1 / 2) < 1) {
            return 1 / 2 * t * t;
        }
        return -1 / 2 * (--t * (t - 2) - 1);
    },
    easeInCubic: function (t) {
        return t * t * t;
    },
    easeOutCubic: function (t) {
        return 1 * ((t = t / 1 - 1) * t * t + 1);
    },
    easeInOutCubic: function (t) {
        if ((t /= 1 / 2) < 1) {
            return 1 / 2 * t * t * t;
        }
        return 1 / 2 * ((t -= 2) * t * t + 2);
    },
    easeInQuart: function (t) {
        return t * t * t * t;
    },
    easeOutQuart: function (t) {
        return -1 * ((t = t / 1 - 1) * t * t * t - 1);
    },
    easeInOutQuart: function (t) {
        if ((t /= 1 / 2) < 1) {
            return 1 / 2 * t * t * t * t;
        }
        return -1 / 2 * ((t -= 2) * t * t * t - 2);
    },
    easeInQuint: function (t) {
        return 1 * (t /= 1) * t * t * t * t;
    },
    easeOutQuint: function (t) {
        return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
    },
    easeInOutQuint: function (t) {
        if ((t /= 1 / 2) < 1) {
            return 1 / 2 * t * t * t * t * t;
        }
        return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
    },
    easeInSine: function (t) {
        return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
    },
    easeOutSine: function (t) {
        return 1 * Math.sin(t / 1 * (Math.PI / 2));
    },
    easeInOutSine: function (t) {
        return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
    },
    easeInExpo: function (t) {
        return t === 0 ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
    },
    easeOutExpo: function (t) {
        return t === 1 ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
    },
    easeInOutExpo: function (t) {
        if (t === 0) {
            return 0;
        }
        if (t === 1) {
            return 1;
        }
        if ((t /= 1 / 2) < 1) {
            return 1 / 2 * Math.pow(2, 10 * (t - 1));
        }
        return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
    },
    easeInCirc: function (t) {
        if (t >= 1) {
            return t;
        }
        return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
    },
    easeOutCirc: function (t) {
        return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
    },
    easeInOutCirc: function (t) {
        if ((t /= 1 / 2) < 1) {
            return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
        }
        return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    },
    easeInElastic: function (t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (t === 0) {
            return 0;
        }
        if ((t /= 1) === 1) {
            return 1;
        }
        if (!p) {
            p = 1 * 0.3;
        }
        if (a < Math.abs(1)) {
            a = 1;
            s = p / 4;
        } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
        }
        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
    },
    easeOutElastic: function (t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (t === 0) {
            return 0;
        }
        if ((t /= 1) === 1) {
            return 1;
        }
        if (!p) {
            p = 1 * 0.3;
        }
        if (a < Math.abs(1)) {
            a = 1;
            s = p / 4;
        } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
        }
        return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
    },
    easeInOutElastic: function (t) {
        var s = 1.70158;
        var p = 0;
        var a = 1;
        if (t === 0) {
            return 0;
        }
        if ((t /= 1 / 2) === 2) {
            return 1;
        }
        if (!p) {
            p = 1 * (0.3 * 1.5);
        }
        if (a < Math.abs(1)) {
            a = 1;
            s = p / 4;
        } else {
            s = p / (2 * Math.PI) * Math.asin(1 / a);
        }
        if (t < 1) {
            return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
        }
        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
    },
    easeInBack: function (t) {
        var s = 1.70158;
        return 1 * (t /= 1) * t * ((s + 1) * t - s);
    },
    easeOutBack: function (t) {
        var s = 1.70158;
        return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
    },
    easeInOutBack: function (t) {
        var s = 1.70158;
        if ((t /= 1 / 2) < 1) {
            return 1 / 2 * (t * t * (((s *= 1.525) + 1) * t - s));
        }
        return 1 / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
    },
    easeInBounce: function (t) {
        return 1 - easingEffects.easeOutBounce(1 - t);
    },
    easeOutBounce: function (t) {
        if ((t /= 1) < 1 / 2.75) {
            return 1 * (7.5625 * t * t);
        } else if (t < 2 / 2.75) {
            return 1 * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75);
        } else if (t < 2.5 / 2.75) {
            return 1 * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375);
        }
        return 1 * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);
    },
    easeInOutBounce: function (t) {
        if (t < 1 / 2) {
            return easingEffects.easeInBounce(t * 2) * 0.5;
        }
        return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
    }
};
helpers.requestAnimFrame = function () {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        return window.setTimeout(callback, 1000 / 60);
    };
}();
helpers.getRelativePosition = function (evt, chart) {
    var mouseX, mouseY;
    var e = evt.originalEvent || evt, canvas = evt.currentTarget || evt.srcElement, boundingRect = canvas.getBoundingClientRect();
    var touches = e.touches;
    if (touches && touches.length > 0) {
        mouseX = touches[0].clientX;
        mouseY = touches[0].clientY;
    } else {
        mouseX = e.clientX;
        mouseY = e.clientY;
    }
    var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
    var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
    var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
    var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
    var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
    var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
    mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);
    mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);
    return {
        x: mouseX,
        y: mouseY
    };
};
helpers.addEvent = function (node, eventType, method) {
    if (node.addEventListener) {
        node.addEventListener(eventType, method);
    } else if (node.attachEvent) {
        node.attachEvent('on' + eventType, method);
    } else {
        node['on' + eventType] = method;
    }
};
helpers.removeEvent = function (node, eventType, handler) {
    if (node.removeEventListener) {
        node.removeEventListener(eventType, handler, false);
    } else if (node.detachEvent) {
        node.detachEvent('on' + eventType, handler);
    } else {
        node['on' + eventType] = helpers.noop;
    }
};
helpers.getConstraintWidth = function (domNode) {
    return getConstraintDimension(domNode, 'max-width', 'clientWidth');
};
helpers.getConstraintHeight = function (domNode) {
    return getConstraintDimension(domNode, 'max-height', 'clientHeight');
};
helpers.getMaximumWidth = function (domNode) {
    var container = domNode.parentNode;
    var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
    var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
    var w = container.clientWidth - paddingLeft - paddingRight;
    var cw = helpers.getConstraintWidth(domNode);
    return isNaN(cw) ? w : Math.min(w, cw);
};
helpers.getMaximumHeight = function (domNode) {
    var container = domNode.parentNode;
    var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
    var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
    var h = container.clientHeight - paddingTop - paddingBottom;
    var ch = helpers.getConstraintHeight(domNode);
    return isNaN(ch) ? h : Math.min(h, ch);
};
helpers.getStyle = function (el, property) {
    return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
};
helpers.retinaScale = function (chart) {
    var pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;
    if (pixelRatio === 1) {
        return;
    }
    var canvas = chart.canvas;
    var height = chart.height;
    var width = chart.width;
    canvas.height = height * pixelRatio;
    canvas.width = width * pixelRatio;
    chart.ctx.scale(pixelRatio, pixelRatio);
    canvas.style.height = height + 'px';
    canvas.style.width = width + 'px';
};
helpers.clear = function (chart) {
    chart.ctx.clearRect(0, 0, chart.width, chart.height);
};
helpers.fontString = function (pixelSize, fontStyle, fontFamily) {
    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
};
helpers.longestText = function (ctx, font, arrayOfThings, cache) {
    cache = cache || {};
    var data = cache.data = cache.data || {};
    var gc = cache.garbageCollect = cache.garbageCollect || [];
    if (cache.font !== font) {
        data = cache.data = {};
        gc = cache.garbageCollect = [];
        cache.font = font;
    }
    ctx.font = font;
    var longest = 0;
    helpers.each(arrayOfThings, function (thing) {
        if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
            longest = helpers.measureText(ctx, data, gc, longest, thing);
        } else if (helpers.isArray(thing)) {
            helpers.each(thing, function (nestedThing) {
                if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
                    longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
                }
            });
        }
    });
    var gcLen = gc.length / 2;
    if (gcLen > arrayOfThings.length) {
        for (var i = 0; i < gcLen; i++) {
            delete data[gc[i]];
        }
        gc.splice(0, gcLen);
    }
    return longest;
};
helpers.measureText = function (ctx, data, gc, longest, string) {
    var textWidth = data[string];
    if (!textWidth) {
        textWidth = data[string] = ctx.measureText(string).width;
        gc.push(string);
    }
    if (textWidth > longest) {
        longest = textWidth;
    }
    return longest;
};
helpers.numberOfLabelLines = function (arrayOfThings) {
    var numberOfLines = 1;
    helpers.each(arrayOfThings, function (thing) {
        if (helpers.isArray(thing)) {
            if (thing.length > numberOfLines) {
                numberOfLines = thing.length;
            }
        }
    });
    return numberOfLines;
};
helpers.drawRoundedRectangle = function (ctx, x, y, width, height, radius) {
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
};
helpers.color = function (c) {
    if (!color) {
        console.error('Color.js not found!');
        return c;
    }
    if (c instanceof CanvasGradient) {
        return color(Chart.defaults.global.defaultColor);
    }
    return color(c);
};
helpers.isArray = Array.isArray ? function (obj) {
    return Array.isArray(obj);
} : function (obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
};
helpers.arrayEquals = function (a0, a1) {
    var i, ilen, v0, v1;
    if (!a0 || !a1 || a0.length !== a1.length) {
        return false;
    }
    for (i = 0, ilen = a0.length; i < ilen; ++i) {
        v0 = a0[i];
        v1 = a1[i];
        if (v0 instanceof Array && v1 instanceof Array) {
            if (!helpers.arrayEquals(v0, v1)) {
                return false;
            }
        } else if (v0 !== v1) {
            return false;
        }
    }
    return true;
};
helpers.callCallback = function (fn, args, _tArg) {
    if (fn && typeof fn.call === 'function') {
        fn.apply(_tArg, args);
    }
};
helpers.getHoverColor = function (colorValue) {
    return colorValue instanceof CanvasPattern ? colorValue : helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
color = require(3);
module.exports = function (Chart) {
    var helpers = Chart.helpers = {};
    helpers.each = function (loopable, callback, self, reverse) {
        var i, len;
        if (helpers.isArray(loopable)) {
            len = loopable.length;
            if (reverse) {
                for (i = len - 1; i >= 0; i--) {
                    callback.call(self, loopable[i], i);
                }
            } else {
                for (i = 0; i < len; i++) {
                    callback.call(self, loopable[i], i);
                }
            }
        } else if (typeof loopable === 'object') {
            var keys = Object.keys(loopable);
            len = keys.length;
            for (i = 0; i < len; i++) {
                callback.call(self, loopable[keys[i]], keys[i]);
            }
        }
    };
    helpers.clone = function (obj) {
        var objClone = {};
        helpers.each(obj, function (value, key) {
            if (helpers.isArray(value)) {
                objClone[key] = value.slice(0);
            } else if (typeof value === 'object' && value !== null) {
                objClone[key] = helpers.clone(value);
            } else {
                objClone[key] = value;
            }
        });
        return objClone;
    };
    helpers.extend = function (base) {
        var setFn = function (value, key) {
            base[key] = value;
        };
        for (var i = 1, ilen = arguments.length; i < ilen; i++) {
            helpers.each(arguments[i], setFn);
        }
        return base;
    };
    helpers.configMerge = function (_base) {
        var base = helpers.clone(_base);
        helpers.each(Array.prototype.slice.call(arguments, 1), function (extension) {
            helpers.each(extension, function (value, key) {
                var baseHasProperty = base.hasOwnProperty(key);
                var baseVal = baseHasProperty ? base[key] : {};
                if (key === 'scales') {
                    base[key] = helpers.scaleMerge(baseVal, value);
                } else if (key === 'scale') {
                    base[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);
                } else if (baseHasProperty && typeof baseVal === 'object' && !helpers.isArray(baseVal) && baseVal !== null && typeof value === 'object' && !helpers.isArray(value)) {
                    base[key] = helpers.configMerge(baseVal, value);
                } else {
                    base[key] = value;
                }
            });
        });
        return base;
    };
    helpers.scaleMerge = function (_base, extension) {
        var base = helpers.clone(_base);
        helpers.each(extension, function (value, key) {
            if (key === 'xAxes' || key === 'yAxes') {
                if (base.hasOwnProperty(key)) {
                    helpers.each(value, function (valueObj, index) {
                        var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
                        var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);
                        if (index >= base[key].length || !base[key][index].type) {
                            base[key].push(helpers.configMerge(axisDefaults, valueObj));
                        } else if (valueObj.type && valueObj.type !== base[key][index].type) {
                            base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
                        } else {
                            base[key][index] = helpers.configMerge(base[key][index], valueObj);
                        }
                    });
                } else {
                    base[key] = [];
                    helpers.each(value, function (valueObj) {
                        var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
                        base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
                    });
                }
            } else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {
                base[key] = helpers.configMerge(base[key], value);
            } else {
                base[key] = value;
            }
        });
        return base;
    };
    helpers.getValueAtIndexOrDefault = function (value, index, defaultValue) {
        if (value === undefined || value === null) {
            return defaultValue;
        }
        if (helpers.isArray(value)) {
            return index < value.length ? value[index] : defaultValue;
        }
        return value;
    };
    helpers.getValueOrDefault = function (value, defaultValue) {
        return value === undefined ? defaultValue : value;
    };
    helpers.indexOf = Array.prototype.indexOf ? function (array, item) {
        return array.indexOf(item);
    } : function (array, item) {
        for (var i = 0, ilen = array.length; i < ilen; ++i) {
            if (array[i] === item) {
                return i;
            }
        }
        return -1;
    };
    helpers.where = function (collection, filterCallback) {
        if (helpers.isArray(collection) && Array.prototype.filter) {
            return collection.filter(filterCallback);
        }
        var filtered = [];
        helpers.each(collection, function (item) {
            if (filterCallback(item)) {
                filtered.push(item);
            }
        });
        return filtered;
    };
    helpers.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {
        return array.findIndex(callback, scope);
    } : function (array, callback, scope) {
        scope = scope === undefined ? array : scope;
        for (var i = 0, ilen = array.length; i < ilen; ++i) {
            if (callback.call(scope, array[i], i, array)) {
                return i;
            }
        }
        return -1;
    };
    helpers.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {
        if (startIndex === undefined || startIndex === null) {
            startIndex = -1;
        }
        for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
            var currentItem = arrayToSearch[i];
            if (filterCallback(currentItem)) {
                return currentItem;
            }
        }
    };
    helpers.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {
        if (startIndex === undefined || startIndex === null) {
            startIndex = arrayToSearch.length;
        }
        for (var i = startIndex - 1; i >= 0; i--) {
            var currentItem = arrayToSearch[i];
            if (filterCallback(currentItem)) {
                return currentItem;
            }
        }
    };
    helpers.inherits = function (extensions) {
        var me = this;
        var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {
            return me.apply(this, arguments);
        };
        var Surrogate = function () {
            this.constructor = ChartElement;
        };
        Surrogate.prototype = me.prototype;
        ChartElement.prototype = new Surrogate();
        ChartElement.extend = helpers.inherits;
        if (extensions) {
            helpers.extend(ChartElement.prototype, extensions);
        }
        ChartElement.__super__ = me.prototype;
        return ChartElement;
    };
    helpers.noop = function () {
    };
    helpers.uid = function () {
        var id = 0;
        return function () {
            return id++;
        };
    }();
    helpers.isNumber = function (n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    };
    helpers.almostEquals = function (x, y, epsilon) {
        return Math.abs(x - y) < epsilon;
    };
    helpers.almostWhole = function (x, epsilon) {
        var rounded = Math.round(x);
        return rounded - epsilon < x && rounded + epsilon > x;
    };
    helpers.max = function (array) {
        return array.reduce(function (max, value) {
            if (!isNaN(value)) {
                return Math.max(max, value);
            }
            return max;
        }, Number.NEGATIVE_INFINITY);
    };
    helpers.min = function (array) {
        return array.reduce(function (min, value) {
            if (!isNaN(value)) {
                return Math.min(min, value);
            }
            return min;
        }, Number.POSITIVE_INFINITY);
    };
    helpers.sign = Math.sign ? function (x) {
        return Math.sign(x);
    } : function (x) {
        x = +x;
        if (x === 0 || isNaN(x)) {
            return x;
        }
        return x > 0 ? 1 : -1;
    };
    helpers.log10 = Math.log10 ? function (x) {
        return Math.log10(x);
    } : function (x) {
        return Math.log(x) / Math.LN10;
    };
    helpers.toRadians = function (degrees) {
        return degrees * (Math.PI / 180);
    };
    helpers.toDegrees = function (radians) {
        return radians * (180 / Math.PI);
    };
    helpers.getAngleFromPoint = function (centrePoint, anglePoint) {
        var distanceFromXCenter = anglePoint.x - centrePoint.x, distanceFromYCenter = anglePoint.y - centrePoint.y, radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
        var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
        if (angle < -0.5 * Math.PI) {
            angle += 2 * Math.PI;
        }
        return {
            angle: angle,
            distance: radialDistanceFromCenter
        };
    };
    helpers.distanceBetweenPoints = function (pt1, pt2) {
        return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
    };
    helpers.aliasPixel = function (pixelWidth) {
        return pixelWidth % 2 === 0 ? 0 : 0.5;
    };
    helpers.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {
        var previous = firstPoint.skip ? middlePoint : firstPoint, current = middlePoint, next = afterPoint.skip ? middlePoint : afterPoint;
        var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
        var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
        var s01 = d01 / (d01 + d12);
        var s12 = d12 / (d01 + d12);
        s01 = isNaN(s01) ? 0 : s01;
        s12 = isNaN(s12) ? 0 : s12;
        var fa = t * s01;
        var fb = t * s12;
        return {
            previous: {
                x: current.x - fa * (next.x - previous.x),
                y: current.y - fa * (next.y - previous.y)
            },
            next: {
                x: current.x + fb * (next.x - previous.x),
                y: current.y + fb * (next.y - previous.y)
            }
        };
    };
    helpers.EPSILON = Number.EPSILON || 1e-14;
    helpers.splineCurveMonotone = function (points) {
        var pointsWithTangents = (points || []).map(function (point) {
            return {
                model: point._model,
                deltaK: 0,
                mK: 0
            };
        });
        var pointsLen = pointsWithTangents.length;
        var i, pointBefore, pointCurrent, pointAfter;
        for (i = 0; i < pointsLen; ++i) {
            pointCurrent = pointsWithTangents[i];
            if (pointCurrent.model.skip) {
                continue;
            }
            pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
            pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
            if (pointAfter && !pointAfter.model.skip) {
                var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x;
                pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
            }
            if (!pointBefore || pointBefore.model.skip) {
                pointCurrent.mK = pointCurrent.deltaK;
            } else if (!pointAfter || pointAfter.model.skip) {
                pointCurrent.mK = pointBefore.deltaK;
            } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
                pointCurrent.mK = 0;
            } else {
                pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
            }
        }
        var alphaK, betaK, tauK, squaredMagnitude;
        for (i = 0; i < pointsLen - 1; ++i) {
            pointCurrent = pointsWithTangents[i];
            pointAfter = pointsWithTangents[i + 1];
            if (pointCurrent.model.skip || pointAfter.model.skip) {
                continue;
            }
            if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
                pointCurrent.mK = pointAfter.mK = 0;
                continue;
            }
            alphaK = pointCurrent.mK / pointCurrent.deltaK;
            betaK = pointAfter.mK / pointCurrent.deltaK;
            squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
            if (squaredMagnitude <= 9) {
                continue;
            }
            tauK = 3 / Math.sqrt(squaredMagnitude);
            pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
            pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
        }
        var deltaX;
        for (i = 0; i < pointsLen; ++i) {
            pointCurrent = pointsWithTangents[i];
            if (pointCurrent.model.skip) {
                continue;
            }
            pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
            pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
            if (pointBefore && !pointBefore.model.skip) {
                deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
                pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
                pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
            }
            if (pointAfter && !pointAfter.model.skip) {
                deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
                pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
                pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
            }
        }
    };
    helpers.nextItem = function (collection, index, loop) {
        if (loop) {
            return index >= collection.length - 1 ? collection[0] : collection[index + 1];
        }
        return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
    };
    helpers.previousItem = function (collection, index, loop) {
        if (loop) {
            return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
        }
        return index <= 0 ? collection[0] : collection[index - 1];
    };
    helpers.niceNum = function (range, round) {
        var exponent = Math.floor(helpers.log10(range));
        var fraction = range / Math.pow(10, exponent);
        var niceFraction;
        if (round) {
            if (fraction < 1.5) {
                niceFraction = 1;
            } else if (fraction < 3) {
                niceFraction = 2;
            } else if (fraction < 7) {
                niceFraction = 5;
            } else {
                niceFraction = 10;
            }
        } else if (fraction <= 1) {
            niceFraction = 1;
        } else if (fraction <= 2) {
            niceFraction = 2;
        } else if (fraction <= 5) {
            niceFraction = 5;
        } else {
            niceFraction = 10;
        }
        return niceFraction * Math.pow(10, exponent);
    };
    var easingEffects = helpers.easingEffects = {
        linear: function (t) {
            return t;
        },
        easeInQuad: function (t) {
            return t * t;
        },
        easeOutQuad: function (t) {
            return -1 * t * (t - 2);
        },
        easeInOutQuad: function (t) {
            if ((t /= 1 / 2) < 1) {
                return 1 / 2 * t * t;
            }
            return -1 / 2 * (--t * (t - 2) - 1);
        },
        easeInCubic: function (t) {
            return t * t * t;
        },
        easeOutCubic: function (t) {
            return 1 * ((t = t / 1 - 1) * t * t + 1);
        },
        easeInOutCubic: function (t) {
            if ((t /= 1 / 2) < 1) {
                return 1 / 2 * t * t * t;
            }
            return 1 / 2 * ((t -= 2) * t * t + 2);
        },
        easeInQuart: function (t) {
            return t * t * t * t;
        },
        easeOutQuart: function (t) {
            return -1 * ((t = t / 1 - 1) * t * t * t - 1);
        },
        easeInOutQuart: function (t) {
            if ((t /= 1 / 2) < 1) {
                return 1 / 2 * t * t * t * t;
            }
            return -1 / 2 * ((t -= 2) * t * t * t - 2);
        },
        easeInQuint: function (t) {
            return 1 * (t /= 1) * t * t * t * t;
        },
        easeOutQuint: function (t) {
            return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
        },
        easeInOutQuint: function (t) {
            if ((t /= 1 / 2) < 1) {
                return 1 / 2 * t * t * t * t * t;
            }
            return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
        },
        easeInSine: function (t) {
            return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
        },
        easeOutSine: function (t) {
            return 1 * Math.sin(t / 1 * (Math.PI / 2));
        },
        easeInOutSine: function (t) {
            return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
        },
        easeInExpo: function (t) {
            return t === 0 ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
        },
        easeOutExpo: function (t) {
            return t === 1 ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
        },
        easeInOutExpo: function (t) {
            if (t === 0) {
                return 0;
            }
            if (t === 1) {
                return 1;
            }
            if ((t /= 1 / 2) < 1) {
                return 1 / 2 * Math.pow(2, 10 * (t - 1));
            }
            return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
        },
        easeInCirc: function (t) {
            if (t >= 1) {
                return t;
            }
            return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
        },
        easeOutCirc: function (t) {
            return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
        },
        easeInOutCirc: function (t) {
            if ((t /= 1 / 2) < 1) {
                return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
            }
            return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
        },
        easeInElastic: function (t) {
            var s = 1.70158;
            var p = 0;
            var a = 1;
            if (t === 0) {
                return 0;
            }
            if ((t /= 1) === 1) {
                return 1;
            }
            if (!p) {
                p = 1 * 0.3;
            }
            if (a < Math.abs(1)) {
                a = 1;
                s = p / 4;
            } else {
                s = p / (2 * Math.PI) * Math.asin(1 / a);
            }
            return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
        },
        easeOutElastic: function (t) {
            var s = 1.70158;
            var p = 0;
            var a = 1;
            if (t === 0) {
                return 0;
            }
            if ((t /= 1) === 1) {
                return 1;
            }
            if (!p) {
                p = 1 * 0.3;
            }
            if (a < Math.abs(1)) {
                a = 1;
                s = p / 4;
            } else {
                s = p / (2 * Math.PI) * Math.asin(1 / a);
            }
            return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
        },
        easeInOutElastic: function (t) {
            var s = 1.70158;
            var p = 0;
            var a = 1;
            if (t === 0) {
                return 0;
            }
            if ((t /= 1 / 2) === 2) {
                return 1;
            }
            if (!p) {
                p = 1 * (0.3 * 1.5);
            }
            if (a < Math.abs(1)) {
                a = 1;
                s = p / 4;
            } else {
                s = p / (2 * Math.PI) * Math.asin(1 / a);
            }
            if (t < 1) {
                return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
            }
            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
        },
        easeInBack: function (t) {
            var s = 1.70158;
            return 1 * (t /= 1) * t * ((s + 1) * t - s);
        },
        easeOutBack: function (t) {
            var s = 1.70158;
            return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
        },
        easeInOutBack: function (t) {
            var s = 1.70158;
            if ((t /= 1 / 2) < 1) {
                return 1 / 2 * (t * t * (((s *= 1.525) + 1) * t - s));
            }
            return 1 / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
        },
        easeInBounce: function (t) {
            return 1 - easingEffects.easeOutBounce(1 - t);
        },
        easeOutBounce: function (t) {
            if ((t /= 1) < 1 / 2.75) {
                return 1 * (7.5625 * t * t);
            } else if (t < 2 / 2.75) {
                return 1 * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75);
            } else if (t < 2.5 / 2.75) {
                return 1 * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375);
            }
            return 1 * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);
        },
        easeInOutBounce: function (t) {
            if (t < 1 / 2) {
                return easingEffects.easeInBounce(t * 2) * 0.5;
            }
            return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
        }
    };
    helpers.requestAnimFrame = function () {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
            return window.setTimeout(callback, 1000 / 60);
        };
    }();
    helpers.getRelativePosition = function (evt, chart) {
        var mouseX, mouseY;
        var e = evt.originalEvent || evt, canvas = evt.currentTarget || evt.srcElement, boundingRect = canvas.getBoundingClientRect();
        var touches = e.touches;
        if (touches && touches.length > 0) {
            mouseX = touches[0].clientX;
            mouseY = touches[0].clientY;
        } else {
            mouseX = e.clientX;
            mouseY = e.clientY;
        }
        var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
        var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
        var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
        var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
        var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
        var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
        mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);
        mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);
        return {
            x: mouseX,
            y: mouseY
        };
    };
    helpers.addEvent = function (node, eventType, method) {
        if (node.addEventListener) {
            node.addEventListener(eventType, method);
        } else if (node.attachEvent) {
            node.attachEvent('on' + eventType, method);
        } else {
            node['on' + eventType] = method;
        }
    };
    helpers.removeEvent = function (node, eventType, handler) {
        if (node.removeEventListener) {
            node.removeEventListener(eventType, handler, false);
        } else if (node.detachEvent) {
            node.detachEvent('on' + eventType, handler);
        } else {
            node['on' + eventType] = helpers.noop;
        }
    };
    function parseMaxStyle(styleValue, node, parentProperty) {
        var valueInPixels;
        if (typeof styleValue === 'string') {
            valueInPixels = parseInt(styleValue, 10);
            if (styleValue.indexOf('%') !== -1) {
                valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
            }
        } else {
            valueInPixels = styleValue;
        }
        return valueInPixels;
    }
    function isConstrainedValue(value) {
        return value !== undefined && value !== null && value !== 'none';
    }
    function getConstraintDimension(domNode, maxStyle, percentageProperty) {
        var view = document.defaultView;
        var parentNode = domNode.parentNode;
        var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
        var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
        var hasCNode = isConstrainedValue(constrainedNode);
        var hasCContainer = isConstrainedValue(constrainedContainer);
        var infinity = Number.POSITIVE_INFINITY;
        if (hasCNode || hasCContainer) {
            return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
        }
        return 'none';
    }
    helpers.getConstraintWidth = function (domNode) {
        return getConstraintDimension(domNode, 'max-width', 'clientWidth');
    };
    helpers.getConstraintHeight = function (domNode) {
        return getConstraintDimension(domNode, 'max-height', 'clientHeight');
    };
    helpers.getMaximumWidth = function (domNode) {
        var container = domNode.parentNode;
        var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
        var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
        var w = container.clientWidth - paddingLeft - paddingRight;
        var cw = helpers.getConstraintWidth(domNode);
        return isNaN(cw) ? w : Math.min(w, cw);
    };
    helpers.getMaximumHeight = function (domNode) {
        var container = domNode.parentNode;
        var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
        var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
        var h = container.clientHeight - paddingTop - paddingBottom;
        var ch = helpers.getConstraintHeight(domNode);
        return isNaN(ch) ? h : Math.min(h, ch);
    };
    helpers.getStyle = function (el, property) {
        return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
    };
    helpers.retinaScale = function (chart) {
        var pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;
        if (pixelRatio === 1) {
            return;
        }
        var canvas = chart.canvas;
        var height = chart.height;
        var width = chart.width;
        canvas.height = height * pixelRatio;
        canvas.width = width * pixelRatio;
        chart.ctx.scale(pixelRatio, pixelRatio);
        canvas.style.height = height + 'px';
        canvas.style.width = width + 'px';
    };
    helpers.clear = function (chart) {
        chart.ctx.clearRect(0, 0, chart.width, chart.height);
    };
    helpers.fontString = function (pixelSize, fontStyle, fontFamily) {
        return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
    };
    helpers.longestText = function (ctx, font, arrayOfThings, cache) {
        cache = cache || {};
        var data = cache.data = cache.data || {};
        var gc = cache.garbageCollect = cache.garbageCollect || [];
        if (cache.font !== font) {
            data = cache.data = {};
            gc = cache.garbageCollect = [];
            cache.font = font;
        }
        ctx.font = font;
        var longest = 0;
        helpers.each(arrayOfThings, function (thing) {
            if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
                longest = helpers.measureText(ctx, data, gc, longest, thing);
            } else if (helpers.isArray(thing)) {
                helpers.each(thing, function (nestedThing) {
                    if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
                        longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
                    }
                });
            }
        });
        var gcLen = gc.length / 2;
        if (gcLen > arrayOfThings.length) {
            for (var i = 0; i < gcLen; i++) {
                delete data[gc[i]];
            }
            gc.splice(0, gcLen);
        }
        return longest;
    };
    helpers.measureText = function (ctx, data, gc, longest, string) {
        var textWidth = data[string];
        if (!textWidth) {
            textWidth = data[string] = ctx.measureText(string).width;
            gc.push(string);
        }
        if (textWidth > longest) {
            longest = textWidth;
        }
        return longest;
    };
    helpers.numberOfLabelLines = function (arrayOfThings) {
        var numberOfLines = 1;
        helpers.each(arrayOfThings, function (thing) {
            if (helpers.isArray(thing)) {
                if (thing.length > numberOfLines) {
                    numberOfLines = thing.length;
                }
            }
        });
        return numberOfLines;
    };
    helpers.drawRoundedRectangle = function (ctx, x, y, width, height, radius) {
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
    };
    helpers.color = function (c) {
        if (!color) {
            console.error('Color.js not found!');
            return c;
        }
        if (c instanceof CanvasGradient) {
            return color(Chart.defaults.global.defaultColor);
        }
        return color(c);
    };
    helpers.isArray = Array.isArray ? function (obj) {
        return Array.isArray(obj);
    } : function (obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
    };
    helpers.arrayEquals = function (a0, a1) {
        var i, ilen, v0, v1;
        if (!a0 || !a1 || a0.length !== a1.length) {
            return false;
        }
        for (i = 0, ilen = a0.length; i < ilen; ++i) {
            v0 = a0[i];
            v1 = a1[i];
            if (v0 instanceof Array && v1 instanceof Array) {
                if (!helpers.arrayEquals(v0, v1)) {
                    return false;
                }
            } else if (v0 !== v1) {
                return false;
            }
        }
        return true;
    };
    helpers.callCallback = function (fn, args, _tArg) {
        if (fn && typeof fn.call === 'function') {
            fn.apply(_tArg, args);
        }
    };
    helpers.getHoverColor = function (colorValue) {
        return colorValue instanceof CanvasPattern ? colorValue : helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
    };
};}, $__.fs.J$__v7918151485_897_31),
            $__.os.oid25 = {
                '3': 3
            }
        ],
        27: [
            ($__.fs.J$__v7918151485_936_32 = function J$__v7918151485_936(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid156).exports = ($__.fs.J$__v7918151485_934_677 = function J$__v7918151485_934(Chart) {
var vvv_return, vvv_switch, helpers, getRelativePosition, parseVisibleItems, getIntersectItems, getNearestItems, indexMode;
getRelativePosition = function getRelativePosition(e, chart) {
    if (e.native) {
        return {
            x: e.x,
            y: e.y
        };
    }
    return helpers.getRelativePosition(e, chart);
};
parseVisibleItems = function parseVisibleItems(chart, handler) {
    var datasets = chart.data.datasets;
    var meta, i, j, ilen, jlen;
    for (i = 0, ilen = datasets.length; i < ilen; ++i) {
        if (!chart.isDatasetVisible(i)) {
            continue;
        }
        meta = chart.getDatasetMeta(i);
        for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
            var element = meta.data[j];
            if (!element._view.skip) {
                handler(element);
            }
        }
    }
};
getIntersectItems = function getIntersectItems(chart, position) {
    var elements = [];
    parseVisibleItems(chart, function (element) {
        if (element.inRange(position.x, position.y)) {
            elements.push(element);
        }
    });
    return elements;
};
getNearestItems = function getNearestItems(chart, position, intersect, distanceMetric) {
    var minDistance = Number.POSITIVE_INFINITY;
    var nearestItems = [];
    if (!distanceMetric) {
        distanceMetric = helpers.distanceBetweenPoints;
    }
    parseVisibleItems(chart, function (element) {
        if (intersect && !element.inRange(position.x, position.y)) {
            return;
        }
        var center = element.getCenterPoint();
        var distance = distanceMetric(position, center);
        if (distance < minDistance) {
            nearestItems = [element];
            minDistance = distance;
        } else if (distance === minDistance) {
            nearestItems.push(element);
        }
    });
    return nearestItems;
};
indexMode = function indexMode(chart, e, options) {
    var position = getRelativePosition(e, chart.chart);
    var distanceMetric = function (pt1, pt2) {
        return Math.abs(pt1.x - pt2.x);
    };
    var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
    var elements = [];
    if (!items.length) {
        return [];
    }
    chart.data.datasets.forEach(function (dataset, datasetIndex) {
        if (chart.isDatasetVisible(datasetIndex)) {
            var meta = chart.getDatasetMeta(datasetIndex), element = meta.data[items[0]._index];
            if (element && !element._view.skip) {
                elements.push(element);
            }
        }
    });
    return elements;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    getRelativePosition = ($__.fs.getRelativePosition_678 = function getRelativePosition(e, chart) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0], chart = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (e.native) {
    return {
        x: e.x,
        y: e.y
    };
}
return helpers.getRelativePosition(e, chart);});
    parseVisibleItems = ($__.fs.parseVisibleItems_679 = function parseVisibleItems(chart, handler) {
var vvv_return, vvv_switch, datasets, meta, i, j, ilen, jlen, element;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], handler = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
datasets = chart.data.datasets;
for (i = 0, ilen = datasets.length; i < ilen; ++i) {
    if (!chart.isDatasetVisible(i)) {
        continue;
    }
    meta = chart.getDatasetMeta(i);
    for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
        element = meta.data[j];
        if (!element._view.skip) {
            handler(element);
        }
    }
}});
    getIntersectItems = ($__.fs.getIntersectItems_680 = function getIntersectItems(chart, position) {
var vvv_return, vvv_switch, elements;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], position = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
elements = [];
parseVisibleItems(chart, function (element) {
    if (element.inRange(position.x, position.y)) {
        elements.push(element);
    }
});
return elements;});
    getNearestItems = ($__.fs.getNearestItems_681 = function getNearestItems(chart, position, intersect, distanceMetric) {
var vvv_return, vvv_switch, minDistance, nearestItems;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], position = arguments[1], intersect = arguments[2], distanceMetric = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
minDistance = Number.POSITIVE_INFINITY;
nearestItems = [];
if (!distanceMetric) {
    distanceMetric = helpers.distanceBetweenPoints;
}
parseVisibleItems(chart, function (element) {
    if (intersect && !element.inRange(position.x, position.y)) {
        return;
    }
    var center = element.getCenterPoint();
    var distance = distanceMetric(position, center);
    if (distance < minDistance) {
        nearestItems = [element];
        minDistance = distance;
    } else if (distance === minDistance) {
        nearestItems.push(element);
    }
});
return nearestItems;});
    indexMode = ($__.fs.indexMode_682 = function indexMode(chart, e, options) {
var vvv_return, vvv_switch, position, distanceMetric, items, elements;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], e = arguments[1], options = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
position = getRelativePosition(e, chart.chart);
distanceMetric = function (pt1, pt2) {
    return Math.abs(pt1.x - pt2.x);
};
items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
elements = [];
if (!items.length) {
    return [];
}
chart.data.datasets.forEach(function (dataset, datasetIndex) {
    if (chart.isDatasetVisible(datasetIndex)) {
        var meta = chart.getDatasetMeta(datasetIndex), element = meta.data[items[0]._index];
        if (element && !element._view.skip) {
            elements.push(element);
        }
    }
});
return elements;});
    helpers = (Chart.helpers, $__.os.oid88);
    Chart.Interaction = $__.os.oid158 = {
        'modes': $__.os.oid157 = {
            'single': ($__.fs.J$__v7918151485_914_683 = function J$__v7918151485_914(chart, e) {
var vvv_return, vvv_switch, position, elements;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], e = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
position = getRelativePosition(e, chart.chart);
elements = [];
parseVisibleItems(chart, function (element) {
    if (element.inRange(position.x, position.y)) {
        elements.push(element);
        return elements;
    }
});
return elements.slice(0, 1);}),
            'label': indexMode,
            'index': indexMode,
            'dataset': ($__.fs.J$__v7918151485_916_684 = function J$__v7918151485_916(chart, e, options) {
var vvv_return, vvv_switch, position, items;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], e = arguments[1], options = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
position = getRelativePosition(e, chart.chart);
items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false);
if (items.length > 0) {
    items = chart.getDatasetMeta(items[0]._datasetIndex).data;
}
return items;}),
            'x-axis': ($__.fs.J$__v7918151485_918_685 = function J$__v7918151485_918(chart, e) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], e = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return indexMode(chart, e, true);}),
            'point': ($__.fs.J$__v7918151485_920_686 = function J$__v7918151485_920(chart, e) {
var vvv_return, vvv_switch, position;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], e = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
position = getRelativePosition(e, chart.chart);
return getIntersectItems(chart, position);}),
            'nearest': ($__.fs.J$__v7918151485_924_687 = function J$__v7918151485_924(chart, e, options) {
var vvv_return, vvv_switch, position, nearestItems;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], e = arguments[1], options = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
position = getRelativePosition(e, chart.chart);
nearestItems = getNearestItems(chart, position, options.intersect);
if (nearestItems.length > 1) {
    nearestItems.sort(function (a, b) {
        var sizeA = a.getArea();
        var sizeB = b.getArea();
        var ret = sizeA - sizeB;
        if (ret === 0) {
            ret = a._datasetIndex - b._datasetIndex;
        }
        return ret;
    });
}
return nearestItems.slice(0, 1);}),
            'x': ($__.fs.J$__v7918151485_928_688 = function J$__v7918151485_928(chart, e, options) {
var vvv_return, vvv_switch, position, items, intersectsItem;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], e = arguments[1], options = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
position = getRelativePosition(e, chart.chart);
items = [];
intersectsItem = false;
parseVisibleItems(chart, function (element) {
    if (element.inXRange(position.x)) {
        items.push(element);
    }
    if (element.inRange(position.x, position.y)) {
        intersectsItem = true;
    }
});
if (options.intersect && !intersectsItem) {
    items = [];
}
return items;}),
            'y': ($__.fs.J$__v7918151485_932_689 = function J$__v7918151485_932(chart, e, options) {
var vvv_return, vvv_switch, position, items, intersectsItem;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], e = arguments[1], options = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
position = getRelativePosition(e, chart.chart);
items = [];
intersectsItem = false;
parseVisibleItems(chart, function (element) {
    if (element.inYRange(position.y)) {
        items.push(element);
    }
    if (element.inRange(position.x, position.y)) {
        intersectsItem = true;
    }
});
if (options.intersect && !intersectsItem) {
    items = [];
}
return items;})
        }
    };
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.Interaction = {
    modes: {
        single: function (chart, e) {
            var position = getRelativePosition(e, chart.chart);
            var elements = [];
            parseVisibleItems(chart, function (element) {
                if (element.inRange(position.x, position.y)) {
                    elements.push(element);
                    return elements;
                }
            });
            return elements.slice(0, 1);
        },
        label: indexMode,
        index: indexMode,
        dataset: function (chart, e, options) {
            var position = getRelativePosition(e, chart.chart);
            var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false);
            if (items.length > 0) {
                items = chart.getDatasetMeta(items[0]._datasetIndex).data;
            }
            return items;
        },
        'x-axis': function (chart, e) {
            return indexMode(chart, e, true);
        },
        point: function (chart, e) {
            var position = getRelativePosition(e, chart.chart);
            return getIntersectItems(chart, position);
        },
        nearest: function (chart, e, options) {
            var position = getRelativePosition(e, chart.chart);
            var nearestItems = getNearestItems(chart, position, options.intersect);
            if (nearestItems.length > 1) {
                nearestItems.sort(function (a, b) {
                    var sizeA = a.getArea();
                    var sizeB = b.getArea();
                    var ret = sizeA - sizeB;
                    if (ret === 0) {
                        ret = a._datasetIndex - b._datasetIndex;
                    }
                    return ret;
                });
            }
            return nearestItems.slice(0, 1);
        },
        x: function (chart, e, options) {
            var position = getRelativePosition(e, chart.chart);
            var items = [];
            var intersectsItem = false;
            parseVisibleItems(chart, function (element) {
                if (element.inXRange(position.x)) {
                    items.push(element);
                }
                if (element.inRange(position.x, position.y)) {
                    intersectsItem = true;
                }
            });
            if (options.intersect && !intersectsItem) {
                items = [];
            }
            return items;
        },
        y: function (chart, e, options) {
            var position = getRelativePosition(e, chart.chart);
            var items = [];
            var intersectsItem = false;
            parseVisibleItems(chart, function (element) {
                if (element.inYRange(position.y)) {
                    items.push(element);
                }
                if (element.inRange(position.x, position.y)) {
                    intersectsItem = true;
                }
            });
            if (options.intersect && !intersectsItem) {
                items = [];
            }
            return items;
        }
    }
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    function getRelativePosition(e, chart) {
        if (e.native) {
            return {
                x: e.x,
                y: e.y
            };
        }
        return helpers.getRelativePosition(e, chart);
    }
    function parseVisibleItems(chart, handler) {
        var datasets = chart.data.datasets;
        var meta, i, j, ilen, jlen;
        for (i = 0, ilen = datasets.length; i < ilen; ++i) {
            if (!chart.isDatasetVisible(i)) {
                continue;
            }
            meta = chart.getDatasetMeta(i);
            for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
                var element = meta.data[j];
                if (!element._view.skip) {
                    handler(element);
                }
            }
        }
    }
    function getIntersectItems(chart, position) {
        var elements = [];
        parseVisibleItems(chart, function (element) {
            if (element.inRange(position.x, position.y)) {
                elements.push(element);
            }
        });
        return elements;
    }
    function getNearestItems(chart, position, intersect, distanceMetric) {
        var minDistance = Number.POSITIVE_INFINITY;
        var nearestItems = [];
        if (!distanceMetric) {
            distanceMetric = helpers.distanceBetweenPoints;
        }
        parseVisibleItems(chart, function (element) {
            if (intersect && !element.inRange(position.x, position.y)) {
                return;
            }
            var center = element.getCenterPoint();
            var distance = distanceMetric(position, center);
            if (distance < minDistance) {
                nearestItems = [element];
                minDistance = distance;
            } else if (distance === minDistance) {
                nearestItems.push(element);
            }
        });
        return nearestItems;
    }
    function indexMode(chart, e, options) {
        var position = getRelativePosition(e, chart.chart);
        var distanceMetric = function (pt1, pt2) {
            return Math.abs(pt1.x - pt2.x);
        };
        var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
        var elements = [];
        if (!items.length) {
            return [];
        }
        chart.data.datasets.forEach(function (dataset, datasetIndex) {
            if (chart.isDatasetVisible(datasetIndex)) {
                var meta = chart.getDatasetMeta(datasetIndex), element = meta.data[items[0]._index];
                if (element && !element._view.skip) {
                    elements.push(element);
                }
            }
        });
        return elements;
    }
    Chart.Interaction = {
        modes: {
            single: function (chart, e) {
                var position = getRelativePosition(e, chart.chart);
                var elements = [];
                parseVisibleItems(chart, function (element) {
                    if (element.inRange(position.x, position.y)) {
                        elements.push(element);
                        return elements;
                    }
                });
                return elements.slice(0, 1);
            },
            label: indexMode,
            index: indexMode,
            dataset: function (chart, e, options) {
                var position = getRelativePosition(e, chart.chart);
                var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false);
                if (items.length > 0) {
                    items = chart.getDatasetMeta(items[0]._datasetIndex).data;
                }
                return items;
            },
            'x-axis': function (chart, e) {
                return indexMode(chart, e, true);
            },
            point: function (chart, e) {
                var position = getRelativePosition(e, chart.chart);
                return getIntersectItems(chart, position);
            },
            nearest: function (chart, e, options) {
                var position = getRelativePosition(e, chart.chart);
                var nearestItems = getNearestItems(chart, position, options.intersect);
                if (nearestItems.length > 1) {
                    nearestItems.sort(function (a, b) {
                        var sizeA = a.getArea();
                        var sizeB = b.getArea();
                        var ret = sizeA - sizeB;
                        if (ret === 0) {
                            ret = a._datasetIndex - b._datasetIndex;
                        }
                        return ret;
                    });
                }
                return nearestItems.slice(0, 1);
            },
            x: function (chart, e, options) {
                var position = getRelativePosition(e, chart.chart);
                var items = [];
                var intersectsItem = false;
                parseVisibleItems(chart, function (element) {
                    if (element.inXRange(position.x)) {
                        items.push(element);
                    }
                    if (element.inRange(position.x, position.y)) {
                        intersectsItem = true;
                    }
                });
                if (options.intersect && !intersectsItem) {
                    items = [];
                }
                return items;
            },
            y: function (chart, e, options) {
                var position = getRelativePosition(e, chart.chart);
                var items = [];
                var intersectsItem = false;
                parseVisibleItems(chart, function (element) {
                    if (element.inYRange(position.y)) {
                        items.push(element);
                    }
                    if (element.inRange(position.x, position.y)) {
                        intersectsItem = true;
                    }
                });
                if (options.intersect && !intersectsItem) {
                    items = [];
                }
                return items;
            }
        }
    };
};}, $__.fs.J$__v7918151485_936_32),
            $__.os.oid26 = {}
        ],
        28: [
            ($__.fs.J$__v7918151485_944_33 = function J$__v7918151485_944(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid53).exports = ($__.fs.J$__v7918151485_942_57 = function J$__v7918151485_942() {
var vvv_return, vvv_switch, Chart;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    Chart = ($__.fs.J$__v7918151485_938_58 = function J$__v7918151485_938(item, config) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
item = arguments[0], config = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.controller = new Chart.Controller(item, config, this);
return this.controller;});
    Chart.defaults = $__.os.oid57 = {
        'global': $__.os.oid56 = {
            'responsive': true,
            'responsiveAnimationDuration': 0,
            'maintainAspectRatio': true,
            'events': [
                'mousemove',
                'mouseout',
                'click',
                'touchstart',
                'touchmove'
            ],
            'hover': $__.os.oid54 = {
                'onHover': null,
                'mode': 'nearest',
                'intersect': true,
                'animationDuration': 400
            },
            'onClick': null,
            'defaultColor': 'rgba(0,0,0,0.1)',
            'defaultFontColor': '#666',
            'defaultFontFamily': '\'Helvetica Neue\', \'Helvetica\', \'Arial\', sans-serif',
            'defaultFontSize': 12,
            'defaultFontStyle': 'normal',
            'showLines': true,
            'elements': $__.os.oid55 = {},
            'legendCallback': ($__.fs.J$__v7918151485_940_59 = function J$__v7918151485_940(chart) {
var vvv_return, vvv_switch, text;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
text = [];
text.push('<ul class="' + chart.id + '-legend">');
for (var i = 0; i < chart.data.datasets.length; i++) {
    text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
    if (chart.data.datasets[i].label) {
        text.push(chart.data.datasets[i].label);
    }
    text.push('</li>');
}
text.push('</ul>');
return text.join('');})
        }
    };
    Chart.Chart = Chart;
    return Chart;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart = function (item, config) {
    this.controller = new Chart.Controller(item, config, this);
    return this.controller;
};
Chart.defaults = {
    global: {
        responsive: true,
        responsiveAnimationDuration: 0,
        maintainAspectRatio: true,
        events: [
            'mousemove',
            'mouseout',
            'click',
            'touchstart',
            'touchmove'
        ],
        hover: {
            onHover: null,
            mode: 'nearest',
            intersect: true,
            animationDuration: 400
        },
        onClick: null,
        defaultColor: 'rgba(0,0,0,0.1)',
        defaultFontColor: '#666',
        defaultFontFamily: '\'Helvetica Neue\', \'Helvetica\', \'Arial\', sans-serif',
        defaultFontSize: 12,
        defaultFontStyle: 'normal',
        showLines: true,
        elements: {},
        legendCallback: function (chart) {
            var text = [];
            text.push('<ul class="' + chart.id + '-legend">');
            for (var i = 0; i < chart.data.datasets.length; i++) {
                text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
                if (chart.data.datasets[i].label) {
                    text.push(chart.data.datasets[i].label);
                }
                text.push('</li>');
            }
            text.push('</ul>');
            return text.join('');
        }
    }
};
Chart.Chart = Chart;
return Chart;});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function () {
    var Chart = function (item, config) {
        this.controller = new Chart.Controller(item, config, this);
        return this.controller;
    };
    Chart.defaults = {
        global: {
            responsive: true,
            responsiveAnimationDuration: 0,
            maintainAspectRatio: true,
            events: [
                'mousemove',
                'mouseout',
                'click',
                'touchstart',
                'touchmove'
            ],
            hover: {
                onHover: null,
                mode: 'nearest',
                intersect: true,
                animationDuration: 400
            },
            onClick: null,
            defaultColor: 'rgba(0,0,0,0.1)',
            defaultFontColor: '#666',
            defaultFontFamily: '\'Helvetica Neue\', \'Helvetica\', \'Arial\', sans-serif',
            defaultFontSize: 12,
            defaultFontStyle: 'normal',
            showLines: true,
            elements: {},
            legendCallback: function (chart) {
                var text = [];
                text.push('<ul class="' + chart.id + '-legend">');
                for (var i = 0; i < chart.data.datasets.length; i++) {
                    text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
                    if (chart.data.datasets[i].label) {
                        text.push(chart.data.datasets[i].label);
                    }
                    text.push('</li>');
                }
                text.push('</ul>');
                return text.join('');
            }
        }
    };
    Chart.Chart = Chart;
    return Chart;
};}, $__.fs.J$__v7918151485_944_33),
            $__.os.oid27 = {}
        ],
        29: [
            ($__.fs.J$__v7918151485_1006_34 = function J$__v7918151485_1006(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid124).exports = ($__.fs.J$__v7918151485_1004_586 = function J$__v7918151485_1004(Chart) {
var vvv_return, vvv_switch, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    Chart.layoutService = $__.os.oid126 = {
        'defaults': $__.os.oid125 = {},
        'addBox': ($__.fs.J$__v7918151485_946_587 = function J$__v7918151485_946(chartInstance, box) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0], box = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!chartInstance.boxes) {
    chartInstance.boxes = [];
}
chartInstance.boxes.push(box);}),
        'removeBox': ($__.fs.J$__v7918151485_948_588 = function J$__v7918151485_948(chartInstance, box) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0], box = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!chartInstance.boxes) {
    return;
}
chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);}),
        'update': ($__.fs.J$__v7918151485_1002_589 = function J$__v7918151485_1002(chartInstance, width, height) {
var vvv_return, vvv_switch, layoutOptions, padding, leftPadding, rightPadding, topPadding, bottomPadding, leftBoxes, rightBoxes, topBoxes, bottomBoxes, chartAreaBoxes, chartWidth, chartHeight, chartAreaWidth, chartAreaHeight, verticalBoxWidth, horizontalBoxHeight, maxChartAreaWidth, maxChartAreaHeight, minBoxSizes, getMinimumBoxSize, maxHorizontalLeftPadding, maxHorizontalRightPadding, maxVerticalTopPadding, maxVerticalBottomPadding, totalLeftBoxesWidth, totalRightBoxesWidth, totalTopBoxesHeight, totalBottomBoxesHeight, fitBox, finalFitVerticalBox, leftPaddingAddition, topPaddingAddition, newMaxChartAreaHeight, newMaxChartAreaWidth, left, top, placeBox;
getMinimumBoxSize = function getMinimumBoxSize(box) {
    var minSize;
    var isHorizontal = box.isHorizontal();
    if (isHorizontal) {
        minSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
        maxChartAreaHeight -= minSize.height;
    } else {
        minSize = box.update(verticalBoxWidth, chartAreaHeight);
        maxChartAreaWidth -= minSize.width;
    }
    minBoxSizes.push({
        horizontal: isHorizontal,
        minSize: minSize,
        box: box
    });
};
fitBox = function fitBox(box) {
    var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minBox) {
        return minBox.box === box;
    });
    if (minBoxSize) {
        if (box.isHorizontal()) {
            var scaleMargin = {
                left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
                right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
                top: 0,
                bottom: 0
            };
            box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
        } else {
            box.update(minBoxSize.minSize.width, maxChartAreaHeight);
        }
    }
};
finalFitVerticalBox = function finalFitVerticalBox(box) {
    var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minSize) {
        return minSize.box === box;
    });
    var scaleMargin = {
        left: 0,
        right: 0,
        top: totalTopBoxesHeight,
        bottom: totalBottomBoxesHeight
    };
    if (minBoxSize) {
        box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
    }
};
placeBox = function placeBox(box) {
    if (box.isHorizontal()) {
        box.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;
        box.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
        box.top = top;
        box.bottom = top + box.height;
        top = box.bottom;
    } else {
        box.left = left;
        box.right = left + box.width;
        box.top = totalTopBoxesHeight;
        box.bottom = totalTopBoxesHeight + maxChartAreaHeight;
        left = box.right;
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0], width = arguments[1], height = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!chartInstance) {
    return;
}
layoutOptions = chartInstance.options.layout;
padding = layoutOptions ? layoutOptions.padding : null;
leftPadding = 0;
rightPadding = 0;
topPadding = 0;
bottomPadding = 0;
if (!isNaN(padding)) {
    leftPadding = padding;
    rightPadding = padding;
    topPadding = padding;
    bottomPadding = padding;
} else {
    leftPadding = padding.left || 0;
    rightPadding = padding.right || 0;
    topPadding = padding.top || 0;
    bottomPadding = padding.bottom || 0;
}
leftBoxes = helpers.where(chartInstance.boxes, function (box) {
    return box.options.position === 'left';
});
rightBoxes = helpers.where(chartInstance.boxes, function (box) {
    return box.options.position === 'right';
});
topBoxes = helpers.where(chartInstance.boxes, function (box) {
    return box.options.position === 'top';
});
bottomBoxes = helpers.where(chartInstance.boxes, function (box) {
    return box.options.position === 'bottom';
});
chartAreaBoxes = helpers.where(chartInstance.boxes, function (box) {
    return box.options.position === 'chartArea';
});
topBoxes.sort(function (a, b) {
    return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);
});
bottomBoxes.sort(function (a, b) {
    return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);
});
chartWidth = width - leftPadding - rightPadding;
chartHeight = height - topPadding - bottomPadding;
chartAreaWidth = chartWidth / 2;
chartAreaHeight = chartHeight / 2;
verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);
horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);
maxChartAreaWidth = chartWidth;
maxChartAreaHeight = chartHeight;
minBoxSizes = [];
helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);
maxHorizontalLeftPadding = 0;
maxHorizontalRightPadding = 0;
maxVerticalTopPadding = 0;
maxVerticalBottomPadding = 0;
helpers.each(topBoxes.concat(bottomBoxes), function (horizontalBox) {
    if (horizontalBox.getPadding) {
        var boxPadding = horizontalBox.getPadding();
        maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
        maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
    }
});
helpers.each(leftBoxes.concat(rightBoxes), function (verticalBox) {
    if (verticalBox.getPadding) {
        var boxPadding = verticalBox.getPadding();
        maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
        maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
    }
});
totalLeftBoxesWidth = leftPadding;
totalRightBoxesWidth = rightPadding;
totalTopBoxesHeight = topPadding;
totalBottomBoxesHeight = bottomPadding;
helpers.each(leftBoxes.concat(rightBoxes), fitBox);
helpers.each(leftBoxes, function (box) {
    totalLeftBoxesWidth += box.width;
});
helpers.each(rightBoxes, function (box) {
    totalRightBoxesWidth += box.width;
});
helpers.each(topBoxes.concat(bottomBoxes), fitBox);
helpers.each(topBoxes, function (box) {
    totalTopBoxesHeight += box.height;
});
helpers.each(bottomBoxes, function (box) {
    totalBottomBoxesHeight += box.height;
});
helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);
totalLeftBoxesWidth = leftPadding;
totalRightBoxesWidth = rightPadding;
totalTopBoxesHeight = topPadding;
totalBottomBoxesHeight = bottomPadding;
helpers.each(leftBoxes, function (box) {
    totalLeftBoxesWidth += box.width;
});
helpers.each(rightBoxes, function (box) {
    totalRightBoxesWidth += box.width;
});
helpers.each(topBoxes, function (box) {
    totalTopBoxesHeight += box.height;
});
helpers.each(bottomBoxes, function (box) {
    totalBottomBoxesHeight += box.height;
});
leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
totalLeftBoxesWidth += leftPaddingAddition;
totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
totalTopBoxesHeight += topPaddingAddition;
totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);
newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;
if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
    helpers.each(leftBoxes, function (box) {
        box.height = newMaxChartAreaHeight;
    });
    helpers.each(rightBoxes, function (box) {
        box.height = newMaxChartAreaHeight;
    });
    helpers.each(topBoxes, function (box) {
        if (!box.options.fullWidth) {
            box.width = newMaxChartAreaWidth;
        }
    });
    helpers.each(bottomBoxes, function (box) {
        if (!box.options.fullWidth) {
            box.width = newMaxChartAreaWidth;
        }
    });
    maxChartAreaHeight = newMaxChartAreaHeight;
    maxChartAreaWidth = newMaxChartAreaWidth;
}
left = leftPadding + leftPaddingAddition;
top = topPadding + topPaddingAddition;
helpers.each(leftBoxes.concat(topBoxes), placeBox);
left += maxChartAreaWidth;
top += maxChartAreaHeight;
helpers.each(rightBoxes, placeBox);
helpers.each(bottomBoxes, placeBox);
chartInstance.chartArea = {
    left: totalLeftBoxesWidth,
    top: totalTopBoxesHeight,
    right: totalLeftBoxesWidth + maxChartAreaWidth,
    bottom: totalTopBoxesHeight + maxChartAreaHeight
};
helpers.each(chartAreaBoxes, function (box) {
    box.left = chartInstance.chartArea.left;
    box.top = chartInstance.chartArea.top;
    box.right = chartInstance.chartArea.right;
    box.bottom = chartInstance.chartArea.bottom;
    box.update(maxChartAreaWidth, maxChartAreaHeight);
});})
    };
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.layoutService = {
    defaults: {},
    addBox: function (chartInstance, box) {
        if (!chartInstance.boxes) {
            chartInstance.boxes = [];
        }
        chartInstance.boxes.push(box);
    },
    removeBox: function (chartInstance, box) {
        if (!chartInstance.boxes) {
            return;
        }
        chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);
    },
    update: function (chartInstance, width, height) {
        if (!chartInstance) {
            return;
        }
        var layoutOptions = chartInstance.options.layout;
        var padding = layoutOptions ? layoutOptions.padding : null;
        var leftPadding = 0;
        var rightPadding = 0;
        var topPadding = 0;
        var bottomPadding = 0;
        if (!isNaN(padding)) {
            leftPadding = padding;
            rightPadding = padding;
            topPadding = padding;
            bottomPadding = padding;
        } else {
            leftPadding = padding.left || 0;
            rightPadding = padding.right || 0;
            topPadding = padding.top || 0;
            bottomPadding = padding.bottom || 0;
        }
        var leftBoxes = helpers.where(chartInstance.boxes, function (box) {
            return box.options.position === 'left';
        });
        var rightBoxes = helpers.where(chartInstance.boxes, function (box) {
            return box.options.position === 'right';
        });
        var topBoxes = helpers.where(chartInstance.boxes, function (box) {
            return box.options.position === 'top';
        });
        var bottomBoxes = helpers.where(chartInstance.boxes, function (box) {
            return box.options.position === 'bottom';
        });
        var chartAreaBoxes = helpers.where(chartInstance.boxes, function (box) {
            return box.options.position === 'chartArea';
        });
        topBoxes.sort(function (a, b) {
            return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);
        });
        bottomBoxes.sort(function (a, b) {
            return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);
        });
        var chartWidth = width - leftPadding - rightPadding;
        var chartHeight = height - topPadding - bottomPadding;
        var chartAreaWidth = chartWidth / 2;
        var chartAreaHeight = chartHeight / 2;
        var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);
        var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);
        var maxChartAreaWidth = chartWidth;
        var maxChartAreaHeight = chartHeight;
        var minBoxSizes = [];
        function getMinimumBoxSize(box) {
            var minSize;
            var isHorizontal = box.isHorizontal();
            if (isHorizontal) {
                minSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
                maxChartAreaHeight -= minSize.height;
            } else {
                minSize = box.update(verticalBoxWidth, chartAreaHeight);
                maxChartAreaWidth -= minSize.width;
            }
            minBoxSizes.push({
                horizontal: isHorizontal,
                minSize: minSize,
                box: box
            });
        }
        helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);
        var maxHorizontalLeftPadding = 0;
        var maxHorizontalRightPadding = 0;
        var maxVerticalTopPadding = 0;
        var maxVerticalBottomPadding = 0;
        helpers.each(topBoxes.concat(bottomBoxes), function (horizontalBox) {
            if (horizontalBox.getPadding) {
                var boxPadding = horizontalBox.getPadding();
                maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
                maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
            }
        });
        helpers.each(leftBoxes.concat(rightBoxes), function (verticalBox) {
            if (verticalBox.getPadding) {
                var boxPadding = verticalBox.getPadding();
                maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
                maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
            }
        });
        var totalLeftBoxesWidth = leftPadding;
        var totalRightBoxesWidth = rightPadding;
        var totalTopBoxesHeight = topPadding;
        var totalBottomBoxesHeight = bottomPadding;
        function fitBox(box) {
            var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minBox) {
                return minBox.box === box;
            });
            if (minBoxSize) {
                if (box.isHorizontal()) {
                    var scaleMargin = {
                        left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
                        right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
                        top: 0,
                        bottom: 0
                    };
                    box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
                } else {
                    box.update(minBoxSize.minSize.width, maxChartAreaHeight);
                }
            }
        }
        helpers.each(leftBoxes.concat(rightBoxes), fitBox);
        helpers.each(leftBoxes, function (box) {
            totalLeftBoxesWidth += box.width;
        });
        helpers.each(rightBoxes, function (box) {
            totalRightBoxesWidth += box.width;
        });
        helpers.each(topBoxes.concat(bottomBoxes), fitBox);
        helpers.each(topBoxes, function (box) {
            totalTopBoxesHeight += box.height;
        });
        helpers.each(bottomBoxes, function (box) {
            totalBottomBoxesHeight += box.height;
        });
        function finalFitVerticalBox(box) {
            var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minSize) {
                return minSize.box === box;
            });
            var scaleMargin = {
                left: 0,
                right: 0,
                top: totalTopBoxesHeight,
                bottom: totalBottomBoxesHeight
            };
            if (minBoxSize) {
                box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
            }
        }
        helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);
        totalLeftBoxesWidth = leftPadding;
        totalRightBoxesWidth = rightPadding;
        totalTopBoxesHeight = topPadding;
        totalBottomBoxesHeight = bottomPadding;
        helpers.each(leftBoxes, function (box) {
            totalLeftBoxesWidth += box.width;
        });
        helpers.each(rightBoxes, function (box) {
            totalRightBoxesWidth += box.width;
        });
        helpers.each(topBoxes, function (box) {
            totalTopBoxesHeight += box.height;
        });
        helpers.each(bottomBoxes, function (box) {
            totalBottomBoxesHeight += box.height;
        });
        var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
        totalLeftBoxesWidth += leftPaddingAddition;
        totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
        var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
        totalTopBoxesHeight += topPaddingAddition;
        totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);
        var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
        var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;
        if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
            helpers.each(leftBoxes, function (box) {
                box.height = newMaxChartAreaHeight;
            });
            helpers.each(rightBoxes, function (box) {
                box.height = newMaxChartAreaHeight;
            });
            helpers.each(topBoxes, function (box) {
                if (!box.options.fullWidth) {
                    box.width = newMaxChartAreaWidth;
                }
            });
            helpers.each(bottomBoxes, function (box) {
                if (!box.options.fullWidth) {
                    box.width = newMaxChartAreaWidth;
                }
            });
            maxChartAreaHeight = newMaxChartAreaHeight;
            maxChartAreaWidth = newMaxChartAreaWidth;
        }
        var left = leftPadding + leftPaddingAddition;
        var top = topPadding + topPaddingAddition;
        function placeBox(box) {
            if (box.isHorizontal()) {
                box.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;
                box.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
                box.top = top;
                box.bottom = top + box.height;
                top = box.bottom;
            } else {
                box.left = left;
                box.right = left + box.width;
                box.top = totalTopBoxesHeight;
                box.bottom = totalTopBoxesHeight + maxChartAreaHeight;
                left = box.right;
            }
        }
        helpers.each(leftBoxes.concat(topBoxes), placeBox);
        left += maxChartAreaWidth;
        top += maxChartAreaHeight;
        helpers.each(rightBoxes, placeBox);
        helpers.each(bottomBoxes, placeBox);
        chartInstance.chartArea = {
            left: totalLeftBoxesWidth,
            top: totalTopBoxesHeight,
            right: totalLeftBoxesWidth + maxChartAreaWidth,
            bottom: totalTopBoxesHeight + maxChartAreaHeight
        };
        helpers.each(chartAreaBoxes, function (box) {
            box.left = chartInstance.chartArea.left;
            box.top = chartInstance.chartArea.top;
            box.right = chartInstance.chartArea.right;
            box.bottom = chartInstance.chartArea.bottom;
            box.update(maxChartAreaWidth, maxChartAreaHeight);
        });
    }
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.layoutService = {
        defaults: {},
        addBox: function (chartInstance, box) {
            if (!chartInstance.boxes) {
                chartInstance.boxes = [];
            }
            chartInstance.boxes.push(box);
        },
        removeBox: function (chartInstance, box) {
            if (!chartInstance.boxes) {
                return;
            }
            chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);
        },
        update: function (chartInstance, width, height) {
            if (!chartInstance) {
                return;
            }
            var layoutOptions = chartInstance.options.layout;
            var padding = layoutOptions ? layoutOptions.padding : null;
            var leftPadding = 0;
            var rightPadding = 0;
            var topPadding = 0;
            var bottomPadding = 0;
            if (!isNaN(padding)) {
                leftPadding = padding;
                rightPadding = padding;
                topPadding = padding;
                bottomPadding = padding;
            } else {
                leftPadding = padding.left || 0;
                rightPadding = padding.right || 0;
                topPadding = padding.top || 0;
                bottomPadding = padding.bottom || 0;
            }
            var leftBoxes = helpers.where(chartInstance.boxes, function (box) {
                return box.options.position === 'left';
            });
            var rightBoxes = helpers.where(chartInstance.boxes, function (box) {
                return box.options.position === 'right';
            });
            var topBoxes = helpers.where(chartInstance.boxes, function (box) {
                return box.options.position === 'top';
            });
            var bottomBoxes = helpers.where(chartInstance.boxes, function (box) {
                return box.options.position === 'bottom';
            });
            var chartAreaBoxes = helpers.where(chartInstance.boxes, function (box) {
                return box.options.position === 'chartArea';
            });
            topBoxes.sort(function (a, b) {
                return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);
            });
            bottomBoxes.sort(function (a, b) {
                return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);
            });
            var chartWidth = width - leftPadding - rightPadding;
            var chartHeight = height - topPadding - bottomPadding;
            var chartAreaWidth = chartWidth / 2;
            var chartAreaHeight = chartHeight / 2;
            var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);
            var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);
            var maxChartAreaWidth = chartWidth;
            var maxChartAreaHeight = chartHeight;
            var minBoxSizes = [];
            function getMinimumBoxSize(box) {
                var minSize;
                var isHorizontal = box.isHorizontal();
                if (isHorizontal) {
                    minSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
                    maxChartAreaHeight -= minSize.height;
                } else {
                    minSize = box.update(verticalBoxWidth, chartAreaHeight);
                    maxChartAreaWidth -= minSize.width;
                }
                minBoxSizes.push({
                    horizontal: isHorizontal,
                    minSize: minSize,
                    box: box
                });
            }
            helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);
            var maxHorizontalLeftPadding = 0;
            var maxHorizontalRightPadding = 0;
            var maxVerticalTopPadding = 0;
            var maxVerticalBottomPadding = 0;
            helpers.each(topBoxes.concat(bottomBoxes), function (horizontalBox) {
                if (horizontalBox.getPadding) {
                    var boxPadding = horizontalBox.getPadding();
                    maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
                    maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
                }
            });
            helpers.each(leftBoxes.concat(rightBoxes), function (verticalBox) {
                if (verticalBox.getPadding) {
                    var boxPadding = verticalBox.getPadding();
                    maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
                    maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
                }
            });
            var totalLeftBoxesWidth = leftPadding;
            var totalRightBoxesWidth = rightPadding;
            var totalTopBoxesHeight = topPadding;
            var totalBottomBoxesHeight = bottomPadding;
            function fitBox(box) {
                var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minBox) {
                    return minBox.box === box;
                });
                if (minBoxSize) {
                    if (box.isHorizontal()) {
                        var scaleMargin = {
                            left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
                            right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
                            top: 0,
                            bottom: 0
                        };
                        box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
                    } else {
                        box.update(minBoxSize.minSize.width, maxChartAreaHeight);
                    }
                }
            }
            helpers.each(leftBoxes.concat(rightBoxes), fitBox);
            helpers.each(leftBoxes, function (box) {
                totalLeftBoxesWidth += box.width;
            });
            helpers.each(rightBoxes, function (box) {
                totalRightBoxesWidth += box.width;
            });
            helpers.each(topBoxes.concat(bottomBoxes), fitBox);
            helpers.each(topBoxes, function (box) {
                totalTopBoxesHeight += box.height;
            });
            helpers.each(bottomBoxes, function (box) {
                totalBottomBoxesHeight += box.height;
            });
            function finalFitVerticalBox(box) {
                var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minSize) {
                    return minSize.box === box;
                });
                var scaleMargin = {
                    left: 0,
                    right: 0,
                    top: totalTopBoxesHeight,
                    bottom: totalBottomBoxesHeight
                };
                if (minBoxSize) {
                    box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
                }
            }
            helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);
            totalLeftBoxesWidth = leftPadding;
            totalRightBoxesWidth = rightPadding;
            totalTopBoxesHeight = topPadding;
            totalBottomBoxesHeight = bottomPadding;
            helpers.each(leftBoxes, function (box) {
                totalLeftBoxesWidth += box.width;
            });
            helpers.each(rightBoxes, function (box) {
                totalRightBoxesWidth += box.width;
            });
            helpers.each(topBoxes, function (box) {
                totalTopBoxesHeight += box.height;
            });
            helpers.each(bottomBoxes, function (box) {
                totalBottomBoxesHeight += box.height;
            });
            var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
            totalLeftBoxesWidth += leftPaddingAddition;
            totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
            var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
            totalTopBoxesHeight += topPaddingAddition;
            totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);
            var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
            var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;
            if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
                helpers.each(leftBoxes, function (box) {
                    box.height = newMaxChartAreaHeight;
                });
                helpers.each(rightBoxes, function (box) {
                    box.height = newMaxChartAreaHeight;
                });
                helpers.each(topBoxes, function (box) {
                    if (!box.options.fullWidth) {
                        box.width = newMaxChartAreaWidth;
                    }
                });
                helpers.each(bottomBoxes, function (box) {
                    if (!box.options.fullWidth) {
                        box.width = newMaxChartAreaWidth;
                    }
                });
                maxChartAreaHeight = newMaxChartAreaHeight;
                maxChartAreaWidth = newMaxChartAreaWidth;
            }
            var left = leftPadding + leftPaddingAddition;
            var top = topPadding + topPaddingAddition;
            function placeBox(box) {
                if (box.isHorizontal()) {
                    box.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;
                    box.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
                    box.top = top;
                    box.bottom = top + box.height;
                    top = box.bottom;
                } else {
                    box.left = left;
                    box.right = left + box.width;
                    box.top = totalTopBoxesHeight;
                    box.bottom = totalTopBoxesHeight + maxChartAreaHeight;
                    left = box.right;
                }
            }
            helpers.each(leftBoxes.concat(topBoxes), placeBox);
            left += maxChartAreaWidth;
            top += maxChartAreaHeight;
            helpers.each(rightBoxes, placeBox);
            helpers.each(bottomBoxes, placeBox);
            chartInstance.chartArea = {
                left: totalLeftBoxesWidth,
                top: totalTopBoxesHeight,
                right: totalLeftBoxesWidth + maxChartAreaWidth,
                bottom: totalTopBoxesHeight + maxChartAreaHeight
            };
            helpers.each(chartAreaBoxes, function (box) {
                box.left = chartInstance.chartArea.left;
                box.top = chartInstance.chartArea.top;
                box.right = chartInstance.chartArea.right;
                box.bottom = chartInstance.chartArea.bottom;
                box.update(maxChartAreaWidth, maxChartAreaHeight);
            });
        }
    };
};}, $__.fs.J$__v7918151485_1006_34),
            $__.os.oid28 = {}
        ],
        30: [
            ($__.fs.J$__v7918151485_1052_35 = function J$__v7918151485_1052(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid150).exports = ($__.fs.J$__v7918151485_1050_656 = function J$__v7918151485_1050(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, helpers, noop, getBoxWidth, createNewLegendAndAttach;
getBoxWidth = function getBoxWidth(labelOpts, fontSize) {
    return labelOpts.usePointStyle ? fontSize * Math.SQRT2 : labelOpts.boxWidth;
};
createNewLegendAndAttach = function createNewLegendAndAttach(chartInstance, legendOpts) {
    var legend = new Chart.Legend({
        ctx: chartInstance.chart.ctx,
        options: legendOpts,
        chart: chartInstance
    });
    chartInstance.legend = legend;
    Chart.layoutService.addBox(chartInstance, legend);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    getBoxWidth = ($__.fs.getBoxWidth_657 = function getBoxWidth(labelOpts, fontSize) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
labelOpts = arguments[0], fontSize = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return labelOpts.usePointStyle ? fontSize * Math.SQRT2 : labelOpts.boxWidth;});
    createNewLegendAndAttach = ($__.fs.createNewLegendAndAttach_658 = function createNewLegendAndAttach(chartInstance, legendOpts) {
var vvv_return, vvv_switch, legend;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0], legendOpts = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
legend = new Chart.Legend({
    ctx: chartInstance.chart.ctx,
    options: legendOpts,
    chart: chartInstance
});
chartInstance.legend = legend;
Chart.layoutService.addBox(chartInstance, legend);});
    helpers = (Chart.helpers, $__.os.oid88);
    noop = TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function');
    ((((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56), $__.os.oid56).legend = $__.os.oid152 = {
        'display': true,
        'position': 'top',
        'fullWidth': true,
        'reverse': false,
        'onClick': ($__.fs.J$__v7918151485_1008_659 = function J$__v7918151485_1008(e, legendItem) {
var vvv_return, vvv_switch, index, ci, meta;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0], legendItem = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
index = legendItem.datasetIndex;
ci = this.chart;
meta = ci.getDatasetMeta(index);
meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
ci.update();}),
        'onHover': null,
        'labels': $__.os.oid151 = {
            'boxWidth': 40,
            'padding': 10,
            'generateLabels': ($__.fs.J$__v7918151485_1012_660 = function J$__v7918151485_1012(chart) {
var vvv_return, vvv_switch, data;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
data = chart.data;
return helpers.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {
    return {
        text: dataset.label,
        fillStyle: !helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],
        hidden: !chart.isDatasetVisible(i),
        lineCap: dataset.borderCapStyle,
        lineDash: dataset.borderDash,
        lineDashOffset: dataset.borderDashOffset,
        lineJoin: dataset.borderJoinStyle,
        lineWidth: dataset.borderWidth,
        strokeStyle: dataset.borderColor,
        pointStyle: dataset.pointStyle,
        datasetIndex: i
    };
}, this) : [];})
        }
    };
    Chart.Legend = (vvv_tmp0 = TAJS_restrictToType(Chart.Element, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid153 = {
        'initialize': ($__.fs.J$__v7918151485_1015_661 = function J$__v7918151485_1015(config) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
config = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.extend(this, config);
this.legendHitBoxes = [];
this.doughnutMode = false;}, $__.fs.J$__v7918151485_1015_661_309 = $__.fs.J$__v7918151485_1015_661, $__.fs.J$__v7918151485_1015_661),
        'beforeUpdate': noop,
        'update': ($__.fs.J$__v7918151485_1017_662 = function J$__v7918151485_1017(maxWidth, maxHeight, margins) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
maxWidth = arguments[0], maxHeight = arguments[1], margins = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.beforeUpdate();
me.maxWidth = maxWidth;
me.maxHeight = maxHeight;
me.margins = margins;
me.beforeSetDimensions();
me.setDimensions();
me.afterSetDimensions();
me.beforeBuildLabels();
me.buildLabels();
me.afterBuildLabels();
me.beforeFit();
me.fit();
me.afterFit();
me.afterUpdate();
return me.minSize;}, $__.fs.J$__v7918151485_1017_662_313 = $__.fs.J$__v7918151485_1017_662, $__.fs.J$__v7918151485_1017_662),
        'afterUpdate': noop,
        'beforeSetDimensions': noop,
        'setDimensions': ($__.fs.J$__v7918151485_1019_663 = function J$__v7918151485_1019() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (me.isHorizontal()) {
    me.width = me.maxWidth;
    me.left = 0;
    me.right = me.width;
} else {
    me.height = me.maxHeight;
    me.top = 0;
    me.bottom = me.height;
}
me.paddingLeft = 0;
me.paddingTop = 0;
me.paddingRight = 0;
me.paddingBottom = 0;
me.minSize = {
    width: 0,
    height: 0
};}, $__.fs.J$__v7918151485_1019_663_319 = $__.fs.J$__v7918151485_1019_663, $__.fs.J$__v7918151485_1019_663),
        'afterSetDimensions': noop,
        'beforeBuildLabels': noop,
        'buildLabels': ($__.fs.J$__v7918151485_1023_664 = function J$__v7918151485_1023() {
var vvv_return, vvv_switch, me, labelOpts, legendItems;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
labelOpts = me.options.labels;
legendItems = labelOpts.generateLabels.call(me, me.chart);
if (labelOpts.filter) {
    legendItems = legendItems.filter(function (item) {
        return labelOpts.filter(item, me.chart.data);
    });
}
if (me.options.reverse) {
    legendItems.reverse();
}
me.legendItems = legendItems;}, $__.fs.J$__v7918151485_1023_664_325 = $__.fs.J$__v7918151485_1023_664, $__.fs.J$__v7918151485_1023_664),
        'afterBuildLabels': noop,
        'beforeFit': noop,
        'fit': ($__.fs.J$__v7918151485_1029_665 = function J$__v7918151485_1029() {
var vvv_return, vvv_switch, me, opts, labelOpts, display, ctx, globalDefault, itemOrDefault, fontSize, fontStyle, fontFamily, labelFont, hitboxes, minSize, isHorizontal, lineWidths, totalHeight, vPadding, columnWidths, totalWidth, currentColWidth, currentColHeight, itemHeight;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me.options;
labelOpts = opts.labels;
display = opts.display;
ctx = me.ctx;
globalDefault = Chart.defaults.global;
itemOrDefault = helpers.getValueOrDefault;
fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize);
fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle);
fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily);
labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
hitboxes = me.legendHitBoxes = [];
minSize = me.minSize;
isHorizontal = me.isHorizontal();
if (isHorizontal) {
    minSize.width = me.maxWidth;
    minSize.height = display ? 10 : 0;
} else {
    minSize.width = display ? 10 : 0;
    minSize.height = me.maxHeight;
}
if (display) {
    ctx.font = labelFont;
    if (isHorizontal) {
        lineWidths = me.lineWidths = [0];
        totalHeight = me.legendItems.length ? fontSize + labelOpts.padding : 0;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'top';
        helpers.each(me.legendItems, function (legendItem, i) {
            var boxWidth = getBoxWidth(labelOpts, fontSize);
            var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
            if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
                totalHeight += fontSize + labelOpts.padding;
                lineWidths[lineWidths.length] = me.left;
            }
            hitboxes[i] = {
                left: 0,
                top: 0,
                width: width,
                height: fontSize
            };
            lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
        });
        minSize.height += totalHeight;
    } else {
        vPadding = labelOpts.padding;
        columnWidths = me.columnWidths = [];
        totalWidth = labelOpts.padding;
        currentColWidth = 0;
        currentColHeight = 0;
        itemHeight = fontSize + vPadding;
        helpers.each(me.legendItems, function (legendItem, i) {
            var boxWidth = getBoxWidth(labelOpts, fontSize);
            var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
            if (currentColHeight + itemHeight > minSize.height) {
                totalWidth += currentColWidth + labelOpts.padding;
                columnWidths.push(currentColWidth);
                currentColWidth = 0;
                currentColHeight = 0;
            }
            currentColWidth = Math.max(currentColWidth, itemWidth);
            currentColHeight += itemHeight;
            hitboxes[i] = {
                left: 0,
                top: 0,
                width: itemWidth,
                height: fontSize
            };
        });
        totalWidth += currentColWidth;
        columnWidths.push(currentColWidth);
        minSize.width += totalWidth;
    }
}
me.width = minSize.width;
me.height = minSize.height;}, $__.fs.J$__v7918151485_1029_665_331 = $__.fs.J$__v7918151485_1029_665, $__.fs.J$__v7918151485_1029_665),
        'afterFit': noop,
        'isHorizontal': ($__.fs.J$__v7918151485_1031_666 = function J$__v7918151485_1031() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.options.position === 'top' || this.options.position === 'bottom';}, $__.fs.J$__v7918151485_1031_666_335 = $__.fs.J$__v7918151485_1031_666, $__.fs.J$__v7918151485_1031_666),
        'draw': ($__.fs.J$__v7918151485_1039_667 = function J$__v7918151485_1039() {
var vvv_return, vvv_switch, me, opts, labelOpts, globalDefault, lineDefault, legendWidth, lineWidths, ctx, cursor, itemOrDefault, fontColor, fontSize, fontStyle, fontFamily, labelFont, boxWidth, hitboxes, drawLegendBox, fillText, isHorizontal, itemHeight;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me.options;
labelOpts = opts.labels;
globalDefault = Chart.defaults.global;
lineDefault = globalDefault.elements.line;
legendWidth = me.width;
lineWidths = me.lineWidths;
if (opts.display) {
    ctx = me.ctx;
    itemOrDefault = helpers.getValueOrDefault;
    fontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor);
    fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize);
    fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle);
    fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily);
    labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
    ctx.textAlign = 'left';
    ctx.textBaseline = 'top';
    ctx.lineWidth = 0.5;
    ctx.strokeStyle = fontColor;
    ctx.fillStyle = fontColor;
    ctx.font = labelFont;
    boxWidth = getBoxWidth(labelOpts, fontSize);
    hitboxes = me.legendHitBoxes;
    drawLegendBox = function (x, y, legendItem) {
        if (isNaN(boxWidth) || boxWidth <= 0) {
            return;
        }
        ctx.save();
        ctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
        ctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
        ctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
        ctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
        ctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
        ctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
        var isLineWidthZero = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0;
        if (ctx.setLineDash) {
            ctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));
        }
        if (opts.labels && opts.labels.usePointStyle) {
            var radius = fontSize * Math.SQRT2 / 2;
            var offSet = radius / Math.SQRT2;
            var centerX = x + offSet;
            var centerY = y + offSet;
            Chart.canvasHelpers.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
        } else {
            if (!isLineWidthZero) {
                ctx.strokeRect(x, y, boxWidth, fontSize);
            }
            ctx.fillRect(x, y, boxWidth, fontSize);
        }
        ctx.restore();
    };
    fillText = function (x, y, legendItem, textWidth) {
        ctx.fillText(legendItem.text, boxWidth + fontSize / 2 + x, y);
        if (legendItem.hidden) {
            ctx.beginPath();
            ctx.lineWidth = 2;
            ctx.moveTo(boxWidth + fontSize / 2 + x, y + fontSize / 2);
            ctx.lineTo(boxWidth + fontSize / 2 + x + textWidth, y + fontSize / 2);
            ctx.stroke();
        }
    };
    isHorizontal = me.isHorizontal();
    if (isHorizontal) {
        cursor = {
            x: me.left + (legendWidth - lineWidths[0]) / 2,
            y: me.top + labelOpts.padding,
            line: 0
        };
    } else {
        cursor = {
            x: me.left + labelOpts.padding,
            y: me.top + labelOpts.padding,
            line: 0
        };
    }
    itemHeight = fontSize + labelOpts.padding;
    helpers.each(me.legendItems, function (legendItem, i) {
        var textWidth = ctx.measureText(legendItem.text).width, width = boxWidth + fontSize / 2 + textWidth, x = cursor.x, y = cursor.y;
        if (isHorizontal) {
            if (x + width >= legendWidth) {
                y = cursor.y += itemHeight;
                cursor.line++;
                x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2;
            }
        } else if (y + itemHeight > me.bottom) {
            x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
            y = cursor.y = me.top + labelOpts.padding;
            cursor.line++;
        }
        drawLegendBox(x, y, legendItem);
        hitboxes[i].left = x;
        hitboxes[i].top = y;
        fillText(x, y, legendItem, textWidth);
        if (isHorizontal) {
            cursor.x += width + labelOpts.padding;
        } else {
            cursor.y += itemHeight;
        }
    });
}}, $__.fs.J$__v7918151485_1039_667_337 = $__.fs.J$__v7918151485_1039_667, $__.fs.J$__v7918151485_1039_667),
        'handleEvent': ($__.fs.J$__v7918151485_1041_668 = function J$__v7918151485_1041(e) {
var vvv_return, vvv_switch, me, opts, type, changed, x, y, lh, hitBox;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me.options;
type = e.type === 'mouseup' ? 'click' : e.type;
changed = false;
if (type === 'mousemove') {
    if (!opts.onHover) {
        return;
    }
} else if (type === 'click') {
    if (!opts.onClick) {
        return;
    }
} else {
    return;
}
x = e.x;
y = e.y;
if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
    lh = me.legendHitBoxes;
    for (var i = 0; i < lh.length; ++i) {
        hitBox = lh[i];
        if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
            if (type === 'click') {
                opts.onClick.call(me, e.native, me.legendItems[i]);
                changed = true;
                break;
            } else if (type === 'mousemove') {
                opts.onHover.call(me, e.native, me.legendItems[i]);
                changed = true;
                break;
            }
        }
    }
}
return changed;}, $__.fs.J$__v7918151485_1041_668_339 = $__.fs.J$__v7918151485_1041_668, $__.fs.J$__v7918151485_1041_668)
    }, 4, true, $__.uid));
    vvv_tmp1 = (Chart.plugins, $__.os.oid103), 'register', $__.fs.J$__v7918151485_1056_490.call(vvv_tmp1, $__.os.oid154 = {
        'beforeInit': ($__.fs.J$__v7918151485_1044_672 = function J$__v7918151485_1044(chartInstance) {
var vvv_return, vvv_switch, legendOpts;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
legendOpts = chartInstance.options.legend;
if (legendOpts) {
    createNewLegendAndAttach(chartInstance, legendOpts);
}}),
        'beforeUpdate': ($__.fs.J$__v7918151485_1046_673 = function J$__v7918151485_1046(chartInstance) {
var vvv_return, vvv_switch, legendOpts;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
legendOpts = chartInstance.options.legend;
if (legendOpts) {
    legendOpts = helpers.configMerge(Chart.defaults.global.legend, legendOpts);
    if (chartInstance.legend) {
        chartInstance.legend.options = legendOpts;
    } else {
        createNewLegendAndAttach(chartInstance, legendOpts);
    }
} else {
    Chart.layoutService.removeBox(chartInstance, chartInstance.legend);
    delete chartInstance.legend;
}}),
        'afterEvent': ($__.fs.J$__v7918151485_1048_674 = function J$__v7918151485_1048(chartInstance, e) {
var vvv_return, vvv_switch, legend;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0], e = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
legend = chartInstance.legend;
if (legend) {
    legend.handleEvent(e);
}})
    }, 1, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
noop = helpers.noop;
Chart.defaults.global.legend = {
    display: true,
    position: 'top',
    fullWidth: true,
    reverse: false,
    onClick: function (e, legendItem) {
        var index = legendItem.datasetIndex;
        var ci = this.chart;
        var meta = ci.getDatasetMeta(index);
        meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
        ci.update();
    },
    onHover: null,
    labels: {
        boxWidth: 40,
        padding: 10,
        generateLabels: function (chart) {
            var data = chart.data;
            return helpers.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {
                return {
                    text: dataset.label,
                    fillStyle: !helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],
                    hidden: !chart.isDatasetVisible(i),
                    lineCap: dataset.borderCapStyle,
                    lineDash: dataset.borderDash,
                    lineDashOffset: dataset.borderDashOffset,
                    lineJoin: dataset.borderJoinStyle,
                    lineWidth: dataset.borderWidth,
                    strokeStyle: dataset.borderColor,
                    pointStyle: dataset.pointStyle,
                    datasetIndex: i
                };
            }, this) : [];
        }
    }
};
Chart.Legend = Chart.Element.extend({
    initialize: function (config) {
        helpers.extend(this, config);
        this.legendHitBoxes = [];
        this.doughnutMode = false;
    },
    beforeUpdate: noop,
    update: function (maxWidth, maxHeight, margins) {
        var me = this;
        me.beforeUpdate();
        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me.margins = margins;
        me.beforeSetDimensions();
        me.setDimensions();
        me.afterSetDimensions();
        me.beforeBuildLabels();
        me.buildLabels();
        me.afterBuildLabels();
        me.beforeFit();
        me.fit();
        me.afterFit();
        me.afterUpdate();
        return me.minSize;
    },
    afterUpdate: noop,
    beforeSetDimensions: noop,
    setDimensions: function () {
        var me = this;
        if (me.isHorizontal()) {
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
        } else {
            me.height = me.maxHeight;
            me.top = 0;
            me.bottom = me.height;
        }
        me.paddingLeft = 0;
        me.paddingTop = 0;
        me.paddingRight = 0;
        me.paddingBottom = 0;
        me.minSize = {
            width: 0,
            height: 0
        };
    },
    afterSetDimensions: noop,
    beforeBuildLabels: noop,
    buildLabels: function () {
        var me = this;
        var labelOpts = me.options.labels;
        var legendItems = labelOpts.generateLabels.call(me, me.chart);
        if (labelOpts.filter) {
            legendItems = legendItems.filter(function (item) {
                return labelOpts.filter(item, me.chart.data);
            });
        }
        if (me.options.reverse) {
            legendItems.reverse();
        }
        me.legendItems = legendItems;
    },
    afterBuildLabels: noop,
    beforeFit: noop,
    fit: function () {
        var me = this;
        var opts = me.options;
        var labelOpts = opts.labels;
        var display = opts.display;
        var ctx = me.ctx;
        var globalDefault = Chart.defaults.global, itemOrDefault = helpers.getValueOrDefault, fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize), fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle), fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily), labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
        var hitboxes = me.legendHitBoxes = [];
        var minSize = me.minSize;
        var isHorizontal = me.isHorizontal();
        if (isHorizontal) {
            minSize.width = me.maxWidth;
            minSize.height = display ? 10 : 0;
        } else {
            minSize.width = display ? 10 : 0;
            minSize.height = me.maxHeight;
        }
        if (display) {
            ctx.font = labelFont;
            if (isHorizontal) {
                var lineWidths = me.lineWidths = [0];
                var totalHeight = me.legendItems.length ? fontSize + labelOpts.padding : 0;
                ctx.textAlign = 'left';
                ctx.textBaseline = 'top';
                helpers.each(me.legendItems, function (legendItem, i) {
                    var boxWidth = getBoxWidth(labelOpts, fontSize);
                    var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                    if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
                        totalHeight += fontSize + labelOpts.padding;
                        lineWidths[lineWidths.length] = me.left;
                    }
                    hitboxes[i] = {
                        left: 0,
                        top: 0,
                        width: width,
                        height: fontSize
                    };
                    lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
                });
                minSize.height += totalHeight;
            } else {
                var vPadding = labelOpts.padding;
                var columnWidths = me.columnWidths = [];
                var totalWidth = labelOpts.padding;
                var currentColWidth = 0;
                var currentColHeight = 0;
                var itemHeight = fontSize + vPadding;
                helpers.each(me.legendItems, function (legendItem, i) {
                    var boxWidth = getBoxWidth(labelOpts, fontSize);
                    var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                    if (currentColHeight + itemHeight > minSize.height) {
                        totalWidth += currentColWidth + labelOpts.padding;
                        columnWidths.push(currentColWidth);
                        currentColWidth = 0;
                        currentColHeight = 0;
                    }
                    currentColWidth = Math.max(currentColWidth, itemWidth);
                    currentColHeight += itemHeight;
                    hitboxes[i] = {
                        left: 0,
                        top: 0,
                        width: itemWidth,
                        height: fontSize
                    };
                });
                totalWidth += currentColWidth;
                columnWidths.push(currentColWidth);
                minSize.width += totalWidth;
            }
        }
        me.width = minSize.width;
        me.height = minSize.height;
    },
    afterFit: noop,
    isHorizontal: function () {
        return this.options.position === 'top' || this.options.position === 'bottom';
    },
    draw: function () {
        var me = this;
        var opts = me.options;
        var labelOpts = opts.labels;
        var globalDefault = Chart.defaults.global, lineDefault = globalDefault.elements.line, legendWidth = me.width, lineWidths = me.lineWidths;
        if (opts.display) {
            var ctx = me.ctx, cursor, itemOrDefault = helpers.getValueOrDefault, fontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor), fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize), fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle), fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily), labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
            ctx.textAlign = 'left';
            ctx.textBaseline = 'top';
            ctx.lineWidth = 0.5;
            ctx.strokeStyle = fontColor;
            ctx.fillStyle = fontColor;
            ctx.font = labelFont;
            var boxWidth = getBoxWidth(labelOpts, fontSize), hitboxes = me.legendHitBoxes;
            var drawLegendBox = function (x, y, legendItem) {
                if (isNaN(boxWidth) || boxWidth <= 0) {
                    return;
                }
                ctx.save();
                ctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
                ctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
                ctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
                ctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
                ctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
                ctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
                var isLineWidthZero = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0;
                if (ctx.setLineDash) {
                    ctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));
                }
                if (opts.labels && opts.labels.usePointStyle) {
                    var radius = fontSize * Math.SQRT2 / 2;
                    var offSet = radius / Math.SQRT2;
                    var centerX = x + offSet;
                    var centerY = y + offSet;
                    Chart.canvasHelpers.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
                } else {
                    if (!isLineWidthZero) {
                        ctx.strokeRect(x, y, boxWidth, fontSize);
                    }
                    ctx.fillRect(x, y, boxWidth, fontSize);
                }
                ctx.restore();
            };
            var fillText = function (x, y, legendItem, textWidth) {
                ctx.fillText(legendItem.text, boxWidth + fontSize / 2 + x, y);
                if (legendItem.hidden) {
                    ctx.beginPath();
                    ctx.lineWidth = 2;
                    ctx.moveTo(boxWidth + fontSize / 2 + x, y + fontSize / 2);
                    ctx.lineTo(boxWidth + fontSize / 2 + x + textWidth, y + fontSize / 2);
                    ctx.stroke();
                }
            };
            var isHorizontal = me.isHorizontal();
            if (isHorizontal) {
                cursor = {
                    x: me.left + (legendWidth - lineWidths[0]) / 2,
                    y: me.top + labelOpts.padding,
                    line: 0
                };
            } else {
                cursor = {
                    x: me.left + labelOpts.padding,
                    y: me.top + labelOpts.padding,
                    line: 0
                };
            }
            var itemHeight = fontSize + labelOpts.padding;
            helpers.each(me.legendItems, function (legendItem, i) {
                var textWidth = ctx.measureText(legendItem.text).width, width = boxWidth + fontSize / 2 + textWidth, x = cursor.x, y = cursor.y;
                if (isHorizontal) {
                    if (x + width >= legendWidth) {
                        y = cursor.y += itemHeight;
                        cursor.line++;
                        x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2;
                    }
                } else if (y + itemHeight > me.bottom) {
                    x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
                    y = cursor.y = me.top + labelOpts.padding;
                    cursor.line++;
                }
                drawLegendBox(x, y, legendItem);
                hitboxes[i].left = x;
                hitboxes[i].top = y;
                fillText(x, y, legendItem, textWidth);
                if (isHorizontal) {
                    cursor.x += width + labelOpts.padding;
                } else {
                    cursor.y += itemHeight;
                }
            });
        }
    },
    handleEvent: function (e) {
        var me = this;
        var opts = me.options;
        var type = e.type === 'mouseup' ? 'click' : e.type;
        var changed = false;
        if (type === 'mousemove') {
            if (!opts.onHover) {
                return;
            }
        } else if (type === 'click') {
            if (!opts.onClick) {
                return;
            }
        } else {
            return;
        }
        var x = e.x, y = e.y;
        if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
            var lh = me.legendHitBoxes;
            for (var i = 0; i < lh.length; ++i) {
                var hitBox = lh[i];
                if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
                    if (type === 'click') {
                        opts.onClick.call(me, e.native, me.legendItems[i]);
                        changed = true;
                        break;
                    } else if (type === 'mousemove') {
                        opts.onHover.call(me, e.native, me.legendItems[i]);
                        changed = true;
                        break;
                    }
                }
            }
        }
        return changed;
    }
});
Chart.plugins.register({
    beforeInit: function (chartInstance) {
        var legendOpts = chartInstance.options.legend;
        if (legendOpts) {
            createNewLegendAndAttach(chartInstance, legendOpts);
        }
    },
    beforeUpdate: function (chartInstance) {
        var legendOpts = chartInstance.options.legend;
        if (legendOpts) {
            legendOpts = helpers.configMerge(Chart.defaults.global.legend, legendOpts);
            if (chartInstance.legend) {
                chartInstance.legend.options = legendOpts;
            } else {
                createNewLegendAndAttach(chartInstance, legendOpts);
            }
        } else {
            Chart.layoutService.removeBox(chartInstance, chartInstance.legend);
            delete chartInstance.legend;
        }
    },
    afterEvent: function (chartInstance, e) {
        var legend = chartInstance.legend;
        if (legend) {
            legend.handleEvent(e);
        }
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    var noop = helpers.noop;
    Chart.defaults.global.legend = {
        display: true,
        position: 'top',
        fullWidth: true,
        reverse: false,
        onClick: function (e, legendItem) {
            var index = legendItem.datasetIndex;
            var ci = this.chart;
            var meta = ci.getDatasetMeta(index);
            meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
            ci.update();
        },
        onHover: null,
        labels: {
            boxWidth: 40,
            padding: 10,
            generateLabels: function (chart) {
                var data = chart.data;
                return helpers.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {
                    return {
                        text: dataset.label,
                        fillStyle: !helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],
                        hidden: !chart.isDatasetVisible(i),
                        lineCap: dataset.borderCapStyle,
                        lineDash: dataset.borderDash,
                        lineDashOffset: dataset.borderDashOffset,
                        lineJoin: dataset.borderJoinStyle,
                        lineWidth: dataset.borderWidth,
                        strokeStyle: dataset.borderColor,
                        pointStyle: dataset.pointStyle,
                        datasetIndex: i
                    };
                }, this) : [];
            }
        }
    };
    function getBoxWidth(labelOpts, fontSize) {
        return labelOpts.usePointStyle ? fontSize * Math.SQRT2 : labelOpts.boxWidth;
    }
    Chart.Legend = Chart.Element.extend({
        initialize: function (config) {
            helpers.extend(this, config);
            this.legendHitBoxes = [];
            this.doughnutMode = false;
        },
        beforeUpdate: noop,
        update: function (maxWidth, maxHeight, margins) {
            var me = this;
            me.beforeUpdate();
            me.maxWidth = maxWidth;
            me.maxHeight = maxHeight;
            me.margins = margins;
            me.beforeSetDimensions();
            me.setDimensions();
            me.afterSetDimensions();
            me.beforeBuildLabels();
            me.buildLabels();
            me.afterBuildLabels();
            me.beforeFit();
            me.fit();
            me.afterFit();
            me.afterUpdate();
            return me.minSize;
        },
        afterUpdate: noop,
        beforeSetDimensions: noop,
        setDimensions: function () {
            var me = this;
            if (me.isHorizontal()) {
                me.width = me.maxWidth;
                me.left = 0;
                me.right = me.width;
            } else {
                me.height = me.maxHeight;
                me.top = 0;
                me.bottom = me.height;
            }
            me.paddingLeft = 0;
            me.paddingTop = 0;
            me.paddingRight = 0;
            me.paddingBottom = 0;
            me.minSize = {
                width: 0,
                height: 0
            };
        },
        afterSetDimensions: noop,
        beforeBuildLabels: noop,
        buildLabels: function () {
            var me = this;
            var labelOpts = me.options.labels;
            var legendItems = labelOpts.generateLabels.call(me, me.chart);
            if (labelOpts.filter) {
                legendItems = legendItems.filter(function (item) {
                    return labelOpts.filter(item, me.chart.data);
                });
            }
            if (me.options.reverse) {
                legendItems.reverse();
            }
            me.legendItems = legendItems;
        },
        afterBuildLabels: noop,
        beforeFit: noop,
        fit: function () {
            var me = this;
            var opts = me.options;
            var labelOpts = opts.labels;
            var display = opts.display;
            var ctx = me.ctx;
            var globalDefault = Chart.defaults.global, itemOrDefault = helpers.getValueOrDefault, fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize), fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle), fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily), labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
            var hitboxes = me.legendHitBoxes = [];
            var minSize = me.minSize;
            var isHorizontal = me.isHorizontal();
            if (isHorizontal) {
                minSize.width = me.maxWidth;
                minSize.height = display ? 10 : 0;
            } else {
                minSize.width = display ? 10 : 0;
                minSize.height = me.maxHeight;
            }
            if (display) {
                ctx.font = labelFont;
                if (isHorizontal) {
                    var lineWidths = me.lineWidths = [0];
                    var totalHeight = me.legendItems.length ? fontSize + labelOpts.padding : 0;
                    ctx.textAlign = 'left';
                    ctx.textBaseline = 'top';
                    helpers.each(me.legendItems, function (legendItem, i) {
                        var boxWidth = getBoxWidth(labelOpts, fontSize);
                        var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                        if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
                            totalHeight += fontSize + labelOpts.padding;
                            lineWidths[lineWidths.length] = me.left;
                        }
                        hitboxes[i] = {
                            left: 0,
                            top: 0,
                            width: width,
                            height: fontSize
                        };
                        lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
                    });
                    minSize.height += totalHeight;
                } else {
                    var vPadding = labelOpts.padding;
                    var columnWidths = me.columnWidths = [];
                    var totalWidth = labelOpts.padding;
                    var currentColWidth = 0;
                    var currentColHeight = 0;
                    var itemHeight = fontSize + vPadding;
                    helpers.each(me.legendItems, function (legendItem, i) {
                        var boxWidth = getBoxWidth(labelOpts, fontSize);
                        var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                        if (currentColHeight + itemHeight > minSize.height) {
                            totalWidth += currentColWidth + labelOpts.padding;
                            columnWidths.push(currentColWidth);
                            currentColWidth = 0;
                            currentColHeight = 0;
                        }
                        currentColWidth = Math.max(currentColWidth, itemWidth);
                        currentColHeight += itemHeight;
                        hitboxes[i] = {
                            left: 0,
                            top: 0,
                            width: itemWidth,
                            height: fontSize
                        };
                    });
                    totalWidth += currentColWidth;
                    columnWidths.push(currentColWidth);
                    minSize.width += totalWidth;
                }
            }
            me.width = minSize.width;
            me.height = minSize.height;
        },
        afterFit: noop,
        isHorizontal: function () {
            return this.options.position === 'top' || this.options.position === 'bottom';
        },
        draw: function () {
            var me = this;
            var opts = me.options;
            var labelOpts = opts.labels;
            var globalDefault = Chart.defaults.global, lineDefault = globalDefault.elements.line, legendWidth = me.width, lineWidths = me.lineWidths;
            if (opts.display) {
                var ctx = me.ctx, cursor, itemOrDefault = helpers.getValueOrDefault, fontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor), fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize), fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle), fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily), labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
                ctx.textAlign = 'left';
                ctx.textBaseline = 'top';
                ctx.lineWidth = 0.5;
                ctx.strokeStyle = fontColor;
                ctx.fillStyle = fontColor;
                ctx.font = labelFont;
                var boxWidth = getBoxWidth(labelOpts, fontSize), hitboxes = me.legendHitBoxes;
                var drawLegendBox = function (x, y, legendItem) {
                    if (isNaN(boxWidth) || boxWidth <= 0) {
                        return;
                    }
                    ctx.save();
                    ctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
                    ctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
                    ctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
                    ctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
                    ctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
                    ctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
                    var isLineWidthZero = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0;
                    if (ctx.setLineDash) {
                        ctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));
                    }
                    if (opts.labels && opts.labels.usePointStyle) {
                        var radius = fontSize * Math.SQRT2 / 2;
                        var offSet = radius / Math.SQRT2;
                        var centerX = x + offSet;
                        var centerY = y + offSet;
                        Chart.canvasHelpers.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
                    } else {
                        if (!isLineWidthZero) {
                            ctx.strokeRect(x, y, boxWidth, fontSize);
                        }
                        ctx.fillRect(x, y, boxWidth, fontSize);
                    }
                    ctx.restore();
                };
                var fillText = function (x, y, legendItem, textWidth) {
                    ctx.fillText(legendItem.text, boxWidth + fontSize / 2 + x, y);
                    if (legendItem.hidden) {
                        ctx.beginPath();
                        ctx.lineWidth = 2;
                        ctx.moveTo(boxWidth + fontSize / 2 + x, y + fontSize / 2);
                        ctx.lineTo(boxWidth + fontSize / 2 + x + textWidth, y + fontSize / 2);
                        ctx.stroke();
                    }
                };
                var isHorizontal = me.isHorizontal();
                if (isHorizontal) {
                    cursor = {
                        x: me.left + (legendWidth - lineWidths[0]) / 2,
                        y: me.top + labelOpts.padding,
                        line: 0
                    };
                } else {
                    cursor = {
                        x: me.left + labelOpts.padding,
                        y: me.top + labelOpts.padding,
                        line: 0
                    };
                }
                var itemHeight = fontSize + labelOpts.padding;
                helpers.each(me.legendItems, function (legendItem, i) {
                    var textWidth = ctx.measureText(legendItem.text).width, width = boxWidth + fontSize / 2 + textWidth, x = cursor.x, y = cursor.y;
                    if (isHorizontal) {
                        if (x + width >= legendWidth) {
                            y = cursor.y += itemHeight;
                            cursor.line++;
                            x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2;
                        }
                    } else if (y + itemHeight > me.bottom) {
                        x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
                        y = cursor.y = me.top + labelOpts.padding;
                        cursor.line++;
                    }
                    drawLegendBox(x, y, legendItem);
                    hitboxes[i].left = x;
                    hitboxes[i].top = y;
                    fillText(x, y, legendItem, textWidth);
                    if (isHorizontal) {
                        cursor.x += width + labelOpts.padding;
                    } else {
                        cursor.y += itemHeight;
                    }
                });
            }
        },
        handleEvent: function (e) {
            var me = this;
            var opts = me.options;
            var type = e.type === 'mouseup' ? 'click' : e.type;
            var changed = false;
            if (type === 'mousemove') {
                if (!opts.onHover) {
                    return;
                }
            } else if (type === 'click') {
                if (!opts.onClick) {
                    return;
                }
            } else {
                return;
            }
            var x = e.x, y = e.y;
            if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
                var lh = me.legendHitBoxes;
                for (var i = 0; i < lh.length; ++i) {
                    var hitBox = lh[i];
                    if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
                        if (type === 'click') {
                            opts.onClick.call(me, e.native, me.legendItems[i]);
                            changed = true;
                            break;
                        } else if (type === 'mousemove') {
                            opts.onHover.call(me, e.native, me.legendItems[i]);
                            changed = true;
                            break;
                        }
                    }
                }
            }
            return changed;
        }
    });
    function createNewLegendAndAttach(chartInstance, legendOpts) {
        var legend = new Chart.Legend({
            ctx: chartInstance.chart.ctx,
            options: legendOpts,
            chart: chartInstance
        });
        chartInstance.legend = legend;
        Chart.layoutService.addBox(chartInstance, legend);
    }
    Chart.plugins.register({
        beforeInit: function (chartInstance) {
            var legendOpts = chartInstance.options.legend;
            if (legendOpts) {
                createNewLegendAndAttach(chartInstance, legendOpts);
            }
        },
        beforeUpdate: function (chartInstance) {
            var legendOpts = chartInstance.options.legend;
            if (legendOpts) {
                legendOpts = helpers.configMerge(Chart.defaults.global.legend, legendOpts);
                if (chartInstance.legend) {
                    chartInstance.legend.options = legendOpts;
                } else {
                    createNewLegendAndAttach(chartInstance, legendOpts);
                }
            } else {
                Chart.layoutService.removeBox(chartInstance, chartInstance.legend);
                delete chartInstance.legend;
            }
        },
        afterEvent: function (chartInstance, e) {
            var legend = chartInstance.legend;
            if (legend) {
                legend.handleEvent(e);
            }
        }
    });
};}, $__.fs.J$__v7918151485_1052_35),
            $__.os.oid29 = {}
        ],
        31: [
            ($__.fs.J$__v7918151485_1076_36 = function J$__v7918151485_1076(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid101).exports = ($__.fs.J$__v7918151485_1074_489 = function J$__v7918151485_1074(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    ((((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56), $__.os.oid56).plugins = $__.os.oid102 = {};
    Chart.plugins = $__.os.oid103 = {
        '_plugins': [],
        '_cacheId': 0,
        'register': ($__.fs.J$__v7918151485_1056_490 = function J$__v7918151485_1056(plugins) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, p;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
plugins = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    p = TAJS_restrictToType((this, $__.os.oid103)._plugins, 'object');
    vvv_tmp0 = function $__lt53(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt53, -2);
    }([]['concat'](plugins)), 'forEach', $__.fs.J$__v1609870951_3_1.call(vvv_tmp0, ($__.fs.J$__v7918151485_1054_654 = function J$__v7918151485_1054(plugin) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
plugin = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    p['indexOf'](plugin) === -1;
    p['push'](plugin);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (p.indexOf(plugin) === -1) {
    p.push(plugin);
}}, $__.fs.J$__v7918151485_1054_654), 1, true, $__.uid);
    ((vvv_tmp1 = this, $__.os.oid103)._cacheId = (vvv_tmp1._cacheId, 0) + 1) - 1;
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    p = TAJS_restrictToType((this, $__.os.oid103)._plugins, 'object');
    vvv_tmp0 = function $__lt56(res) {
        res.length = 1;
        if (res.length != 1)
            TAJS_dumpValue('Possible loss of precision');
        return res;
        ;
        TAJS_makeContextSensitive($__lt56, -2);
    }([]['concat'](plugins)), 'forEach', $__.fs.J$__v1609870951_3_1.call(vvv_tmp0, ($__.fs.J$__v7918151485_1054_675 = function J$__v7918151485_1054(plugin) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
plugin = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    p['indexOf'](plugin) === -1;
    p['push'](plugin);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (p.indexOf(plugin) === -1) {
    p.push(plugin);
}}, $__.fs.J$__v7918151485_1054_675), 2, true, $__.uid);
    ((vvv_tmp1 = this, $__.os.oid103)._cacheId = (vvv_tmp1._cacheId, 1) + 1) - 1;
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
p = this._plugins;
[].concat(plugins).forEach(function (plugin) {
    if (p.indexOf(plugin) === -1) {
        p.push(plugin);
    }
});
this._cacheId++;}),
        'unregister': ($__.fs.J$__v7918151485_1060_491 = function J$__v7918151485_1060(plugins) {
var vvv_return, vvv_switch, p;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
plugins = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
p = this._plugins;
[].concat(plugins).forEach(function (plugin) {
    var idx = p.indexOf(plugin);
    if (idx !== -1) {
        p.splice(idx, 1);
    }
});
this._cacheId++;}),
        'clear': ($__.fs.J$__v7918151485_1062_492 = function J$__v7918151485_1062() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._plugins = [];
this._cacheId++;}),
        'count': ($__.fs.J$__v7918151485_1064_493 = function J$__v7918151485_1064() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._plugins.length;}),
        'getAll': ($__.fs.J$__v7918151485_1066_494 = function J$__v7918151485_1066() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this._plugins;}),
        'notify': ($__.fs.J$__v7918151485_1068_495 = function J$__v7918151485_1068(chart, hook, args) {
var vvv_return, vvv_switch, descriptors, ilen, i, descriptor, plugin, params, method;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], hook = arguments[1], args = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
descriptors = this.descriptors(chart);
ilen = descriptors.length;
for (i = 0; i < ilen; ++i) {
    descriptor = descriptors[i];
    plugin = descriptor.plugin;
    method = plugin[hook];
    if (typeof method === 'function') {
        params = [chart].concat(args || []);
        params.push(descriptor.options);
        if (method.apply(plugin, params) === false) {
            return false;
        }
    }
}
return true;}),
        'descriptors': ($__.fs.J$__v7918151485_1072_496 = function J$__v7918151485_1072(chart) {
var vvv_return, vvv_switch, cache, plugins, descriptors, config, defaults, options;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
cache = chart._plugins || (chart._plugins = {});
if (cache.id === this._cacheId) {
    return cache.descriptors;
}
plugins = [];
descriptors = [];
config = chart && chart.config || {};
defaults = Chart.defaults.global.plugins;
options = config.options && config.options.plugins || {};
this._plugins.concat(config.plugins || []).forEach(function (plugin) {
    var idx = plugins.indexOf(plugin);
    if (idx !== -1) {
        return;
    }
    var id = plugin.id;
    var opts = options[id];
    if (opts === false) {
        return;
    }
    if (opts === true) {
        opts = helpers.clone(defaults[id]);
    }
    plugins.push(plugin);
    descriptors.push({
        plugin: plugin,
        options: opts || {}
    });
});
cache.descriptors = descriptors;
cache.id = this._cacheId;
return descriptors;})
    };
    Chart.pluginService = (Chart.plugins, $__.os.oid103);
    Chart.PluginBase = (vvv_tmp0 = helpers, 'inherits', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid104 = {}, 0, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.defaults.global.plugins = {};
Chart.plugins = {
    _plugins: [],
    _cacheId: 0,
    register: function (plugins) {
        var p = this._plugins;
        [].concat(plugins).forEach(function (plugin) {
            if (p.indexOf(plugin) === -1) {
                p.push(plugin);
            }
        });
        this._cacheId++;
    },
    unregister: function (plugins) {
        var p = this._plugins;
        [].concat(plugins).forEach(function (plugin) {
            var idx = p.indexOf(plugin);
            if (idx !== -1) {
                p.splice(idx, 1);
            }
        });
        this._cacheId++;
    },
    clear: function () {
        this._plugins = [];
        this._cacheId++;
    },
    count: function () {
        return this._plugins.length;
    },
    getAll: function () {
        return this._plugins;
    },
    notify: function (chart, hook, args) {
        var descriptors = this.descriptors(chart);
        var ilen = descriptors.length;
        var i, descriptor, plugin, params, method;
        for (i = 0; i < ilen; ++i) {
            descriptor = descriptors[i];
            plugin = descriptor.plugin;
            method = plugin[hook];
            if (typeof method === 'function') {
                params = [chart].concat(args || []);
                params.push(descriptor.options);
                if (method.apply(plugin, params) === false) {
                    return false;
                }
            }
        }
        return true;
    },
    descriptors: function (chart) {
        var cache = chart._plugins || (chart._plugins = {});
        if (cache.id === this._cacheId) {
            return cache.descriptors;
        }
        var plugins = [];
        var descriptors = [];
        var config = chart && chart.config || {};
        var defaults = Chart.defaults.global.plugins;
        var options = config.options && config.options.plugins || {};
        this._plugins.concat(config.plugins || []).forEach(function (plugin) {
            var idx = plugins.indexOf(plugin);
            if (idx !== -1) {
                return;
            }
            var id = plugin.id;
            var opts = options[id];
            if (opts === false) {
                return;
            }
            if (opts === true) {
                opts = helpers.clone(defaults[id]);
            }
            plugins.push(plugin);
            descriptors.push({
                plugin: plugin,
                options: opts || {}
            });
        });
        cache.descriptors = descriptors;
        cache.id = this._cacheId;
        return descriptors;
    }
};
Chart.pluginService = Chart.plugins;
Chart.PluginBase = helpers.inherits({});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.defaults.global.plugins = {};
    Chart.plugins = {
        _plugins: [],
        _cacheId: 0,
        register: function (plugins) {
            var p = this._plugins;
            [].concat(plugins).forEach(function (plugin) {
                if (p.indexOf(plugin) === -1) {
                    p.push(plugin);
                }
            });
            this._cacheId++;
        },
        unregister: function (plugins) {
            var p = this._plugins;
            [].concat(plugins).forEach(function (plugin) {
                var idx = p.indexOf(plugin);
                if (idx !== -1) {
                    p.splice(idx, 1);
                }
            });
            this._cacheId++;
        },
        clear: function () {
            this._plugins = [];
            this._cacheId++;
        },
        count: function () {
            return this._plugins.length;
        },
        getAll: function () {
            return this._plugins;
        },
        notify: function (chart, hook, args) {
            var descriptors = this.descriptors(chart);
            var ilen = descriptors.length;
            var i, descriptor, plugin, params, method;
            for (i = 0; i < ilen; ++i) {
                descriptor = descriptors[i];
                plugin = descriptor.plugin;
                method = plugin[hook];
                if (typeof method === 'function') {
                    params = [chart].concat(args || []);
                    params.push(descriptor.options);
                    if (method.apply(plugin, params) === false) {
                        return false;
                    }
                }
            }
            return true;
        },
        descriptors: function (chart) {
            var cache = chart._plugins || (chart._plugins = {});
            if (cache.id === this._cacheId) {
                return cache.descriptors;
            }
            var plugins = [];
            var descriptors = [];
            var config = chart && chart.config || {};
            var defaults = Chart.defaults.global.plugins;
            var options = config.options && config.options.plugins || {};
            this._plugins.concat(config.plugins || []).forEach(function (plugin) {
                var idx = plugins.indexOf(plugin);
                if (idx !== -1) {
                    return;
                }
                var id = plugin.id;
                var opts = options[id];
                if (opts === false) {
                    return;
                }
                if (opts === true) {
                    opts = helpers.clone(defaults[id]);
                }
                plugins.push(plugin);
                descriptors.push({
                    plugin: plugin,
                    options: opts || {}
                });
            });
            cache.descriptors = descriptors;
            cache.id = this._cacheId;
            return descriptors;
        }
    };
    Chart.pluginService = Chart.plugins;
    Chart.PluginBase = helpers.inherits({});
};}, $__.fs.J$__v7918151485_1076_36),
            $__.os.oid30 = {}
        ],
        32: [
            ($__.fs.J$__v7918151485_1144_37 = function J$__v7918151485_1144(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid138).exports = ($__.fs.J$__v7918151485_1142_605 = function J$__v7918151485_1142(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers, computeTextSize, parseFontOptions;
computeTextSize = function computeTextSize(context, tick, font) {
    return helpers.isArray(tick) ? helpers.longestText(context, font, tick) : context.measureText(tick).width;
};
parseFontOptions = function parseFontOptions(options) {
    var getValueOrDefault = helpers.getValueOrDefault;
    var globalDefaults = Chart.defaults.global;
    var size = getValueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
    var style = getValueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
    var family = getValueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
    return {
        size: size,
        style: style,
        family: family,
        font: helpers.fontString(size, style, family)
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    computeTextSize = ($__.fs.computeTextSize_606 = function computeTextSize(context, tick, font) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0], tick = arguments[1], font = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return helpers.isArray(tick) ? helpers.longestText(context, font, tick) : context.measureText(tick).width;});
    parseFontOptions = ($__.fs.parseFontOptions_607 = function parseFontOptions(options) {
var vvv_return, vvv_switch, getValueOrDefault, globalDefaults, size, style, family;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
options = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
getValueOrDefault = helpers.getValueOrDefault;
globalDefaults = Chart.defaults.global;
size = getValueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
style = getValueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
family = getValueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
return {
    size: size,
    style: style,
    family: family,
    font: helpers.fontString(size, style, family)
};});
    helpers = (Chart.helpers, $__.os.oid88);
    ((Chart.defaults, $__.os.oid57), $__.os.oid57).scale = $__.os.oid142 = {
        'display': true,
        'position': 'left',
        'gridLines': $__.os.oid139 = {
            'display': true,
            'color': 'rgba(0, 0, 0, 0.1)',
            'lineWidth': 1,
            'drawBorder': true,
            'drawOnChartArea': true,
            'drawTicks': true,
            'tickMarkLength': 10,
            'zeroLineWidth': 1,
            'zeroLineColor': 'rgba(0,0,0,0.25)',
            'offsetGridLines': false,
            'borderDash': [],
            'borderDashOffset': 0
        },
        'scaleLabel': $__.os.oid140 = {
            'labelString': '',
            'display': false
        },
        'ticks': $__.os.oid141 = {
            'beginAtZero': false,
            'minRotation': 0,
            'maxRotation': 50,
            'mirror': false,
            'padding': 0,
            'reverse': false,
            'display': true,
            'autoSkip': true,
            'autoSkipPadding': 0,
            'labelOffset': 0,
            'callback': TAJS_restrictToType(((((Chart.Ticks, $__.os.oid136), $__.os.oid136).formatters, $__.os.oid135), $__.os.oid135).values, 'function')
        }
    };
    Chart.Scale = (vvv_tmp0 = TAJS_restrictToType(Chart.Element, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid143 = {
        'getPadding': ($__.fs.J$__v7918151485_1080_608 = function J$__v7918151485_1080() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
return {
    left: me.paddingLeft || 0,
    top: me.paddingTop || 0,
    right: me.paddingRight || 0,
    bottom: me.paddingBottom || 0
};}, $__.fs.J$__v7918151485_1080_608_204 = $__.fs.J$__v7918151485_1080_608, $__.fs.J$__v7918151485_1080_608),
        'beforeUpdate': ($__.fs.J$__v7918151485_1082_609 = function J$__v7918151485_1082() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.beforeUpdate, [this]);}, $__.fs.J$__v7918151485_1082_609_206 = $__.fs.J$__v7918151485_1082_609, $__.fs.J$__v7918151485_1082_609),
        'update': ($__.fs.J$__v7918151485_1084_610 = function J$__v7918151485_1084(maxWidth, maxHeight, margins) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
maxWidth = arguments[0], maxHeight = arguments[1], margins = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.beforeUpdate();
me.maxWidth = maxWidth;
me.maxHeight = maxHeight;
me.margins = helpers.extend({
    left: 0,
    right: 0,
    top: 0,
    bottom: 0
}, margins);
me.longestTextCache = me.longestTextCache || {};
me.beforeSetDimensions();
me.setDimensions();
me.afterSetDimensions();
me.beforeDataLimits();
me.determineDataLimits();
me.afterDataLimits();
me.beforeBuildTicks();
me.buildTicks();
me.afterBuildTicks();
me.beforeTickToLabelConversion();
me.convertTicksToLabels();
me.afterTickToLabelConversion();
me.beforeCalculateTickRotation();
me.calculateTickRotation();
me.afterCalculateTickRotation();
me.beforeFit();
me.fit();
me.afterFit();
me.afterUpdate();
return me.minSize;}, $__.fs.J$__v7918151485_1084_610_208 = $__.fs.J$__v7918151485_1084_610, $__.fs.J$__v7918151485_1084_610),
        'afterUpdate': ($__.fs.J$__v7918151485_1086_611 = function J$__v7918151485_1086() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.afterUpdate, [this]);}, $__.fs.J$__v7918151485_1086_611_210 = $__.fs.J$__v7918151485_1086_611, $__.fs.J$__v7918151485_1086_611),
        'beforeSetDimensions': ($__.fs.J$__v7918151485_1088_612 = function J$__v7918151485_1088() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.beforeSetDimensions, [this]);}, $__.fs.J$__v7918151485_1088_612_212 = $__.fs.J$__v7918151485_1088_612, $__.fs.J$__v7918151485_1088_612),
        'setDimensions': ($__.fs.J$__v7918151485_1090_613 = function J$__v7918151485_1090() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (me.isHorizontal()) {
    me.width = me.maxWidth;
    me.left = 0;
    me.right = me.width;
} else {
    me.height = me.maxHeight;
    me.top = 0;
    me.bottom = me.height;
}
me.paddingLeft = 0;
me.paddingTop = 0;
me.paddingRight = 0;
me.paddingBottom = 0;}, $__.fs.J$__v7918151485_1090_613_214 = $__.fs.J$__v7918151485_1090_613, $__.fs.J$__v7918151485_1090_613),
        'afterSetDimensions': ($__.fs.J$__v7918151485_1092_614 = function J$__v7918151485_1092() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.afterSetDimensions, [this]);}, $__.fs.J$__v7918151485_1092_614_216 = $__.fs.J$__v7918151485_1092_614, $__.fs.J$__v7918151485_1092_614),
        'beforeDataLimits': ($__.fs.J$__v7918151485_1094_615 = function J$__v7918151485_1094() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.beforeDataLimits, [this]);}, $__.fs.J$__v7918151485_1094_615_218 = $__.fs.J$__v7918151485_1094_615, $__.fs.J$__v7918151485_1094_615),
        'determineDataLimits': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
        'afterDataLimits': ($__.fs.J$__v7918151485_1096_616 = function J$__v7918151485_1096() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.afterDataLimits, [this]);}, $__.fs.J$__v7918151485_1096_616_222 = $__.fs.J$__v7918151485_1096_616, $__.fs.J$__v7918151485_1096_616),
        'beforeBuildTicks': ($__.fs.J$__v7918151485_1098_617 = function J$__v7918151485_1098() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.beforeBuildTicks, [this]);}, $__.fs.J$__v7918151485_1098_617_224 = $__.fs.J$__v7918151485_1098_617, $__.fs.J$__v7918151485_1098_617),
        'buildTicks': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
        'afterBuildTicks': ($__.fs.J$__v7918151485_1100_618 = function J$__v7918151485_1100() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.afterBuildTicks, [this]);}, $__.fs.J$__v7918151485_1100_618_228 = $__.fs.J$__v7918151485_1100_618, $__.fs.J$__v7918151485_1100_618),
        'beforeTickToLabelConversion': ($__.fs.J$__v7918151485_1102_619 = function J$__v7918151485_1102() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.beforeTickToLabelConversion, [this]);}, $__.fs.J$__v7918151485_1102_619_230 = $__.fs.J$__v7918151485_1102_619, $__.fs.J$__v7918151485_1102_619),
        'convertTicksToLabels': ($__.fs.J$__v7918151485_1104_620 = function J$__v7918151485_1104() {
var vvv_return, vvv_switch, me, tickOpts;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
tickOpts = me.options.ticks;
me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);}, $__.fs.J$__v7918151485_1104_620_232 = $__.fs.J$__v7918151485_1104_620, $__.fs.J$__v7918151485_1104_620),
        'afterTickToLabelConversion': ($__.fs.J$__v7918151485_1106_621 = function J$__v7918151485_1106() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.afterTickToLabelConversion, [this]);}, $__.fs.J$__v7918151485_1106_621_234 = $__.fs.J$__v7918151485_1106_621, $__.fs.J$__v7918151485_1106_621),
        'beforeCalculateTickRotation': ($__.fs.J$__v7918151485_1108_622 = function J$__v7918151485_1108() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.beforeCalculateTickRotation, [this]);}, $__.fs.J$__v7918151485_1108_622_236 = $__.fs.J$__v7918151485_1108_622, $__.fs.J$__v7918151485_1108_622),
        'calculateTickRotation': ($__.fs.J$__v7918151485_1110_623 = function J$__v7918151485_1110() {
var vvv_return, vvv_switch, me, context, tickOpts, tickFont, labelRotation, originalLabelWidth, labelWidth, cosRotation, sinRotation, tickWidth, angleRadians;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
context = me.ctx;
tickOpts = me.options.ticks;
tickFont = parseFontOptions(tickOpts);
context.font = tickFont.font;
labelRotation = tickOpts.minRotation || 0;
if (me.options.display && me.isHorizontal()) {
    originalLabelWidth = helpers.longestText(context, tickFont.font, me.ticks, me.longestTextCache);
    labelWidth = originalLabelWidth;
    tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;
    while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
        angleRadians = helpers.toRadians(labelRotation);
        cosRotation = Math.cos(angleRadians);
        sinRotation = Math.sin(angleRadians);
        if (sinRotation * originalLabelWidth > me.maxHeight) {
            labelRotation--;
            break;
        }
        labelRotation++;
        labelWidth = cosRotation * originalLabelWidth;
    }
}
me.labelRotation = labelRotation;}, $__.fs.J$__v7918151485_1110_623_238 = $__.fs.J$__v7918151485_1110_623, $__.fs.J$__v7918151485_1110_623),
        'afterCalculateTickRotation': ($__.fs.J$__v7918151485_1112_624 = function J$__v7918151485_1112() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.afterCalculateTickRotation, [this]);}, $__.fs.J$__v7918151485_1112_624_240 = $__.fs.J$__v7918151485_1112_624, $__.fs.J$__v7918151485_1112_624),
        'beforeFit': ($__.fs.J$__v7918151485_1114_625 = function J$__v7918151485_1114() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.beforeFit, [this]);}, $__.fs.J$__v7918151485_1114_625_242 = $__.fs.J$__v7918151485_1114_625, $__.fs.J$__v7918151485_1114_625),
        'fit': ($__.fs.J$__v7918151485_1116_626 = function J$__v7918151485_1116() {
var vvv_return, vvv_switch, me, minSize, opts, tickOpts, scaleLabelOpts, gridLineOpts, display, isHorizontal, tickFont, scaleLabelFontSize, tickMarkLength, largestTextWidth, tallestLabelHeightInLines, lineSpace, angleRadians, cosRotation, sinRotation, labelHeight, firstTick, firstLabelWidth, lastTick, lastLabelWidth;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
minSize = me.minSize = {
    width: 0,
    height: 0
};
opts = me.options;
tickOpts = opts.ticks;
scaleLabelOpts = opts.scaleLabel;
gridLineOpts = opts.gridLines;
display = opts.display;
isHorizontal = me.isHorizontal();
tickFont = parseFontOptions(tickOpts);
scaleLabelFontSize = parseFontOptions(scaleLabelOpts).size * 1.5;
tickMarkLength = opts.gridLines.tickMarkLength;
if (isHorizontal) {
    minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
} else {
    minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
}
if (isHorizontal) {
    minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
} else {
    minSize.height = me.maxHeight;
}
if (scaleLabelOpts.display && display) {
    if (isHorizontal) {
        minSize.height += scaleLabelFontSize;
    } else {
        minSize.width += scaleLabelFontSize;
    }
}
if (tickOpts.display && display) {
    largestTextWidth = helpers.longestText(me.ctx, tickFont.font, me.ticks, me.longestTextCache);
    tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);
    lineSpace = tickFont.size * 0.5;
    if (isHorizontal) {
        me.longestLabelWidth = largestTextWidth;
        angleRadians = helpers.toRadians(me.labelRotation);
        cosRotation = Math.cos(angleRadians);
        sinRotation = Math.sin(angleRadians);
        labelHeight = sinRotation * largestTextWidth + tickFont.size * tallestLabelHeightInLines + lineSpace * tallestLabelHeightInLines;
        minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);
        me.ctx.font = tickFont.font;
        firstTick = me.ticks[0];
        firstLabelWidth = computeTextSize(me.ctx, firstTick, tickFont.font);
        lastTick = me.ticks[me.ticks.length - 1];
        lastLabelWidth = computeTextSize(me.ctx, lastTick, tickFont.font);
        if (me.labelRotation !== 0) {
            me.paddingLeft = opts.position === 'bottom' ? cosRotation * firstLabelWidth + 3 : cosRotation * lineSpace + 3;
            me.paddingRight = opts.position === 'bottom' ? cosRotation * lineSpace + 3 : cosRotation * lastLabelWidth + 3;
        } else {
            me.paddingLeft = firstLabelWidth / 2 + 3;
            me.paddingRight = lastLabelWidth / 2 + 3;
        }
    } else {
        if (tickOpts.mirror) {
            largestTextWidth = 0;
        } else {
            largestTextWidth += me.options.ticks.padding;
        }
        minSize.width += largestTextWidth;
        me.paddingTop = tickFont.size / 2;
        me.paddingBottom = tickFont.size / 2;
    }
}
me.handleMargins();
me.width = minSize.width;
me.height = minSize.height;}, $__.fs.J$__v7918151485_1116_626_244 = $__.fs.J$__v7918151485_1116_626, $__.fs.J$__v7918151485_1116_626),
        'handleMargins': ($__.fs.J$__v7918151485_1118_627 = function J$__v7918151485_1118() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (me.margins) {
    me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
    me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
    me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
    me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
}}, $__.fs.J$__v7918151485_1118_627_246 = $__.fs.J$__v7918151485_1118_627, $__.fs.J$__v7918151485_1118_627),
        'afterFit': ($__.fs.J$__v7918151485_1120_628 = function J$__v7918151485_1120() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.callCallback(this.options.afterFit, [this]);}, $__.fs.J$__v7918151485_1120_628_248 = $__.fs.J$__v7918151485_1120_628, $__.fs.J$__v7918151485_1120_628),
        'isHorizontal': ($__.fs.J$__v7918151485_1122_629 = function J$__v7918151485_1122() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.options.position === 'top' || this.options.position === 'bottom';}, $__.fs.J$__v7918151485_1122_629_250 = $__.fs.J$__v7918151485_1122_629, $__.fs.J$__v7918151485_1122_629),
        'isFullWidth': ($__.fs.J$__v7918151485_1124_630 = function J$__v7918151485_1124() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.options.fullWidth;}, $__.fs.J$__v7918151485_1124_630_252 = $__.fs.J$__v7918151485_1124_630, $__.fs.J$__v7918151485_1124_630),
        'getRightValue': ($__.fs.J$__v7918151485_1126_631 = function J$__v7918151485_1126(rawValue) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
rawValue = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (rawValue === null || typeof rawValue === 'undefined') {
    return NaN;
}
if (typeof rawValue === 'number' && !isFinite(rawValue)) {
    return NaN;
}
if (typeof rawValue === 'object') {
    if (rawValue instanceof Date || rawValue.isValid) {
        return rawValue;
    }
    return this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);
}
return rawValue;}, $__.fs.J$__v7918151485_1126_631_254 = $__.fs.J$__v7918151485_1126_631, $__.fs.J$__v7918151485_1126_631),
        'getLabelForIndex': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
        'getPixelForValue': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
        'getValueForPixel': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
        'getPixelForTick': ($__.fs.J$__v7918151485_1128_632 = function J$__v7918151485_1128(index, includeOffset) {
var vvv_return, vvv_switch, me, innerWidth, tickWidth, pixel, finalVal, innerHeight;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], includeOffset = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (me.isHorizontal()) {
    innerWidth = me.width - (me.paddingLeft + me.paddingRight);
    tickWidth = innerWidth / Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
    pixel = tickWidth * index + me.paddingLeft;
    if (includeOffset) {
        pixel += tickWidth / 2;
    }
    finalVal = me.left + Math.round(pixel);
    finalVal += me.isFullWidth() ? me.margins.left : 0;
    return finalVal;
}
innerHeight = me.height - (me.paddingTop + me.paddingBottom);
return me.top + index * (innerHeight / (me.ticks.length - 1));}, $__.fs.J$__v7918151485_1128_632_262 = $__.fs.J$__v7918151485_1128_632, $__.fs.J$__v7918151485_1128_632),
        'getPixelForDecimal': ($__.fs.J$__v7918151485_1130_633 = function J$__v7918151485_1130(decimal) {
var vvv_return, vvv_switch, me, innerWidth, valueOffset, finalVal;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
decimal = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (me.isHorizontal()) {
    innerWidth = me.width - (me.paddingLeft + me.paddingRight);
    valueOffset = innerWidth * decimal + me.paddingLeft;
    finalVal = me.left + Math.round(valueOffset);
    finalVal += me.isFullWidth() ? me.margins.left : 0;
    return finalVal;
}
return me.top + decimal * me.height;}, $__.fs.J$__v7918151485_1130_633_264 = $__.fs.J$__v7918151485_1130_633, $__.fs.J$__v7918151485_1130_633),
        'getBasePixel': ($__.fs.J$__v7918151485_1132_634 = function J$__v7918151485_1132() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.getPixelForValue(this.getBaseValue());}, $__.fs.J$__v7918151485_1132_634_266 = $__.fs.J$__v7918151485_1132_634, $__.fs.J$__v7918151485_1132_634),
        'getBaseValue': ($__.fs.J$__v7918151485_1134_635 = function J$__v7918151485_1134() {
var vvv_return, vvv_switch, me, min, max;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
min = me.min;
max = me.max;
return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;}, $__.fs.J$__v7918151485_1134_635_268 = $__.fs.J$__v7918151485_1134_635, $__.fs.J$__v7918151485_1134_635),
        'draw': ($__.fs.J$__v7918151485_1140_636 = function J$__v7918151485_1140(chartArea) {
var vvv_return, vvv_switch, me, options, context, globalDefaults, optionTicks, gridLines, scaleLabel, isRotated, skipRatio, useAutoskipper, isHorizontal, maxTicks, tickFontColor, tickFont, tl, borderDash, borderDashOffset, scaleLabelFontColor, scaleLabelFont, labelRotationRadians, cosRotation, longestRotatedLabel, itemsToDraw, xTickStart, xTickEnd, yTickStart, yTickEnd, scaleLabelX, scaleLabelY, rotation, isLeft, x1, x2, y1, y2, aliasPixel;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartArea = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
options = me.options;
if (!options.display) {
    return;
}
context = me.ctx;
globalDefaults = Chart.defaults.global;
optionTicks = options.ticks;
gridLines = options.gridLines;
scaleLabel = options.scaleLabel;
isRotated = me.labelRotation !== 0;
useAutoskipper = optionTicks.autoSkip;
isHorizontal = me.isHorizontal();
if (optionTicks.maxTicksLimit) {
    maxTicks = optionTicks.maxTicksLimit;
}
tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
tickFont = parseFontOptions(optionTicks);
tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
scaleLabelFont = parseFontOptions(scaleLabel);
labelRotationRadians = helpers.toRadians(me.labelRotation);
cosRotation = Math.cos(labelRotationRadians);
longestRotatedLabel = me.longestLabelWidth * cosRotation;
context.fillStyle = tickFontColor;
itemsToDraw = [];
if (isHorizontal) {
    skipRatio = false;
    if (isRotated) {
        longestRotatedLabel /= 2;
    }
    if ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > me.width - (me.paddingLeft + me.paddingRight)) {
        skipRatio = 1 + Math.floor((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length / (me.width - (me.paddingLeft + me.paddingRight)));
    }
    if (maxTicks && me.ticks.length > maxTicks) {
        while (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {
            if (!skipRatio) {
                skipRatio = 1;
            }
            skipRatio += 1;
        }
    }
    if (!useAutoskipper) {
        skipRatio = false;
    }
}
xTickStart = options.position === 'right' ? me.left : me.right - tl;
xTickEnd = options.position === 'right' ? me.left + tl : me.right;
yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;
yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;
helpers.each(me.ticks, function (label, index) {
    if (label === undefined || label === null) {
        return;
    }
    var isLastTick = me.ticks.length === index + 1;
    var shouldSkip = skipRatio > 1 && index % skipRatio > 0 || index % skipRatio === 0 && index + skipRatio >= me.ticks.length;
    if (shouldSkip && !isLastTick || (label === undefined || label === null)) {
        return;
    }
    var lineWidth, lineColor;
    if (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {
        lineWidth = gridLines.zeroLineWidth;
        lineColor = gridLines.zeroLineColor;
    } else {
        lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);
        lineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);
    }
    var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
    var textAlign = 'middle';
    var textBaseline = 'middle';
    if (isHorizontal) {
        if (options.position === 'bottom') {
            textBaseline = !isRotated ? 'top' : 'middle';
            textAlign = !isRotated ? 'center' : 'right';
            labelY = me.top + tl;
        } else {
            textBaseline = !isRotated ? 'bottom' : 'middle';
            textAlign = !isRotated ? 'center' : 'left';
            labelY = me.bottom - tl;
        }
        var xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth);
        labelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset;
        tx1 = tx2 = x1 = x2 = xLineValue;
        ty1 = yTickStart;
        ty2 = yTickEnd;
        y1 = chartArea.top;
        y2 = chartArea.bottom;
    } else {
        var isLeft = options.position === 'left';
        var tickPadding = optionTicks.padding;
        var labelXOffset;
        if (optionTicks.mirror) {
            textAlign = isLeft ? 'left' : 'right';
            labelXOffset = tickPadding;
        } else {
            textAlign = isLeft ? 'right' : 'left';
            labelXOffset = tl + tickPadding;
        }
        labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;
        var yLineValue = me.getPixelForTick(index);
        yLineValue += helpers.aliasPixel(lineWidth);
        labelY = me.getPixelForTick(index, gridLines.offsetGridLines);
        tx1 = xTickStart;
        tx2 = xTickEnd;
        x1 = chartArea.left;
        x2 = chartArea.right;
        ty1 = ty2 = y1 = y2 = yLineValue;
    }
    itemsToDraw.push({
        tx1: tx1,
        ty1: ty1,
        tx2: tx2,
        ty2: ty2,
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2,
        labelX: labelX,
        labelY: labelY,
        glWidth: lineWidth,
        glColor: lineColor,
        glBorderDash: borderDash,
        glBorderDashOffset: borderDashOffset,
        rotation: -1 * labelRotationRadians,
        label: label,
        textBaseline: textBaseline,
        textAlign: textAlign
    });
});
helpers.each(itemsToDraw, function (itemToDraw) {
    if (gridLines.display) {
        context.save();
        context.lineWidth = itemToDraw.glWidth;
        context.strokeStyle = itemToDraw.glColor;
        if (context.setLineDash) {
            context.setLineDash(itemToDraw.glBorderDash);
            context.lineDashOffset = itemToDraw.glBorderDashOffset;
        }
        context.beginPath();
        if (gridLines.drawTicks) {
            context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
            context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
        }
        if (gridLines.drawOnChartArea) {
            context.moveTo(itemToDraw.x1, itemToDraw.y1);
            context.lineTo(itemToDraw.x2, itemToDraw.y2);
        }
        context.stroke();
        context.restore();
    }
    if (optionTicks.display) {
        context.save();
        context.translate(itemToDraw.labelX, itemToDraw.labelY);
        context.rotate(itemToDraw.rotation);
        context.font = tickFont.font;
        context.textBaseline = itemToDraw.textBaseline;
        context.textAlign = itemToDraw.textAlign;
        var label = itemToDraw.label;
        if (helpers.isArray(label)) {
            for (var i = 0, y = 0; i < label.length; ++i) {
                context.fillText('' + label[i], 0, y);
                y += tickFont.size * 1.5;
            }
        } else {
            context.fillText(label, 0, 0);
        }
        context.restore();
    }
});
if (scaleLabel.display) {
    rotation = 0;
    if (isHorizontal) {
        scaleLabelX = me.left + (me.right - me.left) / 2;
        scaleLabelY = options.position === 'bottom' ? me.bottom - scaleLabelFont.size / 2 : me.top + scaleLabelFont.size / 2;
    } else {
        isLeft = options.position === 'left';
        scaleLabelX = isLeft ? me.left + scaleLabelFont.size / 2 : me.right - scaleLabelFont.size / 2;
        scaleLabelY = me.top + (me.bottom - me.top) / 2;
        rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
    }
    context.save();
    context.translate(scaleLabelX, scaleLabelY);
    context.rotate(rotation);
    context.textAlign = 'center';
    context.textBaseline = 'middle';
    context.fillStyle = scaleLabelFontColor;
    context.font = scaleLabelFont.font;
    context.fillText(scaleLabel.labelString, 0, 0);
    context.restore();
}
if (gridLines.drawBorder) {
    context.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);
    context.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);
    x1 = me.left;
    x2 = me.right;
    y1 = me.top;
    y2 = me.bottom;
    aliasPixel = helpers.aliasPixel(context.lineWidth);
    if (isHorizontal) {
        y1 = y2 = options.position === 'top' ? me.bottom : me.top;
        y1 += aliasPixel;
        y2 += aliasPixel;
    } else {
        x1 = x2 = options.position === 'left' ? me.right : me.left;
        x1 += aliasPixel;
        x2 += aliasPixel;
    }
    context.beginPath();
    context.moveTo(x1, y1);
    context.lineTo(x2, y2);
    context.stroke();
}}, $__.fs.J$__v7918151485_1140_636_270 = $__.fs.J$__v7918151485_1140_636, $__.fs.J$__v7918151485_1140_636)
    }, 2, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.defaults.scale = {
    display: true,
    position: 'left',
    gridLines: {
        display: true,
        color: 'rgba(0, 0, 0, 0.1)',
        lineWidth: 1,
        drawBorder: true,
        drawOnChartArea: true,
        drawTicks: true,
        tickMarkLength: 10,
        zeroLineWidth: 1,
        zeroLineColor: 'rgba(0,0,0,0.25)',
        offsetGridLines: false,
        borderDash: [],
        borderDashOffset: 0
    },
    scaleLabel: {
        labelString: '',
        display: false
    },
    ticks: {
        beginAtZero: false,
        minRotation: 0,
        maxRotation: 50,
        mirror: false,
        padding: 0,
        reverse: false,
        display: true,
        autoSkip: true,
        autoSkipPadding: 0,
        labelOffset: 0,
        callback: Chart.Ticks.formatters.values
    }
};
Chart.Scale = Chart.Element.extend({
    getPadding: function () {
        var me = this;
        return {
            left: me.paddingLeft || 0,
            top: me.paddingTop || 0,
            right: me.paddingRight || 0,
            bottom: me.paddingBottom || 0
        };
    },
    beforeUpdate: function () {
        helpers.callCallback(this.options.beforeUpdate, [this]);
    },
    update: function (maxWidth, maxHeight, margins) {
        var me = this;
        me.beforeUpdate();
        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me.margins = helpers.extend({
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        }, margins);
        me.longestTextCache = me.longestTextCache || {};
        me.beforeSetDimensions();
        me.setDimensions();
        me.afterSetDimensions();
        me.beforeDataLimits();
        me.determineDataLimits();
        me.afterDataLimits();
        me.beforeBuildTicks();
        me.buildTicks();
        me.afterBuildTicks();
        me.beforeTickToLabelConversion();
        me.convertTicksToLabels();
        me.afterTickToLabelConversion();
        me.beforeCalculateTickRotation();
        me.calculateTickRotation();
        me.afterCalculateTickRotation();
        me.beforeFit();
        me.fit();
        me.afterFit();
        me.afterUpdate();
        return me.minSize;
    },
    afterUpdate: function () {
        helpers.callCallback(this.options.afterUpdate, [this]);
    },
    beforeSetDimensions: function () {
        helpers.callCallback(this.options.beforeSetDimensions, [this]);
    },
    setDimensions: function () {
        var me = this;
        if (me.isHorizontal()) {
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
        } else {
            me.height = me.maxHeight;
            me.top = 0;
            me.bottom = me.height;
        }
        me.paddingLeft = 0;
        me.paddingTop = 0;
        me.paddingRight = 0;
        me.paddingBottom = 0;
    },
    afterSetDimensions: function () {
        helpers.callCallback(this.options.afterSetDimensions, [this]);
    },
    beforeDataLimits: function () {
        helpers.callCallback(this.options.beforeDataLimits, [this]);
    },
    determineDataLimits: helpers.noop,
    afterDataLimits: function () {
        helpers.callCallback(this.options.afterDataLimits, [this]);
    },
    beforeBuildTicks: function () {
        helpers.callCallback(this.options.beforeBuildTicks, [this]);
    },
    buildTicks: helpers.noop,
    afterBuildTicks: function () {
        helpers.callCallback(this.options.afterBuildTicks, [this]);
    },
    beforeTickToLabelConversion: function () {
        helpers.callCallback(this.options.beforeTickToLabelConversion, [this]);
    },
    convertTicksToLabels: function () {
        var me = this;
        var tickOpts = me.options.ticks;
        me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);
    },
    afterTickToLabelConversion: function () {
        helpers.callCallback(this.options.afterTickToLabelConversion, [this]);
    },
    beforeCalculateTickRotation: function () {
        helpers.callCallback(this.options.beforeCalculateTickRotation, [this]);
    },
    calculateTickRotation: function () {
        var me = this;
        var context = me.ctx;
        var tickOpts = me.options.ticks;
        var tickFont = parseFontOptions(tickOpts);
        context.font = tickFont.font;
        var labelRotation = tickOpts.minRotation || 0;
        if (me.options.display && me.isHorizontal()) {
            var originalLabelWidth = helpers.longestText(context, tickFont.font, me.ticks, me.longestTextCache);
            var labelWidth = originalLabelWidth;
            var cosRotation;
            var sinRotation;
            var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;
            while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
                var angleRadians = helpers.toRadians(labelRotation);
                cosRotation = Math.cos(angleRadians);
                sinRotation = Math.sin(angleRadians);
                if (sinRotation * originalLabelWidth > me.maxHeight) {
                    labelRotation--;
                    break;
                }
                labelRotation++;
                labelWidth = cosRotation * originalLabelWidth;
            }
        }
        me.labelRotation = labelRotation;
    },
    afterCalculateTickRotation: function () {
        helpers.callCallback(this.options.afterCalculateTickRotation, [this]);
    },
    beforeFit: function () {
        helpers.callCallback(this.options.beforeFit, [this]);
    },
    fit: function () {
        var me = this;
        var minSize = me.minSize = {
            width: 0,
            height: 0
        };
        var opts = me.options;
        var tickOpts = opts.ticks;
        var scaleLabelOpts = opts.scaleLabel;
        var gridLineOpts = opts.gridLines;
        var display = opts.display;
        var isHorizontal = me.isHorizontal();
        var tickFont = parseFontOptions(tickOpts);
        var scaleLabelFontSize = parseFontOptions(scaleLabelOpts).size * 1.5;
        var tickMarkLength = opts.gridLines.tickMarkLength;
        if (isHorizontal) {
            minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
        } else {
            minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
        }
        if (isHorizontal) {
            minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
        } else {
            minSize.height = me.maxHeight;
        }
        if (scaleLabelOpts.display && display) {
            if (isHorizontal) {
                minSize.height += scaleLabelFontSize;
            } else {
                minSize.width += scaleLabelFontSize;
            }
        }
        if (tickOpts.display && display) {
            var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, me.ticks, me.longestTextCache);
            var tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);
            var lineSpace = tickFont.size * 0.5;
            if (isHorizontal) {
                me.longestLabelWidth = largestTextWidth;
                var angleRadians = helpers.toRadians(me.labelRotation);
                var cosRotation = Math.cos(angleRadians);
                var sinRotation = Math.sin(angleRadians);
                var labelHeight = sinRotation * largestTextWidth + tickFont.size * tallestLabelHeightInLines + lineSpace * tallestLabelHeightInLines;
                minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);
                me.ctx.font = tickFont.font;
                var firstTick = me.ticks[0];
                var firstLabelWidth = computeTextSize(me.ctx, firstTick, tickFont.font);
                var lastTick = me.ticks[me.ticks.length - 1];
                var lastLabelWidth = computeTextSize(me.ctx, lastTick, tickFont.font);
                if (me.labelRotation !== 0) {
                    me.paddingLeft = opts.position === 'bottom' ? cosRotation * firstLabelWidth + 3 : cosRotation * lineSpace + 3;
                    me.paddingRight = opts.position === 'bottom' ? cosRotation * lineSpace + 3 : cosRotation * lastLabelWidth + 3;
                } else {
                    me.paddingLeft = firstLabelWidth / 2 + 3;
                    me.paddingRight = lastLabelWidth / 2 + 3;
                }
            } else {
                if (tickOpts.mirror) {
                    largestTextWidth = 0;
                } else {
                    largestTextWidth += me.options.ticks.padding;
                }
                minSize.width += largestTextWidth;
                me.paddingTop = tickFont.size / 2;
                me.paddingBottom = tickFont.size / 2;
            }
        }
        me.handleMargins();
        me.width = minSize.width;
        me.height = minSize.height;
    },
    handleMargins: function () {
        var me = this;
        if (me.margins) {
            me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
            me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
            me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
            me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
        }
    },
    afterFit: function () {
        helpers.callCallback(this.options.afterFit, [this]);
    },
    isHorizontal: function () {
        return this.options.position === 'top' || this.options.position === 'bottom';
    },
    isFullWidth: function () {
        return this.options.fullWidth;
    },
    getRightValue: function (rawValue) {
        if (rawValue === null || typeof rawValue === 'undefined') {
            return NaN;
        }
        if (typeof rawValue === 'number' && !isFinite(rawValue)) {
            return NaN;
        }
        if (typeof rawValue === 'object') {
            if (rawValue instanceof Date || rawValue.isValid) {
                return rawValue;
            }
            return this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);
        }
        return rawValue;
    },
    getLabelForIndex: helpers.noop,
    getPixelForValue: helpers.noop,
    getValueForPixel: helpers.noop,
    getPixelForTick: function (index, includeOffset) {
        var me = this;
        if (me.isHorizontal()) {
            var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
            var tickWidth = innerWidth / Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
            var pixel = tickWidth * index + me.paddingLeft;
            if (includeOffset) {
                pixel += tickWidth / 2;
            }
            var finalVal = me.left + Math.round(pixel);
            finalVal += me.isFullWidth() ? me.margins.left : 0;
            return finalVal;
        }
        var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
        return me.top + index * (innerHeight / (me.ticks.length - 1));
    },
    getPixelForDecimal: function (decimal) {
        var me = this;
        if (me.isHorizontal()) {
            var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
            var valueOffset = innerWidth * decimal + me.paddingLeft;
            var finalVal = me.left + Math.round(valueOffset);
            finalVal += me.isFullWidth() ? me.margins.left : 0;
            return finalVal;
        }
        return me.top + decimal * me.height;
    },
    getBasePixel: function () {
        return this.getPixelForValue(this.getBaseValue());
    },
    getBaseValue: function () {
        var me = this;
        var min = me.min;
        var max = me.max;
        return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
    },
    draw: function (chartArea) {
        var me = this;
        var options = me.options;
        if (!options.display) {
            return;
        }
        var context = me.ctx;
        var globalDefaults = Chart.defaults.global;
        var optionTicks = options.ticks;
        var gridLines = options.gridLines;
        var scaleLabel = options.scaleLabel;
        var isRotated = me.labelRotation !== 0;
        var skipRatio;
        var useAutoskipper = optionTicks.autoSkip;
        var isHorizontal = me.isHorizontal();
        var maxTicks;
        if (optionTicks.maxTicksLimit) {
            maxTicks = optionTicks.maxTicksLimit;
        }
        var tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
        var tickFont = parseFontOptions(optionTicks);
        var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
        var borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
        var borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
        var scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
        var scaleLabelFont = parseFontOptions(scaleLabel);
        var labelRotationRadians = helpers.toRadians(me.labelRotation);
        var cosRotation = Math.cos(labelRotationRadians);
        var longestRotatedLabel = me.longestLabelWidth * cosRotation;
        context.fillStyle = tickFontColor;
        var itemsToDraw = [];
        if (isHorizontal) {
            skipRatio = false;
            if (isRotated) {
                longestRotatedLabel /= 2;
            }
            if ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > me.width - (me.paddingLeft + me.paddingRight)) {
                skipRatio = 1 + Math.floor((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length / (me.width - (me.paddingLeft + me.paddingRight)));
            }
            if (maxTicks && me.ticks.length > maxTicks) {
                while (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {
                    if (!skipRatio) {
                        skipRatio = 1;
                    }
                    skipRatio += 1;
                }
            }
            if (!useAutoskipper) {
                skipRatio = false;
            }
        }
        var xTickStart = options.position === 'right' ? me.left : me.right - tl;
        var xTickEnd = options.position === 'right' ? me.left + tl : me.right;
        var yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;
        var yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;
        helpers.each(me.ticks, function (label, index) {
            if (label === undefined || label === null) {
                return;
            }
            var isLastTick = me.ticks.length === index + 1;
            var shouldSkip = skipRatio > 1 && index % skipRatio > 0 || index % skipRatio === 0 && index + skipRatio >= me.ticks.length;
            if (shouldSkip && !isLastTick || (label === undefined || label === null)) {
                return;
            }
            var lineWidth, lineColor;
            if (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {
                lineWidth = gridLines.zeroLineWidth;
                lineColor = gridLines.zeroLineColor;
            } else {
                lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);
                lineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);
            }
            var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
            var textAlign = 'middle';
            var textBaseline = 'middle';
            if (isHorizontal) {
                if (options.position === 'bottom') {
                    textBaseline = !isRotated ? 'top' : 'middle';
                    textAlign = !isRotated ? 'center' : 'right';
                    labelY = me.top + tl;
                } else {
                    textBaseline = !isRotated ? 'bottom' : 'middle';
                    textAlign = !isRotated ? 'center' : 'left';
                    labelY = me.bottom - tl;
                }
                var xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth);
                labelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset;
                tx1 = tx2 = x1 = x2 = xLineValue;
                ty1 = yTickStart;
                ty2 = yTickEnd;
                y1 = chartArea.top;
                y2 = chartArea.bottom;
            } else {
                var isLeft = options.position === 'left';
                var tickPadding = optionTicks.padding;
                var labelXOffset;
                if (optionTicks.mirror) {
                    textAlign = isLeft ? 'left' : 'right';
                    labelXOffset = tickPadding;
                } else {
                    textAlign = isLeft ? 'right' : 'left';
                    labelXOffset = tl + tickPadding;
                }
                labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;
                var yLineValue = me.getPixelForTick(index);
                yLineValue += helpers.aliasPixel(lineWidth);
                labelY = me.getPixelForTick(index, gridLines.offsetGridLines);
                tx1 = xTickStart;
                tx2 = xTickEnd;
                x1 = chartArea.left;
                x2 = chartArea.right;
                ty1 = ty2 = y1 = y2 = yLineValue;
            }
            itemsToDraw.push({
                tx1: tx1,
                ty1: ty1,
                tx2: tx2,
                ty2: ty2,
                x1: x1,
                y1: y1,
                x2: x2,
                y2: y2,
                labelX: labelX,
                labelY: labelY,
                glWidth: lineWidth,
                glColor: lineColor,
                glBorderDash: borderDash,
                glBorderDashOffset: borderDashOffset,
                rotation: -1 * labelRotationRadians,
                label: label,
                textBaseline: textBaseline,
                textAlign: textAlign
            });
        });
        helpers.each(itemsToDraw, function (itemToDraw) {
            if (gridLines.display) {
                context.save();
                context.lineWidth = itemToDraw.glWidth;
                context.strokeStyle = itemToDraw.glColor;
                if (context.setLineDash) {
                    context.setLineDash(itemToDraw.glBorderDash);
                    context.lineDashOffset = itemToDraw.glBorderDashOffset;
                }
                context.beginPath();
                if (gridLines.drawTicks) {
                    context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
                    context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
                }
                if (gridLines.drawOnChartArea) {
                    context.moveTo(itemToDraw.x1, itemToDraw.y1);
                    context.lineTo(itemToDraw.x2, itemToDraw.y2);
                }
                context.stroke();
                context.restore();
            }
            if (optionTicks.display) {
                context.save();
                context.translate(itemToDraw.labelX, itemToDraw.labelY);
                context.rotate(itemToDraw.rotation);
                context.font = tickFont.font;
                context.textBaseline = itemToDraw.textBaseline;
                context.textAlign = itemToDraw.textAlign;
                var label = itemToDraw.label;
                if (helpers.isArray(label)) {
                    for (var i = 0, y = 0; i < label.length; ++i) {
                        context.fillText('' + label[i], 0, y);
                        y += tickFont.size * 1.5;
                    }
                } else {
                    context.fillText(label, 0, 0);
                }
                context.restore();
            }
        });
        if (scaleLabel.display) {
            var scaleLabelX;
            var scaleLabelY;
            var rotation = 0;
            if (isHorizontal) {
                scaleLabelX = me.left + (me.right - me.left) / 2;
                scaleLabelY = options.position === 'bottom' ? me.bottom - scaleLabelFont.size / 2 : me.top + scaleLabelFont.size / 2;
            } else {
                var isLeft = options.position === 'left';
                scaleLabelX = isLeft ? me.left + scaleLabelFont.size / 2 : me.right - scaleLabelFont.size / 2;
                scaleLabelY = me.top + (me.bottom - me.top) / 2;
                rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
            }
            context.save();
            context.translate(scaleLabelX, scaleLabelY);
            context.rotate(rotation);
            context.textAlign = 'center';
            context.textBaseline = 'middle';
            context.fillStyle = scaleLabelFontColor;
            context.font = scaleLabelFont.font;
            context.fillText(scaleLabel.labelString, 0, 0);
            context.restore();
        }
        if (gridLines.drawBorder) {
            context.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);
            context.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);
            var x1 = me.left, x2 = me.right, y1 = me.top, y2 = me.bottom;
            var aliasPixel = helpers.aliasPixel(context.lineWidth);
            if (isHorizontal) {
                y1 = y2 = options.position === 'top' ? me.bottom : me.top;
                y1 += aliasPixel;
                y2 += aliasPixel;
            } else {
                x1 = x2 = options.position === 'left' ? me.right : me.left;
                x1 += aliasPixel;
                x2 += aliasPixel;
            }
            context.beginPath();
            context.moveTo(x1, y1);
            context.lineTo(x2, y2);
            context.stroke();
        }
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.defaults.scale = {
        display: true,
        position: 'left',
        gridLines: {
            display: true,
            color: 'rgba(0, 0, 0, 0.1)',
            lineWidth: 1,
            drawBorder: true,
            drawOnChartArea: true,
            drawTicks: true,
            tickMarkLength: 10,
            zeroLineWidth: 1,
            zeroLineColor: 'rgba(0,0,0,0.25)',
            offsetGridLines: false,
            borderDash: [],
            borderDashOffset: 0
        },
        scaleLabel: {
            labelString: '',
            display: false
        },
        ticks: {
            beginAtZero: false,
            minRotation: 0,
            maxRotation: 50,
            mirror: false,
            padding: 0,
            reverse: false,
            display: true,
            autoSkip: true,
            autoSkipPadding: 0,
            labelOffset: 0,
            callback: Chart.Ticks.formatters.values
        }
    };
    function computeTextSize(context, tick, font) {
        return helpers.isArray(tick) ? helpers.longestText(context, font, tick) : context.measureText(tick).width;
    }
    function parseFontOptions(options) {
        var getValueOrDefault = helpers.getValueOrDefault;
        var globalDefaults = Chart.defaults.global;
        var size = getValueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
        var style = getValueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
        var family = getValueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
        return {
            size: size,
            style: style,
            family: family,
            font: helpers.fontString(size, style, family)
        };
    }
    Chart.Scale = Chart.Element.extend({
        getPadding: function () {
            var me = this;
            return {
                left: me.paddingLeft || 0,
                top: me.paddingTop || 0,
                right: me.paddingRight || 0,
                bottom: me.paddingBottom || 0
            };
        },
        beforeUpdate: function () {
            helpers.callCallback(this.options.beforeUpdate, [this]);
        },
        update: function (maxWidth, maxHeight, margins) {
            var me = this;
            me.beforeUpdate();
            me.maxWidth = maxWidth;
            me.maxHeight = maxHeight;
            me.margins = helpers.extend({
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            }, margins);
            me.longestTextCache = me.longestTextCache || {};
            me.beforeSetDimensions();
            me.setDimensions();
            me.afterSetDimensions();
            me.beforeDataLimits();
            me.determineDataLimits();
            me.afterDataLimits();
            me.beforeBuildTicks();
            me.buildTicks();
            me.afterBuildTicks();
            me.beforeTickToLabelConversion();
            me.convertTicksToLabels();
            me.afterTickToLabelConversion();
            me.beforeCalculateTickRotation();
            me.calculateTickRotation();
            me.afterCalculateTickRotation();
            me.beforeFit();
            me.fit();
            me.afterFit();
            me.afterUpdate();
            return me.minSize;
        },
        afterUpdate: function () {
            helpers.callCallback(this.options.afterUpdate, [this]);
        },
        beforeSetDimensions: function () {
            helpers.callCallback(this.options.beforeSetDimensions, [this]);
        },
        setDimensions: function () {
            var me = this;
            if (me.isHorizontal()) {
                me.width = me.maxWidth;
                me.left = 0;
                me.right = me.width;
            } else {
                me.height = me.maxHeight;
                me.top = 0;
                me.bottom = me.height;
            }
            me.paddingLeft = 0;
            me.paddingTop = 0;
            me.paddingRight = 0;
            me.paddingBottom = 0;
        },
        afterSetDimensions: function () {
            helpers.callCallback(this.options.afterSetDimensions, [this]);
        },
        beforeDataLimits: function () {
            helpers.callCallback(this.options.beforeDataLimits, [this]);
        },
        determineDataLimits: helpers.noop,
        afterDataLimits: function () {
            helpers.callCallback(this.options.afterDataLimits, [this]);
        },
        beforeBuildTicks: function () {
            helpers.callCallback(this.options.beforeBuildTicks, [this]);
        },
        buildTicks: helpers.noop,
        afterBuildTicks: function () {
            helpers.callCallback(this.options.afterBuildTicks, [this]);
        },
        beforeTickToLabelConversion: function () {
            helpers.callCallback(this.options.beforeTickToLabelConversion, [this]);
        },
        convertTicksToLabels: function () {
            var me = this;
            var tickOpts = me.options.ticks;
            me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);
        },
        afterTickToLabelConversion: function () {
            helpers.callCallback(this.options.afterTickToLabelConversion, [this]);
        },
        beforeCalculateTickRotation: function () {
            helpers.callCallback(this.options.beforeCalculateTickRotation, [this]);
        },
        calculateTickRotation: function () {
            var me = this;
            var context = me.ctx;
            var tickOpts = me.options.ticks;
            var tickFont = parseFontOptions(tickOpts);
            context.font = tickFont.font;
            var labelRotation = tickOpts.minRotation || 0;
            if (me.options.display && me.isHorizontal()) {
                var originalLabelWidth = helpers.longestText(context, tickFont.font, me.ticks, me.longestTextCache);
                var labelWidth = originalLabelWidth;
                var cosRotation;
                var sinRotation;
                var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;
                while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
                    var angleRadians = helpers.toRadians(labelRotation);
                    cosRotation = Math.cos(angleRadians);
                    sinRotation = Math.sin(angleRadians);
                    if (sinRotation * originalLabelWidth > me.maxHeight) {
                        labelRotation--;
                        break;
                    }
                    labelRotation++;
                    labelWidth = cosRotation * originalLabelWidth;
                }
            }
            me.labelRotation = labelRotation;
        },
        afterCalculateTickRotation: function () {
            helpers.callCallback(this.options.afterCalculateTickRotation, [this]);
        },
        beforeFit: function () {
            helpers.callCallback(this.options.beforeFit, [this]);
        },
        fit: function () {
            var me = this;
            var minSize = me.minSize = {
                width: 0,
                height: 0
            };
            var opts = me.options;
            var tickOpts = opts.ticks;
            var scaleLabelOpts = opts.scaleLabel;
            var gridLineOpts = opts.gridLines;
            var display = opts.display;
            var isHorizontal = me.isHorizontal();
            var tickFont = parseFontOptions(tickOpts);
            var scaleLabelFontSize = parseFontOptions(scaleLabelOpts).size * 1.5;
            var tickMarkLength = opts.gridLines.tickMarkLength;
            if (isHorizontal) {
                minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
            } else {
                minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
            }
            if (isHorizontal) {
                minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
            } else {
                minSize.height = me.maxHeight;
            }
            if (scaleLabelOpts.display && display) {
                if (isHorizontal) {
                    minSize.height += scaleLabelFontSize;
                } else {
                    minSize.width += scaleLabelFontSize;
                }
            }
            if (tickOpts.display && display) {
                var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, me.ticks, me.longestTextCache);
                var tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);
                var lineSpace = tickFont.size * 0.5;
                if (isHorizontal) {
                    me.longestLabelWidth = largestTextWidth;
                    var angleRadians = helpers.toRadians(me.labelRotation);
                    var cosRotation = Math.cos(angleRadians);
                    var sinRotation = Math.sin(angleRadians);
                    var labelHeight = sinRotation * largestTextWidth + tickFont.size * tallestLabelHeightInLines + lineSpace * tallestLabelHeightInLines;
                    minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);
                    me.ctx.font = tickFont.font;
                    var firstTick = me.ticks[0];
                    var firstLabelWidth = computeTextSize(me.ctx, firstTick, tickFont.font);
                    var lastTick = me.ticks[me.ticks.length - 1];
                    var lastLabelWidth = computeTextSize(me.ctx, lastTick, tickFont.font);
                    if (me.labelRotation !== 0) {
                        me.paddingLeft = opts.position === 'bottom' ? cosRotation * firstLabelWidth + 3 : cosRotation * lineSpace + 3;
                        me.paddingRight = opts.position === 'bottom' ? cosRotation * lineSpace + 3 : cosRotation * lastLabelWidth + 3;
                    } else {
                        me.paddingLeft = firstLabelWidth / 2 + 3;
                        me.paddingRight = lastLabelWidth / 2 + 3;
                    }
                } else {
                    if (tickOpts.mirror) {
                        largestTextWidth = 0;
                    } else {
                        largestTextWidth += me.options.ticks.padding;
                    }
                    minSize.width += largestTextWidth;
                    me.paddingTop = tickFont.size / 2;
                    me.paddingBottom = tickFont.size / 2;
                }
            }
            me.handleMargins();
            me.width = minSize.width;
            me.height = minSize.height;
        },
        handleMargins: function () {
            var me = this;
            if (me.margins) {
                me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
                me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
                me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
                me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
            }
        },
        afterFit: function () {
            helpers.callCallback(this.options.afterFit, [this]);
        },
        isHorizontal: function () {
            return this.options.position === 'top' || this.options.position === 'bottom';
        },
        isFullWidth: function () {
            return this.options.fullWidth;
        },
        getRightValue: function (rawValue) {
            if (rawValue === null || typeof rawValue === 'undefined') {
                return NaN;
            }
            if (typeof rawValue === 'number' && !isFinite(rawValue)) {
                return NaN;
            }
            if (typeof rawValue === 'object') {
                if (rawValue instanceof Date || rawValue.isValid) {
                    return rawValue;
                }
                return this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);
            }
            return rawValue;
        },
        getLabelForIndex: helpers.noop,
        getPixelForValue: helpers.noop,
        getValueForPixel: helpers.noop,
        getPixelForTick: function (index, includeOffset) {
            var me = this;
            if (me.isHorizontal()) {
                var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
                var tickWidth = innerWidth / Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
                var pixel = tickWidth * index + me.paddingLeft;
                if (includeOffset) {
                    pixel += tickWidth / 2;
                }
                var finalVal = me.left + Math.round(pixel);
                finalVal += me.isFullWidth() ? me.margins.left : 0;
                return finalVal;
            }
            var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
            return me.top + index * (innerHeight / (me.ticks.length - 1));
        },
        getPixelForDecimal: function (decimal) {
            var me = this;
            if (me.isHorizontal()) {
                var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
                var valueOffset = innerWidth * decimal + me.paddingLeft;
                var finalVal = me.left + Math.round(valueOffset);
                finalVal += me.isFullWidth() ? me.margins.left : 0;
                return finalVal;
            }
            return me.top + decimal * me.height;
        },
        getBasePixel: function () {
            return this.getPixelForValue(this.getBaseValue());
        },
        getBaseValue: function () {
            var me = this;
            var min = me.min;
            var max = me.max;
            return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
        },
        draw: function (chartArea) {
            var me = this;
            var options = me.options;
            if (!options.display) {
                return;
            }
            var context = me.ctx;
            var globalDefaults = Chart.defaults.global;
            var optionTicks = options.ticks;
            var gridLines = options.gridLines;
            var scaleLabel = options.scaleLabel;
            var isRotated = me.labelRotation !== 0;
            var skipRatio;
            var useAutoskipper = optionTicks.autoSkip;
            var isHorizontal = me.isHorizontal();
            var maxTicks;
            if (optionTicks.maxTicksLimit) {
                maxTicks = optionTicks.maxTicksLimit;
            }
            var tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
            var tickFont = parseFontOptions(optionTicks);
            var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
            var borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
            var borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
            var scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
            var scaleLabelFont = parseFontOptions(scaleLabel);
            var labelRotationRadians = helpers.toRadians(me.labelRotation);
            var cosRotation = Math.cos(labelRotationRadians);
            var longestRotatedLabel = me.longestLabelWidth * cosRotation;
            context.fillStyle = tickFontColor;
            var itemsToDraw = [];
            if (isHorizontal) {
                skipRatio = false;
                if (isRotated) {
                    longestRotatedLabel /= 2;
                }
                if ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > me.width - (me.paddingLeft + me.paddingRight)) {
                    skipRatio = 1 + Math.floor((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length / (me.width - (me.paddingLeft + me.paddingRight)));
                }
                if (maxTicks && me.ticks.length > maxTicks) {
                    while (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {
                        if (!skipRatio) {
                            skipRatio = 1;
                        }
                        skipRatio += 1;
                    }
                }
                if (!useAutoskipper) {
                    skipRatio = false;
                }
            }
            var xTickStart = options.position === 'right' ? me.left : me.right - tl;
            var xTickEnd = options.position === 'right' ? me.left + tl : me.right;
            var yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;
            var yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;
            helpers.each(me.ticks, function (label, index) {
                if (label === undefined || label === null) {
                    return;
                }
                var isLastTick = me.ticks.length === index + 1;
                var shouldSkip = skipRatio > 1 && index % skipRatio > 0 || index % skipRatio === 0 && index + skipRatio >= me.ticks.length;
                if (shouldSkip && !isLastTick || (label === undefined || label === null)) {
                    return;
                }
                var lineWidth, lineColor;
                if (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {
                    lineWidth = gridLines.zeroLineWidth;
                    lineColor = gridLines.zeroLineColor;
                } else {
                    lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);
                    lineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);
                }
                var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
                var textAlign = 'middle';
                var textBaseline = 'middle';
                if (isHorizontal) {
                    if (options.position === 'bottom') {
                        textBaseline = !isRotated ? 'top' : 'middle';
                        textAlign = !isRotated ? 'center' : 'right';
                        labelY = me.top + tl;
                    } else {
                        textBaseline = !isRotated ? 'bottom' : 'middle';
                        textAlign = !isRotated ? 'center' : 'left';
                        labelY = me.bottom - tl;
                    }
                    var xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth);
                    labelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset;
                    tx1 = tx2 = x1 = x2 = xLineValue;
                    ty1 = yTickStart;
                    ty2 = yTickEnd;
                    y1 = chartArea.top;
                    y2 = chartArea.bottom;
                } else {
                    var isLeft = options.position === 'left';
                    var tickPadding = optionTicks.padding;
                    var labelXOffset;
                    if (optionTicks.mirror) {
                        textAlign = isLeft ? 'left' : 'right';
                        labelXOffset = tickPadding;
                    } else {
                        textAlign = isLeft ? 'right' : 'left';
                        labelXOffset = tl + tickPadding;
                    }
                    labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;
                    var yLineValue = me.getPixelForTick(index);
                    yLineValue += helpers.aliasPixel(lineWidth);
                    labelY = me.getPixelForTick(index, gridLines.offsetGridLines);
                    tx1 = xTickStart;
                    tx2 = xTickEnd;
                    x1 = chartArea.left;
                    x2 = chartArea.right;
                    ty1 = ty2 = y1 = y2 = yLineValue;
                }
                itemsToDraw.push({
                    tx1: tx1,
                    ty1: ty1,
                    tx2: tx2,
                    ty2: ty2,
                    x1: x1,
                    y1: y1,
                    x2: x2,
                    y2: y2,
                    labelX: labelX,
                    labelY: labelY,
                    glWidth: lineWidth,
                    glColor: lineColor,
                    glBorderDash: borderDash,
                    glBorderDashOffset: borderDashOffset,
                    rotation: -1 * labelRotationRadians,
                    label: label,
                    textBaseline: textBaseline,
                    textAlign: textAlign
                });
            });
            helpers.each(itemsToDraw, function (itemToDraw) {
                if (gridLines.display) {
                    context.save();
                    context.lineWidth = itemToDraw.glWidth;
                    context.strokeStyle = itemToDraw.glColor;
                    if (context.setLineDash) {
                        context.setLineDash(itemToDraw.glBorderDash);
                        context.lineDashOffset = itemToDraw.glBorderDashOffset;
                    }
                    context.beginPath();
                    if (gridLines.drawTicks) {
                        context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
                        context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
                    }
                    if (gridLines.drawOnChartArea) {
                        context.moveTo(itemToDraw.x1, itemToDraw.y1);
                        context.lineTo(itemToDraw.x2, itemToDraw.y2);
                    }
                    context.stroke();
                    context.restore();
                }
                if (optionTicks.display) {
                    context.save();
                    context.translate(itemToDraw.labelX, itemToDraw.labelY);
                    context.rotate(itemToDraw.rotation);
                    context.font = tickFont.font;
                    context.textBaseline = itemToDraw.textBaseline;
                    context.textAlign = itemToDraw.textAlign;
                    var label = itemToDraw.label;
                    if (helpers.isArray(label)) {
                        for (var i = 0, y = 0; i < label.length; ++i) {
                            context.fillText('' + label[i], 0, y);
                            y += tickFont.size * 1.5;
                        }
                    } else {
                        context.fillText(label, 0, 0);
                    }
                    context.restore();
                }
            });
            if (scaleLabel.display) {
                var scaleLabelX;
                var scaleLabelY;
                var rotation = 0;
                if (isHorizontal) {
                    scaleLabelX = me.left + (me.right - me.left) / 2;
                    scaleLabelY = options.position === 'bottom' ? me.bottom - scaleLabelFont.size / 2 : me.top + scaleLabelFont.size / 2;
                } else {
                    var isLeft = options.position === 'left';
                    scaleLabelX = isLeft ? me.left + scaleLabelFont.size / 2 : me.right - scaleLabelFont.size / 2;
                    scaleLabelY = me.top + (me.bottom - me.top) / 2;
                    rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
                }
                context.save();
                context.translate(scaleLabelX, scaleLabelY);
                context.rotate(rotation);
                context.textAlign = 'center';
                context.textBaseline = 'middle';
                context.fillStyle = scaleLabelFontColor;
                context.font = scaleLabelFont.font;
                context.fillText(scaleLabel.labelString, 0, 0);
                context.restore();
            }
            if (gridLines.drawBorder) {
                context.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);
                context.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);
                var x1 = me.left, x2 = me.right, y1 = me.top, y2 = me.bottom;
                var aliasPixel = helpers.aliasPixel(context.lineWidth);
                if (isHorizontal) {
                    y1 = y2 = options.position === 'top' ? me.bottom : me.top;
                    y1 += aliasPixel;
                    y2 += aliasPixel;
                } else {
                    x1 = x2 = options.position === 'left' ? me.right : me.left;
                    x1 += aliasPixel;
                    x2 += aliasPixel;
                }
                context.beginPath();
                context.moveTo(x1, y1);
                context.lineTo(x2, y2);
                context.stroke();
            }
        }
    });
};}, $__.fs.J$__v7918151485_1144_37),
            $__.os.oid31 = {}
        ],
        33: [
            ($__.fs.J$__v7918151485_1160_38 = function J$__v7918151485_1160(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid128).exports = ($__.fs.J$__v7918151485_1158_591 = function J$__v7918151485_1158(Chart) {
var vvv_return, vvv_switch, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    Chart.scaleService = $__.os.oid131 = {
        'constructors': $__.os.oid129 = {},
        'defaults': $__.os.oid130 = {},
        'registerScaleType': ($__.fs.J$__v7918151485_1146_592 = function J$__v7918151485_1146(type, scaleConstructor, defaults) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0], scaleConstructor = arguments[1], defaults = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (((this, $__.os.oid131).constructors, $__.os.oid129), $__.os.oid129)[type, 'category'] = scaleConstructor;
    (((this, $__.os.oid131).defaults, $__.os.oid130), $__.os.oid130)[type, 'category'] = (vvv_tmp0 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp0, defaults, 0, true, $__.uid));
    return;
case 1:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 1);
    (((this, $__.os.oid131).constructors, $__.os.oid129), $__.os.oid129)[type, 'linear'] = scaleConstructor;
    (((this, $__.os.oid131).defaults, $__.os.oid130), $__.os.oid130)[type, 'linear'] = (vvv_tmp0 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp0, defaults, 2, true, $__.uid));
    return;
case 2:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 2);
    (((this, $__.os.oid131).constructors, $__.os.oid129), $__.os.oid129)[type, 'logarithmic'] = scaleConstructor;
    (((this, $__.os.oid131).defaults, $__.os.oid130), $__.os.oid130)[type, 'logarithmic'] = (vvv_tmp0 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp0, defaults, 4, true, $__.uid));
    return;
case 3:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 3);
    (((this, $__.os.oid131).constructors, $__.os.oid129), $__.os.oid129)[type, 'radialLinear'] = scaleConstructor;
    (((this, $__.os.oid131).defaults, $__.os.oid130), $__.os.oid130)[type, 'radialLinear'] = (vvv_tmp0 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp0, defaults, 8, true, $__.uid));
    return;
case 4:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 4);
    (((this, $__.os.oid131).constructors, $__.os.oid129), $__.os.oid129)[type, 'time'] = scaleConstructor;
    (((this, $__.os.oid131).defaults, $__.os.oid130), $__.os.oid130)[type, 'time'] = (vvv_tmp0 = helpers, 'clone', $__.fs.J$__v7918151485_682_379.call(vvv_tmp0, defaults, 12, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.constructors[type] = scaleConstructor;
this.defaults[type] = helpers.clone(defaults);}),
        'getScaleConstructor': ($__.fs.J$__v7918151485_1148_593 = function J$__v7918151485_1148(type) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;}),
        'getScaleDefaults': ($__.fs.J$__v7918151485_1150_594 = function J$__v7918151485_1150(type) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};}),
        'updateScaleDefaults': ($__.fs.J$__v7918151485_1152_595 = function J$__v7918151485_1152(type, additions) {
var vvv_return, vvv_switch, defaults;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0], additions = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
defaults = this.defaults;
if (defaults.hasOwnProperty(type)) {
    defaults[type] = helpers.extend(defaults[type], additions);
}}),
        'addScalesToLayout': ($__.fs.J$__v7918151485_1156_596 = function J$__v7918151485_1156(chartInstance) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers.each(chartInstance.scales, function (scale) {
    Chart.layoutService.addBox(chartInstance, scale);
});})
    };
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.scaleService = {
    constructors: {},
    defaults: {},
    registerScaleType: function (type, scaleConstructor, defaults) {
        this.constructors[type] = scaleConstructor;
        this.defaults[type] = helpers.clone(defaults);
    },
    getScaleConstructor: function (type) {
        return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
    },
    getScaleDefaults: function (type) {
        return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};
    },
    updateScaleDefaults: function (type, additions) {
        var defaults = this.defaults;
        if (defaults.hasOwnProperty(type)) {
            defaults[type] = helpers.extend(defaults[type], additions);
        }
    },
    addScalesToLayout: function (chartInstance) {
        helpers.each(chartInstance.scales, function (scale) {
            Chart.layoutService.addBox(chartInstance, scale);
        });
    }
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.scaleService = {
        constructors: {},
        defaults: {},
        registerScaleType: function (type, scaleConstructor, defaults) {
            this.constructors[type] = scaleConstructor;
            this.defaults[type] = helpers.clone(defaults);
        },
        getScaleConstructor: function (type) {
            return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
        },
        getScaleDefaults: function (type) {
            return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};
        },
        updateScaleDefaults: function (type, additions) {
            var defaults = this.defaults;
            if (defaults.hasOwnProperty(type)) {
                defaults[type] = helpers.extend(defaults[type], additions);
            }
        },
        addScalesToLayout: function (chartInstance) {
            helpers.each(chartInstance.scales, function (scale) {
                Chart.layoutService.addBox(chartInstance, scale);
            });
        }
    };
};}, $__.fs.J$__v7918151485_1160_38),
            $__.os.oid32 = {}
        ],
        34: [
            ($__.fs.J$__v7918151485_1174_39 = function J$__v7918151485_1174(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid133).exports = ($__.fs.J$__v7918151485_1172_598 = function J$__v7918151485_1172(Chart) {
var vvv_return, vvv_switch, helpers;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    Chart.Ticks = $__.os.oid136 = {
        'generators': $__.os.oid134 = {
            'linear': ($__.fs.J$__v7918151485_1162_599 = function J$__v7918151485_1162(generationOptions, dataRange) {
var vvv_return, vvv_switch, ticks, spacing, niceRange, niceMin, niceMax, numSpaces;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
generationOptions = arguments[0], dataRange = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ticks = [];
if (generationOptions.stepSize && generationOptions.stepSize > 0) {
    spacing = generationOptions.stepSize;
} else {
    niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
    spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
}
niceMin = Math.floor(dataRange.min / spacing) * spacing;
niceMax = Math.ceil(dataRange.max / spacing) * spacing;
if (generationOptions.min && generationOptions.max && generationOptions.stepSize) {
    if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {
        niceMin = generationOptions.min;
        niceMax = generationOptions.max;
    }
}
numSpaces = (niceMax - niceMin) / spacing;
if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
    numSpaces = Math.round(numSpaces);
} else {
    numSpaces = Math.ceil(numSpaces);
}
ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);
for (var j = 1; j < numSpaces; ++j) {
    ticks.push(niceMin + j * spacing);
}
ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);
return ticks;}),
            'logarithmic': ($__.fs.J$__v7918151485_1164_600 = function J$__v7918151485_1164(generationOptions, dataRange) {
var vvv_return, vvv_switch, ticks, getValueOrDefault, tickVal, endExp, endSignificand, exp, significand, lastTick;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
generationOptions = arguments[0], dataRange = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ticks = [];
getValueOrDefault = helpers.getValueOrDefault;
tickVal = getValueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
endExp = Math.floor(helpers.log10(dataRange.max));
endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
if (tickVal === 0) {
    exp = Math.floor(helpers.log10(dataRange.minNotZero));
    significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
    ticks.push(tickVal);
    tickVal = significand * Math.pow(10, exp);
} else {
    exp = Math.floor(helpers.log10(tickVal));
    significand = Math.floor(tickVal / Math.pow(10, exp));
}
do {
    ticks.push(tickVal);
    ++significand;
    if (significand === 10) {
        significand = 1;
        ++exp;
    }
    tickVal = significand * Math.pow(10, exp);
} while (exp < endExp || exp === endExp && significand < endSignificand);
lastTick = getValueOrDefault(generationOptions.max, tickVal);
ticks.push(lastTick);
return ticks;})
        },
        'formatters': $__.os.oid135 = {
            'values': ($__.fs.J$__v7918151485_1166_601 = function J$__v7918151485_1166(value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return helpers.isArray(value) ? value : '' + value;}),
            'linear': ($__.fs.J$__v7918151485_1168_602 = function J$__v7918151485_1168(tickValue, index, ticks) {
var vvv_return, vvv_switch, delta, logDelta, tickString, numDecimal;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tickValue = arguments[0], index = arguments[1], ticks = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
if (Math.abs(delta) > 1) {
    if (tickValue !== Math.floor(tickValue)) {
        delta = tickValue - Math.floor(tickValue);
    }
}
logDelta = helpers.log10(Math.abs(delta));
tickString = '';
if (tickValue !== 0) {
    numDecimal = -1 * Math.floor(logDelta);
    numDecimal = Math.max(Math.min(numDecimal, 20), 0);
    tickString = tickValue.toFixed(numDecimal);
} else {
    tickString = '0';
}
return tickString;}, $__.fs.J$__v7918151485_1168_602_488 = $__.fs.J$__v7918151485_1168_602, $__.fs.J$__v7918151485_1168_602_555 = $__.fs.J$__v7918151485_1168_602, $__.fs.J$__v7918151485_1168_602),
            'logarithmic': ($__.fs.J$__v7918151485_1170_603 = function J$__v7918151485_1170(tickValue, index, ticks) {
var vvv_return, vvv_switch, remain;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tickValue = arguments[0], index = arguments[1], ticks = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
remain = tickValue / Math.pow(10, Math.floor(helpers.log10(tickValue)));
if (tickValue === 0) {
    return '0';
} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
    return tickValue.toExponential();
}
return '';}, $__.fs.J$__v7918151485_1170_603_509 = $__.fs.J$__v7918151485_1170_603, $__.fs.J$__v7918151485_1170_603)
        }
    };
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.Ticks = {
    generators: {
        linear: function (generationOptions, dataRange) {
            var ticks = [];
            var spacing;
            if (generationOptions.stepSize && generationOptions.stepSize > 0) {
                spacing = generationOptions.stepSize;
            } else {
                var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
                spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
            }
            var niceMin = Math.floor(dataRange.min / spacing) * spacing;
            var niceMax = Math.ceil(dataRange.max / spacing) * spacing;
            if (generationOptions.min && generationOptions.max && generationOptions.stepSize) {
                if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {
                    niceMin = generationOptions.min;
                    niceMax = generationOptions.max;
                }
            }
            var numSpaces = (niceMax - niceMin) / spacing;
            if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
                numSpaces = Math.round(numSpaces);
            } else {
                numSpaces = Math.ceil(numSpaces);
            }
            ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);
            for (var j = 1; j < numSpaces; ++j) {
                ticks.push(niceMin + j * spacing);
            }
            ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);
            return ticks;
        },
        logarithmic: function (generationOptions, dataRange) {
            var ticks = [];
            var getValueOrDefault = helpers.getValueOrDefault;
            var tickVal = getValueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
            var endExp = Math.floor(helpers.log10(dataRange.max));
            var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
            var exp;
            var significand;
            if (tickVal === 0) {
                exp = Math.floor(helpers.log10(dataRange.minNotZero));
                significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
                ticks.push(tickVal);
                tickVal = significand * Math.pow(10, exp);
            } else {
                exp = Math.floor(helpers.log10(tickVal));
                significand = Math.floor(tickVal / Math.pow(10, exp));
            }
            do {
                ticks.push(tickVal);
                ++significand;
                if (significand === 10) {
                    significand = 1;
                    ++exp;
                }
                tickVal = significand * Math.pow(10, exp);
            } while (exp < endExp || exp === endExp && significand < endSignificand);
            var lastTick = getValueOrDefault(generationOptions.max, tickVal);
            ticks.push(lastTick);
            return ticks;
        }
    },
    formatters: {
        values: function (value) {
            return helpers.isArray(value) ? value : '' + value;
        },
        linear: function (tickValue, index, ticks) {
            var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
            if (Math.abs(delta) > 1) {
                if (tickValue !== Math.floor(tickValue)) {
                    delta = tickValue - Math.floor(tickValue);
                }
            }
            var logDelta = helpers.log10(Math.abs(delta));
            var tickString = '';
            if (tickValue !== 0) {
                var numDecimal = -1 * Math.floor(logDelta);
                numDecimal = Math.max(Math.min(numDecimal, 20), 0);
                tickString = tickValue.toFixed(numDecimal);
            } else {
                tickString = '0';
            }
            return tickString;
        },
        logarithmic: function (tickValue, index, ticks) {
            var remain = tickValue / Math.pow(10, Math.floor(helpers.log10(tickValue)));
            if (tickValue === 0) {
                return '0';
            } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
                return tickValue.toExponential();
            }
            return '';
        }
    }
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.Ticks = {
        generators: {
            linear: function (generationOptions, dataRange) {
                var ticks = [];
                var spacing;
                if (generationOptions.stepSize && generationOptions.stepSize > 0) {
                    spacing = generationOptions.stepSize;
                } else {
                    var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
                    spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
                }
                var niceMin = Math.floor(dataRange.min / spacing) * spacing;
                var niceMax = Math.ceil(dataRange.max / spacing) * spacing;
                if (generationOptions.min && generationOptions.max && generationOptions.stepSize) {
                    if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {
                        niceMin = generationOptions.min;
                        niceMax = generationOptions.max;
                    }
                }
                var numSpaces = (niceMax - niceMin) / spacing;
                if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
                    numSpaces = Math.round(numSpaces);
                } else {
                    numSpaces = Math.ceil(numSpaces);
                }
                ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);
                for (var j = 1; j < numSpaces; ++j) {
                    ticks.push(niceMin + j * spacing);
                }
                ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);
                return ticks;
            },
            logarithmic: function (generationOptions, dataRange) {
                var ticks = [];
                var getValueOrDefault = helpers.getValueOrDefault;
                var tickVal = getValueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
                var endExp = Math.floor(helpers.log10(dataRange.max));
                var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
                var exp;
                var significand;
                if (tickVal === 0) {
                    exp = Math.floor(helpers.log10(dataRange.minNotZero));
                    significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
                    ticks.push(tickVal);
                    tickVal = significand * Math.pow(10, exp);
                } else {
                    exp = Math.floor(helpers.log10(tickVal));
                    significand = Math.floor(tickVal / Math.pow(10, exp));
                }
                do {
                    ticks.push(tickVal);
                    ++significand;
                    if (significand === 10) {
                        significand = 1;
                        ++exp;
                    }
                    tickVal = significand * Math.pow(10, exp);
                } while (exp < endExp || exp === endExp && significand < endSignificand);
                var lastTick = getValueOrDefault(generationOptions.max, tickVal);
                ticks.push(lastTick);
                return ticks;
            }
        },
        formatters: {
            values: function (value) {
                return helpers.isArray(value) ? value : '' + value;
            },
            linear: function (tickValue, index, ticks) {
                var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
                if (Math.abs(delta) > 1) {
                    if (tickValue !== Math.floor(tickValue)) {
                        delta = tickValue - Math.floor(tickValue);
                    }
                }
                var logDelta = helpers.log10(Math.abs(delta));
                var tickString = '';
                if (tickValue !== 0) {
                    var numDecimal = -1 * Math.floor(logDelta);
                    numDecimal = Math.max(Math.min(numDecimal, 20), 0);
                    tickString = tickValue.toFixed(numDecimal);
                } else {
                    tickString = '0';
                }
                return tickString;
            },
            logarithmic: function (tickValue, index, ticks) {
                var remain = tickValue / Math.pow(10, Math.floor(helpers.log10(tickValue)));
                if (tickValue === 0) {
                    return '0';
                } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
                    return tickValue.toExponential();
                }
                return '';
            }
        }
    };
};}, $__.fs.J$__v7918151485_1174_39),
            $__.os.oid33 = {}
        ],
        35: [
            ($__.fs.J$__v7918151485_1195_40 = function J$__v7918151485_1195(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid145).exports = ($__.fs.J$__v7918151485_1193_641 = function J$__v7918151485_1193(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, helpers, noop, createNewTitleBlockAndAttach;
createNewTitleBlockAndAttach = function createNewTitleBlockAndAttach(chartInstance, titleOpts) {
    var title = new Chart.Title({
        ctx: chartInstance.chart.ctx,
        options: titleOpts,
        chart: chartInstance
    });
    chartInstance.titleBlock = title;
    Chart.layoutService.addBox(chartInstance, title);
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    createNewTitleBlockAndAttach = ($__.fs.createNewTitleBlockAndAttach_642 = function createNewTitleBlockAndAttach(chartInstance, titleOpts) {
var vvv_return, vvv_switch, title;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0], titleOpts = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
title = new Chart.Title({
    ctx: chartInstance.chart.ctx,
    options: titleOpts,
    chart: chartInstance
});
chartInstance.titleBlock = title;
Chart.layoutService.addBox(chartInstance, title);});
    helpers = (Chart.helpers, $__.os.oid88);
    ((((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56), $__.os.oid56).title = $__.os.oid146 = {
        'display': false,
        'position': 'top',
        'fullWidth': true,
        'fontStyle': 'bold',
        'padding': 10,
        'text': ''
    };
    noop = TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function');
    Chart.Title = (vvv_tmp0 = TAJS_restrictToType(Chart.Element, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid147 = {
        'initialize': ($__.fs.J$__v7918151485_1176_643 = function J$__v7918151485_1176(config) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
config = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
helpers.extend(me, config);
me.legendHitBoxes = [];}, $__.fs.J$__v7918151485_1176_643_275 = $__.fs.J$__v7918151485_1176_643, $__.fs.J$__v7918151485_1176_643),
        'beforeUpdate': noop,
        'update': ($__.fs.J$__v7918151485_1178_644 = function J$__v7918151485_1178(maxWidth, maxHeight, margins) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
maxWidth = arguments[0], maxHeight = arguments[1], margins = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.beforeUpdate();
me.maxWidth = maxWidth;
me.maxHeight = maxHeight;
me.margins = margins;
me.beforeSetDimensions();
me.setDimensions();
me.afterSetDimensions();
me.beforeBuildLabels();
me.buildLabels();
me.afterBuildLabels();
me.beforeFit();
me.fit();
me.afterFit();
me.afterUpdate();
return me.minSize;}, $__.fs.J$__v7918151485_1178_644_279 = $__.fs.J$__v7918151485_1178_644, $__.fs.J$__v7918151485_1178_644),
        'afterUpdate': noop,
        'beforeSetDimensions': noop,
        'setDimensions': ($__.fs.J$__v7918151485_1180_645 = function J$__v7918151485_1180() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (me.isHorizontal()) {
    me.width = me.maxWidth;
    me.left = 0;
    me.right = me.width;
} else {
    me.height = me.maxHeight;
    me.top = 0;
    me.bottom = me.height;
}
me.paddingLeft = 0;
me.paddingTop = 0;
me.paddingRight = 0;
me.paddingBottom = 0;
me.minSize = {
    width: 0,
    height: 0
};}, $__.fs.J$__v7918151485_1180_645_285 = $__.fs.J$__v7918151485_1180_645, $__.fs.J$__v7918151485_1180_645),
        'afterSetDimensions': noop,
        'beforeBuildLabels': noop,
        'buildLabels': noop,
        'afterBuildLabels': noop,
        'beforeFit': noop,
        'fit': ($__.fs.J$__v7918151485_1182_646 = function J$__v7918151485_1182() {
var vvv_return, vvv_switch, me, valueOrDefault, opts, globalDefaults, display, fontSize, minSize;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
valueOrDefault = helpers.getValueOrDefault;
opts = me.options;
globalDefaults = Chart.defaults.global;
display = opts.display;
fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize);
minSize = me.minSize;
if (me.isHorizontal()) {
    minSize.width = me.maxWidth;
    minSize.height = display ? fontSize + opts.padding * 2 : 0;
} else {
    minSize.width = display ? fontSize + opts.padding * 2 : 0;
    minSize.height = me.maxHeight;
}
me.width = minSize.width;
me.height = minSize.height;}, $__.fs.J$__v7918151485_1182_646_297 = $__.fs.J$__v7918151485_1182_646, $__.fs.J$__v7918151485_1182_646),
        'afterFit': noop,
        'isHorizontal': ($__.fs.J$__v7918151485_1184_647 = function J$__v7918151485_1184() {
var vvv_return, vvv_switch, pos;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
pos = this.options.position;
return pos === 'top' || pos === 'bottom';}, $__.fs.J$__v7918151485_1184_647_301 = $__.fs.J$__v7918151485_1184_647, $__.fs.J$__v7918151485_1184_647),
        'draw': ($__.fs.J$__v7918151485_1186_648 = function J$__v7918151485_1186() {
var vvv_return, vvv_switch, me, ctx, valueOrDefault, opts, globalDefaults, fontSize, fontStyle, fontFamily, titleFont, rotation, titleX, titleY, top, left, bottom, right, maxWidth;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
ctx = me.ctx;
valueOrDefault = helpers.getValueOrDefault;
opts = me.options;
globalDefaults = Chart.defaults.global;
if (opts.display) {
    fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize);
    fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle);
    fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily);
    titleFont = helpers.fontString(fontSize, fontStyle, fontFamily);
    rotation = 0;
    top = me.top;
    left = me.left;
    bottom = me.bottom;
    right = me.right;
    ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor);
    ctx.font = titleFont;
    if (me.isHorizontal()) {
        titleX = left + (right - left) / 2;
        titleY = top + (bottom - top) / 2;
        maxWidth = right - left;
    } else {
        titleX = opts.position === 'left' ? left + fontSize / 2 : right - fontSize / 2;
        titleY = top + (bottom - top) / 2;
        maxWidth = bottom - top;
        rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
    }
    ctx.save();
    ctx.translate(titleX, titleY);
    ctx.rotate(rotation);
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(opts.text, 0, 0, maxWidth);
    ctx.restore();
}}, $__.fs.J$__v7918151485_1186_648_303 = $__.fs.J$__v7918151485_1186_648, $__.fs.J$__v7918151485_1186_648)
    }, 3, true, $__.uid));
    vvv_tmp1 = (Chart.plugins, $__.os.oid103), 'register', $__.fs.J$__v7918151485_1056_490.call(vvv_tmp1, $__.os.oid148 = {
        'beforeInit': ($__.fs.J$__v7918151485_1189_652 = function J$__v7918151485_1189(chartInstance) {
var vvv_return, vvv_switch, titleOpts;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
titleOpts = chartInstance.options.title;
if (titleOpts) {
    createNewTitleBlockAndAttach(chartInstance, titleOpts);
}}),
        'beforeUpdate': ($__.fs.J$__v7918151485_1191_653 = function J$__v7918151485_1191(chartInstance) {
var vvv_return, vvv_switch, titleOpts;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartInstance = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
titleOpts = chartInstance.options.title;
if (titleOpts) {
    titleOpts = helpers.configMerge(Chart.defaults.global.title, titleOpts);
    if (chartInstance.titleBlock) {
        chartInstance.titleBlock.options = titleOpts;
    } else {
        createNewTitleBlockAndAttach(chartInstance, titleOpts);
    }
} else {
    Chart.layoutService.removeBox(chartInstance, chartInstance.titleBlock);
    delete chartInstance.titleBlock;
}})
    }, 0, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.defaults.global.title = {
    display: false,
    position: 'top',
    fullWidth: true,
    fontStyle: 'bold',
    padding: 10,
    text: ''
};
noop = helpers.noop;
Chart.Title = Chart.Element.extend({
    initialize: function (config) {
        var me = this;
        helpers.extend(me, config);
        me.legendHitBoxes = [];
    },
    beforeUpdate: noop,
    update: function (maxWidth, maxHeight, margins) {
        var me = this;
        me.beforeUpdate();
        me.maxWidth = maxWidth;
        me.maxHeight = maxHeight;
        me.margins = margins;
        me.beforeSetDimensions();
        me.setDimensions();
        me.afterSetDimensions();
        me.beforeBuildLabels();
        me.buildLabels();
        me.afterBuildLabels();
        me.beforeFit();
        me.fit();
        me.afterFit();
        me.afterUpdate();
        return me.minSize;
    },
    afterUpdate: noop,
    beforeSetDimensions: noop,
    setDimensions: function () {
        var me = this;
        if (me.isHorizontal()) {
            me.width = me.maxWidth;
            me.left = 0;
            me.right = me.width;
        } else {
            me.height = me.maxHeight;
            me.top = 0;
            me.bottom = me.height;
        }
        me.paddingLeft = 0;
        me.paddingTop = 0;
        me.paddingRight = 0;
        me.paddingBottom = 0;
        me.minSize = {
            width: 0,
            height: 0
        };
    },
    afterSetDimensions: noop,
    beforeBuildLabels: noop,
    buildLabels: noop,
    afterBuildLabels: noop,
    beforeFit: noop,
    fit: function () {
        var me = this, valueOrDefault = helpers.getValueOrDefault, opts = me.options, globalDefaults = Chart.defaults.global, display = opts.display, fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize), minSize = me.minSize;
        if (me.isHorizontal()) {
            minSize.width = me.maxWidth;
            minSize.height = display ? fontSize + opts.padding * 2 : 0;
        } else {
            minSize.width = display ? fontSize + opts.padding * 2 : 0;
            minSize.height = me.maxHeight;
        }
        me.width = minSize.width;
        me.height = minSize.height;
    },
    afterFit: noop,
    isHorizontal: function () {
        var pos = this.options.position;
        return pos === 'top' || pos === 'bottom';
    },
    draw: function () {
        var me = this, ctx = me.ctx, valueOrDefault = helpers.getValueOrDefault, opts = me.options, globalDefaults = Chart.defaults.global;
        if (opts.display) {
            var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize), fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle), fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily), titleFont = helpers.fontString(fontSize, fontStyle, fontFamily), rotation = 0, titleX, titleY, top = me.top, left = me.left, bottom = me.bottom, right = me.right, maxWidth;
            ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor);
            ctx.font = titleFont;
            if (me.isHorizontal()) {
                titleX = left + (right - left) / 2;
                titleY = top + (bottom - top) / 2;
                maxWidth = right - left;
            } else {
                titleX = opts.position === 'left' ? left + fontSize / 2 : right - fontSize / 2;
                titleY = top + (bottom - top) / 2;
                maxWidth = bottom - top;
                rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
            }
            ctx.save();
            ctx.translate(titleX, titleY);
            ctx.rotate(rotation);
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(opts.text, 0, 0, maxWidth);
            ctx.restore();
        }
    }
});
Chart.plugins.register({
    beforeInit: function (chartInstance) {
        var titleOpts = chartInstance.options.title;
        if (titleOpts) {
            createNewTitleBlockAndAttach(chartInstance, titleOpts);
        }
    },
    beforeUpdate: function (chartInstance) {
        var titleOpts = chartInstance.options.title;
        if (titleOpts) {
            titleOpts = helpers.configMerge(Chart.defaults.global.title, titleOpts);
            if (chartInstance.titleBlock) {
                chartInstance.titleBlock.options = titleOpts;
            } else {
                createNewTitleBlockAndAttach(chartInstance, titleOpts);
            }
        } else {
            Chart.layoutService.removeBox(chartInstance, chartInstance.titleBlock);
            delete chartInstance.titleBlock;
        }
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    Chart.defaults.global.title = {
        display: false,
        position: 'top',
        fullWidth: true,
        fontStyle: 'bold',
        padding: 10,
        text: ''
    };
    var noop = helpers.noop;
    Chart.Title = Chart.Element.extend({
        initialize: function (config) {
            var me = this;
            helpers.extend(me, config);
            me.legendHitBoxes = [];
        },
        beforeUpdate: noop,
        update: function (maxWidth, maxHeight, margins) {
            var me = this;
            me.beforeUpdate();
            me.maxWidth = maxWidth;
            me.maxHeight = maxHeight;
            me.margins = margins;
            me.beforeSetDimensions();
            me.setDimensions();
            me.afterSetDimensions();
            me.beforeBuildLabels();
            me.buildLabels();
            me.afterBuildLabels();
            me.beforeFit();
            me.fit();
            me.afterFit();
            me.afterUpdate();
            return me.minSize;
        },
        afterUpdate: noop,
        beforeSetDimensions: noop,
        setDimensions: function () {
            var me = this;
            if (me.isHorizontal()) {
                me.width = me.maxWidth;
                me.left = 0;
                me.right = me.width;
            } else {
                me.height = me.maxHeight;
                me.top = 0;
                me.bottom = me.height;
            }
            me.paddingLeft = 0;
            me.paddingTop = 0;
            me.paddingRight = 0;
            me.paddingBottom = 0;
            me.minSize = {
                width: 0,
                height: 0
            };
        },
        afterSetDimensions: noop,
        beforeBuildLabels: noop,
        buildLabels: noop,
        afterBuildLabels: noop,
        beforeFit: noop,
        fit: function () {
            var me = this, valueOrDefault = helpers.getValueOrDefault, opts = me.options, globalDefaults = Chart.defaults.global, display = opts.display, fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize), minSize = me.minSize;
            if (me.isHorizontal()) {
                minSize.width = me.maxWidth;
                minSize.height = display ? fontSize + opts.padding * 2 : 0;
            } else {
                minSize.width = display ? fontSize + opts.padding * 2 : 0;
                minSize.height = me.maxHeight;
            }
            me.width = minSize.width;
            me.height = minSize.height;
        },
        afterFit: noop,
        isHorizontal: function () {
            var pos = this.options.position;
            return pos === 'top' || pos === 'bottom';
        },
        draw: function () {
            var me = this, ctx = me.ctx, valueOrDefault = helpers.getValueOrDefault, opts = me.options, globalDefaults = Chart.defaults.global;
            if (opts.display) {
                var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize), fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle), fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily), titleFont = helpers.fontString(fontSize, fontStyle, fontFamily), rotation = 0, titleX, titleY, top = me.top, left = me.left, bottom = me.bottom, right = me.right, maxWidth;
                ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor);
                ctx.font = titleFont;
                if (me.isHorizontal()) {
                    titleX = left + (right - left) / 2;
                    titleY = top + (bottom - top) / 2;
                    maxWidth = right - left;
                } else {
                    titleX = opts.position === 'left' ? left + fontSize / 2 : right - fontSize / 2;
                    titleY = top + (bottom - top) / 2;
                    maxWidth = bottom - top;
                    rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
                }
                ctx.save();
                ctx.translate(titleX, titleY);
                ctx.rotate(rotation);
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(opts.text, 0, 0, maxWidth);
                ctx.restore();
            }
        }
    });
    function createNewTitleBlockAndAttach(chartInstance, titleOpts) {
        var title = new Chart.Title({
            ctx: chartInstance.chart.ctx,
            options: titleOpts,
            chart: chartInstance
        });
        chartInstance.titleBlock = title;
        Chart.layoutService.addBox(chartInstance, title);
    }
    Chart.plugins.register({
        beforeInit: function (chartInstance) {
            var titleOpts = chartInstance.options.title;
            if (titleOpts) {
                createNewTitleBlockAndAttach(chartInstance, titleOpts);
            }
        },
        beforeUpdate: function (chartInstance) {
            var titleOpts = chartInstance.options.title;
            if (titleOpts) {
                titleOpts = helpers.configMerge(Chart.defaults.global.title, titleOpts);
                if (chartInstance.titleBlock) {
                    chartInstance.titleBlock.options = titleOpts;
                } else {
                    createNewTitleBlockAndAttach(chartInstance, titleOpts);
                }
            } else {
                Chart.layoutService.removeBox(chartInstance, chartInstance.titleBlock);
                delete chartInstance.titleBlock;
            }
        }
    });
};}, $__.fs.J$__v7918151485_1195_40),
            $__.os.oid34 = {}
        ],
        36: [
            ($__.fs.J$__v7918151485_1280_41 = function J$__v7918151485_1280(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid160).exports = ($__.fs.J$__v7918151485_1278_691 = function J$__v7918151485_1278(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers, mergeOpacity, pushOrConcat, createTooltipItem, getBaseModel, getTooltipSize, determineAlignment, getBackgroundPoint;
mergeOpacity = function mergeOpacity(colorString, opacity) {
    var color = helpers.color(colorString);
    return color.alpha(opacity * color.alpha()).rgbaString();
};
pushOrConcat = function pushOrConcat(base, toPush) {
    if (toPush) {
        if (helpers.isArray(toPush)) {
            Array.prototype.push.apply(base, toPush);
        } else {
            base.push(toPush);
        }
    }
    return base;
};
createTooltipItem = function createTooltipItem(element) {
    var xScale = element._xScale;
    var yScale = element._yScale || element._scale;
    var index = element._index, datasetIndex = element._datasetIndex;
    return {
        xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
        yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
        index: index,
        datasetIndex: datasetIndex,
        x: element._model.x,
        y: element._model.y
    };
};
getBaseModel = function getBaseModel(tooltipOpts) {
    var globalDefaults = Chart.defaults.global;
    var getValueOrDefault = helpers.getValueOrDefault;
    return {
        xPadding: tooltipOpts.xPadding,
        yPadding: tooltipOpts.yPadding,
        xAlign: tooltipOpts.xAlign,
        yAlign: tooltipOpts.yAlign,
        bodyFontColor: tooltipOpts.bodyFontColor,
        _bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
        _bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
        _bodyAlign: tooltipOpts.bodyAlign,
        bodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
        bodySpacing: tooltipOpts.bodySpacing,
        titleFontColor: tooltipOpts.titleFontColor,
        _titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
        _titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
        titleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
        _titleAlign: tooltipOpts.titleAlign,
        titleSpacing: tooltipOpts.titleSpacing,
        titleMarginBottom: tooltipOpts.titleMarginBottom,
        footerFontColor: tooltipOpts.footerFontColor,
        _footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
        _footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
        footerFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
        _footerAlign: tooltipOpts.footerAlign,
        footerSpacing: tooltipOpts.footerSpacing,
        footerMarginTop: tooltipOpts.footerMarginTop,
        caretSize: tooltipOpts.caretSize,
        cornerRadius: tooltipOpts.cornerRadius,
        backgroundColor: tooltipOpts.backgroundColor,
        opacity: 0,
        legendColorBackground: tooltipOpts.multiKeyBackground,
        displayColors: tooltipOpts.displayColors
    };
};
getTooltipSize = function getTooltipSize(tooltip, model) {
    var ctx = tooltip._chart.ctx;
    var height = model.yPadding * 2;
    var width = 0;
    var body = model.body;
    var combinedBodyLength = body.reduce(function (count, bodyItem) {
        return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
    }, 0);
    combinedBodyLength += model.beforeBody.length + model.afterBody.length;
    var titleLineCount = model.title.length;
    var footerLineCount = model.footer.length;
    var titleFontSize = model.titleFontSize, bodyFontSize = model.bodyFontSize, footerFontSize = model.footerFontSize;
    height += titleLineCount * titleFontSize;
    height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0;
    height += titleLineCount ? model.titleMarginBottom : 0;
    height += combinedBodyLength * bodyFontSize;
    height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0;
    height += footerLineCount ? model.footerMarginTop : 0;
    height += footerLineCount * footerFontSize;
    height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0;
    var widthPadding = 0;
    var maxLineWidth = function (line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
    };
    ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
    helpers.each(model.title, maxLineWidth);
    ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
    helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
    widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
    helpers.each(body, function (bodyItem) {
        helpers.each(bodyItem.before, maxLineWidth);
        helpers.each(bodyItem.lines, maxLineWidth);
        helpers.each(bodyItem.after, maxLineWidth);
    });
    widthPadding = 0;
    ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
    helpers.each(model.footer, maxLineWidth);
    width += 2 * model.xPadding;
    return {
        width: width,
        height: height
    };
};
determineAlignment = function determineAlignment(tooltip, size) {
    var model = tooltip._model;
    var chart = tooltip._chart;
    var chartArea = tooltip._chartInstance.chartArea;
    var xAlign = 'center';
    var yAlign = 'center';
    if (model.y < size.height) {
        yAlign = 'top';
    } else if (model.y > chart.height - size.height) {
        yAlign = 'bottom';
    }
    var lf, rf;
    var olf, orf;
    var yf;
    var midX = (chartArea.left + chartArea.right) / 2;
    var midY = (chartArea.top + chartArea.bottom) / 2;
    if (yAlign === 'center') {
        lf = function (x) {
            return x <= midX;
        };
        rf = function (x) {
            return x > midX;
        };
    } else {
        lf = function (x) {
            return x <= size.width / 2;
        };
        rf = function (x) {
            return x >= chart.width - size.width / 2;
        };
    }
    olf = function (x) {
        return x + size.width > chart.width;
    };
    orf = function (x) {
        return x - size.width < 0;
    };
    yf = function (y) {
        return y <= midY ? 'top' : 'bottom';
    };
    if (lf(model.x)) {
        xAlign = 'left';
        if (olf(model.x)) {
            xAlign = 'center';
            yAlign = yf(model.y);
        }
    } else if (rf(model.x)) {
        xAlign = 'right';
        if (orf(model.x)) {
            xAlign = 'center';
            yAlign = yf(model.y);
        }
    }
    var opts = tooltip._options;
    return {
        xAlign: opts.xAlign ? opts.xAlign : xAlign,
        yAlign: opts.yAlign ? opts.yAlign : yAlign
    };
};
getBackgroundPoint = function getBackgroundPoint(vm, size, alignment) {
    var x = vm.x;
    var y = vm.y;
    var caretSize = vm.caretSize, caretPadding = vm.caretPadding, cornerRadius = vm.cornerRadius, xAlign = alignment.xAlign, yAlign = alignment.yAlign, paddingAndSize = caretSize + caretPadding, radiusAndPadding = cornerRadius + caretPadding;
    if (xAlign === 'right') {
        x -= size.width;
    } else if (xAlign === 'center') {
        x -= size.width / 2;
    }
    if (yAlign === 'top') {
        y += paddingAndSize;
    } else if (yAlign === 'bottom') {
        y -= size.height + paddingAndSize;
    } else {
        y -= size.height / 2;
    }
    if (yAlign === 'center') {
        if (xAlign === 'left') {
            x += paddingAndSize;
        } else if (xAlign === 'right') {
            x -= paddingAndSize;
        }
    } else if (xAlign === 'left') {
        x -= radiusAndPadding;
    } else if (xAlign === 'right') {
        x += radiusAndPadding;
    }
    return {
        x: x,
        y: y
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    mergeOpacity = ($__.fs.mergeOpacity_692 = function mergeOpacity(colorString, opacity) {
var vvv_return, vvv_switch, color;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
colorString = arguments[0], opacity = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
color = helpers.color(colorString);
return color.alpha(opacity * color.alpha()).rgbaString();});
    pushOrConcat = ($__.fs.pushOrConcat_693 = function pushOrConcat(base, toPush) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
base = arguments[0], toPush = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (toPush) {
    if (helpers.isArray(toPush)) {
        Array.prototype.push.apply(base, toPush);
    } else {
        base.push(toPush);
    }
}
return base;});
    createTooltipItem = ($__.fs.createTooltipItem_694 = function createTooltipItem(element) {
var vvv_return, vvv_switch, xScale, yScale, index, datasetIndex;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
element = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
xScale = element._xScale;
yScale = element._yScale || element._scale;
index = element._index;
datasetIndex = element._datasetIndex;
return {
    xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
    yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
    index: index,
    datasetIndex: datasetIndex,
    x: element._model.x,
    y: element._model.y
};});
    getBaseModel = ($__.fs.getBaseModel_695 = function getBaseModel(tooltipOpts) {
var vvv_return, vvv_switch, globalDefaults, getValueOrDefault;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipOpts = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
globalDefaults = Chart.defaults.global;
getValueOrDefault = helpers.getValueOrDefault;
return {
    xPadding: tooltipOpts.xPadding,
    yPadding: tooltipOpts.yPadding,
    xAlign: tooltipOpts.xAlign,
    yAlign: tooltipOpts.yAlign,
    bodyFontColor: tooltipOpts.bodyFontColor,
    _bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
    _bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
    _bodyAlign: tooltipOpts.bodyAlign,
    bodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
    bodySpacing: tooltipOpts.bodySpacing,
    titleFontColor: tooltipOpts.titleFontColor,
    _titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
    _titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
    titleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
    _titleAlign: tooltipOpts.titleAlign,
    titleSpacing: tooltipOpts.titleSpacing,
    titleMarginBottom: tooltipOpts.titleMarginBottom,
    footerFontColor: tooltipOpts.footerFontColor,
    _footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
    _footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
    footerFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
    _footerAlign: tooltipOpts.footerAlign,
    footerSpacing: tooltipOpts.footerSpacing,
    footerMarginTop: tooltipOpts.footerMarginTop,
    caretSize: tooltipOpts.caretSize,
    cornerRadius: tooltipOpts.cornerRadius,
    backgroundColor: tooltipOpts.backgroundColor,
    opacity: 0,
    legendColorBackground: tooltipOpts.multiKeyBackground,
    displayColors: tooltipOpts.displayColors
};});
    getTooltipSize = ($__.fs.getTooltipSize_696 = function getTooltipSize(tooltip, model) {
var vvv_return, vvv_switch, ctx, height, width, body, combinedBodyLength, titleLineCount, footerLineCount, titleFontSize, bodyFontSize, footerFontSize, widthPadding, maxLineWidth;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltip = arguments[0], model = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ctx = tooltip._chart.ctx;
height = model.yPadding * 2;
width = 0;
body = model.body;
combinedBodyLength = body.reduce(function (count, bodyItem) {
    return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
}, 0);
combinedBodyLength += model.beforeBody.length + model.afterBody.length;
titleLineCount = model.title.length;
footerLineCount = model.footer.length;
titleFontSize = model.titleFontSize;
bodyFontSize = model.bodyFontSize;
footerFontSize = model.footerFontSize;
height += titleLineCount * titleFontSize;
height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0;
height += titleLineCount ? model.titleMarginBottom : 0;
height += combinedBodyLength * bodyFontSize;
height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0;
height += footerLineCount ? model.footerMarginTop : 0;
height += footerLineCount * footerFontSize;
height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0;
widthPadding = 0;
maxLineWidth = function (line) {
    width = Math.max(width, ctx.measureText(line).width + widthPadding);
};
ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
helpers.each(model.title, maxLineWidth);
ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
helpers.each(body, function (bodyItem) {
    helpers.each(bodyItem.before, maxLineWidth);
    helpers.each(bodyItem.lines, maxLineWidth);
    helpers.each(bodyItem.after, maxLineWidth);
});
widthPadding = 0;
ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
helpers.each(model.footer, maxLineWidth);
width += 2 * model.xPadding;
return {
    width: width,
    height: height
};});
    determineAlignment = ($__.fs.determineAlignment_697 = function determineAlignment(tooltip, size) {
var vvv_return, vvv_switch, model, chart, chartArea, xAlign, yAlign, lf, rf, olf, orf, yf, midX, midY, opts;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltip = arguments[0], size = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
model = tooltip._model;
chart = tooltip._chart;
chartArea = tooltip._chartInstance.chartArea;
xAlign = 'center';
yAlign = 'center';
if (model.y < size.height) {
    yAlign = 'top';
} else if (model.y > chart.height - size.height) {
    yAlign = 'bottom';
}
midX = (chartArea.left + chartArea.right) / 2;
midY = (chartArea.top + chartArea.bottom) / 2;
if (yAlign === 'center') {
    lf = function (x) {
        return x <= midX;
    };
    rf = function (x) {
        return x > midX;
    };
} else {
    lf = function (x) {
        return x <= size.width / 2;
    };
    rf = function (x) {
        return x >= chart.width - size.width / 2;
    };
}
olf = function (x) {
    return x + size.width > chart.width;
};
orf = function (x) {
    return x - size.width < 0;
};
yf = function (y) {
    return y <= midY ? 'top' : 'bottom';
};
if (lf(model.x)) {
    xAlign = 'left';
    if (olf(model.x)) {
        xAlign = 'center';
        yAlign = yf(model.y);
    }
} else if (rf(model.x)) {
    xAlign = 'right';
    if (orf(model.x)) {
        xAlign = 'center';
        yAlign = yf(model.y);
    }
}
opts = tooltip._options;
return {
    xAlign: opts.xAlign ? opts.xAlign : xAlign,
    yAlign: opts.yAlign ? opts.yAlign : yAlign
};});
    getBackgroundPoint = ($__.fs.getBackgroundPoint_698 = function getBackgroundPoint(vm, size, alignment) {
var vvv_return, vvv_switch, x, y, caretSize, caretPadding, cornerRadius, xAlign, yAlign, paddingAndSize, radiusAndPadding;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
vm = arguments[0], size = arguments[1], alignment = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = vm.x;
y = vm.y;
caretSize = vm.caretSize;
caretPadding = vm.caretPadding;
cornerRadius = vm.cornerRadius;
xAlign = alignment.xAlign;
yAlign = alignment.yAlign;
paddingAndSize = caretSize + caretPadding;
radiusAndPadding = cornerRadius + caretPadding;
if (xAlign === 'right') {
    x -= size.width;
} else if (xAlign === 'center') {
    x -= size.width / 2;
}
if (yAlign === 'top') {
    y += paddingAndSize;
} else if (yAlign === 'bottom') {
    y -= size.height + paddingAndSize;
} else {
    y -= size.height / 2;
}
if (yAlign === 'center') {
    if (xAlign === 'left') {
        x += paddingAndSize;
    } else if (xAlign === 'right') {
        x -= paddingAndSize;
    }
} else if (xAlign === 'left') {
    x -= radiusAndPadding;
} else if (xAlign === 'right') {
    x += radiusAndPadding;
}
return {
    x: x,
    y: y
};});
    helpers = (Chart.helpers, $__.os.oid88);
    ((((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56), $__.os.oid56).tooltips = $__.os.oid162 = {
        'enabled': true,
        'custom': null,
        'mode': 'nearest',
        'position': 'average',
        'intersect': true,
        'backgroundColor': 'rgba(0,0,0,0.8)',
        'titleFontStyle': 'bold',
        'titleSpacing': 2,
        'titleMarginBottom': 6,
        'titleFontColor': '#fff',
        'titleAlign': 'left',
        'bodySpacing': 2,
        'bodyFontColor': '#fff',
        'bodyAlign': 'left',
        'footerFontStyle': 'bold',
        'footerSpacing': 2,
        'footerMarginTop': 6,
        'footerFontColor': '#fff',
        'footerAlign': 'left',
        'yPadding': 6,
        'xPadding': 6,
        'caretSize': 5,
        'cornerRadius': 6,
        'multiKeyBackground': '#fff',
        'displayColors': true,
        'callbacks': $__.os.oid161 = {
            'beforeTitle': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
            'title': ($__.fs.J$__v7918151485_1198_699 = function J$__v7918151485_1198(tooltipItems, data) {
var vvv_return, vvv_switch, title, labels, labelCount, item;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipItems = arguments[0], data = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
title = '';
labels = data.labels;
labelCount = labels ? labels.length : 0;
if (tooltipItems.length > 0) {
    item = tooltipItems[0];
    if (item.xLabel) {
        title = item.xLabel;
    } else if (labelCount > 0 && item.index < labelCount) {
        title = labels[item.index];
    }
}
return title;}),
            'afterTitle': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
            'beforeBody': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
            'beforeLabel': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
            'label': ($__.fs.J$__v7918151485_1200_700 = function J$__v7918151485_1200(tooltipItem, data) {
var vvv_return, vvv_switch, datasetLabel;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipItem = arguments[0], data = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
return datasetLabel + ': ' + tooltipItem.yLabel;}),
            'labelColor': ($__.fs.J$__v7918151485_1202_701 = function J$__v7918151485_1202(tooltipItem, chartInstance) {
var vvv_return, vvv_switch, meta, activeElement, view;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipItem = arguments[0], chartInstance = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
meta = chartInstance.getDatasetMeta(tooltipItem.datasetIndex);
activeElement = meta.data[tooltipItem.index];
view = activeElement._view;
return {
    borderColor: view.borderColor,
    backgroundColor: view.backgroundColor
};}),
            'afterLabel': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
            'afterBody': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
            'beforeFooter': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
            'footer': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function'),
            'afterFooter': TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function')
        }
    };
    Chart.Tooltip = (vvv_tmp0 = TAJS_restrictToType(Chart.Element, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid163 = {
        'initialize': ($__.fs.J$__v7918151485_1230_702 = function J$__v7918151485_1230() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this._model = getBaseModel(this._options);}, $__.fs.J$__v7918151485_1230_702_348 = $__.fs.J$__v7918151485_1230_702, $__.fs.J$__v7918151485_1230_702),
        'getTitle': ($__.fs.J$__v7918151485_1232_703 = function J$__v7918151485_1232() {
var vvv_return, vvv_switch, me, opts, callbacks, beforeTitle, title, afterTitle, lines;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me._options;
callbacks = opts.callbacks;
beforeTitle = callbacks.beforeTitle.apply(me, arguments);
title = callbacks.title.apply(me, arguments);
afterTitle = callbacks.afterTitle.apply(me, arguments);
lines = [];
lines = pushOrConcat(lines, beforeTitle);
lines = pushOrConcat(lines, title);
lines = pushOrConcat(lines, afterTitle);
return lines;}, $__.fs.J$__v7918151485_1232_703_350 = $__.fs.J$__v7918151485_1232_703, $__.fs.J$__v7918151485_1232_703),
        'getBeforeBody': ($__.fs.J$__v7918151485_1234_704 = function J$__v7918151485_1234() {
var vvv_return, vvv_switch, lines;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lines = this._options.callbacks.beforeBody.apply(this, arguments);
return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];}, $__.fs.J$__v7918151485_1234_704_352 = $__.fs.J$__v7918151485_1234_704, $__.fs.J$__v7918151485_1234_704),
        'getBody': ($__.fs.J$__v7918151485_1238_705 = function J$__v7918151485_1238(tooltipItems, data) {
var vvv_return, vvv_switch, me, callbacks, bodyItems;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipItems = arguments[0], data = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
callbacks = me._options.callbacks;
bodyItems = [];
helpers.each(tooltipItems, function (tooltipItem) {
    var bodyItem = {
        before: [],
        lines: [],
        after: []
    };
    pushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));
    pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
    pushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));
    bodyItems.push(bodyItem);
});
return bodyItems;}, $__.fs.J$__v7918151485_1238_705_354 = $__.fs.J$__v7918151485_1238_705, $__.fs.J$__v7918151485_1238_705),
        'getAfterBody': ($__.fs.J$__v7918151485_1240_706 = function J$__v7918151485_1240() {
var vvv_return, vvv_switch, lines;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
lines = this._options.callbacks.afterBody.apply(this, arguments);
return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];}, $__.fs.J$__v7918151485_1240_706_356 = $__.fs.J$__v7918151485_1240_706, $__.fs.J$__v7918151485_1240_706),
        'getFooter': ($__.fs.J$__v7918151485_1242_707 = function J$__v7918151485_1242() {
var vvv_return, vvv_switch, me, callbacks, beforeFooter, footer, afterFooter, lines;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
callbacks = me._options.callbacks;
beforeFooter = callbacks.beforeFooter.apply(me, arguments);
footer = callbacks.footer.apply(me, arguments);
afterFooter = callbacks.afterFooter.apply(me, arguments);
lines = [];
lines = pushOrConcat(lines, beforeFooter);
lines = pushOrConcat(lines, footer);
lines = pushOrConcat(lines, afterFooter);
return lines;}, $__.fs.J$__v7918151485_1242_707_358 = $__.fs.J$__v7918151485_1242_707, $__.fs.J$__v7918151485_1242_707),
        'update': ($__.fs.J$__v7918151485_1250_708 = function J$__v7918151485_1250(changed) {
var vvv_return, vvv_switch, me, opts, existingModel, model, active, data, chartInstance, alignment, backgroundPoint, tooltipSize, tooltipPosition, i, len, labelColors, tooltipItems;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
changed = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me._options;
existingModel = me._model;
model = me._model = getBaseModel(opts);
active = me._active;
data = me._data;
chartInstance = me._chartInstance;
alignment = {
    xAlign: existingModel.xAlign,
    yAlign: existingModel.yAlign
};
backgroundPoint = {
    x: existingModel.x,
    y: existingModel.y
};
tooltipSize = {
    width: existingModel.width,
    height: existingModel.height
};
tooltipPosition = {
    x: existingModel.caretX,
    y: existingModel.caretY
};
if (active.length) {
    model.opacity = 1;
    labelColors = [];
    tooltipPosition = Chart.Tooltip.positioners[opts.position](active, me._eventPosition);
    tooltipItems = [];
    for (i = 0, len = active.length; i < len; ++i) {
        tooltipItems.push(createTooltipItem(active[i]));
    }
    if (opts.filter) {
        tooltipItems = tooltipItems.filter(function (a) {
            return opts.filter(a, data);
        });
    }
    if (opts.itemSort) {
        tooltipItems = tooltipItems.sort(function (a, b) {
            return opts.itemSort(a, b, data);
        });
    }
    helpers.each(tooltipItems, function (tooltipItem) {
        labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, chartInstance));
    });
    model.title = me.getTitle(tooltipItems, data);
    model.beforeBody = me.getBeforeBody(tooltipItems, data);
    model.body = me.getBody(tooltipItems, data);
    model.afterBody = me.getAfterBody(tooltipItems, data);
    model.footer = me.getFooter(tooltipItems, data);
    model.x = Math.round(tooltipPosition.x);
    model.y = Math.round(tooltipPosition.y);
    model.caretPadding = helpers.getValueOrDefault(tooltipPosition.padding, 2);
    model.labelColors = labelColors;
    model.dataPoints = tooltipItems;
    tooltipSize = getTooltipSize(this, model);
    alignment = determineAlignment(this, tooltipSize);
    backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);
} else {
    model.opacity = 0;
}
model.xAlign = alignment.xAlign;
model.yAlign = alignment.yAlign;
model.x = backgroundPoint.x;
model.y = backgroundPoint.y;
model.width = tooltipSize.width;
model.height = tooltipSize.height;
model.caretX = tooltipPosition.x;
model.caretY = tooltipPosition.y;
me._model = model;
if (changed && opts.custom) {
    opts.custom.call(me, model);
}
return me;}, $__.fs.J$__v7918151485_1250_708_360 = $__.fs.J$__v7918151485_1250_708, $__.fs.J$__v7918151485_1250_708),
        'drawCaret': ($__.fs.J$__v7918151485_1252_709 = function J$__v7918151485_1252(tooltipPoint, size, opacity) {
var vvv_return, vvv_switch, vm, ctx, x1, x2, x3, y1, y2, y3, caretSize, cornerRadius, xAlign, yAlign, ptX, ptY, width, height;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tooltipPoint = arguments[0], size = arguments[1], opacity = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
ctx = this._chart.ctx;
caretSize = vm.caretSize;
cornerRadius = vm.cornerRadius;
xAlign = vm.xAlign;
yAlign = vm.yAlign;
ptX = tooltipPoint.x;
ptY = tooltipPoint.y;
width = size.width;
height = size.height;
if (yAlign === 'center') {
    if (xAlign === 'left') {
        x1 = ptX;
        x2 = x1 - caretSize;
        x3 = x1;
    } else {
        x1 = ptX + width;
        x2 = x1 + caretSize;
        x3 = x1;
    }
    y2 = ptY + height / 2;
    y1 = y2 - caretSize;
    y3 = y2 + caretSize;
} else {
    if (xAlign === 'left') {
        x1 = ptX + cornerRadius;
        x2 = x1 + caretSize;
        x3 = x2 + caretSize;
    } else if (xAlign === 'right') {
        x1 = ptX + width - cornerRadius;
        x2 = x1 - caretSize;
        x3 = x2 - caretSize;
    } else {
        x2 = ptX + width / 2;
        x1 = x2 - caretSize;
        x3 = x2 + caretSize;
    }
    if (yAlign === 'top') {
        y1 = ptY;
        y2 = y1 - caretSize;
        y3 = y1;
    } else {
        y1 = ptY + height;
        y2 = y1 + caretSize;
        y3 = y1;
    }
}
ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
ctx.beginPath();
ctx.moveTo(x1, y1);
ctx.lineTo(x2, y2);
ctx.lineTo(x3, y3);
ctx.closePath();
ctx.fill();}, $__.fs.J$__v7918151485_1252_709_362 = $__.fs.J$__v7918151485_1252_709, $__.fs.J$__v7918151485_1252_709),
        'drawTitle': ($__.fs.J$__v7918151485_1254_710 = function J$__v7918151485_1254(pt, vm, ctx, opacity) {
var vvv_return, vvv_switch, title, titleFontSize, titleSpacing, i, len;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pt = arguments[0], vm = arguments[1], ctx = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
title = vm.title;
if (title.length) {
    ctx.textAlign = vm._titleAlign;
    ctx.textBaseline = 'top';
    titleFontSize = vm.titleFontSize;
    titleSpacing = vm.titleSpacing;
    ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
    ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
    for (i = 0, len = title.length; i < len; ++i) {
        ctx.fillText(title[i], pt.x, pt.y);
        pt.y += titleFontSize + titleSpacing;
        if (i + 1 === title.length) {
            pt.y += vm.titleMarginBottom - titleSpacing;
        }
    }
}}, $__.fs.J$__v7918151485_1254_710_364 = $__.fs.J$__v7918151485_1254_710, $__.fs.J$__v7918151485_1254_710),
        'drawBody': ($__.fs.J$__v7918151485_1262_711 = function J$__v7918151485_1262(pt, vm, ctx, opacity) {
var vvv_return, vvv_switch, bodyFontSize, bodySpacing, body, textColor, xLinePadding, fillLineOfText, drawColorBoxes;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pt = arguments[0], vm = arguments[1], ctx = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
bodyFontSize = vm.bodyFontSize;
bodySpacing = vm.bodySpacing;
body = vm.body;
ctx.textAlign = vm._bodyAlign;
ctx.textBaseline = 'top';
textColor = mergeOpacity(vm.bodyFontColor, opacity);
ctx.fillStyle = textColor;
ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
xLinePadding = 0;
fillLineOfText = function (line) {
    ctx.fillText(line, pt.x + xLinePadding, pt.y);
    pt.y += bodyFontSize + bodySpacing;
};
helpers.each(vm.beforeBody, fillLineOfText);
drawColorBoxes = vm.displayColors;
xLinePadding = drawColorBoxes ? bodyFontSize + 2 : 0;
helpers.each(body, function (bodyItem, i) {
    helpers.each(bodyItem.before, fillLineOfText);
    helpers.each(bodyItem.lines, function (line) {
        if (drawColorBoxes) {
            ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
            ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
            ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
            ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
            ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
            ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
            ctx.fillStyle = textColor;
        }
        fillLineOfText(line);
    });
    helpers.each(bodyItem.after, fillLineOfText);
});
xLinePadding = 0;
helpers.each(vm.afterBody, fillLineOfText);
pt.y -= bodySpacing;}, $__.fs.J$__v7918151485_1262_711_366 = $__.fs.J$__v7918151485_1262_711, $__.fs.J$__v7918151485_1262_711),
        'drawFooter': ($__.fs.J$__v7918151485_1266_712 = function J$__v7918151485_1266(pt, vm, ctx, opacity) {
var vvv_return, vvv_switch, footer;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pt = arguments[0], vm = arguments[1], ctx = arguments[2], opacity = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
footer = vm.footer;
if (footer.length) {
    pt.y += vm.footerMarginTop;
    ctx.textAlign = vm._footerAlign;
    ctx.textBaseline = 'top';
    ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
    ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
    helpers.each(footer, function (line) {
        ctx.fillText(line, pt.x, pt.y);
        pt.y += vm.footerFontSize + vm.footerSpacing;
    });
}}, $__.fs.J$__v7918151485_1266_712_368 = $__.fs.J$__v7918151485_1266_712, $__.fs.J$__v7918151485_1266_712),
        'drawBackground': ($__.fs.J$__v7918151485_1268_713 = function J$__v7918151485_1268(pt, vm, ctx, tooltipSize, opacity) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pt = arguments[0], vm = arguments[1], ctx = arguments[2], tooltipSize = arguments[3], opacity = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
helpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);
ctx.fill();}, $__.fs.J$__v7918151485_1268_713_370 = $__.fs.J$__v7918151485_1268_713, $__.fs.J$__v7918151485_1268_713),
        'draw': ($__.fs.J$__v7918151485_1270_714 = function J$__v7918151485_1270() {
var vvv_return, vvv_switch, ctx, vm, tooltipSize, pt, opacity;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ctx = this._chart.ctx;
vm = this._view;
if (vm.opacity === 0) {
    return;
}
tooltipSize = {
    width: vm.width,
    height: vm.height
};
pt = {
    x: vm.x,
    y: vm.y
};
opacity = Math.abs(vm.opacity < 0.001) ? 0 : vm.opacity;
if (this._options.enabled) {
    this.drawBackground(pt, vm, ctx, tooltipSize, opacity);
    this.drawCaret(pt, tooltipSize, opacity);
    pt.x += vm.xPadding;
    pt.y += vm.yPadding;
    this.drawTitle(pt, vm, ctx, opacity);
    this.drawBody(pt, vm, ctx, opacity);
    this.drawFooter(pt, vm, ctx, opacity);
}}, $__.fs.J$__v7918151485_1270_714_372 = $__.fs.J$__v7918151485_1270_714, $__.fs.J$__v7918151485_1270_714),
        'handleEvent': ($__.fs.J$__v7918151485_1272_715 = function J$__v7918151485_1272(e) {
var vvv_return, vvv_switch, me, options, changed, model;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
e = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
options = me._options;
changed = false;
me._lastActive = me._lastActive || [];
if (e.type === 'mouseout') {
    me._active = [];
} else {
    me._active = me._chartInstance.getElementsAtEventForMode(e, options.mode, options);
}
changed = !helpers.arrayEquals(me._active, me._lastActive);
me._lastActive = me._active;
if (options.enabled || options.custom) {
    me._eventPosition = {
        x: e.x,
        y: e.y
    };
    model = me._model;
    me.update(true);
    me.pivot();
    changed |= model.x !== me._model.x || model.y !== me._model.y;
}
return changed;}, $__.fs.J$__v7918151485_1272_715_374 = $__.fs.J$__v7918151485_1272_715, $__.fs.J$__v7918151485_1272_715)
    }, 5, true, $__.uid));
    TAJS_restrictToType(Chart.Tooltip, 'function').positioners = $__.os.oid164 = {
        'average': ($__.fs.J$__v7918151485_1274_719 = function J$__v7918151485_1274(elements) {
var vvv_return, vvv_switch, i, len, x, y, count, el, pos;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
elements = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!elements.length) {
    return false;
}
x = 0;
y = 0;
count = 0;
for (i = 0, len = elements.length; i < len; ++i) {
    el = elements[i];
    if (el && el.hasValue()) {
        pos = el.tooltipPosition();
        x += pos.x;
        y += pos.y;
        ++count;
    }
}
return {
    x: Math.round(x / count),
    y: Math.round(y / count)
};}),
        'nearest': ($__.fs.J$__v7918151485_1276_720 = function J$__v7918151485_1276(elements, eventPosition) {
var vvv_return, vvv_switch, x, y, nearestElement, minDistance, i, len, el, center, d, tp;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
elements = arguments[0], eventPosition = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
x = eventPosition.x;
y = eventPosition.y;
minDistance = Number.POSITIVE_INFINITY;
for (i = 0, len = elements.length; i < len; ++i) {
    el = elements[i];
    if (el && el.hasValue()) {
        center = el.getCenterPoint();
        d = helpers.distanceBetweenPoints(eventPosition, center);
        if (d < minDistance) {
            minDistance = d;
            nearestElement = el;
        }
    }
}
if (nearestElement) {
    tp = nearestElement.tooltipPosition();
    x = tp.x;
    y = tp.y;
}
return {
    x: x,
    y: y
};})
    };
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
Chart.defaults.global.tooltips = {
    enabled: true,
    custom: null,
    mode: 'nearest',
    position: 'average',
    intersect: true,
    backgroundColor: 'rgba(0,0,0,0.8)',
    titleFontStyle: 'bold',
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleFontColor: '#fff',
    titleAlign: 'left',
    bodySpacing: 2,
    bodyFontColor: '#fff',
    bodyAlign: 'left',
    footerFontStyle: 'bold',
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFontColor: '#fff',
    footerAlign: 'left',
    yPadding: 6,
    xPadding: 6,
    caretSize: 5,
    cornerRadius: 6,
    multiKeyBackground: '#fff',
    displayColors: true,
    callbacks: {
        beforeTitle: helpers.noop,
        title: function (tooltipItems, data) {
            var title = '';
            var labels = data.labels;
            var labelCount = labels ? labels.length : 0;
            if (tooltipItems.length > 0) {
                var item = tooltipItems[0];
                if (item.xLabel) {
                    title = item.xLabel;
                } else if (labelCount > 0 && item.index < labelCount) {
                    title = labels[item.index];
                }
            }
            return title;
        },
        afterTitle: helpers.noop,
        beforeBody: helpers.noop,
        beforeLabel: helpers.noop,
        label: function (tooltipItem, data) {
            var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
            return datasetLabel + ': ' + tooltipItem.yLabel;
        },
        labelColor: function (tooltipItem, chartInstance) {
            var meta = chartInstance.getDatasetMeta(tooltipItem.datasetIndex);
            var activeElement = meta.data[tooltipItem.index];
            var view = activeElement._view;
            return {
                borderColor: view.borderColor,
                backgroundColor: view.backgroundColor
            };
        },
        afterLabel: helpers.noop,
        afterBody: helpers.noop,
        beforeFooter: helpers.noop,
        footer: helpers.noop,
        afterFooter: helpers.noop
    }
};
Chart.Tooltip = Chart.Element.extend({
    initialize: function () {
        this._model = getBaseModel(this._options);
    },
    getTitle: function () {
        var me = this;
        var opts = me._options;
        var callbacks = opts.callbacks;
        var beforeTitle = callbacks.beforeTitle.apply(me, arguments), title = callbacks.title.apply(me, arguments), afterTitle = callbacks.afterTitle.apply(me, arguments);
        var lines = [];
        lines = pushOrConcat(lines, beforeTitle);
        lines = pushOrConcat(lines, title);
        lines = pushOrConcat(lines, afterTitle);
        return lines;
    },
    getBeforeBody: function () {
        var lines = this._options.callbacks.beforeBody.apply(this, arguments);
        return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
    },
    getBody: function (tooltipItems, data) {
        var me = this;
        var callbacks = me._options.callbacks;
        var bodyItems = [];
        helpers.each(tooltipItems, function (tooltipItem) {
            var bodyItem = {
                before: [],
                lines: [],
                after: []
            };
            pushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));
            pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
            pushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));
            bodyItems.push(bodyItem);
        });
        return bodyItems;
    },
    getAfterBody: function () {
        var lines = this._options.callbacks.afterBody.apply(this, arguments);
        return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
    },
    getFooter: function () {
        var me = this;
        var callbacks = me._options.callbacks;
        var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
        var footer = callbacks.footer.apply(me, arguments);
        var afterFooter = callbacks.afterFooter.apply(me, arguments);
        var lines = [];
        lines = pushOrConcat(lines, beforeFooter);
        lines = pushOrConcat(lines, footer);
        lines = pushOrConcat(lines, afterFooter);
        return lines;
    },
    update: function (changed) {
        var me = this;
        var opts = me._options;
        var existingModel = me._model;
        var model = me._model = getBaseModel(opts);
        var active = me._active;
        var data = me._data;
        var chartInstance = me._chartInstance;
        var alignment = {
            xAlign: existingModel.xAlign,
            yAlign: existingModel.yAlign
        };
        var backgroundPoint = {
            x: existingModel.x,
            y: existingModel.y
        };
        var tooltipSize = {
            width: existingModel.width,
            height: existingModel.height
        };
        var tooltipPosition = {
            x: existingModel.caretX,
            y: existingModel.caretY
        };
        var i, len;
        if (active.length) {
            model.opacity = 1;
            var labelColors = [];
            tooltipPosition = Chart.Tooltip.positioners[opts.position](active, me._eventPosition);
            var tooltipItems = [];
            for (i = 0, len = active.length; i < len; ++i) {
                tooltipItems.push(createTooltipItem(active[i]));
            }
            if (opts.filter) {
                tooltipItems = tooltipItems.filter(function (a) {
                    return opts.filter(a, data);
                });
            }
            if (opts.itemSort) {
                tooltipItems = tooltipItems.sort(function (a, b) {
                    return opts.itemSort(a, b, data);
                });
            }
            helpers.each(tooltipItems, function (tooltipItem) {
                labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, chartInstance));
            });
            model.title = me.getTitle(tooltipItems, data);
            model.beforeBody = me.getBeforeBody(tooltipItems, data);
            model.body = me.getBody(tooltipItems, data);
            model.afterBody = me.getAfterBody(tooltipItems, data);
            model.footer = me.getFooter(tooltipItems, data);
            model.x = Math.round(tooltipPosition.x);
            model.y = Math.round(tooltipPosition.y);
            model.caretPadding = helpers.getValueOrDefault(tooltipPosition.padding, 2);
            model.labelColors = labelColors;
            model.dataPoints = tooltipItems;
            tooltipSize = getTooltipSize(this, model);
            alignment = determineAlignment(this, tooltipSize);
            backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);
        } else {
            model.opacity = 0;
        }
        model.xAlign = alignment.xAlign;
        model.yAlign = alignment.yAlign;
        model.x = backgroundPoint.x;
        model.y = backgroundPoint.y;
        model.width = tooltipSize.width;
        model.height = tooltipSize.height;
        model.caretX = tooltipPosition.x;
        model.caretY = tooltipPosition.y;
        me._model = model;
        if (changed && opts.custom) {
            opts.custom.call(me, model);
        }
        return me;
    },
    drawCaret: function (tooltipPoint, size, opacity) {
        var vm = this._view;
        var ctx = this._chart.ctx;
        var x1, x2, x3;
        var y1, y2, y3;
        var caretSize = vm.caretSize;
        var cornerRadius = vm.cornerRadius;
        var xAlign = vm.xAlign, yAlign = vm.yAlign;
        var ptX = tooltipPoint.x, ptY = tooltipPoint.y;
        var width = size.width, height = size.height;
        if (yAlign === 'center') {
            if (xAlign === 'left') {
                x1 = ptX;
                x2 = x1 - caretSize;
                x3 = x1;
            } else {
                x1 = ptX + width;
                x2 = x1 + caretSize;
                x3 = x1;
            }
            y2 = ptY + height / 2;
            y1 = y2 - caretSize;
            y3 = y2 + caretSize;
        } else {
            if (xAlign === 'left') {
                x1 = ptX + cornerRadius;
                x2 = x1 + caretSize;
                x3 = x2 + caretSize;
            } else if (xAlign === 'right') {
                x1 = ptX + width - cornerRadius;
                x2 = x1 - caretSize;
                x3 = x2 - caretSize;
            } else {
                x2 = ptX + width / 2;
                x1 = x2 - caretSize;
                x3 = x2 + caretSize;
            }
            if (yAlign === 'top') {
                y1 = ptY;
                y2 = y1 - caretSize;
                y3 = y1;
            } else {
                y1 = ptY + height;
                y2 = y1 + caretSize;
                y3 = y1;
            }
        }
        ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.lineTo(x3, y3);
        ctx.closePath();
        ctx.fill();
    },
    drawTitle: function (pt, vm, ctx, opacity) {
        var title = vm.title;
        if (title.length) {
            ctx.textAlign = vm._titleAlign;
            ctx.textBaseline = 'top';
            var titleFontSize = vm.titleFontSize, titleSpacing = vm.titleSpacing;
            ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
            ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
            var i, len;
            for (i = 0, len = title.length; i < len; ++i) {
                ctx.fillText(title[i], pt.x, pt.y);
                pt.y += titleFontSize + titleSpacing;
                if (i + 1 === title.length) {
                    pt.y += vm.titleMarginBottom - titleSpacing;
                }
            }
        }
    },
    drawBody: function (pt, vm, ctx, opacity) {
        var bodyFontSize = vm.bodyFontSize;
        var bodySpacing = vm.bodySpacing;
        var body = vm.body;
        ctx.textAlign = vm._bodyAlign;
        ctx.textBaseline = 'top';
        var textColor = mergeOpacity(vm.bodyFontColor, opacity);
        ctx.fillStyle = textColor;
        ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
        var xLinePadding = 0;
        var fillLineOfText = function (line) {
            ctx.fillText(line, pt.x + xLinePadding, pt.y);
            pt.y += bodyFontSize + bodySpacing;
        };
        helpers.each(vm.beforeBody, fillLineOfText);
        var drawColorBoxes = vm.displayColors;
        xLinePadding = drawColorBoxes ? bodyFontSize + 2 : 0;
        helpers.each(body, function (bodyItem, i) {
            helpers.each(bodyItem.before, fillLineOfText);
            helpers.each(bodyItem.lines, function (line) {
                if (drawColorBoxes) {
                    ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
                    ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
                    ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
                    ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
                    ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
                    ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
                    ctx.fillStyle = textColor;
                }
                fillLineOfText(line);
            });
            helpers.each(bodyItem.after, fillLineOfText);
        });
        xLinePadding = 0;
        helpers.each(vm.afterBody, fillLineOfText);
        pt.y -= bodySpacing;
    },
    drawFooter: function (pt, vm, ctx, opacity) {
        var footer = vm.footer;
        if (footer.length) {
            pt.y += vm.footerMarginTop;
            ctx.textAlign = vm._footerAlign;
            ctx.textBaseline = 'top';
            ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
            ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
            helpers.each(footer, function (line) {
                ctx.fillText(line, pt.x, pt.y);
                pt.y += vm.footerFontSize + vm.footerSpacing;
            });
        }
    },
    drawBackground: function (pt, vm, ctx, tooltipSize, opacity) {
        ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
        helpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);
        ctx.fill();
    },
    draw: function () {
        var ctx = this._chart.ctx;
        var vm = this._view;
        if (vm.opacity === 0) {
            return;
        }
        var tooltipSize = {
            width: vm.width,
            height: vm.height
        };
        var pt = {
            x: vm.x,
            y: vm.y
        };
        var opacity = Math.abs(vm.opacity < 0.001) ? 0 : vm.opacity;
        if (this._options.enabled) {
            this.drawBackground(pt, vm, ctx, tooltipSize, opacity);
            this.drawCaret(pt, tooltipSize, opacity);
            pt.x += vm.xPadding;
            pt.y += vm.yPadding;
            this.drawTitle(pt, vm, ctx, opacity);
            this.drawBody(pt, vm, ctx, opacity);
            this.drawFooter(pt, vm, ctx, opacity);
        }
    },
    handleEvent: function (e) {
        var me = this;
        var options = me._options;
        var changed = false;
        me._lastActive = me._lastActive || [];
        if (e.type === 'mouseout') {
            me._active = [];
        } else {
            me._active = me._chartInstance.getElementsAtEventForMode(e, options.mode, options);
        }
        changed = !helpers.arrayEquals(me._active, me._lastActive);
        me._lastActive = me._active;
        if (options.enabled || options.custom) {
            me._eventPosition = {
                x: e.x,
                y: e.y
            };
            var model = me._model;
            me.update(true);
            me.pivot();
            changed |= model.x !== me._model.x || model.y !== me._model.y;
        }
        return changed;
    }
});
Chart.Tooltip.positioners = {
    average: function (elements) {
        if (!elements.length) {
            return false;
        }
        var i, len;
        var x = 0;
        var y = 0;
        var count = 0;
        for (i = 0, len = elements.length; i < len; ++i) {
            var el = elements[i];
            if (el && el.hasValue()) {
                var pos = el.tooltipPosition();
                x += pos.x;
                y += pos.y;
                ++count;
            }
        }
        return {
            x: Math.round(x / count),
            y: Math.round(y / count)
        };
    },
    nearest: function (elements, eventPosition) {
        var x = eventPosition.x;
        var y = eventPosition.y;
        var nearestElement;
        var minDistance = Number.POSITIVE_INFINITY;
        var i, len;
        for (i = 0, len = elements.length; i < len; ++i) {
            var el = elements[i];
            if (el && el.hasValue()) {
                var center = el.getCenterPoint();
                var d = helpers.distanceBetweenPoints(eventPosition, center);
                if (d < minDistance) {
                    minDistance = d;
                    nearestElement = el;
                }
            }
        }
        if (nearestElement) {
            var tp = nearestElement.tooltipPosition();
            x = tp.x;
            y = tp.y;
        }
        return {
            x: x,
            y: y
        };
    }
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    function mergeOpacity(colorString, opacity) {
        var color = helpers.color(colorString);
        return color.alpha(opacity * color.alpha()).rgbaString();
    }
    Chart.defaults.global.tooltips = {
        enabled: true,
        custom: null,
        mode: 'nearest',
        position: 'average',
        intersect: true,
        backgroundColor: 'rgba(0,0,0,0.8)',
        titleFontStyle: 'bold',
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleFontColor: '#fff',
        titleAlign: 'left',
        bodySpacing: 2,
        bodyFontColor: '#fff',
        bodyAlign: 'left',
        footerFontStyle: 'bold',
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFontColor: '#fff',
        footerAlign: 'left',
        yPadding: 6,
        xPadding: 6,
        caretSize: 5,
        cornerRadius: 6,
        multiKeyBackground: '#fff',
        displayColors: true,
        callbacks: {
            beforeTitle: helpers.noop,
            title: function (tooltipItems, data) {
                var title = '';
                var labels = data.labels;
                var labelCount = labels ? labels.length : 0;
                if (tooltipItems.length > 0) {
                    var item = tooltipItems[0];
                    if (item.xLabel) {
                        title = item.xLabel;
                    } else if (labelCount > 0 && item.index < labelCount) {
                        title = labels[item.index];
                    }
                }
                return title;
            },
            afterTitle: helpers.noop,
            beforeBody: helpers.noop,
            beforeLabel: helpers.noop,
            label: function (tooltipItem, data) {
                var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
                return datasetLabel + ': ' + tooltipItem.yLabel;
            },
            labelColor: function (tooltipItem, chartInstance) {
                var meta = chartInstance.getDatasetMeta(tooltipItem.datasetIndex);
                var activeElement = meta.data[tooltipItem.index];
                var view = activeElement._view;
                return {
                    borderColor: view.borderColor,
                    backgroundColor: view.backgroundColor
                };
            },
            afterLabel: helpers.noop,
            afterBody: helpers.noop,
            beforeFooter: helpers.noop,
            footer: helpers.noop,
            afterFooter: helpers.noop
        }
    };
    function pushOrConcat(base, toPush) {
        if (toPush) {
            if (helpers.isArray(toPush)) {
                Array.prototype.push.apply(base, toPush);
            } else {
                base.push(toPush);
            }
        }
        return base;
    }
    function createTooltipItem(element) {
        var xScale = element._xScale;
        var yScale = element._yScale || element._scale;
        var index = element._index, datasetIndex = element._datasetIndex;
        return {
            xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
            yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
            index: index,
            datasetIndex: datasetIndex,
            x: element._model.x,
            y: element._model.y
        };
    }
    function getBaseModel(tooltipOpts) {
        var globalDefaults = Chart.defaults.global;
        var getValueOrDefault = helpers.getValueOrDefault;
        return {
            xPadding: tooltipOpts.xPadding,
            yPadding: tooltipOpts.yPadding,
            xAlign: tooltipOpts.xAlign,
            yAlign: tooltipOpts.yAlign,
            bodyFontColor: tooltipOpts.bodyFontColor,
            _bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
            _bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
            _bodyAlign: tooltipOpts.bodyAlign,
            bodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
            bodySpacing: tooltipOpts.bodySpacing,
            titleFontColor: tooltipOpts.titleFontColor,
            _titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
            _titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
            titleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
            _titleAlign: tooltipOpts.titleAlign,
            titleSpacing: tooltipOpts.titleSpacing,
            titleMarginBottom: tooltipOpts.titleMarginBottom,
            footerFontColor: tooltipOpts.footerFontColor,
            _footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
            _footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
            footerFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
            _footerAlign: tooltipOpts.footerAlign,
            footerSpacing: tooltipOpts.footerSpacing,
            footerMarginTop: tooltipOpts.footerMarginTop,
            caretSize: tooltipOpts.caretSize,
            cornerRadius: tooltipOpts.cornerRadius,
            backgroundColor: tooltipOpts.backgroundColor,
            opacity: 0,
            legendColorBackground: tooltipOpts.multiKeyBackground,
            displayColors: tooltipOpts.displayColors
        };
    }
    function getTooltipSize(tooltip, model) {
        var ctx = tooltip._chart.ctx;
        var height = model.yPadding * 2;
        var width = 0;
        var body = model.body;
        var combinedBodyLength = body.reduce(function (count, bodyItem) {
            return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
        }, 0);
        combinedBodyLength += model.beforeBody.length + model.afterBody.length;
        var titleLineCount = model.title.length;
        var footerLineCount = model.footer.length;
        var titleFontSize = model.titleFontSize, bodyFontSize = model.bodyFontSize, footerFontSize = model.footerFontSize;
        height += titleLineCount * titleFontSize;
        height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0;
        height += titleLineCount ? model.titleMarginBottom : 0;
        height += combinedBodyLength * bodyFontSize;
        height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0;
        height += footerLineCount ? model.footerMarginTop : 0;
        height += footerLineCount * footerFontSize;
        height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0;
        var widthPadding = 0;
        var maxLineWidth = function (line) {
            width = Math.max(width, ctx.measureText(line).width + widthPadding);
        };
        ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
        helpers.each(model.title, maxLineWidth);
        ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
        helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
        widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
        helpers.each(body, function (bodyItem) {
            helpers.each(bodyItem.before, maxLineWidth);
            helpers.each(bodyItem.lines, maxLineWidth);
            helpers.each(bodyItem.after, maxLineWidth);
        });
        widthPadding = 0;
        ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
        helpers.each(model.footer, maxLineWidth);
        width += 2 * model.xPadding;
        return {
            width: width,
            height: height
        };
    }
    function determineAlignment(tooltip, size) {
        var model = tooltip._model;
        var chart = tooltip._chart;
        var chartArea = tooltip._chartInstance.chartArea;
        var xAlign = 'center';
        var yAlign = 'center';
        if (model.y < size.height) {
            yAlign = 'top';
        } else if (model.y > chart.height - size.height) {
            yAlign = 'bottom';
        }
        var lf, rf;
        var olf, orf;
        var yf;
        var midX = (chartArea.left + chartArea.right) / 2;
        var midY = (chartArea.top + chartArea.bottom) / 2;
        if (yAlign === 'center') {
            lf = function (x) {
                return x <= midX;
            };
            rf = function (x) {
                return x > midX;
            };
        } else {
            lf = function (x) {
                return x <= size.width / 2;
            };
            rf = function (x) {
                return x >= chart.width - size.width / 2;
            };
        }
        olf = function (x) {
            return x + size.width > chart.width;
        };
        orf = function (x) {
            return x - size.width < 0;
        };
        yf = function (y) {
            return y <= midY ? 'top' : 'bottom';
        };
        if (lf(model.x)) {
            xAlign = 'left';
            if (olf(model.x)) {
                xAlign = 'center';
                yAlign = yf(model.y);
            }
        } else if (rf(model.x)) {
            xAlign = 'right';
            if (orf(model.x)) {
                xAlign = 'center';
                yAlign = yf(model.y);
            }
        }
        var opts = tooltip._options;
        return {
            xAlign: opts.xAlign ? opts.xAlign : xAlign,
            yAlign: opts.yAlign ? opts.yAlign : yAlign
        };
    }
    function getBackgroundPoint(vm, size, alignment) {
        var x = vm.x;
        var y = vm.y;
        var caretSize = vm.caretSize, caretPadding = vm.caretPadding, cornerRadius = vm.cornerRadius, xAlign = alignment.xAlign, yAlign = alignment.yAlign, paddingAndSize = caretSize + caretPadding, radiusAndPadding = cornerRadius + caretPadding;
        if (xAlign === 'right') {
            x -= size.width;
        } else if (xAlign === 'center') {
            x -= size.width / 2;
        }
        if (yAlign === 'top') {
            y += paddingAndSize;
        } else if (yAlign === 'bottom') {
            y -= size.height + paddingAndSize;
        } else {
            y -= size.height / 2;
        }
        if (yAlign === 'center') {
            if (xAlign === 'left') {
                x += paddingAndSize;
            } else if (xAlign === 'right') {
                x -= paddingAndSize;
            }
        } else if (xAlign === 'left') {
            x -= radiusAndPadding;
        } else if (xAlign === 'right') {
            x += radiusAndPadding;
        }
        return {
            x: x,
            y: y
        };
    }
    Chart.Tooltip = Chart.Element.extend({
        initialize: function () {
            this._model = getBaseModel(this._options);
        },
        getTitle: function () {
            var me = this;
            var opts = me._options;
            var callbacks = opts.callbacks;
            var beforeTitle = callbacks.beforeTitle.apply(me, arguments), title = callbacks.title.apply(me, arguments), afterTitle = callbacks.afterTitle.apply(me, arguments);
            var lines = [];
            lines = pushOrConcat(lines, beforeTitle);
            lines = pushOrConcat(lines, title);
            lines = pushOrConcat(lines, afterTitle);
            return lines;
        },
        getBeforeBody: function () {
            var lines = this._options.callbacks.beforeBody.apply(this, arguments);
            return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
        },
        getBody: function (tooltipItems, data) {
            var me = this;
            var callbacks = me._options.callbacks;
            var bodyItems = [];
            helpers.each(tooltipItems, function (tooltipItem) {
                var bodyItem = {
                    before: [],
                    lines: [],
                    after: []
                };
                pushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));
                pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
                pushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));
                bodyItems.push(bodyItem);
            });
            return bodyItems;
        },
        getAfterBody: function () {
            var lines = this._options.callbacks.afterBody.apply(this, arguments);
            return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
        },
        getFooter: function () {
            var me = this;
            var callbacks = me._options.callbacks;
            var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
            var footer = callbacks.footer.apply(me, arguments);
            var afterFooter = callbacks.afterFooter.apply(me, arguments);
            var lines = [];
            lines = pushOrConcat(lines, beforeFooter);
            lines = pushOrConcat(lines, footer);
            lines = pushOrConcat(lines, afterFooter);
            return lines;
        },
        update: function (changed) {
            var me = this;
            var opts = me._options;
            var existingModel = me._model;
            var model = me._model = getBaseModel(opts);
            var active = me._active;
            var data = me._data;
            var chartInstance = me._chartInstance;
            var alignment = {
                xAlign: existingModel.xAlign,
                yAlign: existingModel.yAlign
            };
            var backgroundPoint = {
                x: existingModel.x,
                y: existingModel.y
            };
            var tooltipSize = {
                width: existingModel.width,
                height: existingModel.height
            };
            var tooltipPosition = {
                x: existingModel.caretX,
                y: existingModel.caretY
            };
            var i, len;
            if (active.length) {
                model.opacity = 1;
                var labelColors = [];
                tooltipPosition = Chart.Tooltip.positioners[opts.position](active, me._eventPosition);
                var tooltipItems = [];
                for (i = 0, len = active.length; i < len; ++i) {
                    tooltipItems.push(createTooltipItem(active[i]));
                }
                if (opts.filter) {
                    tooltipItems = tooltipItems.filter(function (a) {
                        return opts.filter(a, data);
                    });
                }
                if (opts.itemSort) {
                    tooltipItems = tooltipItems.sort(function (a, b) {
                        return opts.itemSort(a, b, data);
                    });
                }
                helpers.each(tooltipItems, function (tooltipItem) {
                    labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, chartInstance));
                });
                model.title = me.getTitle(tooltipItems, data);
                model.beforeBody = me.getBeforeBody(tooltipItems, data);
                model.body = me.getBody(tooltipItems, data);
                model.afterBody = me.getAfterBody(tooltipItems, data);
                model.footer = me.getFooter(tooltipItems, data);
                model.x = Math.round(tooltipPosition.x);
                model.y = Math.round(tooltipPosition.y);
                model.caretPadding = helpers.getValueOrDefault(tooltipPosition.padding, 2);
                model.labelColors = labelColors;
                model.dataPoints = tooltipItems;
                tooltipSize = getTooltipSize(this, model);
                alignment = determineAlignment(this, tooltipSize);
                backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);
            } else {
                model.opacity = 0;
            }
            model.xAlign = alignment.xAlign;
            model.yAlign = alignment.yAlign;
            model.x = backgroundPoint.x;
            model.y = backgroundPoint.y;
            model.width = tooltipSize.width;
            model.height = tooltipSize.height;
            model.caretX = tooltipPosition.x;
            model.caretY = tooltipPosition.y;
            me._model = model;
            if (changed && opts.custom) {
                opts.custom.call(me, model);
            }
            return me;
        },
        drawCaret: function (tooltipPoint, size, opacity) {
            var vm = this._view;
            var ctx = this._chart.ctx;
            var x1, x2, x3;
            var y1, y2, y3;
            var caretSize = vm.caretSize;
            var cornerRadius = vm.cornerRadius;
            var xAlign = vm.xAlign, yAlign = vm.yAlign;
            var ptX = tooltipPoint.x, ptY = tooltipPoint.y;
            var width = size.width, height = size.height;
            if (yAlign === 'center') {
                if (xAlign === 'left') {
                    x1 = ptX;
                    x2 = x1 - caretSize;
                    x3 = x1;
                } else {
                    x1 = ptX + width;
                    x2 = x1 + caretSize;
                    x3 = x1;
                }
                y2 = ptY + height / 2;
                y1 = y2 - caretSize;
                y3 = y2 + caretSize;
            } else {
                if (xAlign === 'left') {
                    x1 = ptX + cornerRadius;
                    x2 = x1 + caretSize;
                    x3 = x2 + caretSize;
                } else if (xAlign === 'right') {
                    x1 = ptX + width - cornerRadius;
                    x2 = x1 - caretSize;
                    x3 = x2 - caretSize;
                } else {
                    x2 = ptX + width / 2;
                    x1 = x2 - caretSize;
                    x3 = x2 + caretSize;
                }
                if (yAlign === 'top') {
                    y1 = ptY;
                    y2 = y1 - caretSize;
                    y3 = y1;
                } else {
                    y1 = ptY + height;
                    y2 = y1 + caretSize;
                    y3 = y1;
                }
            }
            ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.lineTo(x3, y3);
            ctx.closePath();
            ctx.fill();
        },
        drawTitle: function (pt, vm, ctx, opacity) {
            var title = vm.title;
            if (title.length) {
                ctx.textAlign = vm._titleAlign;
                ctx.textBaseline = 'top';
                var titleFontSize = vm.titleFontSize, titleSpacing = vm.titleSpacing;
                ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
                ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
                var i, len;
                for (i = 0, len = title.length; i < len; ++i) {
                    ctx.fillText(title[i], pt.x, pt.y);
                    pt.y += titleFontSize + titleSpacing;
                    if (i + 1 === title.length) {
                        pt.y += vm.titleMarginBottom - titleSpacing;
                    }
                }
            }
        },
        drawBody: function (pt, vm, ctx, opacity) {
            var bodyFontSize = vm.bodyFontSize;
            var bodySpacing = vm.bodySpacing;
            var body = vm.body;
            ctx.textAlign = vm._bodyAlign;
            ctx.textBaseline = 'top';
            var textColor = mergeOpacity(vm.bodyFontColor, opacity);
            ctx.fillStyle = textColor;
            ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
            var xLinePadding = 0;
            var fillLineOfText = function (line) {
                ctx.fillText(line, pt.x + xLinePadding, pt.y);
                pt.y += bodyFontSize + bodySpacing;
            };
            helpers.each(vm.beforeBody, fillLineOfText);
            var drawColorBoxes = vm.displayColors;
            xLinePadding = drawColorBoxes ? bodyFontSize + 2 : 0;
            helpers.each(body, function (bodyItem, i) {
                helpers.each(bodyItem.before, fillLineOfText);
                helpers.each(bodyItem.lines, function (line) {
                    if (drawColorBoxes) {
                        ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
                        ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
                        ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
                        ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
                        ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
                        ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
                        ctx.fillStyle = textColor;
                    }
                    fillLineOfText(line);
                });
                helpers.each(bodyItem.after, fillLineOfText);
            });
            xLinePadding = 0;
            helpers.each(vm.afterBody, fillLineOfText);
            pt.y -= bodySpacing;
        },
        drawFooter: function (pt, vm, ctx, opacity) {
            var footer = vm.footer;
            if (footer.length) {
                pt.y += vm.footerMarginTop;
                ctx.textAlign = vm._footerAlign;
                ctx.textBaseline = 'top';
                ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
                ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
                helpers.each(footer, function (line) {
                    ctx.fillText(line, pt.x, pt.y);
                    pt.y += vm.footerFontSize + vm.footerSpacing;
                });
            }
        },
        drawBackground: function (pt, vm, ctx, tooltipSize, opacity) {
            ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
            helpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);
            ctx.fill();
        },
        draw: function () {
            var ctx = this._chart.ctx;
            var vm = this._view;
            if (vm.opacity === 0) {
                return;
            }
            var tooltipSize = {
                width: vm.width,
                height: vm.height
            };
            var pt = {
                x: vm.x,
                y: vm.y
            };
            var opacity = Math.abs(vm.opacity < 0.001) ? 0 : vm.opacity;
            if (this._options.enabled) {
                this.drawBackground(pt, vm, ctx, tooltipSize, opacity);
                this.drawCaret(pt, tooltipSize, opacity);
                pt.x += vm.xPadding;
                pt.y += vm.yPadding;
                this.drawTitle(pt, vm, ctx, opacity);
                this.drawBody(pt, vm, ctx, opacity);
                this.drawFooter(pt, vm, ctx, opacity);
            }
        },
        handleEvent: function (e) {
            var me = this;
            var options = me._options;
            var changed = false;
            me._lastActive = me._lastActive || [];
            if (e.type === 'mouseout') {
                me._active = [];
            } else {
                me._active = me._chartInstance.getElementsAtEventForMode(e, options.mode, options);
            }
            changed = !helpers.arrayEquals(me._active, me._lastActive);
            me._lastActive = me._active;
            if (options.enabled || options.custom) {
                me._eventPosition = {
                    x: e.x,
                    y: e.y
                };
                var model = me._model;
                me.update(true);
                me.pivot();
                changed |= model.x !== me._model.x || model.y !== me._model.y;
            }
            return changed;
        }
    });
    Chart.Tooltip.positioners = {
        average: function (elements) {
            if (!elements.length) {
                return false;
            }
            var i, len;
            var x = 0;
            var y = 0;
            var count = 0;
            for (i = 0, len = elements.length; i < len; ++i) {
                var el = elements[i];
                if (el && el.hasValue()) {
                    var pos = el.tooltipPosition();
                    x += pos.x;
                    y += pos.y;
                    ++count;
                }
            }
            return {
                x: Math.round(x / count),
                y: Math.round(y / count)
            };
        },
        nearest: function (elements, eventPosition) {
            var x = eventPosition.x;
            var y = eventPosition.y;
            var nearestElement;
            var minDistance = Number.POSITIVE_INFINITY;
            var i, len;
            for (i = 0, len = elements.length; i < len; ++i) {
                var el = elements[i];
                if (el && el.hasValue()) {
                    var center = el.getCenterPoint();
                    var d = helpers.distanceBetweenPoints(eventPosition, center);
                    if (d < minDistance) {
                        minDistance = d;
                        nearestElement = el;
                    }
                }
            }
            if (nearestElement) {
                var tp = nearestElement.tooltipPosition();
                x = tp.x;
                y = tp.y;
            }
            return {
                x: x,
                y: y
            };
        }
    };
};}, $__.fs.J$__v7918151485_1280_41),
            $__.os.oid35 = {}
        ],
        37: [
            ($__.fs.J$__v7918151485_1296_42 = function J$__v7918151485_1296(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid166).exports = ($__.fs.J$__v7918151485_1294_722 = function J$__v7918151485_1294(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers, globalOpts;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    globalOpts = (((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56);
    (((globalOpts, $__.os.oid56).elements, $__.os.oid55), $__.os.oid55).arc = $__.os.oid167 = {
        'backgroundColor': TAJS_restrictToType((globalOpts, $__.os.oid56).defaultColor, 'string'),
        'borderColor': '#fff',
        'borderWidth': 2
    };
    ((Chart.elements, $__.os.oid107), $__.os.oid107).Arc = (vvv_tmp0 = TAJS_restrictToType(Chart.Element, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid168 = {
        'inLabelRange': ($__.fs.J$__v7918151485_1282_723 = function J$__v7918151485_1282(mouseX) {
var vvv_return, vvv_switch, vm;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
mouseX = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
if (vm) {
    return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
}
return false;}, $__.fs.J$__v7918151485_1282_723_379 = $__.fs.J$__v7918151485_1282_723, $__.fs.J$__v7918151485_1282_723),
        'inRange': ($__.fs.J$__v7918151485_1284_724 = function J$__v7918151485_1284(chartX, chartY) {
var vvv_return, vvv_switch, vm, pointRelativePosition, angle, distance, startAngle, endAngle, betweenAngles, withinRadius;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartX = arguments[0], chartY = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
if (vm) {
    pointRelativePosition = helpers.getAngleFromPoint(vm, {
        x: chartX,
        y: chartY
    });
    angle = pointRelativePosition.angle;
    distance = pointRelativePosition.distance;
    startAngle = vm.startAngle;
    endAngle = vm.endAngle;
    while (endAngle < startAngle) {
        endAngle += 2 * Math.PI;
    }
    while (angle > endAngle) {
        angle -= 2 * Math.PI;
    }
    while (angle < startAngle) {
        angle += 2 * Math.PI;
    }
    betweenAngles = angle >= startAngle && angle <= endAngle;
    withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
    return betweenAngles && withinRadius;
}
return false;}, $__.fs.J$__v7918151485_1284_724_381 = $__.fs.J$__v7918151485_1284_724, $__.fs.J$__v7918151485_1284_724),
        'getCenterPoint': ($__.fs.J$__v7918151485_1286_725 = function J$__v7918151485_1286() {
var vvv_return, vvv_switch, vm, halfAngle, halfRadius;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
halfAngle = (vm.startAngle + vm.endAngle) / 2;
halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
return {
    x: vm.x + Math.cos(halfAngle) * halfRadius,
    y: vm.y + Math.sin(halfAngle) * halfRadius
};}, $__.fs.J$__v7918151485_1286_725_383 = $__.fs.J$__v7918151485_1286_725, $__.fs.J$__v7918151485_1286_725),
        'getArea': ($__.fs.J$__v7918151485_1288_726 = function J$__v7918151485_1288() {
var vvv_return, vvv_switch, vm;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));}, $__.fs.J$__v7918151485_1288_726_385 = $__.fs.J$__v7918151485_1288_726, $__.fs.J$__v7918151485_1288_726),
        'tooltipPosition': ($__.fs.J$__v7918151485_1290_727 = function J$__v7918151485_1290() {
var vvv_return, vvv_switch, vm, centreAngle, rangeFromCentre;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;
rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
return {
    x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
    y: vm.y + Math.sin(centreAngle) * rangeFromCentre
};}, $__.fs.J$__v7918151485_1290_727_387 = $__.fs.J$__v7918151485_1290_727, $__.fs.J$__v7918151485_1290_727),
        'draw': ($__.fs.J$__v7918151485_1292_728 = function J$__v7918151485_1292() {
var vvv_return, vvv_switch, ctx, vm, sA, eA;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ctx = this._chart.ctx;
vm = this._view;
sA = vm.startAngle;
eA = vm.endAngle;
ctx.beginPath();
ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
ctx.closePath();
ctx.strokeStyle = vm.borderColor;
ctx.lineWidth = vm.borderWidth;
ctx.fillStyle = vm.backgroundColor;
ctx.fill();
ctx.lineJoin = 'bevel';
if (vm.borderWidth) {
    ctx.stroke();
}}, $__.fs.J$__v7918151485_1292_728_389 = $__.fs.J$__v7918151485_1292_728, $__.fs.J$__v7918151485_1292_728)
    }, 6, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
globalOpts = Chart.defaults.global;
globalOpts.elements.arc = {
    backgroundColor: globalOpts.defaultColor,
    borderColor: '#fff',
    borderWidth: 2
};
Chart.elements.Arc = Chart.Element.extend({
    inLabelRange: function (mouseX) {
        var vm = this._view;
        if (vm) {
            return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
        }
        return false;
    },
    inRange: function (chartX, chartY) {
        var vm = this._view;
        if (vm) {
            var pointRelativePosition = helpers.getAngleFromPoint(vm, {
                    x: chartX,
                    y: chartY
                }), angle = pointRelativePosition.angle, distance = pointRelativePosition.distance;
            var startAngle = vm.startAngle;
            var endAngle = vm.endAngle;
            while (endAngle < startAngle) {
                endAngle += 2 * Math.PI;
            }
            while (angle > endAngle) {
                angle -= 2 * Math.PI;
            }
            while (angle < startAngle) {
                angle += 2 * Math.PI;
            }
            var betweenAngles = angle >= startAngle && angle <= endAngle, withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
            return betweenAngles && withinRadius;
        }
        return false;
    },
    getCenterPoint: function () {
        var vm = this._view;
        var halfAngle = (vm.startAngle + vm.endAngle) / 2;
        var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
        return {
            x: vm.x + Math.cos(halfAngle) * halfRadius,
            y: vm.y + Math.sin(halfAngle) * halfRadius
        };
    },
    getArea: function () {
        var vm = this._view;
        return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
    },
    tooltipPosition: function () {
        var vm = this._view;
        var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2, rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
        return {
            x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
            y: vm.y + Math.sin(centreAngle) * rangeFromCentre
        };
    },
    draw: function () {
        var ctx = this._chart.ctx, vm = this._view, sA = vm.startAngle, eA = vm.endAngle;
        ctx.beginPath();
        ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
        ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
        ctx.closePath();
        ctx.strokeStyle = vm.borderColor;
        ctx.lineWidth = vm.borderWidth;
        ctx.fillStyle = vm.backgroundColor;
        ctx.fill();
        ctx.lineJoin = 'bevel';
        if (vm.borderWidth) {
            ctx.stroke();
        }
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers, globalOpts = Chart.defaults.global;
    globalOpts.elements.arc = {
        backgroundColor: globalOpts.defaultColor,
        borderColor: '#fff',
        borderWidth: 2
    };
    Chart.elements.Arc = Chart.Element.extend({
        inLabelRange: function (mouseX) {
            var vm = this._view;
            if (vm) {
                return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
            }
            return false;
        },
        inRange: function (chartX, chartY) {
            var vm = this._view;
            if (vm) {
                var pointRelativePosition = helpers.getAngleFromPoint(vm, {
                        x: chartX,
                        y: chartY
                    }), angle = pointRelativePosition.angle, distance = pointRelativePosition.distance;
                var startAngle = vm.startAngle;
                var endAngle = vm.endAngle;
                while (endAngle < startAngle) {
                    endAngle += 2 * Math.PI;
                }
                while (angle > endAngle) {
                    angle -= 2 * Math.PI;
                }
                while (angle < startAngle) {
                    angle += 2 * Math.PI;
                }
                var betweenAngles = angle >= startAngle && angle <= endAngle, withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
                return betweenAngles && withinRadius;
            }
            return false;
        },
        getCenterPoint: function () {
            var vm = this._view;
            var halfAngle = (vm.startAngle + vm.endAngle) / 2;
            var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
            return {
                x: vm.x + Math.cos(halfAngle) * halfRadius,
                y: vm.y + Math.sin(halfAngle) * halfRadius
            };
        },
        getArea: function () {
            var vm = this._view;
            return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
        },
        tooltipPosition: function () {
            var vm = this._view;
            var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2, rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
            return {
                x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
                y: vm.y + Math.sin(centreAngle) * rangeFromCentre
            };
        },
        draw: function () {
            var ctx = this._chart.ctx, vm = this._view, sA = vm.startAngle, eA = vm.endAngle;
            ctx.beginPath();
            ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
            ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
            ctx.closePath();
            ctx.strokeStyle = vm.borderColor;
            ctx.lineWidth = vm.borderWidth;
            ctx.fillStyle = vm.backgroundColor;
            ctx.fill();
            ctx.lineJoin = 'bevel';
            if (vm.borderWidth) {
                ctx.stroke();
            }
        }
    });
};}, $__.fs.J$__v7918151485_1296_42),
            $__.os.oid36 = {}
        ],
        38: [
            ($__.fs.J$__v7918151485_1303_43 = function J$__v7918151485_1303(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid170).exports = ($__.fs.J$__v7918151485_1301_733 = function J$__v7918151485_1301(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers, globalDefaults;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    globalDefaults = (((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56);
    ((((((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56), $__.os.oid56).elements, $__.os.oid55), $__.os.oid55).line = $__.os.oid171 = {
        'tension': 0.4,
        'backgroundColor': TAJS_restrictToType((globalDefaults, $__.os.oid56).defaultColor, 'string'),
        'borderWidth': 3,
        'borderColor': TAJS_restrictToType((globalDefaults, $__.os.oid56).defaultColor, 'string'),
        'borderCapStyle': 'butt',
        'borderDash': [],
        'borderDashOffset': 0,
        'borderJoinStyle': 'miter',
        'capBezierPoints': true,
        'fill': true
    };
    ((Chart.elements, $__.os.oid107), $__.os.oid107).Line = (vvv_tmp0 = TAJS_restrictToType(Chart.Element, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid172 = {
        'draw': ($__.fs.J$__v7918151485_1299_734 = function J$__v7918151485_1299() {
var vvv_return, vvv_switch, me, vm, spanGaps, fillPoint, loop, ctx, lineToPoint, points, lastDrawnIndex, index, current, previous, currentVM, globalOptionLineElements;
lineToPoint = function lineToPoint(previousPoint, point) {
    var pointVM = point._view;
    if (point._view.steppedLine === true) {
        ctx.lineTo(pointVM.x, previousPoint._view.y);
        ctx.lineTo(pointVM.x, pointVM.y);
    } else if (point._view.tension === 0) {
        ctx.lineTo(pointVM.x, pointVM.y);
    } else {
        ctx.bezierCurveTo(previousPoint._view.controlPointNextX, previousPoint._view.controlPointNextY, pointVM.controlPointPreviousX, pointVM.controlPointPreviousY, pointVM.x, pointVM.y);
    }
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
vm = me._view;
spanGaps = vm.spanGaps;
fillPoint = vm.scaleZero;
loop = me._loop;
if (!loop) {
    if (vm.fill === 'top') {
        fillPoint = vm.scaleTop;
    } else if (vm.fill === 'bottom') {
        fillPoint = vm.scaleBottom;
    }
}
ctx = me._chart.ctx;
ctx.save();
points = me._children.slice();
lastDrawnIndex = -1;
if (loop && points.length) {
    points.push(points[0]);
}
if (points.length && vm.fill) {
    ctx.beginPath();
    for (index = 0; index < points.length; ++index) {
        current = points[index];
        previous = helpers.previousItem(points, index);
        currentVM = current._view;
        if (index === 0) {
            if (loop) {
                ctx.moveTo(fillPoint.x, fillPoint.y);
            } else {
                ctx.moveTo(currentVM.x, fillPoint);
            }
            if (!currentVM.skip) {
                lastDrawnIndex = index;
                ctx.lineTo(currentVM.x, currentVM.y);
            }
        } else {
            previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
            if (currentVM.skip) {
                if (!spanGaps && lastDrawnIndex === index - 1) {
                    if (loop) {
                        ctx.lineTo(fillPoint.x, fillPoint.y);
                    } else {
                        ctx.lineTo(previous._view.x, fillPoint);
                    }
                }
            } else {
                if (lastDrawnIndex !== index - 1) {
                    if (spanGaps && lastDrawnIndex !== -1) {
                        lineToPoint(previous, current);
                    } else if (loop) {
                        ctx.lineTo(currentVM.x, currentVM.y);
                    } else {
                        ctx.lineTo(currentVM.x, fillPoint);
                        ctx.lineTo(currentVM.x, currentVM.y);
                    }
                } else {
                    lineToPoint(previous, current);
                }
                lastDrawnIndex = index;
            }
        }
    }
    if (!loop && lastDrawnIndex !== -1) {
        ctx.lineTo(points[lastDrawnIndex]._view.x, fillPoint);
    }
    ctx.fillStyle = vm.backgroundColor || globalDefaults.defaultColor;
    ctx.closePath();
    ctx.fill();
}
globalOptionLineElements = globalDefaults.elements.line;
ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
if (ctx.setLineDash) {
    ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
}
ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
ctx.beginPath();
lastDrawnIndex = -1;
for (index = 0; index < points.length; ++index) {
    current = points[index];
    previous = helpers.previousItem(points, index);
    currentVM = current._view;
    if (index === 0) {
        if (!currentVM.skip) {
            ctx.moveTo(currentVM.x, currentVM.y);
            lastDrawnIndex = index;
        }
    } else {
        previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
        if (!currentVM.skip) {
            if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                ctx.moveTo(currentVM.x, currentVM.y);
            } else {
                lineToPoint(previous, current);
            }
            lastDrawnIndex = index;
        }
    }
}
ctx.stroke();
ctx.restore();}, $__.fs.J$__v7918151485_1299_734_394 = $__.fs.J$__v7918151485_1299_734, $__.fs.J$__v7918151485_1299_734)
    }, 7, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
globalDefaults = Chart.defaults.global;
Chart.defaults.global.elements.line = {
    tension: 0.4,
    backgroundColor: globalDefaults.defaultColor,
    borderWidth: 3,
    borderColor: globalDefaults.defaultColor,
    borderCapStyle: 'butt',
    borderDash: [],
    borderDashOffset: 0,
    borderJoinStyle: 'miter',
    capBezierPoints: true,
    fill: true
};
Chart.elements.Line = Chart.Element.extend({
    draw: function () {
        var me = this;
        var vm = me._view;
        var spanGaps = vm.spanGaps;
        var fillPoint = vm.scaleZero;
        var loop = me._loop;
        if (!loop) {
            if (vm.fill === 'top') {
                fillPoint = vm.scaleTop;
            } else if (vm.fill === 'bottom') {
                fillPoint = vm.scaleBottom;
            }
        }
        var ctx = me._chart.ctx;
        ctx.save();
        function lineToPoint(previousPoint, point) {
            var pointVM = point._view;
            if (point._view.steppedLine === true) {
                ctx.lineTo(pointVM.x, previousPoint._view.y);
                ctx.lineTo(pointVM.x, pointVM.y);
            } else if (point._view.tension === 0) {
                ctx.lineTo(pointVM.x, pointVM.y);
            } else {
                ctx.bezierCurveTo(previousPoint._view.controlPointNextX, previousPoint._view.controlPointNextY, pointVM.controlPointPreviousX, pointVM.controlPointPreviousY, pointVM.x, pointVM.y);
            }
        }
        var points = me._children.slice();
        var lastDrawnIndex = -1;
        if (loop && points.length) {
            points.push(points[0]);
        }
        var index, current, previous, currentVM;
        if (points.length && vm.fill) {
            ctx.beginPath();
            for (index = 0; index < points.length; ++index) {
                current = points[index];
                previous = helpers.previousItem(points, index);
                currentVM = current._view;
                if (index === 0) {
                    if (loop) {
                        ctx.moveTo(fillPoint.x, fillPoint.y);
                    } else {
                        ctx.moveTo(currentVM.x, fillPoint);
                    }
                    if (!currentVM.skip) {
                        lastDrawnIndex = index;
                        ctx.lineTo(currentVM.x, currentVM.y);
                    }
                } else {
                    previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
                    if (currentVM.skip) {
                        if (!spanGaps && lastDrawnIndex === index - 1) {
                            if (loop) {
                                ctx.lineTo(fillPoint.x, fillPoint.y);
                            } else {
                                ctx.lineTo(previous._view.x, fillPoint);
                            }
                        }
                    } else {
                        if (lastDrawnIndex !== index - 1) {
                            if (spanGaps && lastDrawnIndex !== -1) {
                                lineToPoint(previous, current);
                            } else if (loop) {
                                ctx.lineTo(currentVM.x, currentVM.y);
                            } else {
                                ctx.lineTo(currentVM.x, fillPoint);
                                ctx.lineTo(currentVM.x, currentVM.y);
                            }
                        } else {
                            lineToPoint(previous, current);
                        }
                        lastDrawnIndex = index;
                    }
                }
            }
            if (!loop && lastDrawnIndex !== -1) {
                ctx.lineTo(points[lastDrawnIndex]._view.x, fillPoint);
            }
            ctx.fillStyle = vm.backgroundColor || globalDefaults.defaultColor;
            ctx.closePath();
            ctx.fill();
        }
        var globalOptionLineElements = globalDefaults.elements.line;
        ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
        if (ctx.setLineDash) {
            ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
        }
        ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
        ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
        ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
        ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
        ctx.beginPath();
        lastDrawnIndex = -1;
        for (index = 0; index < points.length; ++index) {
            current = points[index];
            previous = helpers.previousItem(points, index);
            currentVM = current._view;
            if (index === 0) {
                if (!currentVM.skip) {
                    ctx.moveTo(currentVM.x, currentVM.y);
                    lastDrawnIndex = index;
                }
            } else {
                previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
                if (!currentVM.skip) {
                    if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                        ctx.moveTo(currentVM.x, currentVM.y);
                    } else {
                        lineToPoint(previous, current);
                    }
                    lastDrawnIndex = index;
                }
            }
        }
        ctx.stroke();
        ctx.restore();
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    var globalDefaults = Chart.defaults.global;
    Chart.defaults.global.elements.line = {
        tension: 0.4,
        backgroundColor: globalDefaults.defaultColor,
        borderWidth: 3,
        borderColor: globalDefaults.defaultColor,
        borderCapStyle: 'butt',
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: 'miter',
        capBezierPoints: true,
        fill: true
    };
    Chart.elements.Line = Chart.Element.extend({
        draw: function () {
            var me = this;
            var vm = me._view;
            var spanGaps = vm.spanGaps;
            var fillPoint = vm.scaleZero;
            var loop = me._loop;
            if (!loop) {
                if (vm.fill === 'top') {
                    fillPoint = vm.scaleTop;
                } else if (vm.fill === 'bottom') {
                    fillPoint = vm.scaleBottom;
                }
            }
            var ctx = me._chart.ctx;
            ctx.save();
            function lineToPoint(previousPoint, point) {
                var pointVM = point._view;
                if (point._view.steppedLine === true) {
                    ctx.lineTo(pointVM.x, previousPoint._view.y);
                    ctx.lineTo(pointVM.x, pointVM.y);
                } else if (point._view.tension === 0) {
                    ctx.lineTo(pointVM.x, pointVM.y);
                } else {
                    ctx.bezierCurveTo(previousPoint._view.controlPointNextX, previousPoint._view.controlPointNextY, pointVM.controlPointPreviousX, pointVM.controlPointPreviousY, pointVM.x, pointVM.y);
                }
            }
            var points = me._children.slice();
            var lastDrawnIndex = -1;
            if (loop && points.length) {
                points.push(points[0]);
            }
            var index, current, previous, currentVM;
            if (points.length && vm.fill) {
                ctx.beginPath();
                for (index = 0; index < points.length; ++index) {
                    current = points[index];
                    previous = helpers.previousItem(points, index);
                    currentVM = current._view;
                    if (index === 0) {
                        if (loop) {
                            ctx.moveTo(fillPoint.x, fillPoint.y);
                        } else {
                            ctx.moveTo(currentVM.x, fillPoint);
                        }
                        if (!currentVM.skip) {
                            lastDrawnIndex = index;
                            ctx.lineTo(currentVM.x, currentVM.y);
                        }
                    } else {
                        previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
                        if (currentVM.skip) {
                            if (!spanGaps && lastDrawnIndex === index - 1) {
                                if (loop) {
                                    ctx.lineTo(fillPoint.x, fillPoint.y);
                                } else {
                                    ctx.lineTo(previous._view.x, fillPoint);
                                }
                            }
                        } else {
                            if (lastDrawnIndex !== index - 1) {
                                if (spanGaps && lastDrawnIndex !== -1) {
                                    lineToPoint(previous, current);
                                } else if (loop) {
                                    ctx.lineTo(currentVM.x, currentVM.y);
                                } else {
                                    ctx.lineTo(currentVM.x, fillPoint);
                                    ctx.lineTo(currentVM.x, currentVM.y);
                                }
                            } else {
                                lineToPoint(previous, current);
                            }
                            lastDrawnIndex = index;
                        }
                    }
                }
                if (!loop && lastDrawnIndex !== -1) {
                    ctx.lineTo(points[lastDrawnIndex]._view.x, fillPoint);
                }
                ctx.fillStyle = vm.backgroundColor || globalDefaults.defaultColor;
                ctx.closePath();
                ctx.fill();
            }
            var globalOptionLineElements = globalDefaults.elements.line;
            ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
            if (ctx.setLineDash) {
                ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
            }
            ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
            ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
            ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
            ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
            ctx.beginPath();
            lastDrawnIndex = -1;
            for (index = 0; index < points.length; ++index) {
                current = points[index];
                previous = helpers.previousItem(points, index);
                currentVM = current._view;
                if (index === 0) {
                    if (!currentVM.skip) {
                        ctx.moveTo(currentVM.x, currentVM.y);
                        lastDrawnIndex = index;
                    }
                } else {
                    previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
                    if (!currentVM.skip) {
                        if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                            ctx.moveTo(currentVM.x, currentVM.y);
                        } else {
                            lineToPoint(previous, current);
                        }
                        lastDrawnIndex = index;
                    }
                }
            }
            ctx.stroke();
            ctx.restore();
        }
    });
};}, $__.fs.J$__v7918151485_1303_43),
            $__.os.oid37 = {}
        ],
        39: [
            ($__.fs.J$__v7918151485_1319_44 = function J$__v7918151485_1319(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid174).exports = ($__.fs.J$__v7918151485_1317_739 = function J$__v7918151485_1317(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers, globalOpts, defaultColor, xRange, yRange;
xRange = function xRange(mouseX) {
    var vm = this._view;
    return vm ? Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;
};
yRange = function yRange(mouseY) {
    var vm = this._view;
    return vm ? Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    xRange = ($__.fs.xRange_740 = function xRange(mouseX) {
var vvv_return, vvv_switch, vm;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
mouseX = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
return vm ? Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;}, $__.fs.xRange_740_401 = $__.fs.xRange_740, $__.fs.xRange_740_403 = $__.fs.xRange_740, $__.fs.xRange_740);
    yRange = ($__.fs.yRange_741 = function yRange(mouseY) {
var vvv_return, vvv_switch, vm;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
mouseY = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
return vm ? Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;}, $__.fs.yRange_741_405 = $__.fs.yRange_741, $__.fs.yRange_741);
    helpers = (Chart.helpers, $__.os.oid88);
    globalOpts = (((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56);
    defaultColor = TAJS_restrictToType((globalOpts, $__.os.oid56).defaultColor, 'string');
    (((globalOpts, $__.os.oid56).elements, $__.os.oid55), $__.os.oid55).point = $__.os.oid175 = {
        'radius': 3,
        'pointStyle': 'circle',
        'backgroundColor': defaultColor,
        'borderWidth': 1,
        'borderColor': defaultColor,
        'hitRadius': 1,
        'hoverRadius': 4,
        'hoverBorderWidth': 1
    };
    ((Chart.elements, $__.os.oid107), $__.os.oid107).Point = (vvv_tmp0 = TAJS_restrictToType(Chart.Element, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid176 = {
        'inRange': ($__.fs.J$__v7918151485_1307_742 = function J$__v7918151485_1307(mouseX, mouseY) {
var vvv_return, vvv_switch, vm;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
mouseX = arguments[0], mouseY = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;}, $__.fs.J$__v7918151485_1307_742_399 = $__.fs.J$__v7918151485_1307_742, $__.fs.J$__v7918151485_1307_742),
        'inLabelRange': xRange,
        'inXRange': xRange,
        'inYRange': yRange,
        'getCenterPoint': ($__.fs.J$__v7918151485_1309_743 = function J$__v7918151485_1309() {
var vvv_return, vvv_switch, vm;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
return {
    x: vm.x,
    y: vm.y
};}, $__.fs.J$__v7918151485_1309_743_407 = $__.fs.J$__v7918151485_1309_743, $__.fs.J$__v7918151485_1309_743),
        'getArea': ($__.fs.J$__v7918151485_1311_744 = function J$__v7918151485_1311() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return Math.PI * Math.pow(this._view.radius, 2);}, $__.fs.J$__v7918151485_1311_744_409 = $__.fs.J$__v7918151485_1311_744, $__.fs.J$__v7918151485_1311_744),
        'tooltipPosition': ($__.fs.J$__v7918151485_1313_745 = function J$__v7918151485_1313() {
var vvv_return, vvv_switch, vm;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
return {
    x: vm.x,
    y: vm.y,
    padding: vm.radius + vm.borderWidth
};}, $__.fs.J$__v7918151485_1313_745_411 = $__.fs.J$__v7918151485_1313_745, $__.fs.J$__v7918151485_1313_745),
        'draw': ($__.fs.J$__v7918151485_1315_746 = function J$__v7918151485_1315(chartArea) {
var vvv_return, vvv_switch, vm, model, ctx, pointStyle, radius, x, y, color, errMargin, ratio;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chartArea = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
model = this._model;
ctx = this._chart.ctx;
pointStyle = vm.pointStyle;
radius = vm.radius;
x = vm.x;
y = vm.y;
color = Chart.helpers.color;
errMargin = 1.01;
ratio = 0;
if (vm.skip) {
    return;
}
ctx.strokeStyle = vm.borderColor || defaultColor;
ctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);
ctx.fillStyle = vm.backgroundColor || defaultColor;
if (chartArea !== undefined && (model.x < chartArea.left || chartArea.right * errMargin < model.x || model.y < chartArea.top || chartArea.bottom * errMargin < model.y)) {
    if (model.x < chartArea.left) {
        ratio = (x - model.x) / (chartArea.left - model.x);
    } else if (chartArea.right * errMargin < model.x) {
        ratio = (model.x - x) / (model.x - chartArea.right);
    } else if (model.y < chartArea.top) {
        ratio = (y - model.y) / (chartArea.top - model.y);
    } else if (chartArea.bottom * errMargin < model.y) {
        ratio = (model.y - y) / (model.y - chartArea.bottom);
    }
    ratio = Math.round(ratio * 100) / 100;
    ctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();
    ctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();
}
Chart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);}, $__.fs.J$__v7918151485_1315_746_413 = $__.fs.J$__v7918151485_1315_746, $__.fs.J$__v7918151485_1315_746)
    }, 8, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
globalOpts = Chart.defaults.global;
defaultColor = globalOpts.defaultColor;
globalOpts.elements.point = {
    radius: 3,
    pointStyle: 'circle',
    backgroundColor: defaultColor,
    borderWidth: 1,
    borderColor: defaultColor,
    hitRadius: 1,
    hoverRadius: 4,
    hoverBorderWidth: 1
};
Chart.elements.Point = Chart.Element.extend({
    inRange: function (mouseX, mouseY) {
        var vm = this._view;
        return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;
    },
    inLabelRange: xRange,
    inXRange: xRange,
    inYRange: yRange,
    getCenterPoint: function () {
        var vm = this._view;
        return {
            x: vm.x,
            y: vm.y
        };
    },
    getArea: function () {
        return Math.PI * Math.pow(this._view.radius, 2);
    },
    tooltipPosition: function () {
        var vm = this._view;
        return {
            x: vm.x,
            y: vm.y,
            padding: vm.radius + vm.borderWidth
        };
    },
    draw: function (chartArea) {
        var vm = this._view;
        var model = this._model;
        var ctx = this._chart.ctx;
        var pointStyle = vm.pointStyle;
        var radius = vm.radius;
        var x = vm.x;
        var y = vm.y;
        var color = Chart.helpers.color;
        var errMargin = 1.01;
        var ratio = 0;
        if (vm.skip) {
            return;
        }
        ctx.strokeStyle = vm.borderColor || defaultColor;
        ctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);
        ctx.fillStyle = vm.backgroundColor || defaultColor;
        if (chartArea !== undefined && (model.x < chartArea.left || chartArea.right * errMargin < model.x || model.y < chartArea.top || chartArea.bottom * errMargin < model.y)) {
            if (model.x < chartArea.left) {
                ratio = (x - model.x) / (chartArea.left - model.x);
            } else if (chartArea.right * errMargin < model.x) {
                ratio = (model.x - x) / (model.x - chartArea.right);
            } else if (model.y < chartArea.top) {
                ratio = (y - model.y) / (chartArea.top - model.y);
            } else if (chartArea.bottom * errMargin < model.y) {
                ratio = (model.y - y) / (model.y - chartArea.bottom);
            }
            ratio = Math.round(ratio * 100) / 100;
            ctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();
            ctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();
        }
        Chart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers, globalOpts = Chart.defaults.global, defaultColor = globalOpts.defaultColor;
    globalOpts.elements.point = {
        radius: 3,
        pointStyle: 'circle',
        backgroundColor: defaultColor,
        borderWidth: 1,
        borderColor: defaultColor,
        hitRadius: 1,
        hoverRadius: 4,
        hoverBorderWidth: 1
    };
    function xRange(mouseX) {
        var vm = this._view;
        return vm ? Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;
    }
    function yRange(mouseY) {
        var vm = this._view;
        return vm ? Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;
    }
    Chart.elements.Point = Chart.Element.extend({
        inRange: function (mouseX, mouseY) {
            var vm = this._view;
            return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;
        },
        inLabelRange: xRange,
        inXRange: xRange,
        inYRange: yRange,
        getCenterPoint: function () {
            var vm = this._view;
            return {
                x: vm.x,
                y: vm.y
            };
        },
        getArea: function () {
            return Math.PI * Math.pow(this._view.radius, 2);
        },
        tooltipPosition: function () {
            var vm = this._view;
            return {
                x: vm.x,
                y: vm.y,
                padding: vm.radius + vm.borderWidth
            };
        },
        draw: function (chartArea) {
            var vm = this._view;
            var model = this._model;
            var ctx = this._chart.ctx;
            var pointStyle = vm.pointStyle;
            var radius = vm.radius;
            var x = vm.x;
            var y = vm.y;
            var color = Chart.helpers.color;
            var errMargin = 1.01;
            var ratio = 0;
            if (vm.skip) {
                return;
            }
            ctx.strokeStyle = vm.borderColor || defaultColor;
            ctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);
            ctx.fillStyle = vm.backgroundColor || defaultColor;
            if (chartArea !== undefined && (model.x < chartArea.left || chartArea.right * errMargin < model.x || model.y < chartArea.top || chartArea.bottom * errMargin < model.y)) {
                if (model.x < chartArea.left) {
                    ratio = (x - model.x) / (chartArea.left - model.x);
                } else if (chartArea.right * errMargin < model.x) {
                    ratio = (model.x - x) / (model.x - chartArea.right);
                } else if (model.y < chartArea.top) {
                    ratio = (y - model.y) / (chartArea.top - model.y);
                } else if (chartArea.bottom * errMargin < model.y) {
                    ratio = (model.y - y) / (model.y - chartArea.bottom);
                }
                ratio = Math.round(ratio * 100) / 100;
                ctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();
                ctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();
            }
            Chart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);
        }
    });
};}, $__.fs.J$__v7918151485_1319_44),
            $__.os.oid38 = {}
        ],
        40: [
            ($__.fs.J$__v7918151485_1344_45 = function J$__v7918151485_1344(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid178).exports = ($__.fs.J$__v7918151485_1342_751 = function J$__v7918151485_1342(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, globalOpts, isVertical, getBarBounds;
isVertical = function isVertical(bar) {
    return bar._view.width !== undefined;
};
getBarBounds = function getBarBounds(bar) {
    var vm = bar._view;
    var x1, x2, y1, y2;
    if (isVertical(bar)) {
        var halfWidth = vm.width / 2;
        x1 = vm.x - halfWidth;
        x2 = vm.x + halfWidth;
        y1 = Math.min(vm.y, vm.base);
        y2 = Math.max(vm.y, vm.base);
    } else {
        var halfHeight = vm.height / 2;
        x1 = Math.min(vm.x, vm.base);
        x2 = Math.max(vm.x, vm.base);
        y1 = vm.y - halfHeight;
        y2 = vm.y + halfHeight;
    }
    return {
        left: x1,
        top: y1,
        right: x2,
        bottom: y2
    };
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    isVertical = ($__.fs.isVertical_752 = function isVertical(bar) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
bar = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return bar._view.width !== undefined;});
    getBarBounds = ($__.fs.getBarBounds_753 = function getBarBounds(bar) {
var vvv_return, vvv_switch, vm, x1, x2, y1, y2, halfWidth, halfHeight;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
bar = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = bar._view;
if (isVertical(bar)) {
    halfWidth = vm.width / 2;
    x1 = vm.x - halfWidth;
    x2 = vm.x + halfWidth;
    y1 = Math.min(vm.y, vm.base);
    y2 = Math.max(vm.y, vm.base);
} else {
    halfHeight = vm.height / 2;
    x1 = Math.min(vm.x, vm.base);
    x2 = Math.max(vm.x, vm.base);
    y1 = vm.y - halfHeight;
    y2 = vm.y + halfHeight;
}
return {
    left: x1,
    top: y1,
    right: x2,
    bottom: y2
};});
    globalOpts = (((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56);
    (((globalOpts, $__.os.oid56).elements, $__.os.oid55), $__.os.oid55).rectangle = $__.os.oid179 = {
        'backgroundColor': TAJS_restrictToType((globalOpts, $__.os.oid56).defaultColor, 'string'),
        'borderWidth': 0,
        'borderColor': TAJS_restrictToType((globalOpts, $__.os.oid56).defaultColor, 'string'),
        'borderSkipped': 'bottom'
    };
    ((Chart.elements, $__.os.oid107), $__.os.oid107).Rectangle = (vvv_tmp0 = TAJS_restrictToType(Chart.Element, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid180 = {
        'draw': ($__.fs.J$__v7918151485_1324_754 = function J$__v7918151485_1324() {
var vvv_return, vvv_switch, ctx, vm, left, right, top, bottom, signX, signY, borderSkipped, borderWidth, barSize, halfStroke, borderLeft, borderRight, borderTop, borderBottom, corners, borders, startCorner, cornerAt, corner;
cornerAt = function cornerAt(index) {
    return corners[(startCorner + index) % 4];
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ctx = this._chart.ctx;
vm = this._view;
borderWidth = vm.borderWidth;
if (!vm.horizontal) {
    left = vm.x - vm.width / 2;
    right = vm.x + vm.width / 2;
    top = vm.y;
    bottom = vm.base;
    signX = 1;
    signY = bottom > top ? 1 : -1;
    borderSkipped = vm.borderSkipped || 'bottom';
} else {
    left = vm.base;
    right = vm.x;
    top = vm.y - vm.height / 2;
    bottom = vm.y + vm.height / 2;
    signX = right > left ? 1 : -1;
    signY = 1;
    borderSkipped = vm.borderSkipped || 'left';
}
if (borderWidth) {
    barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
    borderWidth = borderWidth > barSize ? barSize : borderWidth;
    halfStroke = borderWidth / 2;
    borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);
    borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);
    borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);
    borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0);
    if (borderLeft !== borderRight) {
        top = borderTop;
        bottom = borderBottom;
    }
    if (borderTop !== borderBottom) {
        left = borderLeft;
        right = borderRight;
    }
}
ctx.beginPath();
ctx.fillStyle = vm.backgroundColor;
ctx.strokeStyle = vm.borderColor;
ctx.lineWidth = borderWidth;
corners = [
    [
        left,
        bottom
    ],
    [
        left,
        top
    ],
    [
        right,
        top
    ],
    [
        right,
        bottom
    ]
];
borders = [
    'bottom',
    'left',
    'top',
    'right'
];
startCorner = borders.indexOf(borderSkipped, 0);
if (startCorner === -1) {
    startCorner = 0;
}
corner = cornerAt(0);
ctx.moveTo(corner[0], corner[1]);
for (var i = 1; i < 4; i++) {
    corner = cornerAt(i);
    ctx.lineTo(corner[0], corner[1]);
}
ctx.fill();
if (borderWidth) {
    ctx.stroke();
}}, $__.fs.J$__v7918151485_1324_754_418 = $__.fs.J$__v7918151485_1324_754, $__.fs.J$__v7918151485_1324_754),
        'height': ($__.fs.J$__v7918151485_1326_755 = function J$__v7918151485_1326() {
var vvv_return, vvv_switch, vm;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
return vm.base - vm.y;}, $__.fs.J$__v7918151485_1326_755_420 = $__.fs.J$__v7918151485_1326_755, $__.fs.J$__v7918151485_1326_755),
        'inRange': ($__.fs.J$__v7918151485_1328_756 = function J$__v7918151485_1328(mouseX, mouseY) {
var vvv_return, vvv_switch, inRange, bounds;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
mouseX = arguments[0], mouseY = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
inRange = false;
if (this._view) {
    bounds = getBarBounds(this);
    inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
}
return inRange;}, $__.fs.J$__v7918151485_1328_756_422 = $__.fs.J$__v7918151485_1328_756, $__.fs.J$__v7918151485_1328_756),
        'inLabelRange': ($__.fs.J$__v7918151485_1330_757 = function J$__v7918151485_1330(mouseX, mouseY) {
var vvv_return, vvv_switch, me, inRange, bounds;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
mouseX = arguments[0], mouseY = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (!me._view) {
    return false;
}
inRange = false;
bounds = getBarBounds(me);
if (isVertical(me)) {
    inRange = mouseX >= bounds.left && mouseX <= bounds.right;
} else {
    inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
}
return inRange;}, $__.fs.J$__v7918151485_1330_757_424 = $__.fs.J$__v7918151485_1330_757, $__.fs.J$__v7918151485_1330_757),
        'inXRange': ($__.fs.J$__v7918151485_1332_758 = function J$__v7918151485_1332(mouseX) {
var vvv_return, vvv_switch, bounds;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
mouseX = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
bounds = getBarBounds(this);
return mouseX >= bounds.left && mouseX <= bounds.right;}, $__.fs.J$__v7918151485_1332_758_426 = $__.fs.J$__v7918151485_1332_758, $__.fs.J$__v7918151485_1332_758),
        'inYRange': ($__.fs.J$__v7918151485_1334_759 = function J$__v7918151485_1334(mouseY) {
var vvv_return, vvv_switch, bounds;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
mouseY = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
bounds = getBarBounds(this);
return mouseY >= bounds.top && mouseY <= bounds.bottom;}, $__.fs.J$__v7918151485_1334_759_428 = $__.fs.J$__v7918151485_1334_759, $__.fs.J$__v7918151485_1334_759),
        'getCenterPoint': ($__.fs.J$__v7918151485_1336_760 = function J$__v7918151485_1336() {
var vvv_return, vvv_switch, vm, x, y;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
if (isVertical(this)) {
    x = vm.x;
    y = (vm.y + vm.base) / 2;
} else {
    x = (vm.x + vm.base) / 2;
    y = vm.y;
}
return {
    x: x,
    y: y
};}, $__.fs.J$__v7918151485_1336_760_430 = $__.fs.J$__v7918151485_1336_760, $__.fs.J$__v7918151485_1336_760),
        'getArea': ($__.fs.J$__v7918151485_1338_761 = function J$__v7918151485_1338() {
var vvv_return, vvv_switch, vm;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
return vm.width * Math.abs(vm.y - vm.base);}, $__.fs.J$__v7918151485_1338_761_432 = $__.fs.J$__v7918151485_1338_761, $__.fs.J$__v7918151485_1338_761),
        'tooltipPosition': ($__.fs.J$__v7918151485_1340_762 = function J$__v7918151485_1340() {
var vvv_return, vvv_switch, vm;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
vm = this._view;
return {
    x: vm.x,
    y: vm.y
};}, $__.fs.J$__v7918151485_1340_762_434 = $__.fs.J$__v7918151485_1340_762, $__.fs.J$__v7918151485_1340_762)
    }, 9, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
globalOpts = Chart.defaults.global;
globalOpts.elements.rectangle = {
    backgroundColor: globalOpts.defaultColor,
    borderWidth: 0,
    borderColor: globalOpts.defaultColor,
    borderSkipped: 'bottom'
};
Chart.elements.Rectangle = Chart.Element.extend({
    draw: function () {
        var ctx = this._chart.ctx;
        var vm = this._view;
        var left, right, top, bottom, signX, signY, borderSkipped;
        var borderWidth = vm.borderWidth;
        if (!vm.horizontal) {
            left = vm.x - vm.width / 2;
            right = vm.x + vm.width / 2;
            top = vm.y;
            bottom = vm.base;
            signX = 1;
            signY = bottom > top ? 1 : -1;
            borderSkipped = vm.borderSkipped || 'bottom';
        } else {
            left = vm.base;
            right = vm.x;
            top = vm.y - vm.height / 2;
            bottom = vm.y + vm.height / 2;
            signX = right > left ? 1 : -1;
            signY = 1;
            borderSkipped = vm.borderSkipped || 'left';
        }
        if (borderWidth) {
            var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
            borderWidth = borderWidth > barSize ? barSize : borderWidth;
            var halfStroke = borderWidth / 2;
            var borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);
            var borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);
            var borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);
            var borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0);
            if (borderLeft !== borderRight) {
                top = borderTop;
                bottom = borderBottom;
            }
            if (borderTop !== borderBottom) {
                left = borderLeft;
                right = borderRight;
            }
        }
        ctx.beginPath();
        ctx.fillStyle = vm.backgroundColor;
        ctx.strokeStyle = vm.borderColor;
        ctx.lineWidth = borderWidth;
        var corners = [
            [
                left,
                bottom
            ],
            [
                left,
                top
            ],
            [
                right,
                top
            ],
            [
                right,
                bottom
            ]
        ];
        var borders = [
            'bottom',
            'left',
            'top',
            'right'
        ];
        var startCorner = borders.indexOf(borderSkipped, 0);
        if (startCorner === -1) {
            startCorner = 0;
        }
        function cornerAt(index) {
            return corners[(startCorner + index) % 4];
        }
        var corner = cornerAt(0);
        ctx.moveTo(corner[0], corner[1]);
        for (var i = 1; i < 4; i++) {
            corner = cornerAt(i);
            ctx.lineTo(corner[0], corner[1]);
        }
        ctx.fill();
        if (borderWidth) {
            ctx.stroke();
        }
    },
    height: function () {
        var vm = this._view;
        return vm.base - vm.y;
    },
    inRange: function (mouseX, mouseY) {
        var inRange = false;
        if (this._view) {
            var bounds = getBarBounds(this);
            inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
        }
        return inRange;
    },
    inLabelRange: function (mouseX, mouseY) {
        var me = this;
        if (!me._view) {
            return false;
        }
        var inRange = false;
        var bounds = getBarBounds(me);
        if (isVertical(me)) {
            inRange = mouseX >= bounds.left && mouseX <= bounds.right;
        } else {
            inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
        }
        return inRange;
    },
    inXRange: function (mouseX) {
        var bounds = getBarBounds(this);
        return mouseX >= bounds.left && mouseX <= bounds.right;
    },
    inYRange: function (mouseY) {
        var bounds = getBarBounds(this);
        return mouseY >= bounds.top && mouseY <= bounds.bottom;
    },
    getCenterPoint: function () {
        var vm = this._view;
        var x, y;
        if (isVertical(this)) {
            x = vm.x;
            y = (vm.y + vm.base) / 2;
        } else {
            x = (vm.x + vm.base) / 2;
            y = vm.y;
        }
        return {
            x: x,
            y: y
        };
    },
    getArea: function () {
        var vm = this._view;
        return vm.width * Math.abs(vm.y - vm.base);
    },
    tooltipPosition: function () {
        var vm = this._view;
        return {
            x: vm.x,
            y: vm.y
        };
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var globalOpts = Chart.defaults.global;
    globalOpts.elements.rectangle = {
        backgroundColor: globalOpts.defaultColor,
        borderWidth: 0,
        borderColor: globalOpts.defaultColor,
        borderSkipped: 'bottom'
    };
    function isVertical(bar) {
        return bar._view.width !== undefined;
    }
    function getBarBounds(bar) {
        var vm = bar._view;
        var x1, x2, y1, y2;
        if (isVertical(bar)) {
            var halfWidth = vm.width / 2;
            x1 = vm.x - halfWidth;
            x2 = vm.x + halfWidth;
            y1 = Math.min(vm.y, vm.base);
            y2 = Math.max(vm.y, vm.base);
        } else {
            var halfHeight = vm.height / 2;
            x1 = Math.min(vm.x, vm.base);
            x2 = Math.max(vm.x, vm.base);
            y1 = vm.y - halfHeight;
            y2 = vm.y + halfHeight;
        }
        return {
            left: x1,
            top: y1,
            right: x2,
            bottom: y2
        };
    }
    Chart.elements.Rectangle = Chart.Element.extend({
        draw: function () {
            var ctx = this._chart.ctx;
            var vm = this._view;
            var left, right, top, bottom, signX, signY, borderSkipped;
            var borderWidth = vm.borderWidth;
            if (!vm.horizontal) {
                left = vm.x - vm.width / 2;
                right = vm.x + vm.width / 2;
                top = vm.y;
                bottom = vm.base;
                signX = 1;
                signY = bottom > top ? 1 : -1;
                borderSkipped = vm.borderSkipped || 'bottom';
            } else {
                left = vm.base;
                right = vm.x;
                top = vm.y - vm.height / 2;
                bottom = vm.y + vm.height / 2;
                signX = right > left ? 1 : -1;
                signY = 1;
                borderSkipped = vm.borderSkipped || 'left';
            }
            if (borderWidth) {
                var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
                borderWidth = borderWidth > barSize ? barSize : borderWidth;
                var halfStroke = borderWidth / 2;
                var borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);
                var borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);
                var borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);
                var borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0);
                if (borderLeft !== borderRight) {
                    top = borderTop;
                    bottom = borderBottom;
                }
                if (borderTop !== borderBottom) {
                    left = borderLeft;
                    right = borderRight;
                }
            }
            ctx.beginPath();
            ctx.fillStyle = vm.backgroundColor;
            ctx.strokeStyle = vm.borderColor;
            ctx.lineWidth = borderWidth;
            var corners = [
                [
                    left,
                    bottom
                ],
                [
                    left,
                    top
                ],
                [
                    right,
                    top
                ],
                [
                    right,
                    bottom
                ]
            ];
            var borders = [
                'bottom',
                'left',
                'top',
                'right'
            ];
            var startCorner = borders.indexOf(borderSkipped, 0);
            if (startCorner === -1) {
                startCorner = 0;
            }
            function cornerAt(index) {
                return corners[(startCorner + index) % 4];
            }
            var corner = cornerAt(0);
            ctx.moveTo(corner[0], corner[1]);
            for (var i = 1; i < 4; i++) {
                corner = cornerAt(i);
                ctx.lineTo(corner[0], corner[1]);
            }
            ctx.fill();
            if (borderWidth) {
                ctx.stroke();
            }
        },
        height: function () {
            var vm = this._view;
            return vm.base - vm.y;
        },
        inRange: function (mouseX, mouseY) {
            var inRange = false;
            if (this._view) {
                var bounds = getBarBounds(this);
                inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
            }
            return inRange;
        },
        inLabelRange: function (mouseX, mouseY) {
            var me = this;
            if (!me._view) {
                return false;
            }
            var inRange = false;
            var bounds = getBarBounds(me);
            if (isVertical(me)) {
                inRange = mouseX >= bounds.left && mouseX <= bounds.right;
            } else {
                inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
            }
            return inRange;
        },
        inXRange: function (mouseX) {
            var bounds = getBarBounds(this);
            return mouseX >= bounds.left && mouseX <= bounds.right;
        },
        inYRange: function (mouseY) {
            var bounds = getBarBounds(this);
            return mouseY >= bounds.top && mouseY <= bounds.bottom;
        },
        getCenterPoint: function () {
            var vm = this._view;
            var x, y;
            if (isVertical(this)) {
                x = vm.x;
                y = (vm.y + vm.base) / 2;
            } else {
                x = (vm.x + vm.base) / 2;
                y = vm.y;
            }
            return {
                x: x,
                y: y
            };
        },
        getArea: function () {
            var vm = this._view;
            return vm.width * Math.abs(vm.y - vm.base);
        },
        tooltipPosition: function () {
            var vm = this._view;
            return {
                x: vm.x,
                y: vm.y
            };
        }
    });
};}, $__.fs.J$__v7918151485_1344_45),
            $__.os.oid39 = {}
        ],
        41: [
            ($__.fs.J$__v7918151485_1375_46 = function J$__v7918151485_1375(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid93).exports = ($__.fs.J$__v7918151485_1373_465 = function J$__v7918151485_1373(Chart) {
var vvv_return, vvv_switch, helpers, eventTypeMap, readUsedSize, initCanvas, createEvent, fromNativeEvent, createResizer, addResizeListener, removeResizeListener;
readUsedSize = function readUsedSize(element, property) {
    var value = helpers.getStyle(element, property);
    var matches = value && value.match(/(\d+)px/);
    return matches ? Number(matches[1]) : undefined;
};
initCanvas = function initCanvas(canvas, config) {
    var style = canvas.style;
    var renderHeight = canvas.getAttribute('height');
    var renderWidth = canvas.getAttribute('width');
    canvas._chartjs = {
        initial: {
            height: renderHeight,
            width: renderWidth,
            style: {
                display: style.display,
                height: style.height,
                width: style.width
            }
        }
    };
    style.display = style.display || 'block';
    if (renderWidth === null || renderWidth === '') {
        var displayWidth = readUsedSize(canvas, 'width');
        if (displayWidth !== undefined) {
            canvas.width = displayWidth;
        }
    }
    if (renderHeight === null || renderHeight === '') {
        if (canvas.style.height === '') {
            canvas.height = canvas.width / (config.options.aspectRatio || 2);
        } else {
            var displayHeight = readUsedSize(canvas, 'height');
            if (displayWidth !== undefined) {
                canvas.height = displayHeight;
            }
        }
    }
    return canvas;
};
createEvent = function createEvent(type, chart, x, y, native) {
    return {
        type: type,
        chart: chart,
        native: native || null,
        x: x !== undefined ? x : null,
        y: y !== undefined ? y : null
    };
};
fromNativeEvent = function fromNativeEvent(event, chart) {
    var type = eventTypeMap[event.type] || event.type;
    var pos = helpers.getRelativePosition(event, chart);
    return createEvent(type, chart, pos.x, pos.y, event);
};
createResizer = function createResizer(handler) {
    var iframe = document.createElement('iframe');
    iframe.className = 'chartjs-hidden-iframe';
    iframe.style.cssText = 'display:block;' + 'overflow:hidden;' + 'border:0;' + 'margin:0;' + 'top:0;' + 'left:0;' + 'bottom:0;' + 'right:0;' + 'height:100%;' + 'width:100%;' + 'position:absolute;' + 'pointer-events:none;' + 'z-index:-1;';
    iframe.tabIndex = -1;
    helpers.addEvent(iframe, 'load', function () {
        helpers.addEvent(iframe.contentWindow || iframe, 'resize', handler);
        handler();
    });
    return iframe;
};
addResizeListener = function addResizeListener(node, listener, chart) {
    var stub = node._chartjs = {
        ticking: false
    };
    var notify = function () {
        if (!stub.ticking) {
            stub.ticking = true;
            helpers.requestAnimFrame.call(window, function () {
                if (stub.resizer) {
                    stub.ticking = false;
                    return listener(createEvent('resize', chart));
                }
            });
        }
    };
    stub.resizer = createResizer(notify);
    node.insertBefore(stub.resizer, node.firstChild);
};
removeResizeListener = function removeResizeListener(node) {
    if (!node || !node._chartjs) {
        return;
    }
    var resizer = node._chartjs.resizer;
    if (resizer) {
        resizer.parentNode.removeChild(resizer);
        node._chartjs.resizer = null;
    }
    delete node._chartjs;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    readUsedSize = ($__.fs.readUsedSize_471 = function readUsedSize(element, property) {
var vvv_return, vvv_switch, value, matches;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
element = arguments[0], property = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
value = helpers.getStyle(element, property);
matches = value && value.match(/(\d+)px/);
return matches ? Number(matches[1]) : undefined;});
    initCanvas = ($__.fs.initCanvas_472 = function initCanvas(canvas, config) {
var vvv_return, vvv_switch, style, renderHeight, renderWidth, displayWidth, displayHeight;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
canvas = arguments[0], config = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
style = canvas.style;
renderHeight = canvas.getAttribute('height');
renderWidth = canvas.getAttribute('width');
canvas._chartjs = {
    initial: {
        height: renderHeight,
        width: renderWidth,
        style: {
            display: style.display,
            height: style.height,
            width: style.width
        }
    }
};
style.display = style.display || 'block';
if (renderWidth === null || renderWidth === '') {
    displayWidth = readUsedSize(canvas, 'width');
    if (displayWidth !== undefined) {
        canvas.width = displayWidth;
    }
}
if (renderHeight === null || renderHeight === '') {
    if (canvas.style.height === '') {
        canvas.height = canvas.width / (config.options.aspectRatio || 2);
    } else {
        displayHeight = readUsedSize(canvas, 'height');
        if (displayWidth !== undefined) {
            canvas.height = displayHeight;
        }
    }
}
return canvas;});
    createEvent = ($__.fs.createEvent_473 = function createEvent(type, chart, x, y, native) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
type = arguments[0], chart = arguments[1], x = arguments[2], y = arguments[3], native = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return {
    type: type,
    chart: chart,
    native: native || null,
    x: x !== undefined ? x : null,
    y: y !== undefined ? y : null
};});
    fromNativeEvent = ($__.fs.fromNativeEvent_474 = function fromNativeEvent(event, chart) {
var vvv_return, vvv_switch, type, pos;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
event = arguments[0], chart = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
type = eventTypeMap[event.type] || event.type;
pos = helpers.getRelativePosition(event, chart);
return createEvent(type, chart, pos.x, pos.y, event);});
    createResizer = ($__.fs.createResizer_475 = function createResizer(handler) {
var vvv_return, vvv_switch, iframe;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
handler = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
iframe = document.createElement('iframe');
iframe.className = 'chartjs-hidden-iframe';
iframe.style.cssText = 'display:block;' + 'overflow:hidden;' + 'border:0;' + 'margin:0;' + 'top:0;' + 'left:0;' + 'bottom:0;' + 'right:0;' + 'height:100%;' + 'width:100%;' + 'position:absolute;' + 'pointer-events:none;' + 'z-index:-1;';
iframe.tabIndex = -1;
helpers.addEvent(iframe, 'load', function () {
    helpers.addEvent(iframe.contentWindow || iframe, 'resize', handler);
    handler();
});
return iframe;});
    addResizeListener = ($__.fs.addResizeListener_476 = function addResizeListener(node, listener, chart) {
var vvv_return, vvv_switch, stub, notify;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0], listener = arguments[1], chart = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
stub = node._chartjs = {
    ticking: false
};
notify = function () {
    if (!stub.ticking) {
        stub.ticking = true;
        helpers.requestAnimFrame.call(window, function () {
            if (stub.resizer) {
                stub.ticking = false;
                return listener(createEvent('resize', chart));
            }
        });
    }
};
stub.resizer = createResizer(notify);
node.insertBefore(stub.resizer, node.firstChild);});
    removeResizeListener = ($__.fs.removeResizeListener_477 = function removeResizeListener(node) {
var vvv_return, vvv_switch, resizer;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
node = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!node || !node._chartjs) {
    return;
}
resizer = node._chartjs.resizer;
if (resizer) {
    resizer.parentNode.removeChild(resizer);
    node._chartjs.resizer = null;
}
delete node._chartjs;});
    helpers = (Chart.helpers, $__.os.oid88);
    eventTypeMap = $__.os.oid95 = {
        'touchstart': 'mousedown',
        'touchmove': 'mousemove',
        'touchend': 'mouseup',
        'pointerenter': 'mouseenter',
        'pointerdown': 'mousedown',
        'pointermove': 'mousemove',
        'pointerup': 'mouseup',
        'pointerleave': 'mouseout',
        'pointerout': 'mouseout'
    };
    return $__.os.oid96 = {
        'acquireContext': ($__.fs.J$__v7918151485_1359_478 = function J$__v7918151485_1359(item, config) {
var vvv_return, vvv_switch, context;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
item = arguments[0], config = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (typeof item === 'string') {
    item = document.getElementById(item);
} else if (item.length) {
    item = item[0];
}
if (item && item.canvas) {
    item = item.canvas;
}
if (item instanceof HTMLCanvasElement) {
    context = item.getContext && item.getContext('2d');
    if (context instanceof CanvasRenderingContext2D) {
        initCanvas(item, config);
        return context;
    }
}
return null;}, $__.fs.J$__v7918151485_1359_478_36 = $__.fs.J$__v7918151485_1359_478, $__.fs.J$__v7918151485_1359_478),
        'releaseContext': ($__.fs.J$__v7918151485_1365_479 = function J$__v7918151485_1365(context) {
var vvv_return, vvv_switch, canvas, initial;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
context = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
canvas = context.canvas;
if (!canvas._chartjs) {
    return;
}
initial = canvas._chartjs.initial;
[
    'height',
    'width'
].forEach(function (prop) {
    var value = initial[prop];
    if (value === undefined || value === null) {
        canvas.removeAttribute(prop);
    } else {
        canvas.setAttribute(prop, value);
    }
});
helpers.each(initial.style || {}, function (value, key) {
    canvas.style[key] = value;
});
canvas.width = canvas.width;
delete canvas._chartjs;}, $__.fs.J$__v7918151485_1365_479_38 = $__.fs.J$__v7918151485_1365_479, $__.fs.J$__v7918151485_1365_479),
        'addEventListener': ($__.fs.J$__v7918151485_1369_480 = function J$__v7918151485_1369(chart, type, listener) {
var vvv_return, vvv_switch, canvas, stub, proxies, proxy;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], type = arguments[1], listener = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
canvas = chart.chart.canvas;
if (type === 'resize') {
    addResizeListener(canvas.parentNode, listener, chart.chart);
    return;
}
stub = listener._chartjs || (listener._chartjs = {});
proxies = stub.proxies || (stub.proxies = {});
proxy = proxies[chart.id + '_' + type] = function (event) {
    listener(fromNativeEvent(event, chart.chart));
};
helpers.addEvent(canvas, type, proxy);}, $__.fs.J$__v7918151485_1369_480_40 = $__.fs.J$__v7918151485_1369_480, $__.fs.J$__v7918151485_1369_480),
        'removeEventListener': ($__.fs.J$__v7918151485_1371_481 = function J$__v7918151485_1371(chart, type, listener) {
var vvv_return, vvv_switch, canvas, stub, proxies, proxy;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
chart = arguments[0], type = arguments[1], listener = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
canvas = chart.chart.canvas;
if (type === 'resize') {
    removeResizeListener(canvas.parentNode, listener);
    return;
}
stub = listener._chartjs || {};
proxies = stub.proxies || {};
proxy = proxies[chart.id + '_' + type];
if (!proxy) {
    return;
}
helpers.removeEvent(canvas, type, proxy);}, $__.fs.J$__v7918151485_1371_481_42 = $__.fs.J$__v7918151485_1371_481, $__.fs.J$__v7918151485_1371_481)
    };
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
eventTypeMap = {
    touchstart: 'mousedown',
    touchmove: 'mousemove',
    touchend: 'mouseup',
    pointerenter: 'mouseenter',
    pointerdown: 'mousedown',
    pointermove: 'mousemove',
    pointerup: 'mouseup',
    pointerleave: 'mouseout',
    pointerout: 'mouseout'
};
return {
    acquireContext: function (item, config) {
        if (typeof item === 'string') {
            item = document.getElementById(item);
        } else if (item.length) {
            item = item[0];
        }
        if (item && item.canvas) {
            item = item.canvas;
        }
        if (item instanceof HTMLCanvasElement) {
            var context = item.getContext && item.getContext('2d');
            if (context instanceof CanvasRenderingContext2D) {
                initCanvas(item, config);
                return context;
            }
        }
        return null;
    },
    releaseContext: function (context) {
        var canvas = context.canvas;
        if (!canvas._chartjs) {
            return;
        }
        var initial = canvas._chartjs.initial;
        [
            'height',
            'width'
        ].forEach(function (prop) {
            var value = initial[prop];
            if (value === undefined || value === null) {
                canvas.removeAttribute(prop);
            } else {
                canvas.setAttribute(prop, value);
            }
        });
        helpers.each(initial.style || {}, function (value, key) {
            canvas.style[key] = value;
        });
        canvas.width = canvas.width;
        delete canvas._chartjs;
    },
    addEventListener: function (chart, type, listener) {
        var canvas = chart.chart.canvas;
        if (type === 'resize') {
            addResizeListener(canvas.parentNode, listener, chart.chart);
            return;
        }
        var stub = listener._chartjs || (listener._chartjs = {});
        var proxies = stub.proxies || (stub.proxies = {});
        var proxy = proxies[chart.id + '_' + type] = function (event) {
            listener(fromNativeEvent(event, chart.chart));
        };
        helpers.addEvent(canvas, type, proxy);
    },
    removeEventListener: function (chart, type, listener) {
        var canvas = chart.chart.canvas;
        if (type === 'resize') {
            removeResizeListener(canvas.parentNode, listener);
            return;
        }
        var stub = listener._chartjs || {};
        var proxies = stub.proxies || {};
        var proxy = proxies[chart.id + '_' + type];
        if (!proxy) {
            return;
        }
        helpers.removeEvent(canvas, type, proxy);
    }
};});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    var eventTypeMap = {
        touchstart: 'mousedown',
        touchmove: 'mousemove',
        touchend: 'mouseup',
        pointerenter: 'mouseenter',
        pointerdown: 'mousedown',
        pointermove: 'mousemove',
        pointerup: 'mouseup',
        pointerleave: 'mouseout',
        pointerout: 'mouseout'
    };
    function readUsedSize(element, property) {
        var value = helpers.getStyle(element, property);
        var matches = value && value.match(/(\d+)px/);
        return matches ? Number(matches[1]) : undefined;
    }
    function initCanvas(canvas, config) {
        var style = canvas.style;
        var renderHeight = canvas.getAttribute('height');
        var renderWidth = canvas.getAttribute('width');
        canvas._chartjs = {
            initial: {
                height: renderHeight,
                width: renderWidth,
                style: {
                    display: style.display,
                    height: style.height,
                    width: style.width
                }
            }
        };
        style.display = style.display || 'block';
        if (renderWidth === null || renderWidth === '') {
            var displayWidth = readUsedSize(canvas, 'width');
            if (displayWidth !== undefined) {
                canvas.width = displayWidth;
            }
        }
        if (renderHeight === null || renderHeight === '') {
            if (canvas.style.height === '') {
                canvas.height = canvas.width / (config.options.aspectRatio || 2);
            } else {
                var displayHeight = readUsedSize(canvas, 'height');
                if (displayWidth !== undefined) {
                    canvas.height = displayHeight;
                }
            }
        }
        return canvas;
    }
    function createEvent(type, chart, x, y, native) {
        return {
            type: type,
            chart: chart,
            native: native || null,
            x: x !== undefined ? x : null,
            y: y !== undefined ? y : null
        };
    }
    function fromNativeEvent(event, chart) {
        var type = eventTypeMap[event.type] || event.type;
        var pos = helpers.getRelativePosition(event, chart);
        return createEvent(type, chart, pos.x, pos.y, event);
    }
    function createResizer(handler) {
        var iframe = document.createElement('iframe');
        iframe.className = 'chartjs-hidden-iframe';
        iframe.style.cssText = 'display:block;' + 'overflow:hidden;' + 'border:0;' + 'margin:0;' + 'top:0;' + 'left:0;' + 'bottom:0;' + 'right:0;' + 'height:100%;' + 'width:100%;' + 'position:absolute;' + 'pointer-events:none;' + 'z-index:-1;';
        iframe.tabIndex = -1;
        helpers.addEvent(iframe, 'load', function () {
            helpers.addEvent(iframe.contentWindow || iframe, 'resize', handler);
            handler();
        });
        return iframe;
    }
    function addResizeListener(node, listener, chart) {
        var stub = node._chartjs = {
            ticking: false
        };
        var notify = function () {
            if (!stub.ticking) {
                stub.ticking = true;
                helpers.requestAnimFrame.call(window, function () {
                    if (stub.resizer) {
                        stub.ticking = false;
                        return listener(createEvent('resize', chart));
                    }
                });
            }
        };
        stub.resizer = createResizer(notify);
        node.insertBefore(stub.resizer, node.firstChild);
    }
    function removeResizeListener(node) {
        if (!node || !node._chartjs) {
            return;
        }
        var resizer = node._chartjs.resizer;
        if (resizer) {
            resizer.parentNode.removeChild(resizer);
            node._chartjs.resizer = null;
        }
        delete node._chartjs;
    }
    return {
        acquireContext: function (item, config) {
            if (typeof item === 'string') {
                item = document.getElementById(item);
            } else if (item.length) {
                item = item[0];
            }
            if (item && item.canvas) {
                item = item.canvas;
            }
            if (item instanceof HTMLCanvasElement) {
                var context = item.getContext && item.getContext('2d');
                if (context instanceof CanvasRenderingContext2D) {
                    initCanvas(item, config);
                    return context;
                }
            }
            return null;
        },
        releaseContext: function (context) {
            var canvas = context.canvas;
            if (!canvas._chartjs) {
                return;
            }
            var initial = canvas._chartjs.initial;
            [
                'height',
                'width'
            ].forEach(function (prop) {
                var value = initial[prop];
                if (value === undefined || value === null) {
                    canvas.removeAttribute(prop);
                } else {
                    canvas.setAttribute(prop, value);
                }
            });
            helpers.each(initial.style || {}, function (value, key) {
                canvas.style[key] = value;
            });
            canvas.width = canvas.width;
            delete canvas._chartjs;
        },
        addEventListener: function (chart, type, listener) {
            var canvas = chart.chart.canvas;
            if (type === 'resize') {
                addResizeListener(canvas.parentNode, listener, chart.chart);
                return;
            }
            var stub = listener._chartjs || (listener._chartjs = {});
            var proxies = stub.proxies || (stub.proxies = {});
            var proxy = proxies[chart.id + '_' + type] = function (event) {
                listener(fromNativeEvent(event, chart.chart));
            };
            helpers.addEvent(canvas, type, proxy);
        },
        removeEventListener: function (chart, type, listener) {
            var canvas = chart.chart.canvas;
            if (type === 'resize') {
                removeResizeListener(canvas.parentNode, listener);
                return;
            }
            var stub = listener._chartjs || {};
            var proxies = stub.proxies || {};
            var proxy = proxies[chart.id + '_' + type];
            if (!proxy) {
                return;
            }
            helpers.removeEvent(canvas, type, proxy);
        }
    };
};}, $__.fs.J$__v7918151485_1375_46),
            $__.os.oid40 = {}
        ],
        42: [
            ($__.fs.J$__v7918151485_1387_47 = function J$__v7918151485_1387(require, module, exports) {
'use strict';
var vvv_return, vvv_switch, implementation;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    implementation = (require, $__.fs.J$__v7918151485_3_463)(41, 0, true, $__.uid);
    (module, $__.os.oid91).exports = ($__.fs.J$__v7918151485_1385_466 = function J$__v7918151485_1385(Chart) {
var vvv_return, vvv_switch, vvv_tmp0;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    Chart.platform = $__.os.oid94 = {
        'acquireContext': ($__.fs.J$__v7918151485_1377_467 = function J$__v7918151485_1377() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');}),
        'releaseContext': ($__.fs.J$__v7918151485_1379_468 = function J$__v7918151485_1379() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');}),
        'addEventListener': ($__.fs.J$__v7918151485_1381_469 = function J$__v7918151485_1381() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');}),
        'removeEventListener': ($__.fs.J$__v7918151485_1383_470 = function J$__v7918151485_1383() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');})
    };
    vvv_tmp0 = (Chart.helpers, $__.os.oid88), 'extend', $__.fs.J$__v7918151485_686_380.call(vvv_tmp0, (Chart.platform, $__.os.oid94), (implementation, $__.fs.J$__v7918151485_1373_465)((Chart, $__.fs.J$__v7918151485_938_58), 0, true, $__.uid), 0, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
Chart.platform = {
    acquireContext: function () {
    },
    releaseContext: function () {
    },
    addEventListener: function () {
    },
    removeEventListener: function () {
    }
};
Chart.helpers.extend(Chart.platform, implementation(Chart));});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
implementation = require(41);
module.exports = function (Chart) {
    Chart.platform = {
        acquireContext: function () {
        },
        releaseContext: function () {
        },
        addEventListener: function () {
        },
        removeEventListener: function () {
        }
    };
    Chart.helpers.extend(Chart.platform, implementation(Chart));
};}, $__.fs.J$__v7918151485_1387_47),
            $__.os.oid41 = {
                '41': 41
            }
        ],
        43: [
            ($__.fs.J$__v7918151485_1407_48 = function J$__v7918151485_1407(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid185).exports = ($__.fs.J$__v7918151485_1405_775 = function J$__v7918151485_1405(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, helpers, defaultConfig, DatasetScale;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    defaultConfig = $__.os.oid186 = {
        'position': 'bottom'
    };
    DatasetScale = (vvv_tmp0 = TAJS_restrictToType(Chart.Scale, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid187 = {
        'getLabels': ($__.fs.J$__v7918151485_1389_776 = function J$__v7918151485_1389() {
var vvv_return, vvv_switch, data;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
data = this.chart.data;
return (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;}, $__.fs.J$__v7918151485_1389_776_452 = $__.fs.J$__v7918151485_1389_776, $__.fs.J$__v7918151485_1389_776),
        'determineDataLimits': ($__.fs.J$__v7918151485_1391_777 = function J$__v7918151485_1391() {
var vvv_return, vvv_switch, me, labels, findIndex;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
labels = me.getLabels();
me.minIndex = 0;
me.maxIndex = labels.length - 1;
if (me.options.ticks.min !== undefined) {
    findIndex = helpers.indexOf(labels, me.options.ticks.min);
    me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
}
if (me.options.ticks.max !== undefined) {
    findIndex = helpers.indexOf(labels, me.options.ticks.max);
    me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
}
me.min = labels[me.minIndex];
me.max = labels[me.maxIndex];}, $__.fs.J$__v7918151485_1391_777_454 = $__.fs.J$__v7918151485_1391_777, $__.fs.J$__v7918151485_1391_777),
        'buildTicks': ($__.fs.J$__v7918151485_1393_778 = function J$__v7918151485_1393() {
var vvv_return, vvv_switch, me, labels;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
labels = me.getLabels();
me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);}, $__.fs.J$__v7918151485_1393_778_456 = $__.fs.J$__v7918151485_1393_778, $__.fs.J$__v7918151485_1393_778),
        'getLabelForIndex': ($__.fs.J$__v7918151485_1395_779 = function J$__v7918151485_1395(index, datasetIndex) {
var vvv_return, vvv_switch, me, data, isHorizontal;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], datasetIndex = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
data = me.chart.data;
isHorizontal = me.isHorizontal();
if (data.yLabels && !isHorizontal) {
    return me.getRightValue(data.datasets[datasetIndex].data[index]);
}
return me.ticks[index - me.minIndex];}, $__.fs.J$__v7918151485_1395_779_458 = $__.fs.J$__v7918151485_1395_779, $__.fs.J$__v7918151485_1395_779),
        'getPixelForValue': ($__.fs.J$__v7918151485_1397_780 = function J$__v7918151485_1397(value, index, datasetIndex, includeOffset) {
var vvv_return, vvv_switch, me, offsetAmt, labels, idx, valueWidth, widthOffset, valueHeight, heightOffset;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], index = arguments[1], datasetIndex = arguments[2], includeOffset = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
if (value !== undefined && isNaN(index)) {
    labels = me.getLabels();
    idx = labels.indexOf(value);
    index = idx !== -1 ? idx : index;
}
if (me.isHorizontal()) {
    valueWidth = me.width / offsetAmt;
    widthOffset = valueWidth * (index - me.minIndex);
    if (me.options.gridLines.offsetGridLines && includeOffset || me.maxIndex === me.minIndex && includeOffset) {
        widthOffset += valueWidth / 2;
    }
    return me.left + Math.round(widthOffset);
}
valueHeight = me.height / offsetAmt;
heightOffset = valueHeight * (index - me.minIndex);
if (me.options.gridLines.offsetGridLines && includeOffset) {
    heightOffset += valueHeight / 2;
}
return me.top + Math.round(heightOffset);}, $__.fs.J$__v7918151485_1397_780_460 = $__.fs.J$__v7918151485_1397_780, $__.fs.J$__v7918151485_1397_780),
        'getPixelForTick': ($__.fs.J$__v7918151485_1399_781 = function J$__v7918151485_1399(index, includeOffset) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], includeOffset = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);}, $__.fs.J$__v7918151485_1399_781_462 = $__.fs.J$__v7918151485_1399_781, $__.fs.J$__v7918151485_1399_781),
        'getValueForPixel': ($__.fs.J$__v7918151485_1401_782 = function J$__v7918151485_1401(pixel) {
var vvv_return, vvv_switch, me, value, offsetAmt, horz, valueDimension;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pixel = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
offsetAmt = Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
horz = me.isHorizontal();
valueDimension = (horz ? me.width : me.height) / offsetAmt;
pixel -= horz ? me.left : me.top;
if (me.options.gridLines.offsetGridLines) {
    pixel -= valueDimension / 2;
}
if (pixel <= 0) {
    value = 0;
} else {
    value = Math.round(pixel / valueDimension);
}
return value;}, $__.fs.J$__v7918151485_1401_782_464 = $__.fs.J$__v7918151485_1401_782, $__.fs.J$__v7918151485_1401_782),
        'getBasePixel': ($__.fs.J$__v7918151485_1403_783 = function J$__v7918151485_1403() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.bottom;}, $__.fs.J$__v7918151485_1403_783_466 = $__.fs.J$__v7918151485_1403_783, $__.fs.J$__v7918151485_1403_783)
    }, 11, true, $__.uid));
    vvv_tmp1 = (Chart.scaleService, $__.os.oid131), 'registerScaleType', $__.fs.J$__v7918151485_1146_592.call(vvv_tmp1, 'category', (DatasetScale, $__.fs.J$__v7918151485_722_784), defaultConfig, 0, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
defaultConfig = {
    position: 'bottom'
};
DatasetScale = Chart.Scale.extend({
    getLabels: function () {
        var data = this.chart.data;
        return (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
    },
    determineDataLimits: function () {
        var me = this;
        var labels = me.getLabels();
        me.minIndex = 0;
        me.maxIndex = labels.length - 1;
        var findIndex;
        if (me.options.ticks.min !== undefined) {
            findIndex = helpers.indexOf(labels, me.options.ticks.min);
            me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
        }
        if (me.options.ticks.max !== undefined) {
            findIndex = helpers.indexOf(labels, me.options.ticks.max);
            me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
        }
        me.min = labels[me.minIndex];
        me.max = labels[me.maxIndex];
    },
    buildTicks: function () {
        var me = this;
        var labels = me.getLabels();
        me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
    },
    getLabelForIndex: function (index, datasetIndex) {
        var me = this;
        var data = me.chart.data;
        var isHorizontal = me.isHorizontal();
        if (data.yLabels && !isHorizontal) {
            return me.getRightValue(data.datasets[datasetIndex].data[index]);
        }
        return me.ticks[index - me.minIndex];
    },
    getPixelForValue: function (value, index, datasetIndex, includeOffset) {
        var me = this;
        var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
        if (value !== undefined && isNaN(index)) {
            var labels = me.getLabels();
            var idx = labels.indexOf(value);
            index = idx !== -1 ? idx : index;
        }
        if (me.isHorizontal()) {
            var valueWidth = me.width / offsetAmt;
            var widthOffset = valueWidth * (index - me.minIndex);
            if (me.options.gridLines.offsetGridLines && includeOffset || me.maxIndex === me.minIndex && includeOffset) {
                widthOffset += valueWidth / 2;
            }
            return me.left + Math.round(widthOffset);
        }
        var valueHeight = me.height / offsetAmt;
        var heightOffset = valueHeight * (index - me.minIndex);
        if (me.options.gridLines.offsetGridLines && includeOffset) {
            heightOffset += valueHeight / 2;
        }
        return me.top + Math.round(heightOffset);
    },
    getPixelForTick: function (index, includeOffset) {
        return this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);
    },
    getValueForPixel: function (pixel) {
        var me = this;
        var value;
        var offsetAmt = Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
        var horz = me.isHorizontal();
        var valueDimension = (horz ? me.width : me.height) / offsetAmt;
        pixel -= horz ? me.left : me.top;
        if (me.options.gridLines.offsetGridLines) {
            pixel -= valueDimension / 2;
        }
        if (pixel <= 0) {
            value = 0;
        } else {
            value = Math.round(pixel / valueDimension);
        }
        return value;
    },
    getBasePixel: function () {
        return this.bottom;
    }
});
Chart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    var defaultConfig = {
        position: 'bottom'
    };
    var DatasetScale = Chart.Scale.extend({
        getLabels: function () {
            var data = this.chart.data;
            return (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
        },
        determineDataLimits: function () {
            var me = this;
            var labels = me.getLabels();
            me.minIndex = 0;
            me.maxIndex = labels.length - 1;
            var findIndex;
            if (me.options.ticks.min !== undefined) {
                findIndex = helpers.indexOf(labels, me.options.ticks.min);
                me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
            }
            if (me.options.ticks.max !== undefined) {
                findIndex = helpers.indexOf(labels, me.options.ticks.max);
                me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
            }
            me.min = labels[me.minIndex];
            me.max = labels[me.maxIndex];
        },
        buildTicks: function () {
            var me = this;
            var labels = me.getLabels();
            me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
        },
        getLabelForIndex: function (index, datasetIndex) {
            var me = this;
            var data = me.chart.data;
            var isHorizontal = me.isHorizontal();
            if (data.yLabels && !isHorizontal) {
                return me.getRightValue(data.datasets[datasetIndex].data[index]);
            }
            return me.ticks[index - me.minIndex];
        },
        getPixelForValue: function (value, index, datasetIndex, includeOffset) {
            var me = this;
            var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
            if (value !== undefined && isNaN(index)) {
                var labels = me.getLabels();
                var idx = labels.indexOf(value);
                index = idx !== -1 ? idx : index;
            }
            if (me.isHorizontal()) {
                var valueWidth = me.width / offsetAmt;
                var widthOffset = valueWidth * (index - me.minIndex);
                if (me.options.gridLines.offsetGridLines && includeOffset || me.maxIndex === me.minIndex && includeOffset) {
                    widthOffset += valueWidth / 2;
                }
                return me.left + Math.round(widthOffset);
            }
            var valueHeight = me.height / offsetAmt;
            var heightOffset = valueHeight * (index - me.minIndex);
            if (me.options.gridLines.offsetGridLines && includeOffset) {
                heightOffset += valueHeight / 2;
            }
            return me.top + Math.round(heightOffset);
        },
        getPixelForTick: function (index, includeOffset) {
            return this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);
        },
        getValueForPixel: function (pixel) {
            var me = this;
            var value;
            var offsetAmt = Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
            var horz = me.isHorizontal();
            var valueDimension = (horz ? me.width : me.height) / offsetAmt;
            pixel -= horz ? me.left : me.top;
            if (me.options.gridLines.offsetGridLines) {
                pixel -= valueDimension / 2;
            }
            if (pixel <= 0) {
                value = 0;
            } else {
                value = Math.round(pixel / valueDimension);
            }
            return value;
        },
        getBasePixel: function () {
            return this.bottom;
        }
    });
    Chart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);
};}, $__.fs.J$__v7918151485_1407_48),
            $__.os.oid42 = {}
        ],
        44: [
            ($__.fs.J$__v7918151485_1438_49 = function J$__v7918151485_1438(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid190).exports = ($__.fs.J$__v7918151485_1436_789 = function J$__v7918151485_1436(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, helpers, defaultConfig, LinearScale;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    defaultConfig = $__.os.oid192 = {
        'position': 'left',
        'ticks': $__.os.oid191 = {
            'callback': TAJS_restrictToType(((((Chart.Ticks, $__.os.oid136), $__.os.oid136).formatters, $__.os.oid135), $__.os.oid135).linear, 'function')
        }
    };
    LinearScale = (vvv_tmp0 = TAJS_restrictToType(Chart.LinearScaleBase, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid193 = {
        'determineDataLimits': ($__.fs.J$__v7918151485_1422_790 = function J$__v7918151485_1422() {
var vvv_return, vvv_switch, me, opts, chart, data, datasets, isHorizontal, IDMatches, hasStacks, valuesPerStack;
IDMatches = function IDMatches(meta) {
    return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me.options;
chart = me.chart;
data = chart.data;
datasets = data.datasets;
isHorizontal = me.isHorizontal();
me.min = null;
me.max = null;
hasStacks = opts.stacked;
if (hasStacks === undefined) {
    helpers.each(datasets, function (dataset, datasetIndex) {
        if (hasStacks) {
            return;
        }
        var meta = chart.getDatasetMeta(datasetIndex);
        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
            hasStacks = true;
        }
    });
}
if (opts.stacked || hasStacks) {
    valuesPerStack = {};
    helpers.each(datasets, function (dataset, datasetIndex) {
        var meta = chart.getDatasetMeta(datasetIndex);
        var key = [
            meta.type,
            opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '',
            meta.stack
        ].join('.');
        if (valuesPerStack[key] === undefined) {
            valuesPerStack[key] = {
                positiveValues: [],
                negativeValues: []
            };
        }
        var positiveValues = valuesPerStack[key].positiveValues;
        var negativeValues = valuesPerStack[key].negativeValues;
        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
            helpers.each(dataset.data, function (rawValue, index) {
                var value = +me.getRightValue(rawValue);
                if (isNaN(value) || meta.data[index].hidden) {
                    return;
                }
                positiveValues[index] = positiveValues[index] || 0;
                negativeValues[index] = negativeValues[index] || 0;
                if (opts.relativePoints) {
                    positiveValues[index] = 100;
                } else if (value < 0) {
                    negativeValues[index] += value;
                } else {
                    positiveValues[index] += value;
                }
            });
        }
    });
    helpers.each(valuesPerStack, function (valuesForType) {
        var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
        var minVal = helpers.min(values);
        var maxVal = helpers.max(values);
        me.min = me.min === null ? minVal : Math.min(me.min, minVal);
        me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
    });
} else {
    helpers.each(datasets, function (dataset, datasetIndex) {
        var meta = chart.getDatasetMeta(datasetIndex);
        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
            helpers.each(dataset.data, function (rawValue, index) {
                var value = +me.getRightValue(rawValue);
                if (isNaN(value) || meta.data[index].hidden) {
                    return;
                }
                if (me.min === null) {
                    me.min = value;
                } else if (value < me.min) {
                    me.min = value;
                }
                if (me.max === null) {
                    me.max = value;
                } else if (value > me.max) {
                    me.max = value;
                }
            });
        }
    });
}
this.handleTickRangeOptions();}, $__.fs.J$__v7918151485_1422_790_472 = $__.fs.J$__v7918151485_1422_790, $__.fs.J$__v7918151485_1422_790),
        'getTickLimit': ($__.fs.J$__v7918151485_1424_791 = function J$__v7918151485_1424() {
var vvv_return, vvv_switch, maxTicks, me, tickOpts, tickFontSize;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
tickOpts = me.options.ticks;
if (me.isHorizontal()) {
    maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
} else {
    tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, Chart.defaults.global.defaultFontSize);
    maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
}
return maxTicks;}, $__.fs.J$__v7918151485_1424_791_474 = $__.fs.J$__v7918151485_1424_791, $__.fs.J$__v7918151485_1424_791),
        'handleDirectionalChanges': ($__.fs.J$__v7918151485_1426_792 = function J$__v7918151485_1426() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!this.isHorizontal()) {
    this.ticks.reverse();
}}, $__.fs.J$__v7918151485_1426_792_476 = $__.fs.J$__v7918151485_1426_792, $__.fs.J$__v7918151485_1426_792),
        'getLabelForIndex': ($__.fs.J$__v7918151485_1428_793 = function J$__v7918151485_1428(index, datasetIndex) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], datasetIndex = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);}, $__.fs.J$__v7918151485_1428_793_478 = $__.fs.J$__v7918151485_1428_793, $__.fs.J$__v7918151485_1428_793),
        'getPixelForValue': ($__.fs.J$__v7918151485_1430_794 = function J$__v7918151485_1430(value) {
var vvv_return, vvv_switch, me, start, rightValue, pixel, range;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
start = me.start;
rightValue = +me.getRightValue(value);
range = me.end - start;
if (me.isHorizontal()) {
    pixel = me.left + me.width / range * (rightValue - start);
    return Math.round(pixel);
}
pixel = me.bottom - me.height / range * (rightValue - start);
return Math.round(pixel);}, $__.fs.J$__v7918151485_1430_794_480 = $__.fs.J$__v7918151485_1430_794, $__.fs.J$__v7918151485_1430_794),
        'getValueForPixel': ($__.fs.J$__v7918151485_1432_795 = function J$__v7918151485_1432(pixel) {
var vvv_return, vvv_switch, me, isHorizontal, innerDimension, offset;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pixel = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
isHorizontal = me.isHorizontal();
innerDimension = isHorizontal ? me.width : me.height;
offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
return me.start + (me.end - me.start) * offset;}, $__.fs.J$__v7918151485_1432_795_482 = $__.fs.J$__v7918151485_1432_795, $__.fs.J$__v7918151485_1432_795),
        'getPixelForTick': ($__.fs.J$__v7918151485_1434_796 = function J$__v7918151485_1434(index) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.getPixelForValue(this.ticksAsNumbers[index]);}, $__.fs.J$__v7918151485_1434_796_484 = $__.fs.J$__v7918151485_1434_796, $__.fs.J$__v7918151485_1434_796)
    }, 12, true, $__.uid));
    vvv_tmp1 = (Chart.scaleService, $__.os.oid131), 'registerScaleType', $__.fs.J$__v7918151485_1146_592.call(vvv_tmp1, 'linear', (LinearScale, $__.fs.J$__v7918151485_722_797), defaultConfig, 1, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
defaultConfig = {
    position: 'left',
    ticks: {
        callback: Chart.Ticks.formatters.linear
    }
};
LinearScale = Chart.LinearScaleBase.extend({
    determineDataLimits: function () {
        var me = this;
        var opts = me.options;
        var chart = me.chart;
        var data = chart.data;
        var datasets = data.datasets;
        var isHorizontal = me.isHorizontal();
        function IDMatches(meta) {
            return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
        }
        me.min = null;
        me.max = null;
        var hasStacks = opts.stacked;
        if (hasStacks === undefined) {
            helpers.each(datasets, function (dataset, datasetIndex) {
                if (hasStacks) {
                    return;
                }
                var meta = chart.getDatasetMeta(datasetIndex);
                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                    hasStacks = true;
                }
            });
        }
        if (opts.stacked || hasStacks) {
            var valuesPerStack = {};
            helpers.each(datasets, function (dataset, datasetIndex) {
                var meta = chart.getDatasetMeta(datasetIndex);
                var key = [
                    meta.type,
                    opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '',
                    meta.stack
                ].join('.');
                if (valuesPerStack[key] === undefined) {
                    valuesPerStack[key] = {
                        positiveValues: [],
                        negativeValues: []
                    };
                }
                var positiveValues = valuesPerStack[key].positiveValues;
                var negativeValues = valuesPerStack[key].negativeValues;
                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                    helpers.each(dataset.data, function (rawValue, index) {
                        var value = +me.getRightValue(rawValue);
                        if (isNaN(value) || meta.data[index].hidden) {
                            return;
                        }
                        positiveValues[index] = positiveValues[index] || 0;
                        negativeValues[index] = negativeValues[index] || 0;
                        if (opts.relativePoints) {
                            positiveValues[index] = 100;
                        } else if (value < 0) {
                            negativeValues[index] += value;
                        } else {
                            positiveValues[index] += value;
                        }
                    });
                }
            });
            helpers.each(valuesPerStack, function (valuesForType) {
                var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
                var minVal = helpers.min(values);
                var maxVal = helpers.max(values);
                me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
            });
        } else {
            helpers.each(datasets, function (dataset, datasetIndex) {
                var meta = chart.getDatasetMeta(datasetIndex);
                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                    helpers.each(dataset.data, function (rawValue, index) {
                        var value = +me.getRightValue(rawValue);
                        if (isNaN(value) || meta.data[index].hidden) {
                            return;
                        }
                        if (me.min === null) {
                            me.min = value;
                        } else if (value < me.min) {
                            me.min = value;
                        }
                        if (me.max === null) {
                            me.max = value;
                        } else if (value > me.max) {
                            me.max = value;
                        }
                    });
                }
            });
        }
        this.handleTickRangeOptions();
    },
    getTickLimit: function () {
        var maxTicks;
        var me = this;
        var tickOpts = me.options.ticks;
        if (me.isHorizontal()) {
            maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
        } else {
            var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, Chart.defaults.global.defaultFontSize);
            maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
        }
        return maxTicks;
    },
    handleDirectionalChanges: function () {
        if (!this.isHorizontal()) {
            this.ticks.reverse();
        }
    },
    getLabelForIndex: function (index, datasetIndex) {
        return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
    },
    getPixelForValue: function (value) {
        var me = this;
        var start = me.start;
        var rightValue = +me.getRightValue(value);
        var pixel;
        var range = me.end - start;
        if (me.isHorizontal()) {
            pixel = me.left + me.width / range * (rightValue - start);
            return Math.round(pixel);
        }
        pixel = me.bottom - me.height / range * (rightValue - start);
        return Math.round(pixel);
    },
    getValueForPixel: function (pixel) {
        var me = this;
        var isHorizontal = me.isHorizontal();
        var innerDimension = isHorizontal ? me.width : me.height;
        var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
        return me.start + (me.end - me.start) * offset;
    },
    getPixelForTick: function (index) {
        return this.getPixelForValue(this.ticksAsNumbers[index]);
    }
});
Chart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    var defaultConfig = {
        position: 'left',
        ticks: {
            callback: Chart.Ticks.formatters.linear
        }
    };
    var LinearScale = Chart.LinearScaleBase.extend({
        determineDataLimits: function () {
            var me = this;
            var opts = me.options;
            var chart = me.chart;
            var data = chart.data;
            var datasets = data.datasets;
            var isHorizontal = me.isHorizontal();
            function IDMatches(meta) {
                return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
            }
            me.min = null;
            me.max = null;
            var hasStacks = opts.stacked;
            if (hasStacks === undefined) {
                helpers.each(datasets, function (dataset, datasetIndex) {
                    if (hasStacks) {
                        return;
                    }
                    var meta = chart.getDatasetMeta(datasetIndex);
                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                        hasStacks = true;
                    }
                });
            }
            if (opts.stacked || hasStacks) {
                var valuesPerStack = {};
                helpers.each(datasets, function (dataset, datasetIndex) {
                    var meta = chart.getDatasetMeta(datasetIndex);
                    var key = [
                        meta.type,
                        opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '',
                        meta.stack
                    ].join('.');
                    if (valuesPerStack[key] === undefined) {
                        valuesPerStack[key] = {
                            positiveValues: [],
                            negativeValues: []
                        };
                    }
                    var positiveValues = valuesPerStack[key].positiveValues;
                    var negativeValues = valuesPerStack[key].negativeValues;
                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                        helpers.each(dataset.data, function (rawValue, index) {
                            var value = +me.getRightValue(rawValue);
                            if (isNaN(value) || meta.data[index].hidden) {
                                return;
                            }
                            positiveValues[index] = positiveValues[index] || 0;
                            negativeValues[index] = negativeValues[index] || 0;
                            if (opts.relativePoints) {
                                positiveValues[index] = 100;
                            } else if (value < 0) {
                                negativeValues[index] += value;
                            } else {
                                positiveValues[index] += value;
                            }
                        });
                    }
                });
                helpers.each(valuesPerStack, function (valuesForType) {
                    var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
                    var minVal = helpers.min(values);
                    var maxVal = helpers.max(values);
                    me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                    me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
                });
            } else {
                helpers.each(datasets, function (dataset, datasetIndex) {
                    var meta = chart.getDatasetMeta(datasetIndex);
                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                        helpers.each(dataset.data, function (rawValue, index) {
                            var value = +me.getRightValue(rawValue);
                            if (isNaN(value) || meta.data[index].hidden) {
                                return;
                            }
                            if (me.min === null) {
                                me.min = value;
                            } else if (value < me.min) {
                                me.min = value;
                            }
                            if (me.max === null) {
                                me.max = value;
                            } else if (value > me.max) {
                                me.max = value;
                            }
                        });
                    }
                });
            }
            this.handleTickRangeOptions();
        },
        getTickLimit: function () {
            var maxTicks;
            var me = this;
            var tickOpts = me.options.ticks;
            if (me.isHorizontal()) {
                maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
            } else {
                var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, Chart.defaults.global.defaultFontSize);
                maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
            }
            return maxTicks;
        },
        handleDirectionalChanges: function () {
            if (!this.isHorizontal()) {
                this.ticks.reverse();
            }
        },
        getLabelForIndex: function (index, datasetIndex) {
            return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        getPixelForValue: function (value) {
            var me = this;
            var start = me.start;
            var rightValue = +me.getRightValue(value);
            var pixel;
            var range = me.end - start;
            if (me.isHorizontal()) {
                pixel = me.left + me.width / range * (rightValue - start);
                return Math.round(pixel);
            }
            pixel = me.bottom - me.height / range * (rightValue - start);
            return Math.round(pixel);
        },
        getValueForPixel: function (pixel) {
            var me = this;
            var isHorizontal = me.isHorizontal();
            var innerDimension = isHorizontal ? me.width : me.height;
            var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
            return me.start + (me.end - me.start) * offset;
        },
        getPixelForTick: function (index) {
            return this.getPixelForValue(this.ticksAsNumbers[index]);
        }
    });
    Chart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);
};}, $__.fs.J$__v7918151485_1438_49),
            $__.os.oid43 = {}
        ],
        45: [
            ($__.fs.J$__v7918151485_1448_50 = function J$__v7918151485_1448(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid182).exports = ($__.fs.J$__v7918151485_1446_767 = function J$__v7918151485_1446(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, helpers, noop;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    noop = TAJS_restrictToType((helpers, $__.os.oid88).noop, 'function');
    Chart.LinearScaleBase = (vvv_tmp0 = TAJS_restrictToType(Chart.Scale, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid183 = {
        'handleTickRangeOptions': ($__.fs.J$__v7918151485_1440_768 = function J$__v7918151485_1440() {
var vvv_return, vvv_switch, me, opts, tickOpts, minSign, maxSign;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me.options;
tickOpts = opts.ticks;
if (tickOpts.beginAtZero) {
    minSign = helpers.sign(me.min);
    maxSign = helpers.sign(me.max);
    if (minSign < 0 && maxSign < 0) {
        me.max = 0;
    } else if (minSign > 0 && maxSign > 0) {
        me.min = 0;
    }
}
if (tickOpts.min !== undefined) {
    me.min = tickOpts.min;
} else if (tickOpts.suggestedMin !== undefined) {
    me.min = Math.min(me.min, tickOpts.suggestedMin);
}
if (tickOpts.max !== undefined) {
    me.max = tickOpts.max;
} else if (tickOpts.suggestedMax !== undefined) {
    me.max = Math.max(me.max, tickOpts.suggestedMax);
}
if (me.min === me.max) {
    me.max++;
    if (!tickOpts.beginAtZero) {
        me.min--;
    }
}}, $__.fs.J$__v7918151485_1440_768_439 = $__.fs.J$__v7918151485_1440_768, $__.fs.J$__v7918151485_1440_768),
        'getTickLimit': noop,
        'handleDirectionalChanges': noop,
        'buildTicks': ($__.fs.J$__v7918151485_1442_769 = function J$__v7918151485_1442() {
var vvv_return, vvv_switch, me, opts, tickOpts, maxTicks, numericGeneratorOptions, ticks;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me.options;
tickOpts = opts.ticks;
maxTicks = me.getTickLimit();
maxTicks = Math.max(2, maxTicks);
numericGeneratorOptions = {
    maxTicks: maxTicks,
    min: tickOpts.min,
    max: tickOpts.max,
    stepSize: helpers.getValueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
};
ticks = me.ticks = Chart.Ticks.generators.linear(numericGeneratorOptions, me);
me.handleDirectionalChanges();
me.max = helpers.max(ticks);
me.min = helpers.min(ticks);
if (tickOpts.reverse) {
    ticks.reverse();
    me.start = me.max;
    me.end = me.min;
} else {
    me.start = me.min;
    me.end = me.max;
}}, $__.fs.J$__v7918151485_1442_769_445 = $__.fs.J$__v7918151485_1442_769, $__.fs.J$__v7918151485_1442_769),
        'convertTicksToLabels': ($__.fs.J$__v7918151485_1444_770 = function J$__v7918151485_1444() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.ticksAsNumbers = me.ticks.slice();
me.zeroLineIndex = me.ticks.indexOf(0);
Chart.Scale.prototype.convertTicksToLabels.call(me);}, $__.fs.J$__v7918151485_1444_770_447 = $__.fs.J$__v7918151485_1444_770, $__.fs.J$__v7918151485_1444_770)
    }, 10, true, $__.uid));
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
noop = helpers.noop;
Chart.LinearScaleBase = Chart.Scale.extend({
    handleTickRangeOptions: function () {
        var me = this;
        var opts = me.options;
        var tickOpts = opts.ticks;
        if (tickOpts.beginAtZero) {
            var minSign = helpers.sign(me.min);
            var maxSign = helpers.sign(me.max);
            if (minSign < 0 && maxSign < 0) {
                me.max = 0;
            } else if (minSign > 0 && maxSign > 0) {
                me.min = 0;
            }
        }
        if (tickOpts.min !== undefined) {
            me.min = tickOpts.min;
        } else if (tickOpts.suggestedMin !== undefined) {
            me.min = Math.min(me.min, tickOpts.suggestedMin);
        }
        if (tickOpts.max !== undefined) {
            me.max = tickOpts.max;
        } else if (tickOpts.suggestedMax !== undefined) {
            me.max = Math.max(me.max, tickOpts.suggestedMax);
        }
        if (me.min === me.max) {
            me.max++;
            if (!tickOpts.beginAtZero) {
                me.min--;
            }
        }
    },
    getTickLimit: noop,
    handleDirectionalChanges: noop,
    buildTicks: function () {
        var me = this;
        var opts = me.options;
        var tickOpts = opts.ticks;
        var maxTicks = me.getTickLimit();
        maxTicks = Math.max(2, maxTicks);
        var numericGeneratorOptions = {
            maxTicks: maxTicks,
            min: tickOpts.min,
            max: tickOpts.max,
            stepSize: helpers.getValueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
        };
        var ticks = me.ticks = Chart.Ticks.generators.linear(numericGeneratorOptions, me);
        me.handleDirectionalChanges();
        me.max = helpers.max(ticks);
        me.min = helpers.min(ticks);
        if (tickOpts.reverse) {
            ticks.reverse();
            me.start = me.max;
            me.end = me.min;
        } else {
            me.start = me.min;
            me.end = me.max;
        }
    },
    convertTicksToLabels: function () {
        var me = this;
        me.ticksAsNumbers = me.ticks.slice();
        me.zeroLineIndex = me.ticks.indexOf(0);
        Chart.Scale.prototype.convertTicksToLabels.call(me);
    }
});});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers, noop = helpers.noop;
    Chart.LinearScaleBase = Chart.Scale.extend({
        handleTickRangeOptions: function () {
            var me = this;
            var opts = me.options;
            var tickOpts = opts.ticks;
            if (tickOpts.beginAtZero) {
                var minSign = helpers.sign(me.min);
                var maxSign = helpers.sign(me.max);
                if (minSign < 0 && maxSign < 0) {
                    me.max = 0;
                } else if (minSign > 0 && maxSign > 0) {
                    me.min = 0;
                }
            }
            if (tickOpts.min !== undefined) {
                me.min = tickOpts.min;
            } else if (tickOpts.suggestedMin !== undefined) {
                me.min = Math.min(me.min, tickOpts.suggestedMin);
            }
            if (tickOpts.max !== undefined) {
                me.max = tickOpts.max;
            } else if (tickOpts.suggestedMax !== undefined) {
                me.max = Math.max(me.max, tickOpts.suggestedMax);
            }
            if (me.min === me.max) {
                me.max++;
                if (!tickOpts.beginAtZero) {
                    me.min--;
                }
            }
        },
        getTickLimit: noop,
        handleDirectionalChanges: noop,
        buildTicks: function () {
            var me = this;
            var opts = me.options;
            var tickOpts = opts.ticks;
            var maxTicks = me.getTickLimit();
            maxTicks = Math.max(2, maxTicks);
            var numericGeneratorOptions = {
                maxTicks: maxTicks,
                min: tickOpts.min,
                max: tickOpts.max,
                stepSize: helpers.getValueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
            };
            var ticks = me.ticks = Chart.Ticks.generators.linear(numericGeneratorOptions, me);
            me.handleDirectionalChanges();
            me.max = helpers.max(ticks);
            me.min = helpers.min(ticks);
            if (tickOpts.reverse) {
                ticks.reverse();
                me.start = me.max;
                me.end = me.min;
            } else {
                me.start = me.min;
                me.end = me.max;
            }
        },
        convertTicksToLabels: function () {
            var me = this;
            me.ticksAsNumbers = me.ticks.slice();
            me.zeroLineIndex = me.ticks.indexOf(0);
            Chart.Scale.prototype.convertTicksToLabels.call(me);
        }
    });
};}, $__.fs.J$__v7918151485_1448_50),
            $__.os.oid44 = {}
        ],
        46: [
            ($__.fs.J$__v7918151485_1479_51 = function J$__v7918151485_1479(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid197).exports = ($__.fs.J$__v7918151485_1477_803 = function J$__v7918151485_1477(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, helpers, defaultConfig, LogarithmicScale;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    defaultConfig = $__.os.oid199 = {
        'position': 'left',
        'ticks': $__.os.oid198 = {
            'callback': TAJS_restrictToType(((((Chart.Ticks, $__.os.oid136), $__.os.oid136).formatters, $__.os.oid135), $__.os.oid135).logarithmic, 'function')
        }
    };
    LogarithmicScale = (vvv_tmp0 = TAJS_restrictToType(Chart.Scale, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid200 = {
        'determineDataLimits': ($__.fs.J$__v7918151485_1463_804 = function J$__v7918151485_1463() {
var vvv_return, vvv_switch, me, opts, tickOpts, chart, data, datasets, getValueOrDefault, isHorizontal, IDMatches, hasStacks, valuesPerStack;
IDMatches = function IDMatches(meta) {
    return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
};
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me.options;
tickOpts = opts.ticks;
chart = me.chart;
data = chart.data;
datasets = data.datasets;
getValueOrDefault = helpers.getValueOrDefault;
isHorizontal = me.isHorizontal();
me.min = null;
me.max = null;
me.minNotZero = null;
hasStacks = opts.stacked;
if (hasStacks === undefined) {
    helpers.each(datasets, function (dataset, datasetIndex) {
        if (hasStacks) {
            return;
        }
        var meta = chart.getDatasetMeta(datasetIndex);
        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
            hasStacks = true;
        }
    });
}
if (opts.stacked || hasStacks) {
    valuesPerStack = {};
    helpers.each(datasets, function (dataset, datasetIndex) {
        var meta = chart.getDatasetMeta(datasetIndex);
        var key = [
            meta.type,
            opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '',
            meta.stack
        ].join('.');
        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
            if (valuesPerStack[key] === undefined) {
                valuesPerStack[key] = [];
            }
            helpers.each(dataset.data, function (rawValue, index) {
                var values = valuesPerStack[key];
                var value = +me.getRightValue(rawValue);
                if (isNaN(value) || meta.data[index].hidden) {
                    return;
                }
                values[index] = values[index] || 0;
                if (opts.relativePoints) {
                    values[index] = 100;
                } else {
                    values[index] += value;
                }
            });
        }
    });
    helpers.each(valuesPerStack, function (valuesForType) {
        var minVal = helpers.min(valuesForType);
        var maxVal = helpers.max(valuesForType);
        me.min = me.min === null ? minVal : Math.min(me.min, minVal);
        me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
    });
} else {
    helpers.each(datasets, function (dataset, datasetIndex) {
        var meta = chart.getDatasetMeta(datasetIndex);
        if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
            helpers.each(dataset.data, function (rawValue, index) {
                var value = +me.getRightValue(rawValue);
                if (isNaN(value) || meta.data[index].hidden) {
                    return;
                }
                if (me.min === null) {
                    me.min = value;
                } else if (value < me.min) {
                    me.min = value;
                }
                if (me.max === null) {
                    me.max = value;
                } else if (value > me.max) {
                    me.max = value;
                }
                if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
                    me.minNotZero = value;
                }
            });
        }
    });
}
me.min = getValueOrDefault(tickOpts.min, me.min);
me.max = getValueOrDefault(tickOpts.max, me.max);
if (me.min === me.max) {
    if (me.min !== 0 && me.min !== null) {
        me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
        me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
    } else {
        me.min = 1;
        me.max = 10;
    }
}}, $__.fs.J$__v7918151485_1463_804_493 = $__.fs.J$__v7918151485_1463_804, $__.fs.J$__v7918151485_1463_804),
        'buildTicks': ($__.fs.J$__v7918151485_1465_805 = function J$__v7918151485_1465() {
var vvv_return, vvv_switch, me, opts, tickOpts, generationOptions, ticks;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me.options;
tickOpts = opts.ticks;
generationOptions = {
    min: tickOpts.min,
    max: tickOpts.max
};
ticks = me.ticks = Chart.Ticks.generators.logarithmic(generationOptions, me);
if (!me.isHorizontal()) {
    ticks.reverse();
}
me.max = helpers.max(ticks);
me.min = helpers.min(ticks);
if (tickOpts.reverse) {
    ticks.reverse();
    me.start = me.max;
    me.end = me.min;
} else {
    me.start = me.min;
    me.end = me.max;
}}, $__.fs.J$__v7918151485_1465_805_495 = $__.fs.J$__v7918151485_1465_805, $__.fs.J$__v7918151485_1465_805),
        'convertTicksToLabels': ($__.fs.J$__v7918151485_1467_806 = function J$__v7918151485_1467() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
this.tickValues = this.ticks.slice();
Chart.Scale.prototype.convertTicksToLabels.call(this);}, $__.fs.J$__v7918151485_1467_806_497 = $__.fs.J$__v7918151485_1467_806, $__.fs.J$__v7918151485_1467_806),
        'getLabelForIndex': ($__.fs.J$__v7918151485_1469_807 = function J$__v7918151485_1469(index, datasetIndex) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], datasetIndex = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);}, $__.fs.J$__v7918151485_1469_807_499 = $__.fs.J$__v7918151485_1469_807, $__.fs.J$__v7918151485_1469_807),
        'getPixelForTick': ($__.fs.J$__v7918151485_1471_808 = function J$__v7918151485_1471(index) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.getPixelForValue(this.tickValues[index]);}, $__.fs.J$__v7918151485_1471_808_501 = $__.fs.J$__v7918151485_1471_808, $__.fs.J$__v7918151485_1471_808),
        'getPixelForValue': ($__.fs.J$__v7918151485_1473_809 = function J$__v7918151485_1473(value) {
var vvv_return, vvv_switch, me, innerDimension, pixel, start, newVal, range, opts, tickOpts;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
start = me.start;
newVal = +me.getRightValue(value);
opts = me.options;
tickOpts = opts.ticks;
if (me.isHorizontal()) {
    range = helpers.log10(me.end) - helpers.log10(start);
    if (newVal === 0) {
        pixel = me.left;
    } else {
        innerDimension = me.width;
        pixel = me.left + innerDimension / range * (helpers.log10(newVal) - helpers.log10(start));
    }
} else {
    innerDimension = me.height;
    if (start === 0 && !tickOpts.reverse) {
        range = helpers.log10(me.end) - helpers.log10(me.minNotZero);
        if (newVal === start) {
            pixel = me.bottom;
        } else if (newVal === me.minNotZero) {
            pixel = me.bottom - innerDimension * 0.02;
        } else {
            pixel = me.bottom - innerDimension * 0.02 - innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero));
        }
    } else if (me.end === 0 && tickOpts.reverse) {
        range = helpers.log10(me.start) - helpers.log10(me.minNotZero);
        if (newVal === me.end) {
            pixel = me.top;
        } else if (newVal === me.minNotZero) {
            pixel = me.top + innerDimension * 0.02;
        } else {
            pixel = me.top + innerDimension * 0.02 + innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero));
        }
    } else {
        range = helpers.log10(me.end) - helpers.log10(start);
        innerDimension = me.height;
        pixel = me.bottom - innerDimension / range * (helpers.log10(newVal) - helpers.log10(start));
    }
}
return pixel;}, $__.fs.J$__v7918151485_1473_809_503 = $__.fs.J$__v7918151485_1473_809, $__.fs.J$__v7918151485_1473_809),
        'getValueForPixel': ($__.fs.J$__v7918151485_1475_810 = function J$__v7918151485_1475(pixel) {
var vvv_return, vvv_switch, me, range, value, innerDimension;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pixel = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
range = helpers.log10(me.end) - helpers.log10(me.start);
if (me.isHorizontal()) {
    innerDimension = me.width;
    value = me.start * Math.pow(10, (pixel - me.left) * range / innerDimension);
} else {
    innerDimension = me.height;
    value = Math.pow(10, (me.bottom - pixel) * range / innerDimension) / me.start;
}
return value;}, $__.fs.J$__v7918151485_1475_810_505 = $__.fs.J$__v7918151485_1475_810, $__.fs.J$__v7918151485_1475_810)
    }, 13, true, $__.uid));
    vvv_tmp1 = (Chart.scaleService, $__.os.oid131), 'registerScaleType', $__.fs.J$__v7918151485_1146_592.call(vvv_tmp1, 'logarithmic', (LogarithmicScale, $__.fs.J$__v7918151485_722_811), defaultConfig, 2, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
defaultConfig = {
    position: 'left',
    ticks: {
        callback: Chart.Ticks.formatters.logarithmic
    }
};
LogarithmicScale = Chart.Scale.extend({
    determineDataLimits: function () {
        var me = this;
        var opts = me.options;
        var tickOpts = opts.ticks;
        var chart = me.chart;
        var data = chart.data;
        var datasets = data.datasets;
        var getValueOrDefault = helpers.getValueOrDefault;
        var isHorizontal = me.isHorizontal();
        function IDMatches(meta) {
            return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
        }
        me.min = null;
        me.max = null;
        me.minNotZero = null;
        var hasStacks = opts.stacked;
        if (hasStacks === undefined) {
            helpers.each(datasets, function (dataset, datasetIndex) {
                if (hasStacks) {
                    return;
                }
                var meta = chart.getDatasetMeta(datasetIndex);
                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                    hasStacks = true;
                }
            });
        }
        if (opts.stacked || hasStacks) {
            var valuesPerStack = {};
            helpers.each(datasets, function (dataset, datasetIndex) {
                var meta = chart.getDatasetMeta(datasetIndex);
                var key = [
                    meta.type,
                    opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '',
                    meta.stack
                ].join('.');
                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                    if (valuesPerStack[key] === undefined) {
                        valuesPerStack[key] = [];
                    }
                    helpers.each(dataset.data, function (rawValue, index) {
                        var values = valuesPerStack[key];
                        var value = +me.getRightValue(rawValue);
                        if (isNaN(value) || meta.data[index].hidden) {
                            return;
                        }
                        values[index] = values[index] || 0;
                        if (opts.relativePoints) {
                            values[index] = 100;
                        } else {
                            values[index] += value;
                        }
                    });
                }
            });
            helpers.each(valuesPerStack, function (valuesForType) {
                var minVal = helpers.min(valuesForType);
                var maxVal = helpers.max(valuesForType);
                me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
            });
        } else {
            helpers.each(datasets, function (dataset, datasetIndex) {
                var meta = chart.getDatasetMeta(datasetIndex);
                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                    helpers.each(dataset.data, function (rawValue, index) {
                        var value = +me.getRightValue(rawValue);
                        if (isNaN(value) || meta.data[index].hidden) {
                            return;
                        }
                        if (me.min === null) {
                            me.min = value;
                        } else if (value < me.min) {
                            me.min = value;
                        }
                        if (me.max === null) {
                            me.max = value;
                        } else if (value > me.max) {
                            me.max = value;
                        }
                        if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
                            me.minNotZero = value;
                        }
                    });
                }
            });
        }
        me.min = getValueOrDefault(tickOpts.min, me.min);
        me.max = getValueOrDefault(tickOpts.max, me.max);
        if (me.min === me.max) {
            if (me.min !== 0 && me.min !== null) {
                me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
                me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
            } else {
                me.min = 1;
                me.max = 10;
            }
        }
    },
    buildTicks: function () {
        var me = this;
        var opts = me.options;
        var tickOpts = opts.ticks;
        var generationOptions = {
            min: tickOpts.min,
            max: tickOpts.max
        };
        var ticks = me.ticks = Chart.Ticks.generators.logarithmic(generationOptions, me);
        if (!me.isHorizontal()) {
            ticks.reverse();
        }
        me.max = helpers.max(ticks);
        me.min = helpers.min(ticks);
        if (tickOpts.reverse) {
            ticks.reverse();
            me.start = me.max;
            me.end = me.min;
        } else {
            me.start = me.min;
            me.end = me.max;
        }
    },
    convertTicksToLabels: function () {
        this.tickValues = this.ticks.slice();
        Chart.Scale.prototype.convertTicksToLabels.call(this);
    },
    getLabelForIndex: function (index, datasetIndex) {
        return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
    },
    getPixelForTick: function (index) {
        return this.getPixelForValue(this.tickValues[index]);
    },
    getPixelForValue: function (value) {
        var me = this;
        var innerDimension;
        var pixel;
        var start = me.start;
        var newVal = +me.getRightValue(value);
        var range;
        var opts = me.options;
        var tickOpts = opts.ticks;
        if (me.isHorizontal()) {
            range = helpers.log10(me.end) - helpers.log10(start);
            if (newVal === 0) {
                pixel = me.left;
            } else {
                innerDimension = me.width;
                pixel = me.left + innerDimension / range * (helpers.log10(newVal) - helpers.log10(start));
            }
        } else {
            innerDimension = me.height;
            if (start === 0 && !tickOpts.reverse) {
                range = helpers.log10(me.end) - helpers.log10(me.minNotZero);
                if (newVal === start) {
                    pixel = me.bottom;
                } else if (newVal === me.minNotZero) {
                    pixel = me.bottom - innerDimension * 0.02;
                } else {
                    pixel = me.bottom - innerDimension * 0.02 - innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero));
                }
            } else if (me.end === 0 && tickOpts.reverse) {
                range = helpers.log10(me.start) - helpers.log10(me.minNotZero);
                if (newVal === me.end) {
                    pixel = me.top;
                } else if (newVal === me.minNotZero) {
                    pixel = me.top + innerDimension * 0.02;
                } else {
                    pixel = me.top + innerDimension * 0.02 + innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero));
                }
            } else {
                range = helpers.log10(me.end) - helpers.log10(start);
                innerDimension = me.height;
                pixel = me.bottom - innerDimension / range * (helpers.log10(newVal) - helpers.log10(start));
            }
        }
        return pixel;
    },
    getValueForPixel: function (pixel) {
        var me = this;
        var range = helpers.log10(me.end) - helpers.log10(me.start);
        var value, innerDimension;
        if (me.isHorizontal()) {
            innerDimension = me.width;
            value = me.start * Math.pow(10, (pixel - me.left) * range / innerDimension);
        } else {
            innerDimension = me.height;
            value = Math.pow(10, (me.bottom - pixel) * range / innerDimension) / me.start;
        }
        return value;
    }
});
Chart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    var defaultConfig = {
        position: 'left',
        ticks: {
            callback: Chart.Ticks.formatters.logarithmic
        }
    };
    var LogarithmicScale = Chart.Scale.extend({
        determineDataLimits: function () {
            var me = this;
            var opts = me.options;
            var tickOpts = opts.ticks;
            var chart = me.chart;
            var data = chart.data;
            var datasets = data.datasets;
            var getValueOrDefault = helpers.getValueOrDefault;
            var isHorizontal = me.isHorizontal();
            function IDMatches(meta) {
                return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
            }
            me.min = null;
            me.max = null;
            me.minNotZero = null;
            var hasStacks = opts.stacked;
            if (hasStacks === undefined) {
                helpers.each(datasets, function (dataset, datasetIndex) {
                    if (hasStacks) {
                        return;
                    }
                    var meta = chart.getDatasetMeta(datasetIndex);
                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                        hasStacks = true;
                    }
                });
            }
            if (opts.stacked || hasStacks) {
                var valuesPerStack = {};
                helpers.each(datasets, function (dataset, datasetIndex) {
                    var meta = chart.getDatasetMeta(datasetIndex);
                    var key = [
                        meta.type,
                        opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '',
                        meta.stack
                    ].join('.');
                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                        if (valuesPerStack[key] === undefined) {
                            valuesPerStack[key] = [];
                        }
                        helpers.each(dataset.data, function (rawValue, index) {
                            var values = valuesPerStack[key];
                            var value = +me.getRightValue(rawValue);
                            if (isNaN(value) || meta.data[index].hidden) {
                                return;
                            }
                            values[index] = values[index] || 0;
                            if (opts.relativePoints) {
                                values[index] = 100;
                            } else {
                                values[index] += value;
                            }
                        });
                    }
                });
                helpers.each(valuesPerStack, function (valuesForType) {
                    var minVal = helpers.min(valuesForType);
                    var maxVal = helpers.max(valuesForType);
                    me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                    me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
                });
            } else {
                helpers.each(datasets, function (dataset, datasetIndex) {
                    var meta = chart.getDatasetMeta(datasetIndex);
                    if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                        helpers.each(dataset.data, function (rawValue, index) {
                            var value = +me.getRightValue(rawValue);
                            if (isNaN(value) || meta.data[index].hidden) {
                                return;
                            }
                            if (me.min === null) {
                                me.min = value;
                            } else if (value < me.min) {
                                me.min = value;
                            }
                            if (me.max === null) {
                                me.max = value;
                            } else if (value > me.max) {
                                me.max = value;
                            }
                            if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
                                me.minNotZero = value;
                            }
                        });
                    }
                });
            }
            me.min = getValueOrDefault(tickOpts.min, me.min);
            me.max = getValueOrDefault(tickOpts.max, me.max);
            if (me.min === me.max) {
                if (me.min !== 0 && me.min !== null) {
                    me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
                    me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
                } else {
                    me.min = 1;
                    me.max = 10;
                }
            }
        },
        buildTicks: function () {
            var me = this;
            var opts = me.options;
            var tickOpts = opts.ticks;
            var generationOptions = {
                min: tickOpts.min,
                max: tickOpts.max
            };
            var ticks = me.ticks = Chart.Ticks.generators.logarithmic(generationOptions, me);
            if (!me.isHorizontal()) {
                ticks.reverse();
            }
            me.max = helpers.max(ticks);
            me.min = helpers.min(ticks);
            if (tickOpts.reverse) {
                ticks.reverse();
                me.start = me.max;
                me.end = me.min;
            } else {
                me.start = me.min;
                me.end = me.max;
            }
        },
        convertTicksToLabels: function () {
            this.tickValues = this.ticks.slice();
            Chart.Scale.prototype.convertTicksToLabels.call(this);
        },
        getLabelForIndex: function (index, datasetIndex) {
            return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        getPixelForTick: function (index) {
            return this.getPixelForValue(this.tickValues[index]);
        },
        getPixelForValue: function (value) {
            var me = this;
            var innerDimension;
            var pixel;
            var start = me.start;
            var newVal = +me.getRightValue(value);
            var range;
            var opts = me.options;
            var tickOpts = opts.ticks;
            if (me.isHorizontal()) {
                range = helpers.log10(me.end) - helpers.log10(start);
                if (newVal === 0) {
                    pixel = me.left;
                } else {
                    innerDimension = me.width;
                    pixel = me.left + innerDimension / range * (helpers.log10(newVal) - helpers.log10(start));
                }
            } else {
                innerDimension = me.height;
                if (start === 0 && !tickOpts.reverse) {
                    range = helpers.log10(me.end) - helpers.log10(me.minNotZero);
                    if (newVal === start) {
                        pixel = me.bottom;
                    } else if (newVal === me.minNotZero) {
                        pixel = me.bottom - innerDimension * 0.02;
                    } else {
                        pixel = me.bottom - innerDimension * 0.02 - innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero));
                    }
                } else if (me.end === 0 && tickOpts.reverse) {
                    range = helpers.log10(me.start) - helpers.log10(me.minNotZero);
                    if (newVal === me.end) {
                        pixel = me.top;
                    } else if (newVal === me.minNotZero) {
                        pixel = me.top + innerDimension * 0.02;
                    } else {
                        pixel = me.top + innerDimension * 0.02 + innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero));
                    }
                } else {
                    range = helpers.log10(me.end) - helpers.log10(start);
                    innerDimension = me.height;
                    pixel = me.bottom - innerDimension / range * (helpers.log10(newVal) - helpers.log10(start));
                }
            }
            return pixel;
        },
        getValueForPixel: function (pixel) {
            var me = this;
            var range = helpers.log10(me.end) - helpers.log10(me.start);
            var value, innerDimension;
            if (me.isHorizontal()) {
                innerDimension = me.width;
                value = me.start * Math.pow(10, (pixel - me.left) * range / innerDimension);
            } else {
                innerDimension = me.height;
                value = Math.pow(10, (me.bottom - pixel) * range / innerDimension) / me.start;
            }
            return value;
        }
    });
    Chart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);
};}, $__.fs.J$__v7918151485_1479_51),
            $__.os.oid45 = {}
        ],
        47: [
            ($__.fs.J$__v7918151485_1531_52 = function J$__v7918151485_1531(require, module, exports) {
'use strict';
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    (module, $__.os.oid204).exports = ($__.fs.J$__v7918151485_1529_817 = function J$__v7918151485_1529(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, helpers, globalDefaults, defaultConfig, getValueCount, getPointLabelFontOptions, measureLabelSize, determineLimits, fitWithPointLabels, fit, getTextAlignForAngle, fillText, adjustPointPositionForLabelHeight, drawPointLabels, drawRadiusLine, numberOrZero, LinearRadialScale;
getValueCount = function getValueCount(scale) {
    return !scale.options.lineArc ? scale.chart.data.labels.length : 0;
};
getPointLabelFontOptions = function getPointLabelFontOptions(scale) {
    var pointLabelOptions = scale.options.pointLabels;
    var fontSize = helpers.getValueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
    var fontStyle = helpers.getValueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
    var fontFamily = helpers.getValueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
    var font = helpers.fontString(fontSize, fontStyle, fontFamily);
    return {
        size: fontSize,
        style: fontStyle,
        family: fontFamily,
        font: font
    };
};
measureLabelSize = function measureLabelSize(ctx, fontSize, label) {
    if (helpers.isArray(label)) {
        return {
            w: helpers.longestText(ctx, ctx.font, label),
            h: label.length * fontSize + (label.length - 1) * 1.5 * fontSize
        };
    }
    return {
        w: ctx.measureText(label).width,
        h: fontSize
    };
};
determineLimits = function determineLimits(angle, pos, size, min, max) {
    if (angle === min || angle === max) {
        return {
            start: pos - size / 2,
            end: pos + size / 2
        };
    } else if (angle < min || angle > max) {
        return {
            start: pos - size - 5,
            end: pos
        };
    }
    return {
        start: pos,
        end: pos + size + 5
    };
};
fitWithPointLabels = function fitWithPointLabels(scale) {
    var plFont = getPointLabelFontOptions(scale);
    var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
    var furthestLimits = {
        l: scale.width,
        r: 0,
        t: scale.height,
        b: 0
    };
    var furthestAngles = {};
    var i;
    var textSize;
    var pointPosition;
    scale.ctx.font = plFont.font;
    scale._pointLabelSizes = [];
    var valueCount = getValueCount(scale);
    for (i = 0; i < valueCount; i++) {
        pointPosition = scale.getPointPosition(i, largestPossibleRadius);
        textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');
        scale._pointLabelSizes[i] = textSize;
        var angleRadians = scale.getIndexAngle(i);
        var angle = helpers.toDegrees(angleRadians) % 360;
        var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
        var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
        if (hLimits.start < furthestLimits.l) {
            furthestLimits.l = hLimits.start;
            furthestAngles.l = angleRadians;
        }
        if (hLimits.end > furthestLimits.r) {
            furthestLimits.r = hLimits.end;
            furthestAngles.r = angleRadians;
        }
        if (vLimits.start < furthestLimits.t) {
            furthestLimits.t = vLimits.start;
            furthestAngles.t = angleRadians;
        }
        if (vLimits.end > furthestLimits.b) {
            furthestLimits.b = vLimits.end;
            furthestAngles.b = angleRadians;
        }
    }
    scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);
};
fit = function fit(scale) {
    var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
    scale.drawingArea = Math.round(largestPossibleRadius);
    scale.setCenterPoint(0, 0, 0, 0);
};
getTextAlignForAngle = function getTextAlignForAngle(angle) {
    if (angle === 0 || angle === 180) {
        return 'center';
    } else if (angle < 180) {
        return 'left';
    }
    return 'right';
};
fillText = function fillText(ctx, text, position, fontSize) {
    if (helpers.isArray(text)) {
        var y = position.y;
        var spacing = 1.5 * fontSize;
        for (var i = 0; i < text.length; ++i) {
            ctx.fillText(text[i], position.x, y);
            y += spacing;
        }
    } else {
        ctx.fillText(text, position.x, position.y);
    }
};
adjustPointPositionForLabelHeight = function adjustPointPositionForLabelHeight(angle, textSize, position) {
    if (angle === 90 || angle === 270) {
        position.y -= textSize.h / 2;
    } else if (angle > 270 || angle < 90) {
        position.y -= textSize.h;
    }
};
drawPointLabels = function drawPointLabels(scale) {
    var ctx = scale.ctx;
    var getValueOrDefault = helpers.getValueOrDefault;
    var opts = scale.options;
    var angleLineOpts = opts.angleLines;
    var pointLabelOpts = opts.pointLabels;
    ctx.lineWidth = angleLineOpts.lineWidth;
    ctx.strokeStyle = angleLineOpts.color;
    var outerDistance = scale.getDistanceFromCenterForValue(opts.reverse ? scale.min : scale.max);
    var plFont = getPointLabelFontOptions(scale);
    ctx.textBaseline = 'top';
    for (var i = getValueCount(scale) - 1; i >= 0; i--) {
        if (angleLineOpts.display) {
            var outerPosition = scale.getPointPosition(i, outerDistance);
            ctx.beginPath();
            ctx.moveTo(scale.xCenter, scale.yCenter);
            ctx.lineTo(outerPosition.x, outerPosition.y);
            ctx.stroke();
            ctx.closePath();
        }
        var pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);
        var pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);
        ctx.font = plFont.font;
        ctx.fillStyle = pointLabelFontColor;
        var angleRadians = scale.getIndexAngle(i);
        var angle = helpers.toDegrees(angleRadians);
        ctx.textAlign = getTextAlignForAngle(angle);
        adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
        fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);
    }
};
drawRadiusLine = function drawRadiusLine(scale, gridLineOpts, radius, index) {
    var ctx = scale.ctx;
    ctx.strokeStyle = helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1);
    ctx.lineWidth = helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);
    if (scale.options.lineArc) {
        ctx.beginPath();
        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
        ctx.closePath();
        ctx.stroke();
    } else {
        var valueCount = getValueCount(scale);
        if (valueCount === 0) {
            return;
        }
        ctx.beginPath();
        var pointPosition = scale.getPointPosition(0, radius);
        ctx.moveTo(pointPosition.x, pointPosition.y);
        for (var i = 1; i < valueCount; i++) {
            pointPosition = scale.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
        }
        ctx.closePath();
        ctx.stroke();
    }
};
numberOrZero = function numberOrZero(param) {
    return helpers.isNumber(param) ? param : 0;
};
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    getValueCount = ($__.fs.getValueCount_818 = function getValueCount(scale) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return !scale.options.lineArc ? scale.chart.data.labels.length : 0;});
    getPointLabelFontOptions = ($__.fs.getPointLabelFontOptions_819 = function getPointLabelFontOptions(scale) {
var vvv_return, vvv_switch, pointLabelOptions, fontSize, fontStyle, fontFamily, font;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
pointLabelOptions = scale.options.pointLabels;
fontSize = helpers.getValueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
fontStyle = helpers.getValueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
fontFamily = helpers.getValueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
font = helpers.fontString(fontSize, fontStyle, fontFamily);
return {
    size: fontSize,
    style: fontStyle,
    family: fontFamily,
    font: font
};});
    measureLabelSize = ($__.fs.measureLabelSize_820 = function measureLabelSize(ctx, fontSize, label) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ctx = arguments[0], fontSize = arguments[1], label = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(label)) {
    return {
        w: helpers.longestText(ctx, ctx.font, label),
        h: label.length * fontSize + (label.length - 1) * 1.5 * fontSize
    };
}
return {
    w: ctx.measureText(label).width,
    h: fontSize
};});
    determineLimits = ($__.fs.determineLimits_821 = function determineLimits(angle, pos, size, min, max) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
angle = arguments[0], pos = arguments[1], size = arguments[2], min = arguments[3], max = arguments[4];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (angle === min || angle === max) {
    return {
        start: pos - size / 2,
        end: pos + size / 2
    };
} else if (angle < min || angle > max) {
    return {
        start: pos - size - 5,
        end: pos
    };
}
return {
    start: pos,
    end: pos + size + 5
};});
    fitWithPointLabels = ($__.fs.fitWithPointLabels_822 = function fitWithPointLabels(scale) {
var vvv_return, vvv_switch, plFont, largestPossibleRadius, furthestLimits, furthestAngles, i, textSize, pointPosition, valueCount, angleRadians, angle, hLimits, vLimits;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
plFont = getPointLabelFontOptions(scale);
largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
furthestLimits = {
    l: scale.width,
    r: 0,
    t: scale.height,
    b: 0
};
furthestAngles = {};
scale.ctx.font = plFont.font;
scale._pointLabelSizes = [];
valueCount = getValueCount(scale);
for (i = 0; i < valueCount; i++) {
    pointPosition = scale.getPointPosition(i, largestPossibleRadius);
    textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');
    scale._pointLabelSizes[i] = textSize;
    angleRadians = scale.getIndexAngle(i);
    angle = helpers.toDegrees(angleRadians) % 360;
    hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
    if (hLimits.start < furthestLimits.l) {
        furthestLimits.l = hLimits.start;
        furthestAngles.l = angleRadians;
    }
    if (hLimits.end > furthestLimits.r) {
        furthestLimits.r = hLimits.end;
        furthestAngles.r = angleRadians;
    }
    if (vLimits.start < furthestLimits.t) {
        furthestLimits.t = vLimits.start;
        furthestAngles.t = angleRadians;
    }
    if (vLimits.end > furthestLimits.b) {
        furthestLimits.b = vLimits.end;
        furthestAngles.b = angleRadians;
    }
}
scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);});
    fit = ($__.fs.fit_823 = function fit(scale) {
var vvv_return, vvv_switch, largestPossibleRadius;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
scale.drawingArea = Math.round(largestPossibleRadius);
scale.setCenterPoint(0, 0, 0, 0);});
    getTextAlignForAngle = ($__.fs.getTextAlignForAngle_824 = function getTextAlignForAngle(angle) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
angle = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (angle === 0 || angle === 180) {
    return 'center';
} else if (angle < 180) {
    return 'left';
}
return 'right';});
    fillText = ($__.fs.fillText_825 = function fillText(ctx, text, position, fontSize) {
var vvv_return, vvv_switch, y, spacing;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
ctx = arguments[0], text = arguments[1], position = arguments[2], fontSize = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (helpers.isArray(text)) {
    y = position.y;
    spacing = 1.5 * fontSize;
    for (var i = 0; i < text.length; ++i) {
        ctx.fillText(text[i], position.x, y);
        y += spacing;
    }
} else {
    ctx.fillText(text, position.x, position.y);
}});
    adjustPointPositionForLabelHeight = ($__.fs.adjustPointPositionForLabelHeight_826 = function adjustPointPositionForLabelHeight(angle, textSize, position) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
angle = arguments[0], textSize = arguments[1], position = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (angle === 90 || angle === 270) {
    position.y -= textSize.h / 2;
} else if (angle > 270 || angle < 90) {
    position.y -= textSize.h;
}});
    drawPointLabels = ($__.fs.drawPointLabels_827 = function drawPointLabels(scale) {
var vvv_return, vvv_switch, ctx, getValueOrDefault, opts, angleLineOpts, pointLabelOpts, outerDistance, plFont, outerPosition, pointLabelPosition, pointLabelFontColor, angleRadians, angle;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ctx = scale.ctx;
getValueOrDefault = helpers.getValueOrDefault;
opts = scale.options;
angleLineOpts = opts.angleLines;
pointLabelOpts = opts.pointLabels;
ctx.lineWidth = angleLineOpts.lineWidth;
ctx.strokeStyle = angleLineOpts.color;
outerDistance = scale.getDistanceFromCenterForValue(opts.reverse ? scale.min : scale.max);
plFont = getPointLabelFontOptions(scale);
ctx.textBaseline = 'top';
for (var i = getValueCount(scale) - 1; i >= 0; i--) {
    if (angleLineOpts.display) {
        outerPosition = scale.getPointPosition(i, outerDistance);
        ctx.beginPath();
        ctx.moveTo(scale.xCenter, scale.yCenter);
        ctx.lineTo(outerPosition.x, outerPosition.y);
        ctx.stroke();
        ctx.closePath();
    }
    pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);
    pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);
    ctx.font = plFont.font;
    ctx.fillStyle = pointLabelFontColor;
    angleRadians = scale.getIndexAngle(i);
    angle = helpers.toDegrees(angleRadians);
    ctx.textAlign = getTextAlignForAngle(angle);
    adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
    fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);
}});
    drawRadiusLine = ($__.fs.drawRadiusLine_828 = function drawRadiusLine(scale, gridLineOpts, radius, index) {
var vvv_return, vvv_switch, ctx, valueCount, pointPosition;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
scale = arguments[0], gridLineOpts = arguments[1], radius = arguments[2], index = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
ctx = scale.ctx;
ctx.strokeStyle = helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1);
ctx.lineWidth = helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);
if (scale.options.lineArc) {
    ctx.beginPath();
    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
    ctx.closePath();
    ctx.stroke();
} else {
    valueCount = getValueCount(scale);
    if (valueCount === 0) {
        return;
    }
    ctx.beginPath();
    pointPosition = scale.getPointPosition(0, radius);
    ctx.moveTo(pointPosition.x, pointPosition.y);
    for (var i = 1; i < valueCount; i++) {
        pointPosition = scale.getPointPosition(i, radius);
        ctx.lineTo(pointPosition.x, pointPosition.y);
    }
    ctx.closePath();
    ctx.stroke();
}});
    numberOrZero = ($__.fs.numberOrZero_829 = function numberOrZero(param) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
param = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return helpers.isNumber(param) ? param : 0;});
    helpers = (Chart.helpers, $__.os.oid88);
    globalDefaults = (((Chart.defaults, $__.os.oid57), $__.os.oid57).global, $__.os.oid56);
    defaultConfig = $__.os.oid208 = {
        'display': true,
        'animate': true,
        'lineArc': false,
        'position': 'chartArea',
        'angleLines': $__.os.oid205 = {
            'display': true,
            'color': 'rgba(0, 0, 0, 0.1)',
            'lineWidth': 1
        },
        'ticks': $__.os.oid206 = {
            'showLabelBackdrop': true,
            'backdropColor': 'rgba(255,255,255,0.75)',
            'backdropPaddingY': 2,
            'backdropPaddingX': 2,
            'callback': TAJS_restrictToType(((((Chart.Ticks, $__.os.oid136), $__.os.oid136).formatters, $__.os.oid135), $__.os.oid135).linear, 'function')
        },
        'pointLabels': $__.os.oid207 = {
            'fontSize': 10,
            'callback': ($__.fs.J$__v7918151485_1481_830 = function J$__v7918151485_1481(label) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
label = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return label;}, $__.fs.J$__v7918151485_1481_830_559 = $__.fs.J$__v7918151485_1481_830, $__.fs.J$__v7918151485_1481_830)
        }
    };
    LinearRadialScale = (vvv_tmp0 = TAJS_restrictToType(Chart.LinearScaleBase, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid209 = {
        'setDimensions': ($__.fs.J$__v7918151485_1495_831 = function J$__v7918151485_1495() {
var vvv_return, vvv_switch, me, opts, tickOpts, minSize, tickFontSize;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me.options;
tickOpts = opts.ticks;
me.width = me.maxWidth;
me.height = me.maxHeight;
me.xCenter = Math.round(me.width / 2);
me.yCenter = Math.round(me.height / 2);
minSize = helpers.min([
    me.height,
    me.width
]);
tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
me.drawingArea = opts.display ? minSize / 2 - (tickFontSize / 2 + tickOpts.backdropPaddingY) : minSize / 2;}, $__.fs.J$__v7918151485_1495_831_514 = $__.fs.J$__v7918151485_1495_831, $__.fs.J$__v7918151485_1495_831),
        'determineDataLimits': ($__.fs.J$__v7918151485_1501_832 = function J$__v7918151485_1501() {
var vvv_return, vvv_switch, me, chart, min, max;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
chart = me.chart;
min = Number.POSITIVE_INFINITY;
max = Number.NEGATIVE_INFINITY;
helpers.each(chart.data.datasets, function (dataset, datasetIndex) {
    if (chart.isDatasetVisible(datasetIndex)) {
        var meta = chart.getDatasetMeta(datasetIndex);
        helpers.each(dataset.data, function (rawValue, index) {
            var value = +me.getRightValue(rawValue);
            if (isNaN(value) || meta.data[index].hidden) {
                return;
            }
            min = Math.min(value, min);
            max = Math.max(value, max);
        });
    }
});
me.min = min === Number.POSITIVE_INFINITY ? 0 : min;
me.max = max === Number.NEGATIVE_INFINITY ? 0 : max;
me.handleTickRangeOptions();}, $__.fs.J$__v7918151485_1501_832_516 = $__.fs.J$__v7918151485_1501_832, $__.fs.J$__v7918151485_1501_832),
        'getTickLimit': ($__.fs.J$__v7918151485_1503_833 = function J$__v7918151485_1503() {
var vvv_return, vvv_switch, tickOpts, tickFontSize;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
tickOpts = this.options.ticks;
tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));}, $__.fs.J$__v7918151485_1503_833_518 = $__.fs.J$__v7918151485_1503_833, $__.fs.J$__v7918151485_1503_833),
        'convertTicksToLabels': ($__.fs.J$__v7918151485_1505_834 = function J$__v7918151485_1505() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);
me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);}, $__.fs.J$__v7918151485_1505_834_520 = $__.fs.J$__v7918151485_1505_834, $__.fs.J$__v7918151485_1505_834),
        'getLabelForIndex': ($__.fs.J$__v7918151485_1507_835 = function J$__v7918151485_1507(index, datasetIndex) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], datasetIndex = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);}, $__.fs.J$__v7918151485_1507_835_522 = $__.fs.J$__v7918151485_1507_835, $__.fs.J$__v7918151485_1507_835),
        'fit': ($__.fs.J$__v7918151485_1509_836 = function J$__v7918151485_1509() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (this.options.lineArc) {
    fit(this);
} else {
    fitWithPointLabels(this);
}}, $__.fs.J$__v7918151485_1509_836_524 = $__.fs.J$__v7918151485_1509_836, $__.fs.J$__v7918151485_1509_836),
        'setReductions': ($__.fs.J$__v7918151485_1511_837 = function J$__v7918151485_1511(largestPossibleRadius, furthestLimits, furthestAngles) {
var vvv_return, vvv_switch, me, radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
largestPossibleRadius = arguments[0], furthestLimits = arguments[1], furthestAngles = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
radiusReductionLeft = numberOrZero(radiusReductionLeft);
radiusReductionRight = numberOrZero(radiusReductionRight);
radiusReductionTop = numberOrZero(radiusReductionTop);
radiusReductionBottom = numberOrZero(radiusReductionBottom);
me.drawingArea = Math.min(Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);}, $__.fs.J$__v7918151485_1511_837_526 = $__.fs.J$__v7918151485_1511_837, $__.fs.J$__v7918151485_1511_837),
        'setCenterPoint': ($__.fs.J$__v7918151485_1513_838 = function J$__v7918151485_1513(leftMovement, rightMovement, topMovement, bottomMovement) {
var vvv_return, vvv_switch, me, maxRight, maxLeft, maxTop, maxBottom;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
leftMovement = arguments[0], rightMovement = arguments[1], topMovement = arguments[2], bottomMovement = arguments[3];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
maxRight = me.width - rightMovement - me.drawingArea;
maxLeft = leftMovement + me.drawingArea;
maxTop = topMovement + me.drawingArea;
maxBottom = me.height - bottomMovement - me.drawingArea;
me.xCenter = Math.round((maxLeft + maxRight) / 2 + me.left);
me.yCenter = Math.round((maxTop + maxBottom) / 2 + me.top);}, $__.fs.J$__v7918151485_1513_838_528 = $__.fs.J$__v7918151485_1513_838, $__.fs.J$__v7918151485_1513_838),
        'getIndexAngle': ($__.fs.J$__v7918151485_1515_839 = function J$__v7918151485_1515(index) {
var vvv_return, vvv_switch, angleMultiplier, startAngle, startAngleRadians;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
angleMultiplier = Math.PI * 2 / getValueCount(this);
startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;
startAngleRadians = startAngle * Math.PI * 2 / 360;
return index * angleMultiplier + startAngleRadians;}, $__.fs.J$__v7918151485_1515_839_530 = $__.fs.J$__v7918151485_1515_839, $__.fs.J$__v7918151485_1515_839),
        'getDistanceFromCenterForValue': ($__.fs.J$__v7918151485_1517_840 = function J$__v7918151485_1517(value) {
var vvv_return, vvv_switch, me, scalingFactor;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (value === null) {
    return 0;
}
scalingFactor = me.drawingArea / (me.max - me.min);
if (me.options.reverse) {
    return (me.max - value) * scalingFactor;
}
return (value - me.min) * scalingFactor;}, $__.fs.J$__v7918151485_1517_840_532 = $__.fs.J$__v7918151485_1517_840, $__.fs.J$__v7918151485_1517_840),
        'getPointPosition': ($__.fs.J$__v7918151485_1519_841 = function J$__v7918151485_1519(index, distanceFromCenter) {
var vvv_return, vvv_switch, me, thisAngle;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], distanceFromCenter = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
thisAngle = me.getIndexAngle(index) - Math.PI / 2;
return {
    x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
    y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
};}, $__.fs.J$__v7918151485_1519_841_534 = $__.fs.J$__v7918151485_1519_841, $__.fs.J$__v7918151485_1519_841),
        'getPointPositionForValue': ($__.fs.J$__v7918151485_1521_842 = function J$__v7918151485_1521(index, value) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], value = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));}, $__.fs.J$__v7918151485_1521_842_536 = $__.fs.J$__v7918151485_1521_842, $__.fs.J$__v7918151485_1521_842),
        'getBasePosition': ($__.fs.J$__v7918151485_1523_843 = function J$__v7918151485_1523() {
var vvv_return, vvv_switch, me, min, max;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
min = me.min;
max = me.max;
return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);}, $__.fs.J$__v7918151485_1523_843_538 = $__.fs.J$__v7918151485_1523_843, $__.fs.J$__v7918151485_1523_843),
        'draw': ($__.fs.J$__v7918151485_1527_844 = function J$__v7918151485_1527() {
var vvv_return, vvv_switch, me, opts, gridLineOpts, tickOpts, getValueOrDefault, ctx, tickFontSize, tickFontStyle, tickFontFamily, tickLabelFont;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
opts = me.options;
gridLineOpts = opts.gridLines;
tickOpts = opts.ticks;
getValueOrDefault = helpers.getValueOrDefault;
if (opts.display) {
    ctx = me.ctx;
    tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
    tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
    tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
    tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
    helpers.each(me.ticks, function (label, index) {
        if (index > 0 || opts.reverse) {
            var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
            var yHeight = me.yCenter - yCenterOffset;
            if (gridLineOpts.display && index !== 0) {
                drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
            }
            if (tickOpts.display) {
                var tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
                ctx.font = tickLabelFont;
                if (tickOpts.showLabelBackdrop) {
                    var labelWidth = ctx.measureText(label).width;
                    ctx.fillStyle = tickOpts.backdropColor;
                    ctx.fillRect(me.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX, yHeight - tickFontSize / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFontSize + tickOpts.backdropPaddingY * 2);
                }
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillStyle = tickFontColor;
                ctx.fillText(label, me.xCenter, yHeight);
            }
        }
    });
    if (!opts.lineArc) {
        drawPointLabels(me);
    }
}}, $__.fs.J$__v7918151485_1527_844_540 = $__.fs.J$__v7918151485_1527_844, $__.fs.J$__v7918151485_1527_844)
    }, 14, true, $__.uid));
    vvv_tmp1 = (Chart.scaleService, $__.os.oid131), 'registerScaleType', $__.fs.J$__v7918151485_1146_592.call(vvv_tmp1, 'radialLinear', (LinearRadialScale, $__.fs.J$__v7918151485_722_845), defaultConfig, 3, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
globalDefaults = Chart.defaults.global;
defaultConfig = {
    display: true,
    animate: true,
    lineArc: false,
    position: 'chartArea',
    angleLines: {
        display: true,
        color: 'rgba(0, 0, 0, 0.1)',
        lineWidth: 1
    },
    ticks: {
        showLabelBackdrop: true,
        backdropColor: 'rgba(255,255,255,0.75)',
        backdropPaddingY: 2,
        backdropPaddingX: 2,
        callback: Chart.Ticks.formatters.linear
    },
    pointLabels: {
        fontSize: 10,
        callback: function (label) {
            return label;
        }
    }
};
LinearRadialScale = Chart.LinearScaleBase.extend({
    setDimensions: function () {
        var me = this;
        var opts = me.options;
        var tickOpts = opts.ticks;
        me.width = me.maxWidth;
        me.height = me.maxHeight;
        me.xCenter = Math.round(me.width / 2);
        me.yCenter = Math.round(me.height / 2);
        var minSize = helpers.min([
            me.height,
            me.width
        ]);
        var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
        me.drawingArea = opts.display ? minSize / 2 - (tickFontSize / 2 + tickOpts.backdropPaddingY) : minSize / 2;
    },
    determineDataLimits: function () {
        var me = this;
        var chart = me.chart;
        var min = Number.POSITIVE_INFINITY;
        var max = Number.NEGATIVE_INFINITY;
        helpers.each(chart.data.datasets, function (dataset, datasetIndex) {
            if (chart.isDatasetVisible(datasetIndex)) {
                var meta = chart.getDatasetMeta(datasetIndex);
                helpers.each(dataset.data, function (rawValue, index) {
                    var value = +me.getRightValue(rawValue);
                    if (isNaN(value) || meta.data[index].hidden) {
                        return;
                    }
                    min = Math.min(value, min);
                    max = Math.max(value, max);
                });
            }
        });
        me.min = min === Number.POSITIVE_INFINITY ? 0 : min;
        me.max = max === Number.NEGATIVE_INFINITY ? 0 : max;
        me.handleTickRangeOptions();
    },
    getTickLimit: function () {
        var tickOpts = this.options.ticks;
        var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
        return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
    },
    convertTicksToLabels: function () {
        var me = this;
        Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);
        me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
    },
    getLabelForIndex: function (index, datasetIndex) {
        return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
    },
    fit: function () {
        if (this.options.lineArc) {
            fit(this);
        } else {
            fitWithPointLabels(this);
        }
    },
    setReductions: function (largestPossibleRadius, furthestLimits, furthestAngles) {
        var me = this;
        var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
        var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
        var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
        var radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
        radiusReductionLeft = numberOrZero(radiusReductionLeft);
        radiusReductionRight = numberOrZero(radiusReductionRight);
        radiusReductionTop = numberOrZero(radiusReductionTop);
        radiusReductionBottom = numberOrZero(radiusReductionBottom);
        me.drawingArea = Math.min(Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
        me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
    },
    setCenterPoint: function (leftMovement, rightMovement, topMovement, bottomMovement) {
        var me = this;
        var maxRight = me.width - rightMovement - me.drawingArea, maxLeft = leftMovement + me.drawingArea, maxTop = topMovement + me.drawingArea, maxBottom = me.height - bottomMovement - me.drawingArea;
        me.xCenter = Math.round((maxLeft + maxRight) / 2 + me.left);
        me.yCenter = Math.round((maxTop + maxBottom) / 2 + me.top);
    },
    getIndexAngle: function (index) {
        var angleMultiplier = Math.PI * 2 / getValueCount(this);
        var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;
        var startAngleRadians = startAngle * Math.PI * 2 / 360;
        return index * angleMultiplier + startAngleRadians;
    },
    getDistanceFromCenterForValue: function (value) {
        var me = this;
        if (value === null) {
            return 0;
        }
        var scalingFactor = me.drawingArea / (me.max - me.min);
        if (me.options.reverse) {
            return (me.max - value) * scalingFactor;
        }
        return (value - me.min) * scalingFactor;
    },
    getPointPosition: function (index, distanceFromCenter) {
        var me = this;
        var thisAngle = me.getIndexAngle(index) - Math.PI / 2;
        return {
            x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
            y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
        };
    },
    getPointPositionForValue: function (index, value) {
        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    },
    getBasePosition: function () {
        var me = this;
        var min = me.min;
        var max = me.max;
        return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);
    },
    draw: function () {
        var me = this;
        var opts = me.options;
        var gridLineOpts = opts.gridLines;
        var tickOpts = opts.ticks;
        var getValueOrDefault = helpers.getValueOrDefault;
        if (opts.display) {
            var ctx = me.ctx;
            var tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
            var tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
            var tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
            var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
            helpers.each(me.ticks, function (label, index) {
                if (index > 0 || opts.reverse) {
                    var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                    var yHeight = me.yCenter - yCenterOffset;
                    if (gridLineOpts.display && index !== 0) {
                        drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
                    }
                    if (tickOpts.display) {
                        var tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
                        ctx.font = tickLabelFont;
                        if (tickOpts.showLabelBackdrop) {
                            var labelWidth = ctx.measureText(label).width;
                            ctx.fillStyle = tickOpts.backdropColor;
                            ctx.fillRect(me.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX, yHeight - tickFontSize / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFontSize + tickOpts.backdropPaddingY * 2);
                        }
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'middle';
                        ctx.fillStyle = tickFontColor;
                        ctx.fillText(label, me.xCenter, yHeight);
                    }
                }
            });
            if (!opts.lineArc) {
                drawPointLabels(me);
            }
        }
    }
});
Chart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    var globalDefaults = Chart.defaults.global;
    var defaultConfig = {
        display: true,
        animate: true,
        lineArc: false,
        position: 'chartArea',
        angleLines: {
            display: true,
            color: 'rgba(0, 0, 0, 0.1)',
            lineWidth: 1
        },
        ticks: {
            showLabelBackdrop: true,
            backdropColor: 'rgba(255,255,255,0.75)',
            backdropPaddingY: 2,
            backdropPaddingX: 2,
            callback: Chart.Ticks.formatters.linear
        },
        pointLabels: {
            fontSize: 10,
            callback: function (label) {
                return label;
            }
        }
    };
    function getValueCount(scale) {
        return !scale.options.lineArc ? scale.chart.data.labels.length : 0;
    }
    function getPointLabelFontOptions(scale) {
        var pointLabelOptions = scale.options.pointLabels;
        var fontSize = helpers.getValueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
        var fontStyle = helpers.getValueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
        var fontFamily = helpers.getValueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
        var font = helpers.fontString(fontSize, fontStyle, fontFamily);
        return {
            size: fontSize,
            style: fontStyle,
            family: fontFamily,
            font: font
        };
    }
    function measureLabelSize(ctx, fontSize, label) {
        if (helpers.isArray(label)) {
            return {
                w: helpers.longestText(ctx, ctx.font, label),
                h: label.length * fontSize + (label.length - 1) * 1.5 * fontSize
            };
        }
        return {
            w: ctx.measureText(label).width,
            h: fontSize
        };
    }
    function determineLimits(angle, pos, size, min, max) {
        if (angle === min || angle === max) {
            return {
                start: pos - size / 2,
                end: pos + size / 2
            };
        } else if (angle < min || angle > max) {
            return {
                start: pos - size - 5,
                end: pos
            };
        }
        return {
            start: pos,
            end: pos + size + 5
        };
    }
    function fitWithPointLabels(scale) {
        var plFont = getPointLabelFontOptions(scale);
        var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
        var furthestLimits = {
            l: scale.width,
            r: 0,
            t: scale.height,
            b: 0
        };
        var furthestAngles = {};
        var i;
        var textSize;
        var pointPosition;
        scale.ctx.font = plFont.font;
        scale._pointLabelSizes = [];
        var valueCount = getValueCount(scale);
        for (i = 0; i < valueCount; i++) {
            pointPosition = scale.getPointPosition(i, largestPossibleRadius);
            textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');
            scale._pointLabelSizes[i] = textSize;
            var angleRadians = scale.getIndexAngle(i);
            var angle = helpers.toDegrees(angleRadians) % 360;
            var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
            var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
            if (hLimits.start < furthestLimits.l) {
                furthestLimits.l = hLimits.start;
                furthestAngles.l = angleRadians;
            }
            if (hLimits.end > furthestLimits.r) {
                furthestLimits.r = hLimits.end;
                furthestAngles.r = angleRadians;
            }
            if (vLimits.start < furthestLimits.t) {
                furthestLimits.t = vLimits.start;
                furthestAngles.t = angleRadians;
            }
            if (vLimits.end > furthestLimits.b) {
                furthestLimits.b = vLimits.end;
                furthestAngles.b = angleRadians;
            }
        }
        scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);
    }
    function fit(scale) {
        var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
        scale.drawingArea = Math.round(largestPossibleRadius);
        scale.setCenterPoint(0, 0, 0, 0);
    }
    function getTextAlignForAngle(angle) {
        if (angle === 0 || angle === 180) {
            return 'center';
        } else if (angle < 180) {
            return 'left';
        }
        return 'right';
    }
    function fillText(ctx, text, position, fontSize) {
        if (helpers.isArray(text)) {
            var y = position.y;
            var spacing = 1.5 * fontSize;
            for (var i = 0; i < text.length; ++i) {
                ctx.fillText(text[i], position.x, y);
                y += spacing;
            }
        } else {
            ctx.fillText(text, position.x, position.y);
        }
    }
    function adjustPointPositionForLabelHeight(angle, textSize, position) {
        if (angle === 90 || angle === 270) {
            position.y -= textSize.h / 2;
        } else if (angle > 270 || angle < 90) {
            position.y -= textSize.h;
        }
    }
    function drawPointLabels(scale) {
        var ctx = scale.ctx;
        var getValueOrDefault = helpers.getValueOrDefault;
        var opts = scale.options;
        var angleLineOpts = opts.angleLines;
        var pointLabelOpts = opts.pointLabels;
        ctx.lineWidth = angleLineOpts.lineWidth;
        ctx.strokeStyle = angleLineOpts.color;
        var outerDistance = scale.getDistanceFromCenterForValue(opts.reverse ? scale.min : scale.max);
        var plFont = getPointLabelFontOptions(scale);
        ctx.textBaseline = 'top';
        for (var i = getValueCount(scale) - 1; i >= 0; i--) {
            if (angleLineOpts.display) {
                var outerPosition = scale.getPointPosition(i, outerDistance);
                ctx.beginPath();
                ctx.moveTo(scale.xCenter, scale.yCenter);
                ctx.lineTo(outerPosition.x, outerPosition.y);
                ctx.stroke();
                ctx.closePath();
            }
            var pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);
            var pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);
            ctx.font = plFont.font;
            ctx.fillStyle = pointLabelFontColor;
            var angleRadians = scale.getIndexAngle(i);
            var angle = helpers.toDegrees(angleRadians);
            ctx.textAlign = getTextAlignForAngle(angle);
            adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
            fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);
        }
    }
    function drawRadiusLine(scale, gridLineOpts, radius, index) {
        var ctx = scale.ctx;
        ctx.strokeStyle = helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1);
        ctx.lineWidth = helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);
        if (scale.options.lineArc) {
            ctx.beginPath();
            ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
            ctx.closePath();
            ctx.stroke();
        } else {
            var valueCount = getValueCount(scale);
            if (valueCount === 0) {
                return;
            }
            ctx.beginPath();
            var pointPosition = scale.getPointPosition(0, radius);
            ctx.moveTo(pointPosition.x, pointPosition.y);
            for (var i = 1; i < valueCount; i++) {
                pointPosition = scale.getPointPosition(i, radius);
                ctx.lineTo(pointPosition.x, pointPosition.y);
            }
            ctx.closePath();
            ctx.stroke();
        }
    }
    function numberOrZero(param) {
        return helpers.isNumber(param) ? param : 0;
    }
    var LinearRadialScale = Chart.LinearScaleBase.extend({
        setDimensions: function () {
            var me = this;
            var opts = me.options;
            var tickOpts = opts.ticks;
            me.width = me.maxWidth;
            me.height = me.maxHeight;
            me.xCenter = Math.round(me.width / 2);
            me.yCenter = Math.round(me.height / 2);
            var minSize = helpers.min([
                me.height,
                me.width
            ]);
            var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
            me.drawingArea = opts.display ? minSize / 2 - (tickFontSize / 2 + tickOpts.backdropPaddingY) : minSize / 2;
        },
        determineDataLimits: function () {
            var me = this;
            var chart = me.chart;
            var min = Number.POSITIVE_INFINITY;
            var max = Number.NEGATIVE_INFINITY;
            helpers.each(chart.data.datasets, function (dataset, datasetIndex) {
                if (chart.isDatasetVisible(datasetIndex)) {
                    var meta = chart.getDatasetMeta(datasetIndex);
                    helpers.each(dataset.data, function (rawValue, index) {
                        var value = +me.getRightValue(rawValue);
                        if (isNaN(value) || meta.data[index].hidden) {
                            return;
                        }
                        min = Math.min(value, min);
                        max = Math.max(value, max);
                    });
                }
            });
            me.min = min === Number.POSITIVE_INFINITY ? 0 : min;
            me.max = max === Number.NEGATIVE_INFINITY ? 0 : max;
            me.handleTickRangeOptions();
        },
        getTickLimit: function () {
            var tickOpts = this.options.ticks;
            var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
            return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
        },
        convertTicksToLabels: function () {
            var me = this;
            Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);
            me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
        },
        getLabelForIndex: function (index, datasetIndex) {
            return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
        },
        fit: function () {
            if (this.options.lineArc) {
                fit(this);
            } else {
                fitWithPointLabels(this);
            }
        },
        setReductions: function (largestPossibleRadius, furthestLimits, furthestAngles) {
            var me = this;
            var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
            var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
            var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
            var radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
            radiusReductionLeft = numberOrZero(radiusReductionLeft);
            radiusReductionRight = numberOrZero(radiusReductionRight);
            radiusReductionTop = numberOrZero(radiusReductionTop);
            radiusReductionBottom = numberOrZero(radiusReductionBottom);
            me.drawingArea = Math.min(Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
            me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
        },
        setCenterPoint: function (leftMovement, rightMovement, topMovement, bottomMovement) {
            var me = this;
            var maxRight = me.width - rightMovement - me.drawingArea, maxLeft = leftMovement + me.drawingArea, maxTop = topMovement + me.drawingArea, maxBottom = me.height - bottomMovement - me.drawingArea;
            me.xCenter = Math.round((maxLeft + maxRight) / 2 + me.left);
            me.yCenter = Math.round((maxTop + maxBottom) / 2 + me.top);
        },
        getIndexAngle: function (index) {
            var angleMultiplier = Math.PI * 2 / getValueCount(this);
            var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;
            var startAngleRadians = startAngle * Math.PI * 2 / 360;
            return index * angleMultiplier + startAngleRadians;
        },
        getDistanceFromCenterForValue: function (value) {
            var me = this;
            if (value === null) {
                return 0;
            }
            var scalingFactor = me.drawingArea / (me.max - me.min);
            if (me.options.reverse) {
                return (me.max - value) * scalingFactor;
            }
            return (value - me.min) * scalingFactor;
        },
        getPointPosition: function (index, distanceFromCenter) {
            var me = this;
            var thisAngle = me.getIndexAngle(index) - Math.PI / 2;
            return {
                x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
                y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
            };
        },
        getPointPositionForValue: function (index, value) {
            return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
        },
        getBasePosition: function () {
            var me = this;
            var min = me.min;
            var max = me.max;
            return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);
        },
        draw: function () {
            var me = this;
            var opts = me.options;
            var gridLineOpts = opts.gridLines;
            var tickOpts = opts.ticks;
            var getValueOrDefault = helpers.getValueOrDefault;
            if (opts.display) {
                var ctx = me.ctx;
                var tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
                var tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
                var tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
                var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
                helpers.each(me.ticks, function (label, index) {
                    if (index > 0 || opts.reverse) {
                        var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                        var yHeight = me.yCenter - yCenterOffset;
                        if (gridLineOpts.display && index !== 0) {
                            drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
                        }
                        if (tickOpts.display) {
                            var tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
                            ctx.font = tickLabelFont;
                            if (tickOpts.showLabelBackdrop) {
                                var labelWidth = ctx.measureText(label).width;
                                ctx.fillStyle = tickOpts.backdropColor;
                                ctx.fillRect(me.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX, yHeight - tickFontSize / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFontSize + tickOpts.backdropPaddingY * 2);
                            }
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'middle';
                            ctx.fillStyle = tickFontColor;
                            ctx.fillText(label, me.xCenter, yHeight);
                        }
                    }
                });
                if (!opts.lineArc) {
                    drawPointLabels(me);
                }
            }
        }
    });
    Chart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);
};}, $__.fs.J$__v7918151485_1531_52),
            $__.os.oid46 = {}
        ],
        48: [
            ($__.fs.J$__v7918151485_1575_53 = function J$__v7918151485_1575(require, module, exports) {
'use strict';
var vvv_return, vvv_switch, moment;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
require = arguments[0], module = arguments[1], exports = arguments[2];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    moment = (require, $__.fs.J$__v7918151485_3_852)(1, 0, true, $__.uid);
    moment = (typeof moment === 'function', TAJS_restrictToType(window.moment, 'undefined'));
    (module, $__.os.oid215).exports = ($__.fs.J$__v7918151485_1573_854 = function J$__v7918151485_1573(Chart) {
var vvv_return, vvv_switch, vvv_tmp0, vvv_tmp1, helpers, time, defaultConfig, TimeScale;
if (arguments[arguments.length - 1] === $__.uid) {
    TAJS_invariant(typeof arguments[arguments.length - 1] === 'symbol');
    TAJS_invariant($__.refs.pop.call(arguments) === $__.uid);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
Chart = arguments[0];
switch (vvv_switch) {
case 0:
    TAJS_invariant(typeof vvv_switch === 'number');
    TAJS_invariant(vvv_switch === 0);
    helpers = (Chart.helpers, $__.os.oid88);
    time = $__.os.oid227 = {
        'units': [
            $__.os.oid218 = {
                'name': 'millisecond',
                'steps': [
                    1,
                    2,
                    5,
                    10,
                    20,
                    50,
                    100,
                    250,
                    500
                ]
            },
            $__.os.oid219 = {
                'name': 'second',
                'steps': [
                    1,
                    2,
                    5,
                    10,
                    30
                ]
            },
            $__.os.oid220 = {
                'name': 'minute',
                'steps': [
                    1,
                    2,
                    5,
                    10,
                    30
                ]
            },
            $__.os.oid221 = {
                'name': 'hour',
                'steps': [
                    1,
                    2,
                    3,
                    6,
                    12
                ]
            },
            $__.os.oid222 = {
                'name': 'day',
                'steps': [
                    1,
                    2,
                    5
                ]
            },
            $__.os.oid223 = {
                'name': 'week',
                'maxStep': 4
            },
            $__.os.oid224 = {
                'name': 'month',
                'maxStep': 3
            },
            $__.os.oid225 = {
                'name': 'quarter',
                'maxStep': 4
            },
            $__.os.oid226 = {
                'name': 'year',
                'maxStep': false
            }
        ]
    };
    defaultConfig = $__.os.oid231 = {
        'position': 'bottom',
        'time': $__.os.oid229 = {
            'parser': false,
            'format': false,
            'unit': false,
            'round': false,
            'displayFormat': false,
            'isoWeekday': false,
            'minUnit': 'millisecond',
            'displayFormats': $__.os.oid228 = {
                'millisecond': 'h:mm:ss.SSS a',
                'second': 'h:mm:ss a',
                'minute': 'h:mm:ss a',
                'hour': 'MMM D, hA',
                'day': 'll',
                'week': 'll',
                'month': 'MMM YYYY',
                'quarter': '[Q]Q - YYYY',
                'year': 'YYYY'
            }
        },
        'ticks': $__.os.oid230 = {
            'autoSkip': false
        }
    };
    TimeScale = (vvv_tmp0 = TAJS_restrictToType(Chart.Scale, 'function'), 'extend', $__.fs.J$__v7918151485_726_390.call(vvv_tmp0, $__.os.oid232 = {
        'initialize': ($__.fs.J$__v7918151485_1533_855 = function J$__v7918151485_1533() {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (!moment) {
    throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
}
Chart.Scale.prototype.initialize.call(this);}, $__.fs.J$__v7918151485_1533_855_567 = $__.fs.J$__v7918151485_1533_855, $__.fs.J$__v7918151485_1533_855),
        'getLabelMoment': ($__.fs.J$__v7918151485_1535_856 = function J$__v7918151485_1535(datasetIndex, index) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
datasetIndex = arguments[0], index = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
if (datasetIndex === null || index === null) {
    return null;
}
if (typeof this.labelMoments[datasetIndex] !== 'undefined') {
    return this.labelMoments[datasetIndex][index];
}
return null;}, $__.fs.J$__v7918151485_1535_856_569 = $__.fs.J$__v7918151485_1535_856, $__.fs.J$__v7918151485_1535_856),
        'getLabelDiff': ($__.fs.J$__v7918151485_1537_857 = function J$__v7918151485_1537(datasetIndex, index) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
datasetIndex = arguments[0], index = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (datasetIndex === null || index === null) {
    return null;
}
if (me.labelDiffs === undefined) {
    me.buildLabelDiffs();
}
if (typeof me.labelDiffs[datasetIndex] !== 'undefined') {
    return me.labelDiffs[datasetIndex][index];
}
return null;}, $__.fs.J$__v7918151485_1537_857_571 = $__.fs.J$__v7918151485_1537_857, $__.fs.J$__v7918151485_1537_857),
        'getMomentStartOf': ($__.fs.J$__v7918151485_1539_858 = function J$__v7918151485_1539(tick) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tick = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {
    return tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);
}
return tick.clone().startOf(me.tickUnit);}, $__.fs.J$__v7918151485_1539_858_573 = $__.fs.J$__v7918151485_1539_858, $__.fs.J$__v7918151485_1539_858),
        'determineDataLimits': ($__.fs.J$__v7918151485_1547_859 = function J$__v7918151485_1547() {
var vvv_return, vvv_switch, me, scaleLabelMoments;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.labelMoments = [];
scaleLabelMoments = [];
if (me.chart.data.labels && me.chart.data.labels.length > 0) {
    helpers.each(me.chart.data.labels, function (label) {
        var labelMoment = me.parseTime(label);
        if (labelMoment.isValid()) {
            if (me.options.time.round) {
                labelMoment.startOf(me.options.time.round);
            }
            scaleLabelMoments.push(labelMoment);
        }
    }, me);
    me.firstTick = moment.min.call(me, scaleLabelMoments);
    me.lastTick = moment.max.call(me, scaleLabelMoments);
} else {
    me.firstTick = null;
    me.lastTick = null;
}
helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
    var momentsForDataset = [];
    var datasetVisible = me.chart.isDatasetVisible(datasetIndex);
    if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
        helpers.each(dataset.data, function (value) {
            var labelMoment = me.parseTime(me.getRightValue(value));
            if (labelMoment.isValid()) {
                if (me.options.time.round) {
                    labelMoment.startOf(me.options.time.round);
                }
                momentsForDataset.push(labelMoment);
                if (datasetVisible) {
                    me.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;
                    me.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;
                }
            }
        }, me);
    } else {
        momentsForDataset = scaleLabelMoments;
    }
    me.labelMoments.push(momentsForDataset);
}, me);
if (me.options.time.min) {
    me.firstTick = me.parseTime(me.options.time.min);
}
if (me.options.time.max) {
    me.lastTick = me.parseTime(me.options.time.max);
}
me.firstTick = (me.firstTick || moment()).clone();
me.lastTick = (me.lastTick || moment()).clone();}, $__.fs.J$__v7918151485_1547_859_575 = $__.fs.J$__v7918151485_1547_859, $__.fs.J$__v7918151485_1547_859),
        'buildLabelDiffs': ($__.fs.J$__v7918151485_1555_860 = function J$__v7918151485_1555() {
var vvv_return, vvv_switch, me, scaleLabelDiffs;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.labelDiffs = [];
scaleLabelDiffs = [];
if (me.chart.data.labels && me.chart.data.labels.length > 0) {
    helpers.each(me.chart.data.labels, function (label) {
        var labelMoment = me.parseTime(label);
        if (labelMoment.isValid()) {
            if (me.options.time.round) {
                labelMoment.startOf(me.options.time.round);
            }
            scaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
        }
    }, me);
}
helpers.each(me.chart.data.datasets, function (dataset) {
    var diffsForDataset = [];
    if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
        helpers.each(dataset.data, function (value) {
            var labelMoment = me.parseTime(me.getRightValue(value));
            if (labelMoment.isValid()) {
                if (me.options.time.round) {
                    labelMoment.startOf(me.options.time.round);
                }
                diffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
            }
        }, me);
    } else {
        diffsForDataset = scaleLabelDiffs;
    }
    me.labelDiffs.push(diffsForDataset);
}, me);}, $__.fs.J$__v7918151485_1555_860_577 = $__.fs.J$__v7918151485_1555_860, $__.fs.J$__v7918151485_1555_860),
        'buildTicks': ($__.fs.J$__v7918151485_1557_861 = function J$__v7918151485_1557() {
var vvv_return, vvv_switch, me, tickFontSize, tickFontStyle, tickFontFamily, tickLabelFont, innerWidth, tempFirstLabel, tickLabelWidth, cosRotation, sinRotation, labelCapacity, unitDefinitionIndex, unitDefinition, leadingUnitBuffer, trailingUnitBuffer, roundedStart, roundedEnd, delta, newTick, diff;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.ctx.save();
tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
me.ctx.font = tickLabelFont;
me.ticks = [];
me.unitScale = 1;
me.scaleSizeInUnits = 0;
if (me.options.time.unit) {
    me.tickUnit = me.options.time.unit || 'day';
    me.displayFormat = me.options.time.displayFormats[me.tickUnit];
    me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
    me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);
} else {
    innerWidth = me.isHorizontal() ? me.width : me.height;
    tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);
    tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;
    cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));
    sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));
    tickLabelWidth = tickLabelWidth * cosRotation + tickFontSize * sinRotation;
    labelCapacity = innerWidth / tickLabelWidth;
    me.tickUnit = me.options.time.minUnit;
    me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
    me.displayFormat = me.options.time.displayFormats[me.tickUnit];
    unitDefinitionIndex = 0;
    unitDefinition = time.units[unitDefinitionIndex];
    while (unitDefinitionIndex < time.units.length) {
        me.unitScale = 1;
        if (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {
            for (var idx = 0; idx < unitDefinition.steps.length; ++idx) {
                if (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {
                    me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);
                    break;
                }
            }
            break;
        } else if (unitDefinition.maxStep === false || Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep) {
            me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));
            break;
        } else {
            ++unitDefinitionIndex;
            unitDefinition = time.units[unitDefinitionIndex];
            me.tickUnit = unitDefinition.name;
            leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);
            trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);
            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;
            me.displayFormat = me.options.time.displayFormats[unitDefinition.name];
        }
    }
}
if (!me.options.time.min) {
    me.firstTick = me.getMomentStartOf(me.firstTick);
    roundedStart = me.firstTick;
} else {
    roundedStart = me.getMomentStartOf(me.firstTick);
}
if (!me.options.time.max) {
    roundedEnd = me.getMomentStartOf(me.lastTick);
    delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);
    if (delta < 0) {
        me.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));
    } else if (delta >= 0) {
        me.lastTick = roundedEnd;
    }
    me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
}
if (me.options.time.displayFormat) {
    me.displayFormat = me.options.time.displayFormat;
}
me.ticks.push(me.firstTick.clone());
for (var i = me.unitScale; i <= me.scaleSizeInUnits; i += me.unitScale) {
    newTick = roundedStart.clone().add(i, me.tickUnit);
    if (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {
        break;
    }
    me.ticks.push(newTick);
}
diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);
if (diff !== 0 || me.scaleSizeInUnits === 0) {
    if (me.options.time.max) {
        me.ticks.push(me.lastTick.clone());
        me.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);
    } else {
        me.ticks.push(me.lastTick.clone());
        me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
    }
}
me.ctx.restore();
me.labelDiffs = undefined;}, $__.fs.J$__v7918151485_1557_861_579 = $__.fs.J$__v7918151485_1557_861, $__.fs.J$__v7918151485_1557_861),
        'getLabelForIndex': ($__.fs.J$__v7918151485_1559_862 = function J$__v7918151485_1559(index, datasetIndex) {
var vvv_return, vvv_switch, me, label, value;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0], datasetIndex = arguments[1];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';
value = me.chart.data.datasets[datasetIndex].data[index];
if (value !== null && typeof value === 'object') {
    label = me.getRightValue(value);
}
if (me.options.time.tooltipFormat) {
    label = me.parseTime(label).format(me.options.time.tooltipFormat);
}
return label;}, $__.fs.J$__v7918151485_1559_862_581 = $__.fs.J$__v7918151485_1559_862, $__.fs.J$__v7918151485_1559_862),
        'tickFormatFunction': ($__.fs.J$__v7918151485_1561_863 = function J$__v7918151485_1561(tick, index, ticks) {
var vvv_return, vvv_switch, formattedTick, tickOpts, callback;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
tick = arguments[0], index = arguments[1], ticks = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
formattedTick = tick.format(this.displayFormat);
tickOpts = this.options.ticks;
callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);
if (callback) {
    return callback(formattedTick, index, ticks);
}
return formattedTick;}, $__.fs.J$__v7918151485_1561_863_583 = $__.fs.J$__v7918151485_1561_863, $__.fs.J$__v7918151485_1561_863),
        'convertTicksToLabels': ($__.fs.J$__v7918151485_1563_864 = function J$__v7918151485_1563() {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
me.tickMoments = me.ticks;
me.ticks = me.ticks.map(me.tickFormatFunction, me);}, $__.fs.J$__v7918151485_1563_864_585 = $__.fs.J$__v7918151485_1563_864, $__.fs.J$__v7918151485_1563_864),
        'getPixelForValue': ($__.fs.J$__v7918151485_1565_865 = function J$__v7918151485_1565(value, index, datasetIndex) {
var vvv_return, vvv_switch, me, offset, decimal, valueOffset, heightOffset;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
value = arguments[0], index = arguments[1], datasetIndex = arguments[2];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
offset = null;
if (index !== undefined && datasetIndex !== undefined) {
    offset = me.getLabelDiff(datasetIndex, index);
}
if (offset === null) {
    if (!value || !value.isValid) {
        value = me.parseTime(me.getRightValue(value));
    }
    if (value && value.isValid && value.isValid()) {
        offset = value.diff(me.firstTick, me.tickUnit, true);
    }
}
if (offset !== null) {
    decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;
    if (me.isHorizontal()) {
        valueOffset = me.width * decimal;
        return me.left + Math.round(valueOffset);
    }
    heightOffset = me.height * decimal;
    return me.top + Math.round(heightOffset);
}}, $__.fs.J$__v7918151485_1565_865_587 = $__.fs.J$__v7918151485_1565_865, $__.fs.J$__v7918151485_1565_865),
        'getPixelForTick': ($__.fs.J$__v7918151485_1567_866 = function J$__v7918151485_1567(index) {
var vvv_return, vvv_switch;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
index = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return this.getPixelForValue(this.tickMoments[index], null, null);}, $__.fs.J$__v7918151485_1567_866_589 = $__.fs.J$__v7918151485_1567_866, $__.fs.J$__v7918151485_1567_866),
        'getValueForPixel': ($__.fs.J$__v7918151485_1569_867 = function J$__v7918151485_1569(pixel) {
var vvv_return, vvv_switch, me, innerDimension, offset;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
pixel = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
innerDimension = me.isHorizontal() ? me.width : me.height;
offset = (pixel - (me.isHorizontal() ? me.left : me.top)) / innerDimension;
offset *= me.scaleSizeInUnits;
return me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');}, $__.fs.J$__v7918151485_1569_867_591 = $__.fs.J$__v7918151485_1569_867, $__.fs.J$__v7918151485_1569_867),
        'parseTime': ($__.fs.J$__v7918151485_1571_868 = function J$__v7918151485_1571(label) {
var vvv_return, vvv_switch, me;
if (arguments[arguments.length - 1] === $__.uid) {
    $__.refs.pop.call(arguments);
    vvv_return = $__.refs.pop.call(arguments);
    vvv_switch = $__.refs.pop.call(arguments);
}
label = arguments[0];
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
me = this;
if (typeof me.options.time.parser === 'string') {
    return moment(label, me.options.time.parser);
}
if (typeof me.options.time.parser === 'function') {
    return me.options.time.parser(label);
}
if (typeof label.getMonth === 'function' || typeof label === 'number') {
    return moment(label);
}
if (label.isValid && label.isValid()) {
    return label;
}
if (typeof me.options.time.format !== 'string' && me.options.time.format.call) {
    console.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');
    return me.options.time.format(label);
}
return moment(label, me.options.time.format);}, $__.fs.J$__v7918151485_1571_868_593 = $__.fs.J$__v7918151485_1571_868, $__.fs.J$__v7918151485_1571_868)
    }, 15, true, $__.uid));
    vvv_tmp1 = (Chart.scaleService, $__.os.oid131), 'registerScaleType', $__.fs.J$__v7918151485_1146_592.call(vvv_tmp1, 'time', (TimeScale, $__.fs.J$__v7918151485_722_869), defaultConfig, 4, true, $__.uid);
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
helpers = Chart.helpers;
time = {
    units: [
        {
            name: 'millisecond',
            steps: [
                1,
                2,
                5,
                10,
                20,
                50,
                100,
                250,
                500
            ]
        },
        {
            name: 'second',
            steps: [
                1,
                2,
                5,
                10,
                30
            ]
        },
        {
            name: 'minute',
            steps: [
                1,
                2,
                5,
                10,
                30
            ]
        },
        {
            name: 'hour',
            steps: [
                1,
                2,
                3,
                6,
                12
            ]
        },
        {
            name: 'day',
            steps: [
                1,
                2,
                5
            ]
        },
        {
            name: 'week',
            maxStep: 4
        },
        {
            name: 'month',
            maxStep: 3
        },
        {
            name: 'quarter',
            maxStep: 4
        },
        {
            name: 'year',
            maxStep: false
        }
    ]
};
defaultConfig = {
    position: 'bottom',
    time: {
        parser: false,
        format: false,
        unit: false,
        round: false,
        displayFormat: false,
        isoWeekday: false,
        minUnit: 'millisecond',
        displayFormats: {
            millisecond: 'h:mm:ss.SSS a',
            second: 'h:mm:ss a',
            minute: 'h:mm:ss a',
            hour: 'MMM D, hA',
            day: 'll',
            week: 'll',
            month: 'MMM YYYY',
            quarter: '[Q]Q - YYYY',
            year: 'YYYY'
        }
    },
    ticks: {
        autoSkip: false
    }
};
TimeScale = Chart.Scale.extend({
    initialize: function () {
        if (!moment) {
            throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
        }
        Chart.Scale.prototype.initialize.call(this);
    },
    getLabelMoment: function (datasetIndex, index) {
        if (datasetIndex === null || index === null) {
            return null;
        }
        if (typeof this.labelMoments[datasetIndex] !== 'undefined') {
            return this.labelMoments[datasetIndex][index];
        }
        return null;
    },
    getLabelDiff: function (datasetIndex, index) {
        var me = this;
        if (datasetIndex === null || index === null) {
            return null;
        }
        if (me.labelDiffs === undefined) {
            me.buildLabelDiffs();
        }
        if (typeof me.labelDiffs[datasetIndex] !== 'undefined') {
            return me.labelDiffs[datasetIndex][index];
        }
        return null;
    },
    getMomentStartOf: function (tick) {
        var me = this;
        if (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {
            return tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);
        }
        return tick.clone().startOf(me.tickUnit);
    },
    determineDataLimits: function () {
        var me = this;
        me.labelMoments = [];
        var scaleLabelMoments = [];
        if (me.chart.data.labels && me.chart.data.labels.length > 0) {
            helpers.each(me.chart.data.labels, function (label) {
                var labelMoment = me.parseTime(label);
                if (labelMoment.isValid()) {
                    if (me.options.time.round) {
                        labelMoment.startOf(me.options.time.round);
                    }
                    scaleLabelMoments.push(labelMoment);
                }
            }, me);
            me.firstTick = moment.min.call(me, scaleLabelMoments);
            me.lastTick = moment.max.call(me, scaleLabelMoments);
        } else {
            me.firstTick = null;
            me.lastTick = null;
        }
        helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
            var momentsForDataset = [];
            var datasetVisible = me.chart.isDatasetVisible(datasetIndex);
            if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
                helpers.each(dataset.data, function (value) {
                    var labelMoment = me.parseTime(me.getRightValue(value));
                    if (labelMoment.isValid()) {
                        if (me.options.time.round) {
                            labelMoment.startOf(me.options.time.round);
                        }
                        momentsForDataset.push(labelMoment);
                        if (datasetVisible) {
                            me.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;
                            me.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;
                        }
                    }
                }, me);
            } else {
                momentsForDataset = scaleLabelMoments;
            }
            me.labelMoments.push(momentsForDataset);
        }, me);
        if (me.options.time.min) {
            me.firstTick = me.parseTime(me.options.time.min);
        }
        if (me.options.time.max) {
            me.lastTick = me.parseTime(me.options.time.max);
        }
        me.firstTick = (me.firstTick || moment()).clone();
        me.lastTick = (me.lastTick || moment()).clone();
    },
    buildLabelDiffs: function () {
        var me = this;
        me.labelDiffs = [];
        var scaleLabelDiffs = [];
        if (me.chart.data.labels && me.chart.data.labels.length > 0) {
            helpers.each(me.chart.data.labels, function (label) {
                var labelMoment = me.parseTime(label);
                if (labelMoment.isValid()) {
                    if (me.options.time.round) {
                        labelMoment.startOf(me.options.time.round);
                    }
                    scaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
                }
            }, me);
        }
        helpers.each(me.chart.data.datasets, function (dataset) {
            var diffsForDataset = [];
            if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
                helpers.each(dataset.data, function (value) {
                    var labelMoment = me.parseTime(me.getRightValue(value));
                    if (labelMoment.isValid()) {
                        if (me.options.time.round) {
                            labelMoment.startOf(me.options.time.round);
                        }
                        diffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
                    }
                }, me);
            } else {
                diffsForDataset = scaleLabelDiffs;
            }
            me.labelDiffs.push(diffsForDataset);
        }, me);
    },
    buildTicks: function () {
        var me = this;
        me.ctx.save();
        var tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
        var tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
        var tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
        var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
        me.ctx.font = tickLabelFont;
        me.ticks = [];
        me.unitScale = 1;
        me.scaleSizeInUnits = 0;
        if (me.options.time.unit) {
            me.tickUnit = me.options.time.unit || 'day';
            me.displayFormat = me.options.time.displayFormats[me.tickUnit];
            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
            me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);
        } else {
            var innerWidth = me.isHorizontal() ? me.width : me.height;
            var tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);
            var tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;
            var cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));
            var sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));
            tickLabelWidth = tickLabelWidth * cosRotation + tickFontSize * sinRotation;
            var labelCapacity = innerWidth / tickLabelWidth;
            me.tickUnit = me.options.time.minUnit;
            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
            me.displayFormat = me.options.time.displayFormats[me.tickUnit];
            var unitDefinitionIndex = 0;
            var unitDefinition = time.units[unitDefinitionIndex];
            while (unitDefinitionIndex < time.units.length) {
                me.unitScale = 1;
                if (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {
                    for (var idx = 0; idx < unitDefinition.steps.length; ++idx) {
                        if (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {
                            me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);
                            break;
                        }
                    }
                    break;
                } else if (unitDefinition.maxStep === false || Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep) {
                    me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));
                    break;
                } else {
                    ++unitDefinitionIndex;
                    unitDefinition = time.units[unitDefinitionIndex];
                    me.tickUnit = unitDefinition.name;
                    var leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);
                    var trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);
                    me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;
                    me.displayFormat = me.options.time.displayFormats[unitDefinition.name];
                }
            }
        }
        var roundedStart;
        if (!me.options.time.min) {
            me.firstTick = me.getMomentStartOf(me.firstTick);
            roundedStart = me.firstTick;
        } else {
            roundedStart = me.getMomentStartOf(me.firstTick);
        }
        if (!me.options.time.max) {
            var roundedEnd = me.getMomentStartOf(me.lastTick);
            var delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);
            if (delta < 0) {
                me.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));
            } else if (delta >= 0) {
                me.lastTick = roundedEnd;
            }
            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
        }
        if (me.options.time.displayFormat) {
            me.displayFormat = me.options.time.displayFormat;
        }
        me.ticks.push(me.firstTick.clone());
        for (var i = me.unitScale; i <= me.scaleSizeInUnits; i += me.unitScale) {
            var newTick = roundedStart.clone().add(i, me.tickUnit);
            if (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {
                break;
            }
            me.ticks.push(newTick);
        }
        var diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);
        if (diff !== 0 || me.scaleSizeInUnits === 0) {
            if (me.options.time.max) {
                me.ticks.push(me.lastTick.clone());
                me.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);
            } else {
                me.ticks.push(me.lastTick.clone());
                me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
            }
        }
        me.ctx.restore();
        me.labelDiffs = undefined;
    },
    getLabelForIndex: function (index, datasetIndex) {
        var me = this;
        var label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';
        var value = me.chart.data.datasets[datasetIndex].data[index];
        if (value !== null && typeof value === 'object') {
            label = me.getRightValue(value);
        }
        if (me.options.time.tooltipFormat) {
            label = me.parseTime(label).format(me.options.time.tooltipFormat);
        }
        return label;
    },
    tickFormatFunction: function (tick, index, ticks) {
        var formattedTick = tick.format(this.displayFormat);
        var tickOpts = this.options.ticks;
        var callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);
        if (callback) {
            return callback(formattedTick, index, ticks);
        }
        return formattedTick;
    },
    convertTicksToLabels: function () {
        var me = this;
        me.tickMoments = me.ticks;
        me.ticks = me.ticks.map(me.tickFormatFunction, me);
    },
    getPixelForValue: function (value, index, datasetIndex) {
        var me = this;
        var offset = null;
        if (index !== undefined && datasetIndex !== undefined) {
            offset = me.getLabelDiff(datasetIndex, index);
        }
        if (offset === null) {
            if (!value || !value.isValid) {
                value = me.parseTime(me.getRightValue(value));
            }
            if (value && value.isValid && value.isValid()) {
                offset = value.diff(me.firstTick, me.tickUnit, true);
            }
        }
        if (offset !== null) {
            var decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;
            if (me.isHorizontal()) {
                var valueOffset = me.width * decimal;
                return me.left + Math.round(valueOffset);
            }
            var heightOffset = me.height * decimal;
            return me.top + Math.round(heightOffset);
        }
    },
    getPixelForTick: function (index) {
        return this.getPixelForValue(this.tickMoments[index], null, null);
    },
    getValueForPixel: function (pixel) {
        var me = this;
        var innerDimension = me.isHorizontal() ? me.width : me.height;
        var offset = (pixel - (me.isHorizontal() ? me.left : me.top)) / innerDimension;
        offset *= me.scaleSizeInUnits;
        return me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');
    },
    parseTime: function (label) {
        var me = this;
        if (typeof me.options.time.parser === 'string') {
            return moment(label, me.options.time.parser);
        }
        if (typeof me.options.time.parser === 'function') {
            return me.options.time.parser(label);
        }
        if (typeof label.getMonth === 'function' || typeof label === 'number') {
            return moment(label);
        }
        if (label.isValid && label.isValid()) {
            return label;
        }
        if (typeof me.options.time.format !== 'string' && me.options.time.format.call) {
            console.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');
            return me.options.time.format(label);
        }
        return moment(label, me.options.time.format);
    }
});
Chart.scaleService.registerScaleType('time', TimeScale, defaultConfig);});
    return;
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
moment = require(1);
moment = typeof moment === 'function' ? moment : window.moment;
module.exports = function (Chart) {
    var helpers = Chart.helpers;
    var time = {
        units: [
            {
                name: 'millisecond',
                steps: [
                    1,
                    2,
                    5,
                    10,
                    20,
                    50,
                    100,
                    250,
                    500
                ]
            },
            {
                name: 'second',
                steps: [
                    1,
                    2,
                    5,
                    10,
                    30
                ]
            },
            {
                name: 'minute',
                steps: [
                    1,
                    2,
                    5,
                    10,
                    30
                ]
            },
            {
                name: 'hour',
                steps: [
                    1,
                    2,
                    3,
                    6,
                    12
                ]
            },
            {
                name: 'day',
                steps: [
                    1,
                    2,
                    5
                ]
            },
            {
                name: 'week',
                maxStep: 4
            },
            {
                name: 'month',
                maxStep: 3
            },
            {
                name: 'quarter',
                maxStep: 4
            },
            {
                name: 'year',
                maxStep: false
            }
        ]
    };
    var defaultConfig = {
        position: 'bottom',
        time: {
            parser: false,
            format: false,
            unit: false,
            round: false,
            displayFormat: false,
            isoWeekday: false,
            minUnit: 'millisecond',
            displayFormats: {
                millisecond: 'h:mm:ss.SSS a',
                second: 'h:mm:ss a',
                minute: 'h:mm:ss a',
                hour: 'MMM D, hA',
                day: 'll',
                week: 'll',
                month: 'MMM YYYY',
                quarter: '[Q]Q - YYYY',
                year: 'YYYY'
            }
        },
        ticks: {
            autoSkip: false
        }
    };
    var TimeScale = Chart.Scale.extend({
        initialize: function () {
            if (!moment) {
                throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
            }
            Chart.Scale.prototype.initialize.call(this);
        },
        getLabelMoment: function (datasetIndex, index) {
            if (datasetIndex === null || index === null) {
                return null;
            }
            if (typeof this.labelMoments[datasetIndex] !== 'undefined') {
                return this.labelMoments[datasetIndex][index];
            }
            return null;
        },
        getLabelDiff: function (datasetIndex, index) {
            var me = this;
            if (datasetIndex === null || index === null) {
                return null;
            }
            if (me.labelDiffs === undefined) {
                me.buildLabelDiffs();
            }
            if (typeof me.labelDiffs[datasetIndex] !== 'undefined') {
                return me.labelDiffs[datasetIndex][index];
            }
            return null;
        },
        getMomentStartOf: function (tick) {
            var me = this;
            if (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {
                return tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);
            }
            return tick.clone().startOf(me.tickUnit);
        },
        determineDataLimits: function () {
            var me = this;
            me.labelMoments = [];
            var scaleLabelMoments = [];
            if (me.chart.data.labels && me.chart.data.labels.length > 0) {
                helpers.each(me.chart.data.labels, function (label) {
                    var labelMoment = me.parseTime(label);
                    if (labelMoment.isValid()) {
                        if (me.options.time.round) {
                            labelMoment.startOf(me.options.time.round);
                        }
                        scaleLabelMoments.push(labelMoment);
                    }
                }, me);
                me.firstTick = moment.min.call(me, scaleLabelMoments);
                me.lastTick = moment.max.call(me, scaleLabelMoments);
            } else {
                me.firstTick = null;
                me.lastTick = null;
            }
            helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
                var momentsForDataset = [];
                var datasetVisible = me.chart.isDatasetVisible(datasetIndex);
                if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
                    helpers.each(dataset.data, function (value) {
                        var labelMoment = me.parseTime(me.getRightValue(value));
                        if (labelMoment.isValid()) {
                            if (me.options.time.round) {
                                labelMoment.startOf(me.options.time.round);
                            }
                            momentsForDataset.push(labelMoment);
                            if (datasetVisible) {
                                me.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;
                                me.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;
                            }
                        }
                    }, me);
                } else {
                    momentsForDataset = scaleLabelMoments;
                }
                me.labelMoments.push(momentsForDataset);
            }, me);
            if (me.options.time.min) {
                me.firstTick = me.parseTime(me.options.time.min);
            }
            if (me.options.time.max) {
                me.lastTick = me.parseTime(me.options.time.max);
            }
            me.firstTick = (me.firstTick || moment()).clone();
            me.lastTick = (me.lastTick || moment()).clone();
        },
        buildLabelDiffs: function () {
            var me = this;
            me.labelDiffs = [];
            var scaleLabelDiffs = [];
            if (me.chart.data.labels && me.chart.data.labels.length > 0) {
                helpers.each(me.chart.data.labels, function (label) {
                    var labelMoment = me.parseTime(label);
                    if (labelMoment.isValid()) {
                        if (me.options.time.round) {
                            labelMoment.startOf(me.options.time.round);
                        }
                        scaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
                    }
                }, me);
            }
            helpers.each(me.chart.data.datasets, function (dataset) {
                var diffsForDataset = [];
                if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
                    helpers.each(dataset.data, function (value) {
                        var labelMoment = me.parseTime(me.getRightValue(value));
                        if (labelMoment.isValid()) {
                            if (me.options.time.round) {
                                labelMoment.startOf(me.options.time.round);
                            }
                            diffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
                        }
                    }, me);
                } else {
                    diffsForDataset = scaleLabelDiffs;
                }
                me.labelDiffs.push(diffsForDataset);
            }, me);
        },
        buildTicks: function () {
            var me = this;
            me.ctx.save();
            var tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
            var tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
            var tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
            var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
            me.ctx.font = tickLabelFont;
            me.ticks = [];
            me.unitScale = 1;
            me.scaleSizeInUnits = 0;
            if (me.options.time.unit) {
                me.tickUnit = me.options.time.unit || 'day';
                me.displayFormat = me.options.time.displayFormats[me.tickUnit];
                me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
                me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);
            } else {
                var innerWidth = me.isHorizontal() ? me.width : me.height;
                var tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);
                var tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;
                var cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));
                var sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));
                tickLabelWidth = tickLabelWidth * cosRotation + tickFontSize * sinRotation;
                var labelCapacity = innerWidth / tickLabelWidth;
                me.tickUnit = me.options.time.minUnit;
                me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
                me.displayFormat = me.options.time.displayFormats[me.tickUnit];
                var unitDefinitionIndex = 0;
                var unitDefinition = time.units[unitDefinitionIndex];
                while (unitDefinitionIndex < time.units.length) {
                    me.unitScale = 1;
                    if (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {
                        for (var idx = 0; idx < unitDefinition.steps.length; ++idx) {
                            if (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {
                                me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);
                                break;
                            }
                        }
                        break;
                    } else if (unitDefinition.maxStep === false || Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep) {
                        me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));
                        break;
                    } else {
                        ++unitDefinitionIndex;
                        unitDefinition = time.units[unitDefinitionIndex];
                        me.tickUnit = unitDefinition.name;
                        var leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);
                        var trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);
                        me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;
                        me.displayFormat = me.options.time.displayFormats[unitDefinition.name];
                    }
                }
            }
            var roundedStart;
            if (!me.options.time.min) {
                me.firstTick = me.getMomentStartOf(me.firstTick);
                roundedStart = me.firstTick;
            } else {
                roundedStart = me.getMomentStartOf(me.firstTick);
            }
            if (!me.options.time.max) {
                var roundedEnd = me.getMomentStartOf(me.lastTick);
                var delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);
                if (delta < 0) {
                    me.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));
                } else if (delta >= 0) {
                    me.lastTick = roundedEnd;
                }
                me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
            }
            if (me.options.time.displayFormat) {
                me.displayFormat = me.options.time.displayFormat;
            }
            me.ticks.push(me.firstTick.clone());
            for (var i = me.unitScale; i <= me.scaleSizeInUnits; i += me.unitScale) {
                var newTick = roundedStart.clone().add(i, me.tickUnit);
                if (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {
                    break;
                }
                me.ticks.push(newTick);
            }
            var diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);
            if (diff !== 0 || me.scaleSizeInUnits === 0) {
                if (me.options.time.max) {
                    me.ticks.push(me.lastTick.clone());
                    me.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);
                } else {
                    me.ticks.push(me.lastTick.clone());
                    me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
                }
            }
            me.ctx.restore();
            me.labelDiffs = undefined;
        },
        getLabelForIndex: function (index, datasetIndex) {
            var me = this;
            var label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';
            var value = me.chart.data.datasets[datasetIndex].data[index];
            if (value !== null && typeof value === 'object') {
                label = me.getRightValue(value);
            }
            if (me.options.time.tooltipFormat) {
                label = me.parseTime(label).format(me.options.time.tooltipFormat);
            }
            return label;
        },
        tickFormatFunction: function (tick, index, ticks) {
            var formattedTick = tick.format(this.displayFormat);
            var tickOpts = this.options.ticks;
            var callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);
            if (callback) {
                return callback(formattedTick, index, ticks);
            }
            return formattedTick;
        },
        convertTicksToLabels: function () {
            var me = this;
            me.tickMoments = me.ticks;
            me.ticks = me.ticks.map(me.tickFormatFunction, me);
        },
        getPixelForValue: function (value, index, datasetIndex) {
            var me = this;
            var offset = null;
            if (index !== undefined && datasetIndex !== undefined) {
                offset = me.getLabelDiff(datasetIndex, index);
            }
            if (offset === null) {
                if (!value || !value.isValid) {
                    value = me.parseTime(me.getRightValue(value));
                }
                if (value && value.isValid && value.isValid()) {
                    offset = value.diff(me.firstTick, me.tickUnit, true);
                }
            }
            if (offset !== null) {
                var decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;
                if (me.isHorizontal()) {
                    var valueOffset = me.width * decimal;
                    return me.left + Math.round(valueOffset);
                }
                var heightOffset = me.height * decimal;
                return me.top + Math.round(heightOffset);
            }
        },
        getPixelForTick: function (index) {
            return this.getPixelForValue(this.tickMoments[index], null, null);
        },
        getValueForPixel: function (pixel) {
            var me = this;
            var innerDimension = me.isHorizontal() ? me.width : me.height;
            var offset = (pixel - (me.isHorizontal() ? me.left : me.top)) / innerDimension;
            offset *= me.scaleSizeInUnits;
            return me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');
        },
        parseTime: function (label) {
            var me = this;
            if (typeof me.options.time.parser === 'string') {
                return moment(label, me.options.time.parser);
            }
            if (typeof me.options.time.parser === 'function') {
                return me.options.time.parser(label);
            }
            if (typeof label.getMonth === 'function' || typeof label === 'number') {
                return moment(label);
            }
            if (label.isValid && label.isValid()) {
                return label;
            }
            if (typeof me.options.time.format !== 'string' && me.options.time.format.call) {
                console.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');
                return me.options.time.format(label);
            }
            return moment(label, me.options.time.format);
        }
    });
    Chart.scaleService.registerScaleType('time', TimeScale, defaultConfig);
};}, $__.fs.J$__v7918151485_1575_53),
            $__.os.oid47 = {
                '1': 1
            }
        ]
    }, $__.os.oid49 = {}, [7], 0, true, $__.uid), $__.fs.s_54)(7, 48, true, $__.uid);
}
if (vvv_return)
    return;
TAJS_dumpValue('Not ' + 'reachable');
return function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof require == 'function' && require;
                if (!u && a)
                    return a(o, !0);
                if (i)
                    return i(o, !0);
                var f = new Error('Cannot find module \'' + o + '\'');
                throw f.code = 'MODULE_NOT_FOUND', f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function (e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof require == 'function' && require;
    for (var o = 0; o < r.length; o++)
        s(r[o]);
    return s;
}({
    1: [
        function (require, module, exports) {
        },
        {}
    ],
    2: [
        function (require, module, exports) {
            var colorNames = require(6);
            module.exports = {
                getRgba: getRgba,
                getHsla: getHsla,
                getRgb: getRgb,
                getHsl: getHsl,
                getHwb: getHwb,
                getAlpha: getAlpha,
                hexString: hexString,
                rgbString: rgbString,
                rgbaString: rgbaString,
                percentString: percentString,
                percentaString: percentaString,
                hslString: hslString,
                hslaString: hslaString,
                hwbString: hwbString,
                keyword: keyword
            };
            function getRgba(string) {
                if (!string) {
                    return;
                }
                var abbr = /^#([a-fA-F0-9]{3})$/, hex = /^#([a-fA-F0-9]{6})$/, rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/, per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/, keyword = /(\w+)/;
                var rgb = [
                        0,
                        0,
                        0
                    ], a = 1, match = string.match(abbr);
                if (match) {
                    match = match[1];
                    for (var i = 0; i < rgb.length; i++) {
                        rgb[i] = parseInt(match[i] + match[i], 16);
                    }
                } else if (match = string.match(hex)) {
                    match = match[1];
                    for (var i = 0; i < rgb.length; i++) {
                        rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
                    }
                } else if (match = string.match(rgba)) {
                    for (var i = 0; i < rgb.length; i++) {
                        rgb[i] = parseInt(match[i + 1]);
                    }
                    a = parseFloat(match[4]);
                } else if (match = string.match(per)) {
                    for (var i = 0; i < rgb.length; i++) {
                        rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
                    }
                    a = parseFloat(match[4]);
                } else if (match = string.match(keyword)) {
                    if (match[1] == 'transparent') {
                        return [
                            0,
                            0,
                            0,
                            0
                        ];
                    }
                    rgb = colorNames[match[1]];
                    if (!rgb) {
                        return;
                    }
                }
                for (var i = 0; i < rgb.length; i++) {
                    rgb[i] = scale(rgb[i], 0, 255);
                }
                if (!a && a != 0) {
                    a = 1;
                } else {
                    a = scale(a, 0, 1);
                }
                rgb[3] = a;
                return rgb;
            }
            function getHsla(string) {
                if (!string) {
                    return;
                }
                var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
                var match = string.match(hsl);
                if (match) {
                    var alpha = parseFloat(match[4]);
                    var h = scale(parseInt(match[1]), 0, 360), s = scale(parseFloat(match[2]), 0, 100), l = scale(parseFloat(match[3]), 0, 100), a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
                    return [
                        h,
                        s,
                        l,
                        a
                    ];
                }
            }
            function getHwb(string) {
                if (!string) {
                    return;
                }
                var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
                var match = string.match(hwb);
                if (match) {
                    var alpha = parseFloat(match[4]);
                    var h = scale(parseInt(match[1]), 0, 360), w = scale(parseFloat(match[2]), 0, 100), b = scale(parseFloat(match[3]), 0, 100), a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
                    return [
                        h,
                        w,
                        b,
                        a
                    ];
                }
            }
            function getRgb(string) {
                var rgba = getRgba(string);
                return rgba && rgba.slice(0, 3);
            }
            function getHsl(string) {
                var hsla = getHsla(string);
                return hsla && hsla.slice(0, 3);
            }
            function getAlpha(string) {
                var vals = getRgba(string);
                if (vals) {
                    return vals[3];
                } else if (vals = getHsla(string)) {
                    return vals[3];
                } else if (vals = getHwb(string)) {
                    return vals[3];
                }
            }
            function hexString(rgb) {
                return '#' + hexDouble(rgb[0]) + hexDouble(rgb[1]) + hexDouble(rgb[2]);
            }
            function rgbString(rgba, alpha) {
                if (alpha < 1 || rgba[3] && rgba[3] < 1) {
                    return rgbaString(rgba, alpha);
                }
                return 'rgb(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ')';
            }
            function rgbaString(rgba, alpha) {
                if (alpha === undefined) {
                    alpha = rgba[3] !== undefined ? rgba[3] : 1;
                }
                return 'rgba(' + rgba[0] + ', ' + rgba[1] + ', ' + rgba[2] + ', ' + alpha + ')';
            }
            function percentString(rgba, alpha) {
                if (alpha < 1 || rgba[3] && rgba[3] < 1) {
                    return percentaString(rgba, alpha);
                }
                var r = Math.round(rgba[0] / 255 * 100), g = Math.round(rgba[1] / 255 * 100), b = Math.round(rgba[2] / 255 * 100);
                return 'rgb(' + r + '%, ' + g + '%, ' + b + '%)';
            }
            function percentaString(rgba, alpha) {
                var r = Math.round(rgba[0] / 255 * 100), g = Math.round(rgba[1] / 255 * 100), b = Math.round(rgba[2] / 255 * 100);
                return 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + (alpha || rgba[3] || 1) + ')';
            }
            function hslString(hsla, alpha) {
                if (alpha < 1 || hsla[3] && hsla[3] < 1) {
                    return hslaString(hsla, alpha);
                }
                return 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)';
            }
            function hslaString(hsla, alpha) {
                if (alpha === undefined) {
                    alpha = hsla[3] !== undefined ? hsla[3] : 1;
                }
                return 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + alpha + ')';
            }
            function hwbString(hwb, alpha) {
                if (alpha === undefined) {
                    alpha = hwb[3] !== undefined ? hwb[3] : 1;
                }
                return 'hwb(' + hwb[0] + ', ' + hwb[1] + '%, ' + hwb[2] + '%' + (alpha !== undefined && alpha !== 1 ? ', ' + alpha : '') + ')';
            }
            function keyword(rgb) {
                return reverseNames[rgb.slice(0, 3)];
            }
            function scale(num, min, max) {
                return Math.min(Math.max(min, num), max);
            }
            function hexDouble(num) {
                var str = num.toString(16).toUpperCase();
                return str.length < 2 ? '0' + str : str;
            }
            var reverseNames = {};
            for (var name in colorNames) {
                reverseNames[colorNames[name]] = name;
            }
        },
        {
            '6': 6
        }
    ],
    3: [
        function (require, module, exports) {
            var convert = require(5);
            var string = require(2);
            var Color = function (obj) {
                if (obj instanceof Color) {
                    return obj;
                }
                if (!(this instanceof Color)) {
                    return new Color(obj);
                }
                this.values = {
                    rgb: [
                        0,
                        0,
                        0
                    ],
                    hsl: [
                        0,
                        0,
                        0
                    ],
                    hsv: [
                        0,
                        0,
                        0
                    ],
                    hwb: [
                        0,
                        0,
                        0
                    ],
                    cmyk: [
                        0,
                        0,
                        0,
                        0
                    ],
                    alpha: 1
                };
                var vals;
                if (typeof obj === 'string') {
                    vals = string.getRgba(obj);
                    if (vals) {
                        this.setValues('rgb', vals);
                    } else if (vals = string.getHsla(obj)) {
                        this.setValues('hsl', vals);
                    } else if (vals = string.getHwb(obj)) {
                        this.setValues('hwb', vals);
                    } else {
                        throw new Error('Unable to parse color from string "' + obj + '"');
                    }
                } else if (typeof obj === 'object') {
                    vals = obj;
                    if (vals.r !== undefined || vals.red !== undefined) {
                        this.setValues('rgb', vals);
                    } else if (vals.l !== undefined || vals.lightness !== undefined) {
                        this.setValues('hsl', vals);
                    } else if (vals.v !== undefined || vals.value !== undefined) {
                        this.setValues('hsv', vals);
                    } else if (vals.w !== undefined || vals.whiteness !== undefined) {
                        this.setValues('hwb', vals);
                    } else if (vals.c !== undefined || vals.cyan !== undefined) {
                        this.setValues('cmyk', vals);
                    } else {
                        throw new Error('Unable to parse color from object ' + JSON.stringify(obj));
                    }
                }
            };
            Color.prototype = {
                rgb: function () {
                    return this.setSpace('rgb', arguments);
                },
                hsl: function () {
                    return this.setSpace('hsl', arguments);
                },
                hsv: function () {
                    return this.setSpace('hsv', arguments);
                },
                hwb: function () {
                    return this.setSpace('hwb', arguments);
                },
                cmyk: function () {
                    return this.setSpace('cmyk', arguments);
                },
                rgbArray: function () {
                    return this.values.rgb;
                },
                hslArray: function () {
                    return this.values.hsl;
                },
                hsvArray: function () {
                    return this.values.hsv;
                },
                hwbArray: function () {
                    var values = this.values;
                    if (values.alpha !== 1) {
                        return values.hwb.concat([values.alpha]);
                    }
                    return values.hwb;
                },
                cmykArray: function () {
                    return this.values.cmyk;
                },
                rgbaArray: function () {
                    var values = this.values;
                    return values.rgb.concat([values.alpha]);
                },
                hslaArray: function () {
                    var values = this.values;
                    return values.hsl.concat([values.alpha]);
                },
                alpha: function (val) {
                    if (val === undefined) {
                        return this.values.alpha;
                    }
                    this.setValues('alpha', val);
                    return this;
                },
                red: function (val) {
                    return this.setChannel('rgb', 0, val);
                },
                green: function (val) {
                    return this.setChannel('rgb', 1, val);
                },
                blue: function (val) {
                    return this.setChannel('rgb', 2, val);
                },
                hue: function (val) {
                    if (val) {
                        val %= 360;
                        val = val < 0 ? 360 + val : val;
                    }
                    return this.setChannel('hsl', 0, val);
                },
                saturation: function (val) {
                    return this.setChannel('hsl', 1, val);
                },
                lightness: function (val) {
                    return this.setChannel('hsl', 2, val);
                },
                saturationv: function (val) {
                    return this.setChannel('hsv', 1, val);
                },
                whiteness: function (val) {
                    return this.setChannel('hwb', 1, val);
                },
                blackness: function (val) {
                    return this.setChannel('hwb', 2, val);
                },
                value: function (val) {
                    return this.setChannel('hsv', 2, val);
                },
                cyan: function (val) {
                    return this.setChannel('cmyk', 0, val);
                },
                magenta: function (val) {
                    return this.setChannel('cmyk', 1, val);
                },
                yellow: function (val) {
                    return this.setChannel('cmyk', 2, val);
                },
                black: function (val) {
                    return this.setChannel('cmyk', 3, val);
                },
                hexString: function () {
                    return string.hexString(this.values.rgb);
                },
                rgbString: function () {
                    return string.rgbString(this.values.rgb, this.values.alpha);
                },
                rgbaString: function () {
                    return string.rgbaString(this.values.rgb, this.values.alpha);
                },
                percentString: function () {
                    return string.percentString(this.values.rgb, this.values.alpha);
                },
                hslString: function () {
                    return string.hslString(this.values.hsl, this.values.alpha);
                },
                hslaString: function () {
                    return string.hslaString(this.values.hsl, this.values.alpha);
                },
                hwbString: function () {
                    return string.hwbString(this.values.hwb, this.values.alpha);
                },
                keyword: function () {
                    return string.keyword(this.values.rgb, this.values.alpha);
                },
                rgbNumber: function () {
                    var rgb = this.values.rgb;
                    return rgb[0] << 16 | rgb[1] << 8 | rgb[2];
                },
                luminosity: function () {
                    var rgb = this.values.rgb;
                    var lum = [];
                    for (var i = 0; i < rgb.length; i++) {
                        var chan = rgb[i] / 255;
                        lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
                    }
                    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
                },
                contrast: function (color2) {
                    var lum1 = this.luminosity();
                    var lum2 = color2.luminosity();
                    if (lum1 > lum2) {
                        return (lum1 + 0.05) / (lum2 + 0.05);
                    }
                    return (lum2 + 0.05) / (lum1 + 0.05);
                },
                level: function (color2) {
                    var contrastRatio = this.contrast(color2);
                    if (contrastRatio >= 7.1) {
                        return 'AAA';
                    }
                    return contrastRatio >= 4.5 ? 'AA' : '';
                },
                dark: function () {
                    var rgb = this.values.rgb;
                    var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
                    return yiq < 128;
                },
                light: function () {
                    return !this.dark();
                },
                negate: function () {
                    var rgb = [];
                    for (var i = 0; i < 3; i++) {
                        rgb[i] = 255 - this.values.rgb[i];
                    }
                    this.setValues('rgb', rgb);
                    return this;
                },
                lighten: function (ratio) {
                    var hsl = this.values.hsl;
                    hsl[2] += hsl[2] * ratio;
                    this.setValues('hsl', hsl);
                    return this;
                },
                darken: function (ratio) {
                    var hsl = this.values.hsl;
                    hsl[2] -= hsl[2] * ratio;
                    this.setValues('hsl', hsl);
                    return this;
                },
                saturate: function (ratio) {
                    var hsl = this.values.hsl;
                    hsl[1] += hsl[1] * ratio;
                    this.setValues('hsl', hsl);
                    return this;
                },
                desaturate: function (ratio) {
                    var hsl = this.values.hsl;
                    hsl[1] -= hsl[1] * ratio;
                    this.setValues('hsl', hsl);
                    return this;
                },
                whiten: function (ratio) {
                    var hwb = this.values.hwb;
                    hwb[1] += hwb[1] * ratio;
                    this.setValues('hwb', hwb);
                    return this;
                },
                blacken: function (ratio) {
                    var hwb = this.values.hwb;
                    hwb[2] += hwb[2] * ratio;
                    this.setValues('hwb', hwb);
                    return this;
                },
                greyscale: function () {
                    var rgb = this.values.rgb;
                    var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
                    this.setValues('rgb', [
                        val,
                        val,
                        val
                    ]);
                    return this;
                },
                clearer: function (ratio) {
                    var alpha = this.values.alpha;
                    this.setValues('alpha', alpha - alpha * ratio);
                    return this;
                },
                opaquer: function (ratio) {
                    var alpha = this.values.alpha;
                    this.setValues('alpha', alpha + alpha * ratio);
                    return this;
                },
                rotate: function (degrees) {
                    var hsl = this.values.hsl;
                    var hue = (hsl[0] + degrees) % 360;
                    hsl[0] = hue < 0 ? 360 + hue : hue;
                    this.setValues('hsl', hsl);
                    return this;
                },
                mix: function (mixinColor, weight) {
                    var color1 = this;
                    var color2 = mixinColor;
                    var p = weight === undefined ? 0.5 : weight;
                    var w = 2 * p - 1;
                    var a = color1.alpha() - color2.alpha();
                    var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2;
                    var w2 = 1 - w1;
                    return this.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue()).alpha(color1.alpha() * p + color2.alpha() * (1 - p));
                },
                toJSON: function () {
                    return this.rgb();
                },
                clone: function () {
                    var result = new Color();
                    var source = this.values;
                    var target = result.values;
                    var value, type;
                    for (var prop in source) {
                        if (source.hasOwnProperty(prop)) {
                            value = source[prop];
                            type = {}.toString.call(value);
                            if (type === '[object Array]') {
                                target[prop] = value.slice(0);
                            } else if (type === '[object Number]') {
                                target[prop] = value;
                            } else {
                                console.error('unexpected color value:', value);
                            }
                        }
                    }
                    return result;
                }
            };
            Color.prototype.spaces = {
                rgb: [
                    'red',
                    'green',
                    'blue'
                ],
                hsl: [
                    'hue',
                    'saturation',
                    'lightness'
                ],
                hsv: [
                    'hue',
                    'saturation',
                    'value'
                ],
                hwb: [
                    'hue',
                    'whiteness',
                    'blackness'
                ],
                cmyk: [
                    'cyan',
                    'magenta',
                    'yellow',
                    'black'
                ]
            };
            Color.prototype.maxes = {
                rgb: [
                    255,
                    255,
                    255
                ],
                hsl: [
                    360,
                    100,
                    100
                ],
                hsv: [
                    360,
                    100,
                    100
                ],
                hwb: [
                    360,
                    100,
                    100
                ],
                cmyk: [
                    100,
                    100,
                    100,
                    100
                ]
            };
            Color.prototype.getValues = function (space) {
                var values = this.values;
                var vals = {};
                for (var i = 0; i < space.length; i++) {
                    vals[space.charAt(i)] = values[space][i];
                }
                if (values.alpha !== 1) {
                    vals.a = values.alpha;
                }
                return vals;
            };
            Color.prototype.setValues = function (space, vals) {
                var values = this.values;
                var spaces = this.spaces;
                var maxes = this.maxes;
                var alpha = 1;
                var i;
                if (space === 'alpha') {
                    alpha = vals;
                } else if (vals.length) {
                    values[space] = vals.slice(0, space.length);
                    alpha = vals[space.length];
                } else if (vals[space.charAt(0)] !== undefined) {
                    for (i = 0; i < space.length; i++) {
                        values[space][i] = vals[space.charAt(i)];
                    }
                    alpha = vals.a;
                } else if (vals[spaces[space][0]] !== undefined) {
                    var chans = spaces[space];
                    for (i = 0; i < space.length; i++) {
                        values[space][i] = vals[chans[i]];
                    }
                    alpha = vals.alpha;
                }
                values.alpha = Math.max(0, Math.min(1, alpha === undefined ? values.alpha : alpha));
                if (space === 'alpha') {
                    return false;
                }
                var capped;
                for (i = 0; i < space.length; i++) {
                    capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
                    values[space][i] = Math.round(capped);
                }
                for (var sname in spaces) {
                    if (sname !== space) {
                        values[sname] = convert[space][sname](values[space]);
                    }
                }
                return true;
            };
            Color.prototype.setSpace = function (space, args) {
                var vals = args[0];
                if (vals === undefined) {
                    return this.getValues(space);
                }
                if (typeof vals === 'number') {
                    vals = Array.prototype.slice.call(args);
                }
                this.setValues(space, vals);
                return this;
            };
            Color.prototype.setChannel = function (space, index, val) {
                var svalues = this.values[space];
                if (val === undefined) {
                    return svalues[index];
                } else if (val === svalues[index]) {
                    return this;
                }
                svalues[index] = val;
                this.setValues(space, svalues);
                return this;
            };
            if (typeof window !== 'undefined') {
                window.Color = Color;
            }
            module.exports = Color;
        },
        {
            '2': 2,
            '5': 5
        }
    ],
    4: [
        function (require, module, exports) {
            module.exports = {
                rgb2hsl: rgb2hsl,
                rgb2hsv: rgb2hsv,
                rgb2hwb: rgb2hwb,
                rgb2cmyk: rgb2cmyk,
                rgb2keyword: rgb2keyword,
                rgb2xyz: rgb2xyz,
                rgb2lab: rgb2lab,
                rgb2lch: rgb2lch,
                hsl2rgb: hsl2rgb,
                hsl2hsv: hsl2hsv,
                hsl2hwb: hsl2hwb,
                hsl2cmyk: hsl2cmyk,
                hsl2keyword: hsl2keyword,
                hsv2rgb: hsv2rgb,
                hsv2hsl: hsv2hsl,
                hsv2hwb: hsv2hwb,
                hsv2cmyk: hsv2cmyk,
                hsv2keyword: hsv2keyword,
                hwb2rgb: hwb2rgb,
                hwb2hsl: hwb2hsl,
                hwb2hsv: hwb2hsv,
                hwb2cmyk: hwb2cmyk,
                hwb2keyword: hwb2keyword,
                cmyk2rgb: cmyk2rgb,
                cmyk2hsl: cmyk2hsl,
                cmyk2hsv: cmyk2hsv,
                cmyk2hwb: cmyk2hwb,
                cmyk2keyword: cmyk2keyword,
                keyword2rgb: keyword2rgb,
                keyword2hsl: keyword2hsl,
                keyword2hsv: keyword2hsv,
                keyword2hwb: keyword2hwb,
                keyword2cmyk: keyword2cmyk,
                keyword2lab: keyword2lab,
                keyword2xyz: keyword2xyz,
                xyz2rgb: xyz2rgb,
                xyz2lab: xyz2lab,
                xyz2lch: xyz2lch,
                lab2xyz: lab2xyz,
                lab2rgb: lab2rgb,
                lab2lch: lab2lch,
                lch2lab: lch2lab,
                lch2xyz: lch2xyz,
                lch2rgb: lch2rgb
            };
            function rgb2hsl(rgb) {
                var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), delta = max - min, h, s, l;
                if (max == min)
                    h = 0;
                else if (r == max)
                    h = (g - b) / delta;
                else if (g == max)
                    h = 2 + (b - r) / delta;
                else if (b == max)
                    h = 4 + (r - g) / delta;
                h = Math.min(h * 60, 360);
                if (h < 0)
                    h += 360;
                l = (min + max) / 2;
                if (max == min)
                    s = 0;
                else if (l <= 0.5)
                    s = delta / (max + min);
                else
                    s = delta / (2 - max - min);
                return [
                    h,
                    s * 100,
                    l * 100
                ];
            }
            function rgb2hsv(rgb) {
                var r = rgb[0], g = rgb[1], b = rgb[2], min = Math.min(r, g, b), max = Math.max(r, g, b), delta = max - min, h, s, v;
                if (max == 0)
                    s = 0;
                else
                    s = delta / max * 1000 / 10;
                if (max == min)
                    h = 0;
                else if (r == max)
                    h = (g - b) / delta;
                else if (g == max)
                    h = 2 + (b - r) / delta;
                else if (b == max)
                    h = 4 + (r - g) / delta;
                h = Math.min(h * 60, 360);
                if (h < 0)
                    h += 360;
                v = max / 255 * 1000 / 10;
                return [
                    h,
                    s,
                    v
                ];
            }
            function rgb2hwb(rgb) {
                var r = rgb[0], g = rgb[1], b = rgb[2], h = rgb2hsl(rgb)[0], w = 1 / 255 * Math.min(r, Math.min(g, b)), b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
                return [
                    h,
                    w * 100,
                    b * 100
                ];
            }
            function rgb2cmyk(rgb) {
                var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255, c, m, y, k;
                k = Math.min(1 - r, 1 - g, 1 - b);
                c = (1 - r - k) / (1 - k) || 0;
                m = (1 - g - k) / (1 - k) || 0;
                y = (1 - b - k) / (1 - k) || 0;
                return [
                    c * 100,
                    m * 100,
                    y * 100,
                    k * 100
                ];
            }
            function rgb2keyword(rgb) {
                return reverseKeywords[JSON.stringify(rgb)];
            }
            function rgb2xyz(rgb) {
                var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255;
                r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
                g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
                b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
                var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
                var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
                var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
                return [
                    x * 100,
                    y * 100,
                    z * 100
                ];
            }
            function rgb2lab(rgb) {
                var xyz = rgb2xyz(rgb), x = xyz[0], y = xyz[1], z = xyz[2], l, a, b;
                x /= 95.047;
                y /= 100;
                z /= 108.883;
                x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
                y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
                z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
                l = 116 * y - 16;
                a = 500 * (x - y);
                b = 200 * (y - z);
                return [
                    l,
                    a,
                    b
                ];
            }
            function rgb2lch(args) {
                return lab2lch(rgb2lab(args));
            }
            function hsl2rgb(hsl) {
                var h = hsl[0] / 360, s = hsl[1] / 100, l = hsl[2] / 100, t1, t2, t3, rgb, val;
                if (s == 0) {
                    val = l * 255;
                    return [
                        val,
                        val,
                        val
                    ];
                }
                if (l < 0.5)
                    t2 = l * (1 + s);
                else
                    t2 = l + s - l * s;
                t1 = 2 * l - t2;
                rgb = [
                    0,
                    0,
                    0
                ];
                for (var i = 0; i < 3; i++) {
                    t3 = h + 1 / 3 * -(i - 1);
                    t3 < 0 && t3++;
                    t3 > 1 && t3--;
                    if (6 * t3 < 1)
                        val = t1 + (t2 - t1) * 6 * t3;
                    else if (2 * t3 < 1)
                        val = t2;
                    else if (3 * t3 < 2)
                        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
                    else
                        val = t1;
                    rgb[i] = val * 255;
                }
                return rgb;
            }
            function hsl2hsv(hsl) {
                var h = hsl[0], s = hsl[1] / 100, l = hsl[2] / 100, sv, v;
                if (l === 0) {
                    return [
                        0,
                        0,
                        0
                    ];
                }
                l *= 2;
                s *= l <= 1 ? l : 2 - l;
                v = (l + s) / 2;
                sv = 2 * s / (l + s);
                return [
                    h,
                    sv * 100,
                    v * 100
                ];
            }
            function hsl2hwb(args) {
                return rgb2hwb(hsl2rgb(args));
            }
            function hsl2cmyk(args) {
                return rgb2cmyk(hsl2rgb(args));
            }
            function hsl2keyword(args) {
                return rgb2keyword(hsl2rgb(args));
            }
            function hsv2rgb(hsv) {
                var h = hsv[0] / 60, s = hsv[1] / 100, v = hsv[2] / 100, hi = Math.floor(h) % 6;
                var f = h - Math.floor(h), p = 255 * v * (1 - s), q = 255 * v * (1 - s * f), t = 255 * v * (1 - s * (1 - f)), v = 255 * v;
                switch (hi) {
                case 0:
                    return [
                        v,
                        t,
                        p
                    ];
                case 1:
                    return [
                        q,
                        v,
                        p
                    ];
                case 2:
                    return [
                        p,
                        v,
                        t
                    ];
                case 3:
                    return [
                        p,
                        q,
                        v
                    ];
                case 4:
                    return [
                        t,
                        p,
                        v
                    ];
                case 5:
                    return [
                        v,
                        p,
                        q
                    ];
                }
            }
            function hsv2hsl(hsv) {
                var h = hsv[0], s = hsv[1] / 100, v = hsv[2] / 100, sl, l;
                l = (2 - s) * v;
                sl = s * v;
                sl /= l <= 1 ? l : 2 - l;
                sl = sl || 0;
                l /= 2;
                return [
                    h,
                    sl * 100,
                    l * 100
                ];
            }
            function hsv2hwb(args) {
                return rgb2hwb(hsv2rgb(args));
            }
            function hsv2cmyk(args) {
                return rgb2cmyk(hsv2rgb(args));
            }
            function hsv2keyword(args) {
                return rgb2keyword(hsv2rgb(args));
            }
            function hwb2rgb(hwb) {
                var h = hwb[0] / 360, wh = hwb[1] / 100, bl = hwb[2] / 100, ratio = wh + bl, i, v, f, n;
                if (ratio > 1) {
                    wh /= ratio;
                    bl /= ratio;
                }
                i = Math.floor(6 * h);
                v = 1 - bl;
                f = 6 * h - i;
                if ((i & 1) != 0) {
                    f = 1 - f;
                }
                n = wh + f * (v - wh);
                switch (i) {
                case 6:
                case 0:
                    r = v;
                    g = n;
                    b = wh;
                    break;
                case 1:
                    r = n;
                    g = v;
                    b = wh;
                    break;
                case 2:
                    r = wh;
                    g = v;
                    b = n;
                    break;
                case 3:
                    r = wh;
                    g = n;
                    b = v;
                    break;
                case 4:
                    r = n;
                    g = wh;
                    b = v;
                    break;
                case 5:
                    r = v;
                    g = wh;
                    b = n;
                    break;
                default:
                    r = v;
                    g = n;
                    b = wh;
                    break;
                }
                return [
                    r * 255,
                    g * 255,
                    b * 255
                ];
            }
            function hwb2hsl(args) {
                return rgb2hsl(hwb2rgb(args));
            }
            function hwb2hsv(args) {
                return rgb2hsv(hwb2rgb(args));
            }
            function hwb2cmyk(args) {
                return rgb2cmyk(hwb2rgb(args));
            }
            function hwb2keyword(args) {
                return rgb2keyword(hwb2rgb(args));
            }
            function cmyk2rgb(cmyk) {
                var c = cmyk[0] / 100, m = cmyk[1] / 100, y = cmyk[2] / 100, k = cmyk[3] / 100, r, g, b;
                r = 1 - Math.min(1, c * (1 - k) + k);
                g = 1 - Math.min(1, m * (1 - k) + k);
                b = 1 - Math.min(1, y * (1 - k) + k);
                return [
                    r * 255,
                    g * 255,
                    b * 255
                ];
            }
            function cmyk2hsl(args) {
                return rgb2hsl(cmyk2rgb(args));
            }
            function cmyk2hsv(args) {
                return rgb2hsv(cmyk2rgb(args));
            }
            function cmyk2hwb(args) {
                return rgb2hwb(cmyk2rgb(args));
            }
            function cmyk2keyword(args) {
                return rgb2keyword(cmyk2rgb(args));
            }
            function xyz2rgb(xyz) {
                var x = xyz[0] / 100, y = xyz[1] / 100, z = xyz[2] / 100, r, g, b;
                r = x * 3.2406 + y * -1.5372 + z * -0.4986;
                g = x * -0.9689 + y * 1.8758 + z * 0.0415;
                b = x * 0.0557 + y * -0.204 + z * 1.057;
                r = r > 0.0031308 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r = r * 12.92;
                g = g > 0.0031308 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g = g * 12.92;
                b = b > 0.0031308 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b = b * 12.92;
                r = Math.min(Math.max(0, r), 1);
                g = Math.min(Math.max(0, g), 1);
                b = Math.min(Math.max(0, b), 1);
                return [
                    r * 255,
                    g * 255,
                    b * 255
                ];
            }
            function xyz2lab(xyz) {
                var x = xyz[0], y = xyz[1], z = xyz[2], l, a, b;
                x /= 95.047;
                y /= 100;
                z /= 108.883;
                x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
                y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
                z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
                l = 116 * y - 16;
                a = 500 * (x - y);
                b = 200 * (y - z);
                return [
                    l,
                    a,
                    b
                ];
            }
            function xyz2lch(args) {
                return lab2lch(xyz2lab(args));
            }
            function lab2xyz(lab) {
                var l = lab[0], a = lab[1], b = lab[2], x, y, z, y2;
                if (l <= 8) {
                    y = l * 100 / 903.3;
                    y2 = 7.787 * (y / 100) + 16 / 116;
                } else {
                    y = 100 * Math.pow((l + 16) / 116, 3);
                    y2 = Math.pow(y / 100, 1 / 3);
                }
                x = x / 95.047 <= 0.008856 ? x = 95.047 * (a / 500 + y2 - 16 / 116) / 7.787 : 95.047 * Math.pow(a / 500 + y2, 3);
                z = z / 108.883 <= 0.008859 ? z = 108.883 * (y2 - b / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(y2 - b / 200, 3);
                return [
                    x,
                    y,
                    z
                ];
            }
            function lab2lch(lab) {
                var l = lab[0], a = lab[1], b = lab[2], hr, h, c;
                hr = Math.atan2(b, a);
                h = hr * 360 / 2 / Math.PI;
                if (h < 0) {
                    h += 360;
                }
                c = Math.sqrt(a * a + b * b);
                return [
                    l,
                    c,
                    h
                ];
            }
            function lab2rgb(args) {
                return xyz2rgb(lab2xyz(args));
            }
            function lch2lab(lch) {
                var l = lch[0], c = lch[1], h = lch[2], a, b, hr;
                hr = h / 360 * 2 * Math.PI;
                a = c * Math.cos(hr);
                b = c * Math.sin(hr);
                return [
                    l,
                    a,
                    b
                ];
            }
            function lch2xyz(args) {
                return lab2xyz(lch2lab(args));
            }
            function lch2rgb(args) {
                return lab2rgb(lch2lab(args));
            }
            function keyword2rgb(keyword) {
                return cssKeywords[keyword];
            }
            function keyword2hsl(args) {
                return rgb2hsl(keyword2rgb(args));
            }
            function keyword2hsv(args) {
                return rgb2hsv(keyword2rgb(args));
            }
            function keyword2hwb(args) {
                return rgb2hwb(keyword2rgb(args));
            }
            function keyword2cmyk(args) {
                return rgb2cmyk(keyword2rgb(args));
            }
            function keyword2lab(args) {
                return rgb2lab(keyword2rgb(args));
            }
            function keyword2xyz(args) {
                return rgb2xyz(keyword2rgb(args));
            }
            var cssKeywords = {
                aliceblue: [
                    240,
                    248,
                    255
                ],
                antiquewhite: [
                    250,
                    235,
                    215
                ],
                aqua: [
                    0,
                    255,
                    255
                ],
                aquamarine: [
                    127,
                    255,
                    212
                ],
                azure: [
                    240,
                    255,
                    255
                ],
                beige: [
                    245,
                    245,
                    220
                ],
                bisque: [
                    255,
                    228,
                    196
                ],
                black: [
                    0,
                    0,
                    0
                ],
                blanchedalmond: [
                    255,
                    235,
                    205
                ],
                blue: [
                    0,
                    0,
                    255
                ],
                blueviolet: [
                    138,
                    43,
                    226
                ],
                brown: [
                    165,
                    42,
                    42
                ],
                burlywood: [
                    222,
                    184,
                    135
                ],
                cadetblue: [
                    95,
                    158,
                    160
                ],
                chartreuse: [
                    127,
                    255,
                    0
                ],
                chocolate: [
                    210,
                    105,
                    30
                ],
                coral: [
                    255,
                    127,
                    80
                ],
                cornflowerblue: [
                    100,
                    149,
                    237
                ],
                cornsilk: [
                    255,
                    248,
                    220
                ],
                crimson: [
                    220,
                    20,
                    60
                ],
                cyan: [
                    0,
                    255,
                    255
                ],
                darkblue: [
                    0,
                    0,
                    139
                ],
                darkcyan: [
                    0,
                    139,
                    139
                ],
                darkgoldenrod: [
                    184,
                    134,
                    11
                ],
                darkgray: [
                    169,
                    169,
                    169
                ],
                darkgreen: [
                    0,
                    100,
                    0
                ],
                darkgrey: [
                    169,
                    169,
                    169
                ],
                darkkhaki: [
                    189,
                    183,
                    107
                ],
                darkmagenta: [
                    139,
                    0,
                    139
                ],
                darkolivegreen: [
                    85,
                    107,
                    47
                ],
                darkorange: [
                    255,
                    140,
                    0
                ],
                darkorchid: [
                    153,
                    50,
                    204
                ],
                darkred: [
                    139,
                    0,
                    0
                ],
                darksalmon: [
                    233,
                    150,
                    122
                ],
                darkseagreen: [
                    143,
                    188,
                    143
                ],
                darkslateblue: [
                    72,
                    61,
                    139
                ],
                darkslategray: [
                    47,
                    79,
                    79
                ],
                darkslategrey: [
                    47,
                    79,
                    79
                ],
                darkturquoise: [
                    0,
                    206,
                    209
                ],
                darkviolet: [
                    148,
                    0,
                    211
                ],
                deeppink: [
                    255,
                    20,
                    147
                ],
                deepskyblue: [
                    0,
                    191,
                    255
                ],
                dimgray: [
                    105,
                    105,
                    105
                ],
                dimgrey: [
                    105,
                    105,
                    105
                ],
                dodgerblue: [
                    30,
                    144,
                    255
                ],
                firebrick: [
                    178,
                    34,
                    34
                ],
                floralwhite: [
                    255,
                    250,
                    240
                ],
                forestgreen: [
                    34,
                    139,
                    34
                ],
                fuchsia: [
                    255,
                    0,
                    255
                ],
                gainsboro: [
                    220,
                    220,
                    220
                ],
                ghostwhite: [
                    248,
                    248,
                    255
                ],
                gold: [
                    255,
                    215,
                    0
                ],
                goldenrod: [
                    218,
                    165,
                    32
                ],
                gray: [
                    128,
                    128,
                    128
                ],
                green: [
                    0,
                    128,
                    0
                ],
                greenyellow: [
                    173,
                    255,
                    47
                ],
                grey: [
                    128,
                    128,
                    128
                ],
                honeydew: [
                    240,
                    255,
                    240
                ],
                hotpink: [
                    255,
                    105,
                    180
                ],
                indianred: [
                    205,
                    92,
                    92
                ],
                indigo: [
                    75,
                    0,
                    130
                ],
                ivory: [
                    255,
                    255,
                    240
                ],
                khaki: [
                    240,
                    230,
                    140
                ],
                lavender: [
                    230,
                    230,
                    250
                ],
                lavenderblush: [
                    255,
                    240,
                    245
                ],
                lawngreen: [
                    124,
                    252,
                    0
                ],
                lemonchiffon: [
                    255,
                    250,
                    205
                ],
                lightblue: [
                    173,
                    216,
                    230
                ],
                lightcoral: [
                    240,
                    128,
                    128
                ],
                lightcyan: [
                    224,
                    255,
                    255
                ],
                lightgoldenrodyellow: [
                    250,
                    250,
                    210
                ],
                lightgray: [
                    211,
                    211,
                    211
                ],
                lightgreen: [
                    144,
                    238,
                    144
                ],
                lightgrey: [
                    211,
                    211,
                    211
                ],
                lightpink: [
                    255,
                    182,
                    193
                ],
                lightsalmon: [
                    255,
                    160,
                    122
                ],
                lightseagreen: [
                    32,
                    178,
                    170
                ],
                lightskyblue: [
                    135,
                    206,
                    250
                ],
                lightslategray: [
                    119,
                    136,
                    153
                ],
                lightslategrey: [
                    119,
                    136,
                    153
                ],
                lightsteelblue: [
                    176,
                    196,
                    222
                ],
                lightyellow: [
                    255,
                    255,
                    224
                ],
                lime: [
                    0,
                    255,
                    0
                ],
                limegreen: [
                    50,
                    205,
                    50
                ],
                linen: [
                    250,
                    240,
                    230
                ],
                magenta: [
                    255,
                    0,
                    255
                ],
                maroon: [
                    128,
                    0,
                    0
                ],
                mediumaquamarine: [
                    102,
                    205,
                    170
                ],
                mediumblue: [
                    0,
                    0,
                    205
                ],
                mediumorchid: [
                    186,
                    85,
                    211
                ],
                mediumpurple: [
                    147,
                    112,
                    219
                ],
                mediumseagreen: [
                    60,
                    179,
                    113
                ],
                mediumslateblue: [
                    123,
                    104,
                    238
                ],
                mediumspringgreen: [
                    0,
                    250,
                    154
                ],
                mediumturquoise: [
                    72,
                    209,
                    204
                ],
                mediumvioletred: [
                    199,
                    21,
                    133
                ],
                midnightblue: [
                    25,
                    25,
                    112
                ],
                mintcream: [
                    245,
                    255,
                    250
                ],
                mistyrose: [
                    255,
                    228,
                    225
                ],
                moccasin: [
                    255,
                    228,
                    181
                ],
                navajowhite: [
                    255,
                    222,
                    173
                ],
                navy: [
                    0,
                    0,
                    128
                ],
                oldlace: [
                    253,
                    245,
                    230
                ],
                olive: [
                    128,
                    128,
                    0
                ],
                olivedrab: [
                    107,
                    142,
                    35
                ],
                orange: [
                    255,
                    165,
                    0
                ],
                orangered: [
                    255,
                    69,
                    0
                ],
                orchid: [
                    218,
                    112,
                    214
                ],
                palegoldenrod: [
                    238,
                    232,
                    170
                ],
                palegreen: [
                    152,
                    251,
                    152
                ],
                paleturquoise: [
                    175,
                    238,
                    238
                ],
                palevioletred: [
                    219,
                    112,
                    147
                ],
                papayawhip: [
                    255,
                    239,
                    213
                ],
                peachpuff: [
                    255,
                    218,
                    185
                ],
                peru: [
                    205,
                    133,
                    63
                ],
                pink: [
                    255,
                    192,
                    203
                ],
                plum: [
                    221,
                    160,
                    221
                ],
                powderblue: [
                    176,
                    224,
                    230
                ],
                purple: [
                    128,
                    0,
                    128
                ],
                rebeccapurple: [
                    102,
                    51,
                    153
                ],
                red: [
                    255,
                    0,
                    0
                ],
                rosybrown: [
                    188,
                    143,
                    143
                ],
                royalblue: [
                    65,
                    105,
                    225
                ],
                saddlebrown: [
                    139,
                    69,
                    19
                ],
                salmon: [
                    250,
                    128,
                    114
                ],
                sandybrown: [
                    244,
                    164,
                    96
                ],
                seagreen: [
                    46,
                    139,
                    87
                ],
                seashell: [
                    255,
                    245,
                    238
                ],
                sienna: [
                    160,
                    82,
                    45
                ],
                silver: [
                    192,
                    192,
                    192
                ],
                skyblue: [
                    135,
                    206,
                    235
                ],
                slateblue: [
                    106,
                    90,
                    205
                ],
                slategray: [
                    112,
                    128,
                    144
                ],
                slategrey: [
                    112,
                    128,
                    144
                ],
                snow: [
                    255,
                    250,
                    250
                ],
                springgreen: [
                    0,
                    255,
                    127
                ],
                steelblue: [
                    70,
                    130,
                    180
                ],
                tan: [
                    210,
                    180,
                    140
                ],
                teal: [
                    0,
                    128,
                    128
                ],
                thistle: [
                    216,
                    191,
                    216
                ],
                tomato: [
                    255,
                    99,
                    71
                ],
                turquoise: [
                    64,
                    224,
                    208
                ],
                violet: [
                    238,
                    130,
                    238
                ],
                wheat: [
                    245,
                    222,
                    179
                ],
                white: [
                    255,
                    255,
                    255
                ],
                whitesmoke: [
                    245,
                    245,
                    245
                ],
                yellow: [
                    255,
                    255,
                    0
                ],
                yellowgreen: [
                    154,
                    205,
                    50
                ]
            };
            var reverseKeywords = {};
            for (var key in cssKeywords) {
                reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
            }
        },
        {}
    ],
    5: [
        function (require, module, exports) {
            var conversions = require(4);
            var convert = function () {
                return new Converter();
            };
            for (var func in conversions) {
                convert[func + 'Raw'] = function (func) {
                    return function (arg) {
                        if (typeof arg == 'number')
                            arg = Array.prototype.slice.call(arguments);
                        return conversions[func](arg);
                    };
                }(func);
                var pair = /(\w+)2(\w+)/.exec(func), from = pair[1], to = pair[2];
                convert[from] = convert[from] || {};
                convert[from][to] = convert[func] = function (func) {
                    return function (arg) {
                        if (typeof arg == 'number')
                            arg = Array.prototype.slice.call(arguments);
                        var val = conversions[func](arg);
                        if (typeof val == 'string' || val === undefined)
                            return val;
                        for (var i = 0; i < val.length; i++)
                            val[i] = Math.round(val[i]);
                        return val;
                    };
                }(func);
            }
            var Converter = function () {
                this.convs = {};
            };
            Converter.prototype.routeSpace = function (space, args) {
                var values = args[0];
                if (values === undefined) {
                    return this.getValues(space);
                }
                if (typeof values == 'number') {
                    values = Array.prototype.slice.call(args);
                }
                return this.setValues(space, values);
            };
            Converter.prototype.setValues = function (space, values) {
                this.space = space;
                this.convs = {};
                this.convs[space] = values;
                return this;
            };
            Converter.prototype.getValues = function (space) {
                var vals = this.convs[space];
                if (!vals) {
                    var fspace = this.space, from = this.convs[fspace];
                    vals = convert[fspace][space](from);
                    this.convs[space] = vals;
                }
                return vals;
            };
            [
                'rgb',
                'hsl',
                'hsv',
                'cmyk',
                'keyword'
            ].forEach(function (space) {
                Converter.prototype[space] = function (vals) {
                    return this.routeSpace(space, arguments);
                };
            });
            module.exports = convert;
        },
        {
            '4': 4
        }
    ],
    6: [
        function (require, module, exports) {
            module.exports = {
                'aliceblue': [
                    240,
                    248,
                    255
                ],
                'antiquewhite': [
                    250,
                    235,
                    215
                ],
                'aqua': [
                    0,
                    255,
                    255
                ],
                'aquamarine': [
                    127,
                    255,
                    212
                ],
                'azure': [
                    240,
                    255,
                    255
                ],
                'beige': [
                    245,
                    245,
                    220
                ],
                'bisque': [
                    255,
                    228,
                    196
                ],
                'black': [
                    0,
                    0,
                    0
                ],
                'blanchedalmond': [
                    255,
                    235,
                    205
                ],
                'blue': [
                    0,
                    0,
                    255
                ],
                'blueviolet': [
                    138,
                    43,
                    226
                ],
                'brown': [
                    165,
                    42,
                    42
                ],
                'burlywood': [
                    222,
                    184,
                    135
                ],
                'cadetblue': [
                    95,
                    158,
                    160
                ],
                'chartreuse': [
                    127,
                    255,
                    0
                ],
                'chocolate': [
                    210,
                    105,
                    30
                ],
                'coral': [
                    255,
                    127,
                    80
                ],
                'cornflowerblue': [
                    100,
                    149,
                    237
                ],
                'cornsilk': [
                    255,
                    248,
                    220
                ],
                'crimson': [
                    220,
                    20,
                    60
                ],
                'cyan': [
                    0,
                    255,
                    255
                ],
                'darkblue': [
                    0,
                    0,
                    139
                ],
                'darkcyan': [
                    0,
                    139,
                    139
                ],
                'darkgoldenrod': [
                    184,
                    134,
                    11
                ],
                'darkgray': [
                    169,
                    169,
                    169
                ],
                'darkgreen': [
                    0,
                    100,
                    0
                ],
                'darkgrey': [
                    169,
                    169,
                    169
                ],
                'darkkhaki': [
                    189,
                    183,
                    107
                ],
                'darkmagenta': [
                    139,
                    0,
                    139
                ],
                'darkolivegreen': [
                    85,
                    107,
                    47
                ],
                'darkorange': [
                    255,
                    140,
                    0
                ],
                'darkorchid': [
                    153,
                    50,
                    204
                ],
                'darkred': [
                    139,
                    0,
                    0
                ],
                'darksalmon': [
                    233,
                    150,
                    122
                ],
                'darkseagreen': [
                    143,
                    188,
                    143
                ],
                'darkslateblue': [
                    72,
                    61,
                    139
                ],
                'darkslategray': [
                    47,
                    79,
                    79
                ],
                'darkslategrey': [
                    47,
                    79,
                    79
                ],
                'darkturquoise': [
                    0,
                    206,
                    209
                ],
                'darkviolet': [
                    148,
                    0,
                    211
                ],
                'deeppink': [
                    255,
                    20,
                    147
                ],
                'deepskyblue': [
                    0,
                    191,
                    255
                ],
                'dimgray': [
                    105,
                    105,
                    105
                ],
                'dimgrey': [
                    105,
                    105,
                    105
                ],
                'dodgerblue': [
                    30,
                    144,
                    255
                ],
                'firebrick': [
                    178,
                    34,
                    34
                ],
                'floralwhite': [
                    255,
                    250,
                    240
                ],
                'forestgreen': [
                    34,
                    139,
                    34
                ],
                'fuchsia': [
                    255,
                    0,
                    255
                ],
                'gainsboro': [
                    220,
                    220,
                    220
                ],
                'ghostwhite': [
                    248,
                    248,
                    255
                ],
                'gold': [
                    255,
                    215,
                    0
                ],
                'goldenrod': [
                    218,
                    165,
                    32
                ],
                'gray': [
                    128,
                    128,
                    128
                ],
                'green': [
                    0,
                    128,
                    0
                ],
                'greenyellow': [
                    173,
                    255,
                    47
                ],
                'grey': [
                    128,
                    128,
                    128
                ],
                'honeydew': [
                    240,
                    255,
                    240
                ],
                'hotpink': [
                    255,
                    105,
                    180
                ],
                'indianred': [
                    205,
                    92,
                    92
                ],
                'indigo': [
                    75,
                    0,
                    130
                ],
                'ivory': [
                    255,
                    255,
                    240
                ],
                'khaki': [
                    240,
                    230,
                    140
                ],
                'lavender': [
                    230,
                    230,
                    250
                ],
                'lavenderblush': [
                    255,
                    240,
                    245
                ],
                'lawngreen': [
                    124,
                    252,
                    0
                ],
                'lemonchiffon': [
                    255,
                    250,
                    205
                ],
                'lightblue': [
                    173,
                    216,
                    230
                ],
                'lightcoral': [
                    240,
                    128,
                    128
                ],
                'lightcyan': [
                    224,
                    255,
                    255
                ],
                'lightgoldenrodyellow': [
                    250,
                    250,
                    210
                ],
                'lightgray': [
                    211,
                    211,
                    211
                ],
                'lightgreen': [
                    144,
                    238,
                    144
                ],
                'lightgrey': [
                    211,
                    211,
                    211
                ],
                'lightpink': [
                    255,
                    182,
                    193
                ],
                'lightsalmon': [
                    255,
                    160,
                    122
                ],
                'lightseagreen': [
                    32,
                    178,
                    170
                ],
                'lightskyblue': [
                    135,
                    206,
                    250
                ],
                'lightslategray': [
                    119,
                    136,
                    153
                ],
                'lightslategrey': [
                    119,
                    136,
                    153
                ],
                'lightsteelblue': [
                    176,
                    196,
                    222
                ],
                'lightyellow': [
                    255,
                    255,
                    224
                ],
                'lime': [
                    0,
                    255,
                    0
                ],
                'limegreen': [
                    50,
                    205,
                    50
                ],
                'linen': [
                    250,
                    240,
                    230
                ],
                'magenta': [
                    255,
                    0,
                    255
                ],
                'maroon': [
                    128,
                    0,
                    0
                ],
                'mediumaquamarine': [
                    102,
                    205,
                    170
                ],
                'mediumblue': [
                    0,
                    0,
                    205
                ],
                'mediumorchid': [
                    186,
                    85,
                    211
                ],
                'mediumpurple': [
                    147,
                    112,
                    219
                ],
                'mediumseagreen': [
                    60,
                    179,
                    113
                ],
                'mediumslateblue': [
                    123,
                    104,
                    238
                ],
                'mediumspringgreen': [
                    0,
                    250,
                    154
                ],
                'mediumturquoise': [
                    72,
                    209,
                    204
                ],
                'mediumvioletred': [
                    199,
                    21,
                    133
                ],
                'midnightblue': [
                    25,
                    25,
                    112
                ],
                'mintcream': [
                    245,
                    255,
                    250
                ],
                'mistyrose': [
                    255,
                    228,
                    225
                ],
                'moccasin': [
                    255,
                    228,
                    181
                ],
                'navajowhite': [
                    255,
                    222,
                    173
                ],
                'navy': [
                    0,
                    0,
                    128
                ],
                'oldlace': [
                    253,
                    245,
                    230
                ],
                'olive': [
                    128,
                    128,
                    0
                ],
                'olivedrab': [
                    107,
                    142,
                    35
                ],
                'orange': [
                    255,
                    165,
                    0
                ],
                'orangered': [
                    255,
                    69,
                    0
                ],
                'orchid': [
                    218,
                    112,
                    214
                ],
                'palegoldenrod': [
                    238,
                    232,
                    170
                ],
                'palegreen': [
                    152,
                    251,
                    152
                ],
                'paleturquoise': [
                    175,
                    238,
                    238
                ],
                'palevioletred': [
                    219,
                    112,
                    147
                ],
                'papayawhip': [
                    255,
                    239,
                    213
                ],
                'peachpuff': [
                    255,
                    218,
                    185
                ],
                'peru': [
                    205,
                    133,
                    63
                ],
                'pink': [
                    255,
                    192,
                    203
                ],
                'plum': [
                    221,
                    160,
                    221
                ],
                'powderblue': [
                    176,
                    224,
                    230
                ],
                'purple': [
                    128,
                    0,
                    128
                ],
                'rebeccapurple': [
                    102,
                    51,
                    153
                ],
                'red': [
                    255,
                    0,
                    0
                ],
                'rosybrown': [
                    188,
                    143,
                    143
                ],
                'royalblue': [
                    65,
                    105,
                    225
                ],
                'saddlebrown': [
                    139,
                    69,
                    19
                ],
                'salmon': [
                    250,
                    128,
                    114
                ],
                'sandybrown': [
                    244,
                    164,
                    96
                ],
                'seagreen': [
                    46,
                    139,
                    87
                ],
                'seashell': [
                    255,
                    245,
                    238
                ],
                'sienna': [
                    160,
                    82,
                    45
                ],
                'silver': [
                    192,
                    192,
                    192
                ],
                'skyblue': [
                    135,
                    206,
                    235
                ],
                'slateblue': [
                    106,
                    90,
                    205
                ],
                'slategray': [
                    112,
                    128,
                    144
                ],
                'slategrey': [
                    112,
                    128,
                    144
                ],
                'snow': [
                    255,
                    250,
                    250
                ],
                'springgreen': [
                    0,
                    255,
                    127
                ],
                'steelblue': [
                    70,
                    130,
                    180
                ],
                'tan': [
                    210,
                    180,
                    140
                ],
                'teal': [
                    0,
                    128,
                    128
                ],
                'thistle': [
                    216,
                    191,
                    216
                ],
                'tomato': [
                    255,
                    99,
                    71
                ],
                'turquoise': [
                    64,
                    224,
                    208
                ],
                'violet': [
                    238,
                    130,
                    238
                ],
                'wheat': [
                    245,
                    222,
                    179
                ],
                'white': [
                    255,
                    255,
                    255
                ],
                'whitesmoke': [
                    245,
                    245,
                    245
                ],
                'yellow': [
                    255,
                    255,
                    0
                ],
                'yellowgreen': [
                    154,
                    205,
                    50
                ]
            };
        },
        {}
    ],
    7: [
        function (require, module, exports) {
            var Chart = require(28)();
            require(26)(Chart);
            require(42)(Chart);
            require(22)(Chart);
            require(31)(Chart);
            require(25)(Chart);
            require(21)(Chart);
            require(23)(Chart);
            require(24)(Chart);
            require(29)(Chart);
            require(33)(Chart);
            require(34)(Chart);
            require(32)(Chart);
            require(35)(Chart);
            require(30)(Chart);
            require(27)(Chart);
            require(36)(Chart);
            require(37)(Chart);
            require(38)(Chart);
            require(39)(Chart);
            require(40)(Chart);
            require(45)(Chart);
            require(43)(Chart);
            require(44)(Chart);
            require(46)(Chart);
            require(47)(Chart);
            require(48)(Chart);
            require(15)(Chart);
            require(16)(Chart);
            require(17)(Chart);
            require(18)(Chart);
            require(19)(Chart);
            require(20)(Chart);
            require(8)(Chart);
            require(9)(Chart);
            require(10)(Chart);
            require(11)(Chart);
            require(12)(Chart);
            require(13)(Chart);
            require(14)(Chart);
            window.Chart = module.exports = Chart;
        },
        {
            '10': 10,
            '11': 11,
            '12': 12,
            '13': 13,
            '14': 14,
            '15': 15,
            '16': 16,
            '17': 17,
            '18': 18,
            '19': 19,
            '20': 20,
            '21': 21,
            '22': 22,
            '23': 23,
            '24': 24,
            '25': 25,
            '26': 26,
            '27': 27,
            '28': 28,
            '29': 29,
            '30': 30,
            '31': 31,
            '32': 32,
            '33': 33,
            '34': 34,
            '35': 35,
            '36': 36,
            '37': 37,
            '38': 38,
            '39': 39,
            '40': 40,
            '42': 42,
            '43': 43,
            '44': 44,
            '45': 45,
            '46': 46,
            '47': 47,
            '48': 48,
            '8': 8,
            '9': 9
        }
    ],
    8: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                Chart.Bar = function (context, config) {
                    config.type = 'bar';
                    return new Chart(context, config);
                };
            };
        },
        {}
    ],
    9: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                Chart.Bubble = function (context, config) {
                    config.type = 'bubble';
                    return new Chart(context, config);
                };
            };
        },
        {}
    ],
    10: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                Chart.Doughnut = function (context, config) {
                    config.type = 'doughnut';
                    return new Chart(context, config);
                };
            };
        },
        {}
    ],
    11: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                Chart.Line = function (context, config) {
                    config.type = 'line';
                    return new Chart(context, config);
                };
            };
        },
        {}
    ],
    12: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                Chart.PolarArea = function (context, config) {
                    config.type = 'polarArea';
                    return new Chart(context, config);
                };
            };
        },
        {}
    ],
    13: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                Chart.Radar = function (context, config) {
                    config.type = 'radar';
                    return new Chart(context, config);
                };
            };
        },
        {}
    ],
    14: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var defaultConfig = {
                    hover: {
                        mode: 'single'
                    },
                    scales: {
                        xAxes: [{
                                type: 'linear',
                                position: 'bottom',
                                id: 'x-axis-1'
                            }],
                        yAxes: [{
                                type: 'linear',
                                position: 'left',
                                id: 'y-axis-1'
                            }]
                    },
                    tooltips: {
                        callbacks: {
                            title: function () {
                                return '';
                            },
                            label: function (tooltipItem) {
                                return '(' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';
                            }
                        }
                    }
                };
                Chart.defaults.scatter = defaultConfig;
                Chart.controllers.scatter = Chart.controllers.line;
                Chart.Scatter = function (context, config) {
                    config.type = 'scatter';
                    return new Chart(context, config);
                };
            };
        },
        {}
    ],
    15: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.defaults.bar = {
                    hover: {
                        mode: 'label'
                    },
                    scales: {
                        xAxes: [{
                                type: 'category',
                                categoryPercentage: 0.8,
                                barPercentage: 0.9,
                                gridLines: {
                                    offsetGridLines: true
                                }
                            }],
                        yAxes: [{
                                type: 'linear'
                            }]
                    }
                };
                Chart.controllers.bar = Chart.DatasetController.extend({
                    dataElementType: Chart.elements.Rectangle,
                    initialize: function (chart, datasetIndex) {
                        Chart.DatasetController.prototype.initialize.call(this, chart, datasetIndex);
                        var me = this;
                        var meta = me.getMeta();
                        var dataset = me.getDataset();
                        meta.stack = dataset.stack;
                        meta.bar = true;
                    },
                    getStackCount: function () {
                        var me = this;
                        var meta = me.getMeta();
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var stacks = [];
                        helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
                            var dsMeta = me.chart.getDatasetMeta(datasetIndex);
                            if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) && (yScale.options.stacked === false || yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                                stacks.push(dsMeta.stack);
                            }
                        }, me);
                        return stacks.length;
                    },
                    update: function (reset) {
                        var me = this;
                        helpers.each(me.getMeta().data, function (rectangle, index) {
                            me.updateElement(rectangle, index, reset);
                        }, me);
                    },
                    updateElement: function (rectangle, index, reset) {
                        var me = this;
                        var meta = me.getMeta();
                        var xScale = me.getScaleForId(meta.xAxisID);
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var scaleBase = yScale.getBasePixel();
                        var rectangleElementOptions = me.chart.options.elements.rectangle;
                        var custom = rectangle.custom || {};
                        var dataset = me.getDataset();
                        rectangle._xScale = xScale;
                        rectangle._yScale = yScale;
                        rectangle._datasetIndex = me.index;
                        rectangle._index = index;
                        var ruler = me.getRuler(index);
                        rectangle._model = {
                            x: me.calculateBarX(index, me.index, ruler),
                            y: reset ? scaleBase : me.calculateBarY(index, me.index),
                            label: me.chart.data.labels[index],
                            datasetLabel: dataset.label,
                            horizontal: false,
                            base: reset ? scaleBase : me.calculateBarBase(me.index, index),
                            width: me.calculateBarWidth(ruler),
                            backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
                            borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
                            borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
                            borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
                        };
                        rectangle.pivot();
                    },
                    calculateBarBase: function (datasetIndex, index) {
                        var me = this;
                        var meta = me.getMeta();
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var base = yScale.getBaseValue();
                        var original = base;
                        if (yScale.options.stacked === true || yScale.options.stacked === undefined && meta.stack !== undefined) {
                            var chart = me.chart;
                            var datasets = chart.data.datasets;
                            var value = Number(datasets[datasetIndex].data[index]);
                            for (var i = 0; i < datasetIndex; i++) {
                                var currentDs = datasets[i];
                                var currentDsMeta = chart.getDatasetMeta(i);
                                if (currentDsMeta.bar && currentDsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i) && meta.stack === currentDsMeta.stack) {
                                    var currentVal = Number(currentDs.data[index]);
                                    base += value < 0 ? Math.min(currentVal, original) : Math.max(currentVal, original);
                                }
                            }
                            return yScale.getPixelForValue(base);
                        }
                        return yScale.getBasePixel();
                    },
                    getRuler: function () {
                        var me = this;
                        var meta = me.getMeta();
                        var xScale = me.getScaleForId(meta.xAxisID);
                        var stackCount = me.getStackCount();
                        var tickWidth = xScale.width / xScale.ticks.length;
                        var categoryWidth = tickWidth * xScale.options.categoryPercentage;
                        var categorySpacing = (tickWidth - tickWidth * xScale.options.categoryPercentage) / 2;
                        var fullBarWidth = categoryWidth / stackCount;
                        var barWidth = fullBarWidth * xScale.options.barPercentage;
                        var barSpacing = fullBarWidth - fullBarWidth * xScale.options.barPercentage;
                        return {
                            stackCount: stackCount,
                            tickWidth: tickWidth,
                            categoryWidth: categoryWidth,
                            categorySpacing: categorySpacing,
                            fullBarWidth: fullBarWidth,
                            barWidth: barWidth,
                            barSpacing: barSpacing
                        };
                    },
                    calculateBarWidth: function (ruler) {
                        var me = this;
                        var meta = me.getMeta();
                        var xScale = me.getScaleForId(meta.xAxisID);
                        if (xScale.options.barThickness) {
                            return xScale.options.barThickness;
                        }
                        return ruler.barWidth;
                    },
                    getStackIndex: function (datasetIndex) {
                        var me = this;
                        var meta = me.chart.getDatasetMeta(datasetIndex);
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var dsMeta, j;
                        var stacks = [meta.stack];
                        for (j = 0; j < datasetIndex; ++j) {
                            dsMeta = this.chart.getDatasetMeta(j);
                            if (dsMeta.bar && this.chart.isDatasetVisible(j) && (yScale.options.stacked === false || yScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || yScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                                stacks.push(dsMeta.stack);
                            }
                        }
                        return stacks.length - 1;
                    },
                    calculateBarX: function (index, datasetIndex, ruler) {
                        var me = this;
                        var meta = me.getMeta();
                        var xScale = me.getScaleForId(meta.xAxisID);
                        var stackIndex = me.getStackIndex(datasetIndex);
                        var leftTick = xScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
                        leftTick -= me.chart.isCombo ? ruler.tickWidth / 2 : 0;
                        return leftTick + ruler.barWidth / 2 + ruler.categorySpacing + ruler.barWidth * stackIndex + ruler.barSpacing / 2 + ruler.barSpacing * stackIndex;
                    },
                    calculateBarY: function (index, datasetIndex) {
                        var me = this;
                        var meta = me.getMeta();
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var value = Number(me.getDataset().data[index]);
                        if (yScale.options.stacked || yScale.options.stacked === undefined && meta.stack !== undefined) {
                            var base = yScale.getBaseValue();
                            var sumPos = base, sumNeg = base;
                            for (var i = 0; i < datasetIndex; i++) {
                                var ds = me.chart.data.datasets[i];
                                var dsMeta = me.chart.getDatasetMeta(i);
                                if (dsMeta.bar && dsMeta.yAxisID === yScale.id && me.chart.isDatasetVisible(i) && meta.stack === dsMeta.stack) {
                                    var stackedVal = Number(ds.data[index]);
                                    if (stackedVal < 0) {
                                        sumNeg += stackedVal || 0;
                                    } else {
                                        sumPos += stackedVal || 0;
                                    }
                                }
                            }
                            if (value < 0) {
                                return yScale.getPixelForValue(sumNeg + value);
                            }
                            return yScale.getPixelForValue(sumPos + value);
                        }
                        return yScale.getPixelForValue(value);
                    },
                    draw: function (ease) {
                        var me = this;
                        var easingDecimal = ease || 1;
                        var metaData = me.getMeta().data;
                        var dataset = me.getDataset();
                        var i, len;
                        Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
                        for (i = 0, len = metaData.length; i < len; ++i) {
                            var d = dataset.data[i];
                            if (d !== null && d !== undefined && !isNaN(d)) {
                                metaData[i].transition(easingDecimal).draw();
                            }
                        }
                        Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
                    },
                    setHoverStyle: function (rectangle) {
                        var dataset = this.chart.data.datasets[rectangle._datasetIndex];
                        var index = rectangle._index;
                        var custom = rectangle.custom || {};
                        var model = rectangle._model;
                        model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.hoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
                        model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.hoverBorderColor, index, helpers.getHoverColor(model.borderColor));
                        model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
                    },
                    removeHoverStyle: function (rectangle) {
                        var dataset = this.chart.data.datasets[rectangle._datasetIndex];
                        var index = rectangle._index;
                        var custom = rectangle.custom || {};
                        var model = rectangle._model;
                        var rectangleElementOptions = this.chart.options.elements.rectangle;
                        model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor);
                        model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor);
                        model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth);
                    }
                });
                Chart.defaults.horizontalBar = {
                    hover: {
                        mode: 'label'
                    },
                    scales: {
                        xAxes: [{
                                type: 'linear',
                                position: 'bottom'
                            }],
                        yAxes: [{
                                position: 'left',
                                type: 'category',
                                categoryPercentage: 0.8,
                                barPercentage: 0.9,
                                gridLines: {
                                    offsetGridLines: true
                                }
                            }]
                    },
                    elements: {
                        rectangle: {
                            borderSkipped: 'left'
                        }
                    },
                    tooltips: {
                        callbacks: {
                            title: function (tooltipItems, data) {
                                var title = '';
                                if (tooltipItems.length > 0) {
                                    if (tooltipItems[0].yLabel) {
                                        title = tooltipItems[0].yLabel;
                                    } else if (data.labels.length > 0 && tooltipItems[0].index < data.labels.length) {
                                        title = data.labels[tooltipItems[0].index];
                                    }
                                }
                                return title;
                            },
                            label: function (tooltipItem, data) {
                                var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
                                return datasetLabel + ': ' + tooltipItem.xLabel;
                            }
                        }
                    }
                };
                Chart.controllers.horizontalBar = Chart.controllers.bar.extend({
                    getStackCount: function () {
                        var me = this;
                        var meta = me.getMeta();
                        var xScale = me.getScaleForId(meta.xAxisID);
                        var stacks = [];
                        helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
                            var dsMeta = me.chart.getDatasetMeta(datasetIndex);
                            if (dsMeta.bar && me.chart.isDatasetVisible(datasetIndex) && (xScale.options.stacked === false || xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                                stacks.push(dsMeta.stack);
                            }
                        }, me);
                        return stacks.length;
                    },
                    updateElement: function (rectangle, index, reset) {
                        var me = this;
                        var meta = me.getMeta();
                        var xScale = me.getScaleForId(meta.xAxisID);
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var scaleBase = xScale.getBasePixel();
                        var custom = rectangle.custom || {};
                        var dataset = me.getDataset();
                        var rectangleElementOptions = me.chart.options.elements.rectangle;
                        rectangle._xScale = xScale;
                        rectangle._yScale = yScale;
                        rectangle._datasetIndex = me.index;
                        rectangle._index = index;
                        var ruler = me.getRuler(index);
                        rectangle._model = {
                            x: reset ? scaleBase : me.calculateBarX(index, me.index),
                            y: me.calculateBarY(index, me.index, ruler),
                            label: me.chart.data.labels[index],
                            datasetLabel: dataset.label,
                            horizontal: true,
                            base: reset ? scaleBase : me.calculateBarBase(me.index, index),
                            height: me.calculateBarHeight(ruler),
                            backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.backgroundColor, index, rectangleElementOptions.backgroundColor),
                            borderSkipped: custom.borderSkipped ? custom.borderSkipped : rectangleElementOptions.borderSkipped,
                            borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.borderColor, index, rectangleElementOptions.borderColor),
                            borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.borderWidth, index, rectangleElementOptions.borderWidth)
                        };
                        rectangle.pivot();
                    },
                    calculateBarBase: function (datasetIndex, index) {
                        var me = this;
                        var meta = me.getMeta();
                        var xScale = me.getScaleForId(meta.xAxisID);
                        var base = xScale.getBaseValue();
                        var originalBase = base;
                        if (xScale.options.stacked || xScale.options.stacked === undefined && meta.stack !== undefined) {
                            var chart = me.chart;
                            var datasets = chart.data.datasets;
                            var value = Number(datasets[datasetIndex].data[index]);
                            for (var i = 0; i < datasetIndex; i++) {
                                var currentDs = datasets[i];
                                var currentDsMeta = chart.getDatasetMeta(i);
                                if (currentDsMeta.bar && currentDsMeta.xAxisID === xScale.id && chart.isDatasetVisible(i) && meta.stack === currentDsMeta.stack) {
                                    var currentVal = Number(currentDs.data[index]);
                                    base += value < 0 ? Math.min(currentVal, originalBase) : Math.max(currentVal, originalBase);
                                }
                            }
                            return xScale.getPixelForValue(base);
                        }
                        return xScale.getBasePixel();
                    },
                    getRuler: function () {
                        var me = this;
                        var meta = me.getMeta();
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var stackCount = me.getStackCount();
                        var tickHeight = yScale.height / yScale.ticks.length;
                        var categoryHeight = tickHeight * yScale.options.categoryPercentage;
                        var categorySpacing = (tickHeight - tickHeight * yScale.options.categoryPercentage) / 2;
                        var fullBarHeight = categoryHeight / stackCount;
                        var barHeight = fullBarHeight * yScale.options.barPercentage;
                        var barSpacing = fullBarHeight - fullBarHeight * yScale.options.barPercentage;
                        return {
                            stackCount: stackCount,
                            tickHeight: tickHeight,
                            categoryHeight: categoryHeight,
                            categorySpacing: categorySpacing,
                            fullBarHeight: fullBarHeight,
                            barHeight: barHeight,
                            barSpacing: barSpacing
                        };
                    },
                    calculateBarHeight: function (ruler) {
                        var me = this;
                        var meta = me.getMeta();
                        var yScale = me.getScaleForId(meta.yAxisID);
                        if (yScale.options.barThickness) {
                            return yScale.options.barThickness;
                        }
                        return ruler.barHeight;
                    },
                    getStackIndex: function (datasetIndex) {
                        var me = this;
                        var meta = me.chart.getDatasetMeta(datasetIndex);
                        var xScale = me.getScaleForId(meta.xAxisID);
                        var dsMeta, j;
                        var stacks = [meta.stack];
                        for (j = 0; j < datasetIndex; ++j) {
                            dsMeta = this.chart.getDatasetMeta(j);
                            if (dsMeta.bar && this.chart.isDatasetVisible(j) && (xScale.options.stacked === false || xScale.options.stacked === true && stacks.indexOf(dsMeta.stack) === -1 || xScale.options.stacked === undefined && (dsMeta.stack === undefined || stacks.indexOf(dsMeta.stack) === -1))) {
                                stacks.push(dsMeta.stack);
                            }
                        }
                        return stacks.length - 1;
                    },
                    calculateBarX: function (index, datasetIndex) {
                        var me = this;
                        var meta = me.getMeta();
                        var xScale = me.getScaleForId(meta.xAxisID);
                        var value = Number(me.getDataset().data[index]);
                        if (xScale.options.stacked || xScale.options.stacked === undefined && meta.stack !== undefined) {
                            var base = xScale.getBaseValue();
                            var sumPos = base, sumNeg = base;
                            for (var i = 0; i < datasetIndex; i++) {
                                var ds = me.chart.data.datasets[i];
                                var dsMeta = me.chart.getDatasetMeta(i);
                                if (dsMeta.bar && dsMeta.xAxisID === xScale.id && me.chart.isDatasetVisible(i) && meta.stack === dsMeta.stack) {
                                    var stackedVal = Number(ds.data[index]);
                                    if (stackedVal < 0) {
                                        sumNeg += stackedVal || 0;
                                    } else {
                                        sumPos += stackedVal || 0;
                                    }
                                }
                            }
                            if (value < 0) {
                                return xScale.getPixelForValue(sumNeg + value);
                            }
                            return xScale.getPixelForValue(sumPos + value);
                        }
                        return xScale.getPixelForValue(value);
                    },
                    calculateBarY: function (index, datasetIndex, ruler) {
                        var me = this;
                        var meta = me.getMeta();
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var stackIndex = me.getStackIndex(datasetIndex);
                        var topTick = yScale.getPixelForValue(null, index, datasetIndex, me.chart.isCombo);
                        topTick -= me.chart.isCombo ? ruler.tickHeight / 2 : 0;
                        return topTick + ruler.barHeight / 2 + ruler.categorySpacing + ruler.barHeight * stackIndex + ruler.barSpacing / 2 + ruler.barSpacing * stackIndex;
                    }
                });
            };
        },
        {}
    ],
    16: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.defaults.bubble = {
                    hover: {
                        mode: 'single'
                    },
                    scales: {
                        xAxes: [{
                                type: 'linear',
                                position: 'bottom',
                                id: 'x-axis-0'
                            }],
                        yAxes: [{
                                type: 'linear',
                                position: 'left',
                                id: 'y-axis-0'
                            }]
                    },
                    tooltips: {
                        callbacks: {
                            title: function () {
                                return '';
                            },
                            label: function (tooltipItem, data) {
                                var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
                                var dataPoint = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                                return datasetLabel + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ', ' + dataPoint.r + ')';
                            }
                        }
                    }
                };
                Chart.controllers.bubble = Chart.DatasetController.extend({
                    dataElementType: Chart.elements.Point,
                    update: function (reset) {
                        var me = this;
                        var meta = me.getMeta();
                        var points = meta.data;
                        helpers.each(points, function (point, index) {
                            me.updateElement(point, index, reset);
                        });
                    },
                    updateElement: function (point, index, reset) {
                        var me = this;
                        var meta = me.getMeta();
                        var xScale = me.getScaleForId(meta.xAxisID);
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var custom = point.custom || {};
                        var dataset = me.getDataset();
                        var data = dataset.data[index];
                        var pointElementOptions = me.chart.options.elements.point;
                        var dsIndex = me.index;
                        helpers.extend(point, {
                            _xScale: xScale,
                            _yScale: yScale,
                            _datasetIndex: dsIndex,
                            _index: index,
                            _model: {
                                x: reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex, me.chart.isCombo),
                                y: reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex),
                                radius: reset ? 0 : custom.radius ? custom.radius : me.getRadius(data),
                                hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
                            }
                        });
                        Chart.DatasetController.prototype.removeHoverStyle.call(me, point, pointElementOptions);
                        var model = point._model;
                        model.skip = custom.skip ? custom.skip : isNaN(model.x) || isNaN(model.y);
                        point.pivot();
                    },
                    getRadius: function (value) {
                        return value.r || this.chart.options.elements.point.radius;
                    },
                    setHoverStyle: function (point) {
                        var me = this;
                        Chart.DatasetController.prototype.setHoverStyle.call(me, point);
                        var dataset = me.chart.data.datasets[point._datasetIndex];
                        var index = point._index;
                        var custom = point.custom || {};
                        var model = point._model;
                        model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.hoverRadius, index, me.chart.options.elements.point.hoverRadius) + me.getRadius(dataset.data[index]);
                    },
                    removeHoverStyle: function (point) {
                        var me = this;
                        Chart.DatasetController.prototype.removeHoverStyle.call(me, point, me.chart.options.elements.point);
                        var dataVal = me.chart.data.datasets[point._datasetIndex].data[point._index];
                        var custom = point.custom || {};
                        var model = point._model;
                        model.radius = custom.radius ? custom.radius : me.getRadius(dataVal);
                    }
                });
            };
        },
        {}
    ],
    17: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers, defaults = Chart.defaults;
                defaults.doughnut = {
                    animation: {
                        animateRotate: true,
                        animateScale: false
                    },
                    aspectRatio: 1,
                    hover: {
                        mode: 'single'
                    },
                    legendCallback: function (chart) {
                        var text = [];
                        text.push('<ul class="' + chart.id + '-legend">');
                        var data = chart.data;
                        var datasets = data.datasets;
                        var labels = data.labels;
                        if (datasets.length) {
                            for (var i = 0; i < datasets[0].data.length; ++i) {
                                text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
                                if (labels[i]) {
                                    text.push(labels[i]);
                                }
                                text.push('</li>');
                            }
                        }
                        text.push('</ul>');
                        return text.join('');
                    },
                    legend: {
                        labels: {
                            generateLabels: function (chart) {
                                var data = chart.data;
                                if (data.labels.length && data.datasets.length) {
                                    return data.labels.map(function (label, i) {
                                        var meta = chart.getDatasetMeta(0);
                                        var ds = data.datasets[0];
                                        var arc = meta.data[i];
                                        var custom = arc && arc.custom || {};
                                        var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                                        var arcOpts = chart.options.elements.arc;
                                        var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                                        var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                                        var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                                        return {
                                            text: label,
                                            fillStyle: fill,
                                            strokeStyle: stroke,
                                            lineWidth: bw,
                                            hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                                            index: i
                                        };
                                    });
                                }
                                return [];
                            }
                        },
                        onClick: function (e, legendItem) {
                            var index = legendItem.index;
                            var chart = this.chart;
                            var i, ilen, meta;
                            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                                meta = chart.getDatasetMeta(i);
                                if (meta.data[index]) {
                                    meta.data[index].hidden = !meta.data[index].hidden;
                                }
                            }
                            chart.update();
                        }
                    },
                    cutoutPercentage: 50,
                    rotation: Math.PI * -0.5,
                    circumference: Math.PI * 2,
                    tooltips: {
                        callbacks: {
                            title: function () {
                                return '';
                            },
                            label: function (tooltipItem, data) {
                                var dataLabel = data.labels[tooltipItem.index];
                                var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                                if (helpers.isArray(dataLabel)) {
                                    dataLabel = dataLabel.slice();
                                    dataLabel[0] += value;
                                } else {
                                    dataLabel += value;
                                }
                                return dataLabel;
                            }
                        }
                    }
                };
                defaults.pie = helpers.clone(defaults.doughnut);
                helpers.extend(defaults.pie, {
                    cutoutPercentage: 0
                });
                Chart.controllers.doughnut = Chart.controllers.pie = Chart.DatasetController.extend({
                    dataElementType: Chart.elements.Arc,
                    linkScales: helpers.noop,
                    getRingIndex: function (datasetIndex) {
                        var ringIndex = 0;
                        for (var j = 0; j < datasetIndex; ++j) {
                            if (this.chart.isDatasetVisible(j)) {
                                ++ringIndex;
                            }
                        }
                        return ringIndex;
                    },
                    update: function (reset) {
                        var me = this;
                        var chart = me.chart, chartArea = chart.chartArea, opts = chart.options, arcOpts = opts.elements.arc, availableWidth = chartArea.right - chartArea.left - arcOpts.borderWidth, availableHeight = chartArea.bottom - chartArea.top - arcOpts.borderWidth, minSize = Math.min(availableWidth, availableHeight), offset = {
                                x: 0,
                                y: 0
                            }, meta = me.getMeta(), cutoutPercentage = opts.cutoutPercentage, circumference = opts.circumference;
                        if (circumference < Math.PI * 2) {
                            var startAngle = opts.rotation % (Math.PI * 2);
                            startAngle += Math.PI * 2 * (startAngle >= Math.PI ? -1 : startAngle < -Math.PI ? 1 : 0);
                            var endAngle = startAngle + circumference;
                            var start = {
                                x: Math.cos(startAngle),
                                y: Math.sin(startAngle)
                            };
                            var end = {
                                x: Math.cos(endAngle),
                                y: Math.sin(endAngle)
                            };
                            var contains0 = startAngle <= 0 && 0 <= endAngle || startAngle <= Math.PI * 2 && Math.PI * 2 <= endAngle;
                            var contains90 = startAngle <= Math.PI * 0.5 && Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 2.5 && Math.PI * 2.5 <= endAngle;
                            var contains180 = startAngle <= -Math.PI && -Math.PI <= endAngle || startAngle <= Math.PI && Math.PI <= endAngle;
                            var contains270 = startAngle <= -Math.PI * 0.5 && -Math.PI * 0.5 <= endAngle || startAngle <= Math.PI * 1.5 && Math.PI * 1.5 <= endAngle;
                            var cutout = cutoutPercentage / 100;
                            var min = {
                                x: contains180 ? -1 : Math.min(start.x * (start.x < 0 ? 1 : cutout), end.x * (end.x < 0 ? 1 : cutout)),
                                y: contains270 ? -1 : Math.min(start.y * (start.y < 0 ? 1 : cutout), end.y * (end.y < 0 ? 1 : cutout))
                            };
                            var max = {
                                x: contains0 ? 1 : Math.max(start.x * (start.x > 0 ? 1 : cutout), end.x * (end.x > 0 ? 1 : cutout)),
                                y: contains90 ? 1 : Math.max(start.y * (start.y > 0 ? 1 : cutout), end.y * (end.y > 0 ? 1 : cutout))
                            };
                            var size = {
                                width: (max.x - min.x) * 0.5,
                                height: (max.y - min.y) * 0.5
                            };
                            minSize = Math.min(availableWidth / size.width, availableHeight / size.height);
                            offset = {
                                x: (max.x + min.x) * -0.5,
                                y: (max.y + min.y) * -0.5
                            };
                        }
                        chart.borderWidth = me.getMaxBorderWidth(meta.data);
                        chart.outerRadius = Math.max((minSize - chart.borderWidth) / 2, 0);
                        chart.innerRadius = Math.max(cutoutPercentage ? chart.outerRadius / 100 * cutoutPercentage : 0, 0);
                        chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
                        chart.offsetX = offset.x * chart.outerRadius;
                        chart.offsetY = offset.y * chart.outerRadius;
                        meta.total = me.calculateTotal();
                        me.outerRadius = chart.outerRadius - chart.radiusLength * me.getRingIndex(me.index);
                        me.innerRadius = Math.max(me.outerRadius - chart.radiusLength, 0);
                        helpers.each(meta.data, function (arc, index) {
                            me.updateElement(arc, index, reset);
                        });
                    },
                    updateElement: function (arc, index, reset) {
                        var me = this;
                        var chart = me.chart, chartArea = chart.chartArea, opts = chart.options, animationOpts = opts.animation, centerX = (chartArea.left + chartArea.right) / 2, centerY = (chartArea.top + chartArea.bottom) / 2, startAngle = opts.rotation, endAngle = opts.rotation, dataset = me.getDataset(), circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / (2 * Math.PI)), innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius, outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius, valueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                        helpers.extend(arc, {
                            _datasetIndex: me.index,
                            _index: index,
                            _model: {
                                x: centerX + chart.offsetX,
                                y: centerY + chart.offsetY,
                                startAngle: startAngle,
                                endAngle: endAngle,
                                circumference: circumference,
                                outerRadius: outerRadius,
                                innerRadius: innerRadius,
                                label: valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
                            }
                        });
                        var model = arc._model;
                        this.removeHoverStyle(arc);
                        if (!reset || !animationOpts.animateRotate) {
                            if (index === 0) {
                                model.startAngle = opts.rotation;
                            } else {
                                model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
                            }
                            model.endAngle = model.startAngle + model.circumference;
                        }
                        arc.pivot();
                    },
                    removeHoverStyle: function (arc) {
                        Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
                    },
                    calculateTotal: function () {
                        var dataset = this.getDataset();
                        var meta = this.getMeta();
                        var total = 0;
                        var value;
                        helpers.each(meta.data, function (element, index) {
                            value = dataset.data[index];
                            if (!isNaN(value) && !element.hidden) {
                                total += Math.abs(value);
                            }
                        });
                        return total;
                    },
                    calculateCircumference: function (value) {
                        var total = this.getMeta().total;
                        if (total > 0 && !isNaN(value)) {
                            return Math.PI * 2 * (value / total);
                        }
                        return 0;
                    },
                    getMaxBorderWidth: function (elements) {
                        var max = 0, index = this.index, length = elements.length, borderWidth, hoverWidth;
                        for (var i = 0; i < length; i++) {
                            borderWidth = elements[i]._model ? elements[i]._model.borderWidth : 0;
                            hoverWidth = elements[i]._chart ? elements[i]._chart.config.data.datasets[index].hoverBorderWidth : 0;
                            max = borderWidth > max ? borderWidth : max;
                            max = hoverWidth > max ? hoverWidth : max;
                        }
                        return max;
                    }
                });
            };
        },
        {}
    ],
    18: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.defaults.line = {
                    showLines: true,
                    spanGaps: false,
                    hover: {
                        mode: 'label'
                    },
                    scales: {
                        xAxes: [{
                                type: 'category',
                                id: 'x-axis-0'
                            }],
                        yAxes: [{
                                type: 'linear',
                                id: 'y-axis-0'
                            }]
                    }
                };
                function lineEnabled(dataset, options) {
                    return helpers.getValueOrDefault(dataset.showLine, options.showLines);
                }
                Chart.controllers.line = Chart.DatasetController.extend({
                    datasetElementType: Chart.elements.Line,
                    dataElementType: Chart.elements.Point,
                    update: function (reset) {
                        var me = this;
                        var meta = me.getMeta();
                        var line = meta.dataset;
                        var points = meta.data || [];
                        var options = me.chart.options;
                        var lineElementOptions = options.elements.line;
                        var scale = me.getScaleForId(meta.yAxisID);
                        var i, ilen, custom;
                        var dataset = me.getDataset();
                        var showLine = lineEnabled(dataset, options);
                        if (showLine) {
                            custom = line.custom || {};
                            if (dataset.tension !== undefined && dataset.lineTension === undefined) {
                                dataset.lineTension = dataset.tension;
                            }
                            line._scale = scale;
                            line._datasetIndex = me.index;
                            line._children = points;
                            line._model = {
                                spanGaps: dataset.spanGaps ? dataset.spanGaps : options.spanGaps,
                                tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
                                backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
                                borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
                                borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
                                borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
                                borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
                                borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
                                borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
                                fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
                                steppedLine: custom.steppedLine ? custom.steppedLine : helpers.getValueOrDefault(dataset.steppedLine, lineElementOptions.stepped),
                                cubicInterpolationMode: custom.cubicInterpolationMode ? custom.cubicInterpolationMode : helpers.getValueOrDefault(dataset.cubicInterpolationMode, lineElementOptions.cubicInterpolationMode),
                                scaleTop: scale.top,
                                scaleBottom: scale.bottom,
                                scaleZero: scale.getBasePixel()
                            };
                            line.pivot();
                        }
                        for (i = 0, ilen = points.length; i < ilen; ++i) {
                            me.updateElement(points[i], i, reset);
                        }
                        if (showLine && line._model.tension !== 0) {
                            me.updateBezierControlPoints();
                        }
                        for (i = 0, ilen = points.length; i < ilen; ++i) {
                            points[i].pivot();
                        }
                    },
                    getPointBackgroundColor: function (point, index) {
                        var backgroundColor = this.chart.options.elements.point.backgroundColor;
                        var dataset = this.getDataset();
                        var custom = point.custom || {};
                        if (custom.backgroundColor) {
                            backgroundColor = custom.backgroundColor;
                        } else if (dataset.pointBackgroundColor) {
                            backgroundColor = helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, backgroundColor);
                        } else if (dataset.backgroundColor) {
                            backgroundColor = dataset.backgroundColor;
                        }
                        return backgroundColor;
                    },
                    getPointBorderColor: function (point, index) {
                        var borderColor = this.chart.options.elements.point.borderColor;
                        var dataset = this.getDataset();
                        var custom = point.custom || {};
                        if (custom.borderColor) {
                            borderColor = custom.borderColor;
                        } else if (dataset.pointBorderColor) {
                            borderColor = helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, borderColor);
                        } else if (dataset.borderColor) {
                            borderColor = dataset.borderColor;
                        }
                        return borderColor;
                    },
                    getPointBorderWidth: function (point, index) {
                        var borderWidth = this.chart.options.elements.point.borderWidth;
                        var dataset = this.getDataset();
                        var custom = point.custom || {};
                        if (!isNaN(custom.borderWidth)) {
                            borderWidth = custom.borderWidth;
                        } else if (!isNaN(dataset.pointBorderWidth)) {
                            borderWidth = helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, borderWidth);
                        } else if (!isNaN(dataset.borderWidth)) {
                            borderWidth = dataset.borderWidth;
                        }
                        return borderWidth;
                    },
                    updateElement: function (point, index, reset) {
                        var me = this;
                        var meta = me.getMeta();
                        var custom = point.custom || {};
                        var dataset = me.getDataset();
                        var datasetIndex = me.index;
                        var value = dataset.data[index];
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var xScale = me.getScaleForId(meta.xAxisID);
                        var pointOptions = me.chart.options.elements.point;
                        var x, y;
                        var labels = me.chart.data.labels || [];
                        var includeOffset = labels.length === 1 || dataset.data.length === 1 || me.chart.isCombo;
                        if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
                            dataset.pointRadius = dataset.radius;
                        }
                        if (dataset.hitRadius !== undefined && dataset.pointHitRadius === undefined) {
                            dataset.pointHitRadius = dataset.hitRadius;
                        }
                        x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex, includeOffset);
                        y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
                        point._xScale = xScale;
                        point._yScale = yScale;
                        point._datasetIndex = datasetIndex;
                        point._index = index;
                        point._model = {
                            x: x,
                            y: y,
                            skip: custom.skip || isNaN(x) || isNaN(y),
                            radius: custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointOptions.radius),
                            pointStyle: custom.pointStyle || helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointOptions.pointStyle),
                            backgroundColor: me.getPointBackgroundColor(point, index),
                            borderColor: me.getPointBorderColor(point, index),
                            borderWidth: me.getPointBorderWidth(point, index),
                            tension: meta.dataset._model ? meta.dataset._model.tension : 0,
                            steppedLine: meta.dataset._model ? meta.dataset._model.steppedLine : false,
                            hitRadius: custom.hitRadius || helpers.getValueAtIndexOrDefault(dataset.pointHitRadius, index, pointOptions.hitRadius)
                        };
                    },
                    calculatePointY: function (value, index, datasetIndex) {
                        var me = this;
                        var chart = me.chart;
                        var meta = me.getMeta();
                        var yScale = me.getScaleForId(meta.yAxisID);
                        var sumPos = 0;
                        var sumNeg = 0;
                        var i, ds, dsMeta;
                        if (yScale.options.stacked) {
                            for (i = 0; i < datasetIndex; i++) {
                                ds = chart.data.datasets[i];
                                dsMeta = chart.getDatasetMeta(i);
                                if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id && chart.isDatasetVisible(i)) {
                                    var stackedRightValue = Number(yScale.getRightValue(ds.data[index]));
                                    if (stackedRightValue < 0) {
                                        sumNeg += stackedRightValue || 0;
                                    } else {
                                        sumPos += stackedRightValue || 0;
                                    }
                                }
                            }
                            var rightValue = Number(yScale.getRightValue(value));
                            if (rightValue < 0) {
                                return yScale.getPixelForValue(sumNeg + rightValue);
                            }
                            return yScale.getPixelForValue(sumPos + rightValue);
                        }
                        return yScale.getPixelForValue(value);
                    },
                    updateBezierControlPoints: function () {
                        var me = this;
                        var meta = me.getMeta();
                        var area = me.chart.chartArea;
                        var points = meta.data || [];
                        var i, ilen, point, model, controlPoints;
                        if (meta.dataset._model.spanGaps) {
                            points = points.filter(function (pt) {
                                return !pt._model.skip;
                            });
                        }
                        function capControlPoint(pt, min, max) {
                            return Math.max(Math.min(pt, max), min);
                        }
                        if (meta.dataset._model.cubicInterpolationMode === 'monotone') {
                            helpers.splineCurveMonotone(points);
                        } else {
                            for (i = 0, ilen = points.length; i < ilen; ++i) {
                                point = points[i];
                                model = point._model;
                                controlPoints = helpers.splineCurve(helpers.previousItem(points, i)._model, model, helpers.nextItem(points, i)._model, meta.dataset._model.tension);
                                model.controlPointPreviousX = controlPoints.previous.x;
                                model.controlPointPreviousY = controlPoints.previous.y;
                                model.controlPointNextX = controlPoints.next.x;
                                model.controlPointNextY = controlPoints.next.y;
                            }
                        }
                        if (me.chart.options.elements.line.capBezierPoints) {
                            for (i = 0, ilen = points.length; i < ilen; ++i) {
                                model = points[i]._model;
                                model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
                                model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
                                model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
                                model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
                            }
                        }
                    },
                    draw: function (ease) {
                        var me = this;
                        var meta = me.getMeta();
                        var points = meta.data || [];
                        var easingDecimal = ease || 1;
                        var i, ilen;
                        for (i = 0, ilen = points.length; i < ilen; ++i) {
                            points[i].transition(easingDecimal);
                        }
                        Chart.canvasHelpers.clipArea(me.chart.chart.ctx, me.chart.chartArea);
                        if (lineEnabled(me.getDataset(), me.chart.options)) {
                            meta.dataset.transition(easingDecimal).draw();
                        }
                        Chart.canvasHelpers.unclipArea(me.chart.chart.ctx);
                        for (i = 0, ilen = points.length; i < ilen; ++i) {
                            points[i].draw(me.chart.chartArea);
                        }
                    },
                    setHoverStyle: function (point) {
                        var dataset = this.chart.data.datasets[point._datasetIndex];
                        var index = point._index;
                        var custom = point.custom || {};
                        var model = point._model;
                        model.radius = custom.hoverRadius || helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
                        model.backgroundColor = custom.hoverBackgroundColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
                        model.borderColor = custom.hoverBorderColor || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
                        model.borderWidth = custom.hoverBorderWidth || helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
                    },
                    removeHoverStyle: function (point) {
                        var me = this;
                        var dataset = me.chart.data.datasets[point._datasetIndex];
                        var index = point._index;
                        var custom = point.custom || {};
                        var model = point._model;
                        if (dataset.radius !== undefined && dataset.pointRadius === undefined) {
                            dataset.pointRadius = dataset.radius;
                        }
                        model.radius = custom.radius || helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, me.chart.options.elements.point.radius);
                        model.backgroundColor = me.getPointBackgroundColor(point, index);
                        model.borderColor = me.getPointBorderColor(point, index);
                        model.borderWidth = me.getPointBorderWidth(point, index);
                    }
                });
            };
        },
        {}
    ],
    19: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.defaults.polarArea = {
                    scale: {
                        type: 'radialLinear',
                        lineArc: true,
                        ticks: {
                            beginAtZero: true
                        }
                    },
                    animation: {
                        animateRotate: true,
                        animateScale: true
                    },
                    startAngle: -0.5 * Math.PI,
                    aspectRatio: 1,
                    legendCallback: function (chart) {
                        var text = [];
                        text.push('<ul class="' + chart.id + '-legend">');
                        var data = chart.data;
                        var datasets = data.datasets;
                        var labels = data.labels;
                        if (datasets.length) {
                            for (var i = 0; i < datasets[0].data.length; ++i) {
                                text.push('<li><span style="background-color:' + datasets[0].backgroundColor[i] + '"></span>');
                                if (labels[i]) {
                                    text.push(labels[i]);
                                }
                                text.push('</li>');
                            }
                        }
                        text.push('</ul>');
                        return text.join('');
                    },
                    legend: {
                        labels: {
                            generateLabels: function (chart) {
                                var data = chart.data;
                                if (data.labels.length && data.datasets.length) {
                                    return data.labels.map(function (label, i) {
                                        var meta = chart.getDatasetMeta(0);
                                        var ds = data.datasets[0];
                                        var arc = meta.data[i];
                                        var custom = arc.custom || {};
                                        var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                                        var arcOpts = chart.options.elements.arc;
                                        var fill = custom.backgroundColor ? custom.backgroundColor : getValueAtIndexOrDefault(ds.backgroundColor, i, arcOpts.backgroundColor);
                                        var stroke = custom.borderColor ? custom.borderColor : getValueAtIndexOrDefault(ds.borderColor, i, arcOpts.borderColor);
                                        var bw = custom.borderWidth ? custom.borderWidth : getValueAtIndexOrDefault(ds.borderWidth, i, arcOpts.borderWidth);
                                        return {
                                            text: label,
                                            fillStyle: fill,
                                            strokeStyle: stroke,
                                            lineWidth: bw,
                                            hidden: isNaN(ds.data[i]) || meta.data[i].hidden,
                                            index: i
                                        };
                                    });
                                }
                                return [];
                            }
                        },
                        onClick: function (e, legendItem) {
                            var index = legendItem.index;
                            var chart = this.chart;
                            var i, ilen, meta;
                            for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
                                meta = chart.getDatasetMeta(i);
                                meta.data[index].hidden = !meta.data[index].hidden;
                            }
                            chart.update();
                        }
                    },
                    tooltips: {
                        callbacks: {
                            title: function () {
                                return '';
                            },
                            label: function (tooltipItem, data) {
                                return data.labels[tooltipItem.index] + ': ' + tooltipItem.yLabel;
                            }
                        }
                    }
                };
                Chart.controllers.polarArea = Chart.DatasetController.extend({
                    dataElementType: Chart.elements.Arc,
                    linkScales: helpers.noop,
                    update: function (reset) {
                        var me = this;
                        var chart = me.chart;
                        var chartArea = chart.chartArea;
                        var meta = me.getMeta();
                        var opts = chart.options;
                        var arcOpts = opts.elements.arc;
                        var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
                        chart.outerRadius = Math.max((minSize - arcOpts.borderWidth / 2) / 2, 0);
                        chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
                        chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
                        me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
                        me.innerRadius = me.outerRadius - chart.radiusLength;
                        meta.count = me.countVisibleElements();
                        helpers.each(meta.data, function (arc, index) {
                            me.updateElement(arc, index, reset);
                        });
                    },
                    updateElement: function (arc, index, reset) {
                        var me = this;
                        var chart = me.chart;
                        var dataset = me.getDataset();
                        var opts = chart.options;
                        var animationOpts = opts.animation;
                        var scale = chart.scale;
                        var getValueAtIndexOrDefault = helpers.getValueAtIndexOrDefault;
                        var labels = chart.data.labels;
                        var circumference = me.calculateCircumference(dataset.data[index]);
                        var centerX = scale.xCenter;
                        var centerY = scale.yCenter;
                        var visibleCount = 0;
                        var meta = me.getMeta();
                        for (var i = 0; i < index; ++i) {
                            if (!isNaN(dataset.data[i]) && !meta.data[i].hidden) {
                                ++visibleCount;
                            }
                        }
                        var datasetStartAngle = opts.startAngle;
                        var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
                        var startAngle = datasetStartAngle + circumference * visibleCount;
                        var endAngle = startAngle + (arc.hidden ? 0 : circumference);
                        var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
                        helpers.extend(arc, {
                            _datasetIndex: me.index,
                            _index: index,
                            _scale: scale,
                            _model: {
                                x: centerX,
                                y: centerY,
                                innerRadius: 0,
                                outerRadius: reset ? resetRadius : distance,
                                startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
                                endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
                                label: getValueAtIndexOrDefault(labels, index, labels[index])
                            }
                        });
                        me.removeHoverStyle(arc);
                        arc.pivot();
                    },
                    removeHoverStyle: function (arc) {
                        Chart.DatasetController.prototype.removeHoverStyle.call(this, arc, this.chart.options.elements.arc);
                    },
                    countVisibleElements: function () {
                        var dataset = this.getDataset();
                        var meta = this.getMeta();
                        var count = 0;
                        helpers.each(meta.data, function (element, index) {
                            if (!isNaN(dataset.data[index]) && !element.hidden) {
                                count++;
                            }
                        });
                        return count;
                    },
                    calculateCircumference: function (value) {
                        var count = this.getMeta().count;
                        if (count > 0 && !isNaN(value)) {
                            return 2 * Math.PI / count;
                        }
                        return 0;
                    }
                });
            };
        },
        {}
    ],
    20: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.defaults.radar = {
                    aspectRatio: 1,
                    scale: {
                        type: 'radialLinear'
                    },
                    elements: {
                        line: {
                            tension: 0
                        }
                    }
                };
                Chart.controllers.radar = Chart.DatasetController.extend({
                    datasetElementType: Chart.elements.Line,
                    dataElementType: Chart.elements.Point,
                    linkScales: helpers.noop,
                    update: function (reset) {
                        var me = this;
                        var meta = me.getMeta();
                        var line = meta.dataset;
                        var points = meta.data;
                        var custom = line.custom || {};
                        var dataset = me.getDataset();
                        var lineElementOptions = me.chart.options.elements.line;
                        var scale = me.chart.scale;
                        if (dataset.tension !== undefined && dataset.lineTension === undefined) {
                            dataset.lineTension = dataset.tension;
                        }
                        helpers.extend(meta.dataset, {
                            _datasetIndex: me.index,
                            _children: points,
                            _loop: true,
                            _model: {
                                tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, lineElementOptions.tension),
                                backgroundColor: custom.backgroundColor ? custom.backgroundColor : dataset.backgroundColor || lineElementOptions.backgroundColor,
                                borderWidth: custom.borderWidth ? custom.borderWidth : dataset.borderWidth || lineElementOptions.borderWidth,
                                borderColor: custom.borderColor ? custom.borderColor : dataset.borderColor || lineElementOptions.borderColor,
                                fill: custom.fill ? custom.fill : dataset.fill !== undefined ? dataset.fill : lineElementOptions.fill,
                                borderCapStyle: custom.borderCapStyle ? custom.borderCapStyle : dataset.borderCapStyle || lineElementOptions.borderCapStyle,
                                borderDash: custom.borderDash ? custom.borderDash : dataset.borderDash || lineElementOptions.borderDash,
                                borderDashOffset: custom.borderDashOffset ? custom.borderDashOffset : dataset.borderDashOffset || lineElementOptions.borderDashOffset,
                                borderJoinStyle: custom.borderJoinStyle ? custom.borderJoinStyle : dataset.borderJoinStyle || lineElementOptions.borderJoinStyle,
                                scaleTop: scale.top,
                                scaleBottom: scale.bottom,
                                scaleZero: scale.getBasePosition()
                            }
                        });
                        meta.dataset.pivot();
                        helpers.each(points, function (point, index) {
                            me.updateElement(point, index, reset);
                        }, me);
                        me.updateBezierControlPoints();
                    },
                    updateElement: function (point, index, reset) {
                        var me = this;
                        var custom = point.custom || {};
                        var dataset = me.getDataset();
                        var scale = me.chart.scale;
                        var pointElementOptions = me.chart.options.elements.point;
                        var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
                        helpers.extend(point, {
                            _datasetIndex: me.index,
                            _index: index,
                            _scale: scale,
                            _model: {
                                x: reset ? scale.xCenter : pointPosition.x,
                                y: reset ? scale.yCenter : pointPosition.y,
                                tension: custom.tension ? custom.tension : helpers.getValueOrDefault(dataset.lineTension, me.chart.options.elements.line.tension),
                                radius: custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.pointRadius, index, pointElementOptions.radius),
                                backgroundColor: custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor),
                                borderColor: custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor),
                                borderWidth: custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth),
                                pointStyle: custom.pointStyle ? custom.pointStyle : helpers.getValueAtIndexOrDefault(dataset.pointStyle, index, pointElementOptions.pointStyle),
                                hitRadius: custom.hitRadius ? custom.hitRadius : helpers.getValueAtIndexOrDefault(dataset.hitRadius, index, pointElementOptions.hitRadius)
                            }
                        });
                        point._model.skip = custom.skip ? custom.skip : isNaN(point._model.x) || isNaN(point._model.y);
                    },
                    updateBezierControlPoints: function () {
                        var chartArea = this.chart.chartArea;
                        var meta = this.getMeta();
                        helpers.each(meta.data, function (point, index) {
                            var model = point._model;
                            var controlPoints = helpers.splineCurve(helpers.previousItem(meta.data, index, true)._model, model, helpers.nextItem(meta.data, index, true)._model, model.tension);
                            model.controlPointPreviousX = Math.max(Math.min(controlPoints.previous.x, chartArea.right), chartArea.left);
                            model.controlPointPreviousY = Math.max(Math.min(controlPoints.previous.y, chartArea.bottom), chartArea.top);
                            model.controlPointNextX = Math.max(Math.min(controlPoints.next.x, chartArea.right), chartArea.left);
                            model.controlPointNextY = Math.max(Math.min(controlPoints.next.y, chartArea.bottom), chartArea.top);
                            point.pivot();
                        });
                    },
                    draw: function (ease) {
                        var meta = this.getMeta();
                        var easingDecimal = ease || 1;
                        helpers.each(meta.data, function (point) {
                            point.transition(easingDecimal);
                        });
                        meta.dataset.transition(easingDecimal).draw();
                        helpers.each(meta.data, function (point) {
                            point.draw();
                        });
                    },
                    setHoverStyle: function (point) {
                        var dataset = this.chart.data.datasets[point._datasetIndex];
                        var custom = point.custom || {};
                        var index = point._index;
                        var model = point._model;
                        model.radius = custom.hoverRadius ? custom.hoverRadius : helpers.getValueAtIndexOrDefault(dataset.pointHoverRadius, index, this.chart.options.elements.point.hoverRadius);
                        model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBackgroundColor, index, helpers.getHoverColor(model.backgroundColor));
                        model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderColor, index, helpers.getHoverColor(model.borderColor));
                        model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : helpers.getValueAtIndexOrDefault(dataset.pointHoverBorderWidth, index, model.borderWidth);
                    },
                    removeHoverStyle: function (point) {
                        var dataset = this.chart.data.datasets[point._datasetIndex];
                        var custom = point.custom || {};
                        var index = point._index;
                        var model = point._model;
                        var pointElementOptions = this.chart.options.elements.point;
                        model.radius = custom.radius ? custom.radius : helpers.getValueAtIndexOrDefault(dataset.radius, index, pointElementOptions.radius);
                        model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : helpers.getValueAtIndexOrDefault(dataset.pointBackgroundColor, index, pointElementOptions.backgroundColor);
                        model.borderColor = custom.borderColor ? custom.borderColor : helpers.getValueAtIndexOrDefault(dataset.pointBorderColor, index, pointElementOptions.borderColor);
                        model.borderWidth = custom.borderWidth ? custom.borderWidth : helpers.getValueAtIndexOrDefault(dataset.pointBorderWidth, index, pointElementOptions.borderWidth);
                    }
                });
            };
        },
        {}
    ],
    21: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.defaults.global.animation = {
                    duration: 1000,
                    easing: 'easeOutQuart',
                    onProgress: helpers.noop,
                    onComplete: helpers.noop
                };
                Chart.Animation = Chart.Element.extend({
                    currentStep: null,
                    numSteps: 60,
                    easing: '',
                    render: null,
                    onAnimationProgress: null,
                    onAnimationComplete: null
                });
                Chart.animationService = {
                    frameDuration: 17,
                    animations: [],
                    dropFrames: 0,
                    request: null,
                    addAnimation: function (chartInstance, animationObject, duration, lazy) {
                        var me = this;
                        if (!lazy) {
                            chartInstance.animating = true;
                        }
                        for (var index = 0; index < me.animations.length; ++index) {
                            if (me.animations[index].chartInstance === chartInstance) {
                                me.animations[index].animationObject = animationObject;
                                return;
                            }
                        }
                        me.animations.push({
                            chartInstance: chartInstance,
                            animationObject: animationObject
                        });
                        if (me.animations.length === 1) {
                            me.requestAnimationFrame();
                        }
                    },
                    cancelAnimation: function (chartInstance) {
                        var index = helpers.findIndex(this.animations, function (animationWrapper) {
                            return animationWrapper.chartInstance === chartInstance;
                        });
                        if (index !== -1) {
                            this.animations.splice(index, 1);
                            chartInstance.animating = false;
                        }
                    },
                    requestAnimationFrame: function () {
                        var me = this;
                        if (me.request === null) {
                            me.request = helpers.requestAnimFrame.call(window, function () {
                                me.request = null;
                                me.startDigest();
                            });
                        }
                    },
                    startDigest: function () {
                        var me = this;
                        var startTime = Date.now();
                        var framesToDrop = 0;
                        if (me.dropFrames > 1) {
                            framesToDrop = Math.floor(me.dropFrames);
                            me.dropFrames = me.dropFrames % 1;
                        }
                        var i = 0;
                        while (i < me.animations.length) {
                            if (me.animations[i].animationObject.currentStep === null) {
                                me.animations[i].animationObject.currentStep = 0;
                            }
                            me.animations[i].animationObject.currentStep += 1 + framesToDrop;
                            if (me.animations[i].animationObject.currentStep > me.animations[i].animationObject.numSteps) {
                                me.animations[i].animationObject.currentStep = me.animations[i].animationObject.numSteps;
                            }
                            me.animations[i].animationObject.render(me.animations[i].chartInstance, me.animations[i].animationObject);
                            if (me.animations[i].animationObject.onAnimationProgress && me.animations[i].animationObject.onAnimationProgress.call) {
                                me.animations[i].animationObject.onAnimationProgress.call(me.animations[i].chartInstance, me.animations[i]);
                            }
                            if (me.animations[i].animationObject.currentStep === me.animations[i].animationObject.numSteps) {
                                if (me.animations[i].animationObject.onAnimationComplete && me.animations[i].animationObject.onAnimationComplete.call) {
                                    me.animations[i].animationObject.onAnimationComplete.call(me.animations[i].chartInstance, me.animations[i]);
                                }
                                me.animations[i].chartInstance.animating = false;
                                me.animations.splice(i, 1);
                            } else {
                                ++i;
                            }
                        }
                        var endTime = Date.now();
                        var dropFrames = (endTime - startTime) / me.frameDuration;
                        me.dropFrames += dropFrames;
                        if (me.animations.length > 0) {
                            me.requestAnimationFrame();
                        }
                    }
                };
            };
        },
        {}
    ],
    22: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.canvasHelpers = {};
                helpers.drawPoint = function (ctx, pointStyle, radius, x, y) {
                    var type, edgeLength, xOffset, yOffset, height, size;
                    if (typeof pointStyle === 'object') {
                        type = pointStyle.toString();
                        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
                            ctx.drawImage(pointStyle, x - pointStyle.width / 2, y - pointStyle.height / 2);
                            return;
                        }
                    }
                    if (isNaN(radius) || radius <= 0) {
                        return;
                    }
                    switch (pointStyle) {
                    case 'triangle':
                        ctx.beginPath();
                        edgeLength = 3 * radius / Math.sqrt(3);
                        height = edgeLength * Math.sqrt(3) / 2;
                        ctx.moveTo(x - edgeLength / 2, y + height / 3);
                        ctx.lineTo(x + edgeLength / 2, y + height / 3);
                        ctx.lineTo(x, y - 2 * height / 3);
                        ctx.closePath();
                        ctx.fill();
                        break;
                    case 'rect':
                        size = 1 / Math.SQRT2 * radius;
                        ctx.beginPath();
                        ctx.fillRect(x - size, y - size, 2 * size, 2 * size);
                        ctx.strokeRect(x - size, y - size, 2 * size, 2 * size);
                        break;
                    case 'rectRounded':
                        var offset = radius / Math.SQRT2;
                        var leftX = x - offset;
                        var topY = y - offset;
                        var sideSize = Math.SQRT2 * radius;
                        Chart.helpers.drawRoundedRectangle(ctx, leftX, topY, sideSize, sideSize, radius / 2);
                        ctx.fill();
                        break;
                    case 'rectRot':
                        size = 1 / Math.SQRT2 * radius;
                        ctx.beginPath();
                        ctx.moveTo(x - size, y);
                        ctx.lineTo(x, y + size);
                        ctx.lineTo(x + size, y);
                        ctx.lineTo(x, y - size);
                        ctx.closePath();
                        ctx.fill();
                        break;
                    case 'cross':
                        ctx.beginPath();
                        ctx.moveTo(x, y + radius);
                        ctx.lineTo(x, y - radius);
                        ctx.moveTo(x - radius, y);
                        ctx.lineTo(x + radius, y);
                        ctx.closePath();
                        break;
                    case 'crossRot':
                        ctx.beginPath();
                        xOffset = Math.cos(Math.PI / 4) * radius;
                        yOffset = Math.sin(Math.PI / 4) * radius;
                        ctx.moveTo(x - xOffset, y - yOffset);
                        ctx.lineTo(x + xOffset, y + yOffset);
                        ctx.moveTo(x - xOffset, y + yOffset);
                        ctx.lineTo(x + xOffset, y - yOffset);
                        ctx.closePath();
                        break;
                    case 'star':
                        ctx.beginPath();
                        ctx.moveTo(x, y + radius);
                        ctx.lineTo(x, y - radius);
                        ctx.moveTo(x - radius, y);
                        ctx.lineTo(x + radius, y);
                        xOffset = Math.cos(Math.PI / 4) * radius;
                        yOffset = Math.sin(Math.PI / 4) * radius;
                        ctx.moveTo(x - xOffset, y - yOffset);
                        ctx.lineTo(x + xOffset, y + yOffset);
                        ctx.moveTo(x - xOffset, y + yOffset);
                        ctx.lineTo(x + xOffset, y - yOffset);
                        ctx.closePath();
                        break;
                    case 'line':
                        ctx.beginPath();
                        ctx.moveTo(x - radius, y);
                        ctx.lineTo(x + radius, y);
                        ctx.closePath();
                        break;
                    case 'dash':
                        ctx.beginPath();
                        ctx.moveTo(x, y);
                        ctx.lineTo(x + radius, y);
                        ctx.closePath();
                        break;
                    default:
                        ctx.beginPath();
                        ctx.arc(x, y, radius, 0, Math.PI * 2);
                        ctx.closePath();
                        ctx.fill();
                        break;
                    }
                    ctx.stroke();
                };
                helpers.clipArea = function (ctx, clipArea) {
                    ctx.save();
                    ctx.beginPath();
                    ctx.rect(clipArea.left, clipArea.top, clipArea.right - clipArea.left, clipArea.bottom - clipArea.top);
                    ctx.clip();
                };
                helpers.unclipArea = function (ctx) {
                    ctx.restore();
                };
            };
        },
        {}
    ],
    23: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                var plugins = Chart.plugins;
                var platform = Chart.platform;
                Chart.types = {};
                Chart.instances = {};
                Chart.controllers = {};
                function initConfig(config) {
                    config = config || {};
                    var data = config.data = config.data || {};
                    data.datasets = data.datasets || [];
                    data.labels = data.labels || [];
                    config.options = helpers.configMerge(Chart.defaults.global, Chart.defaults[config.type], config.options || {});
                    return config;
                }
                function updateConfig(chart) {
                    var newOptions = chart.options;
                    if (newOptions.scale) {
                        chart.scale.options = newOptions.scale;
                    } else if (newOptions.scales) {
                        newOptions.scales.xAxes.concat(newOptions.scales.yAxes).forEach(function (scaleOptions) {
                            chart.scales[scaleOptions.id].options = scaleOptions;
                        });
                    }
                    chart.tooltip._options = newOptions.tooltips;
                }
                Chart.Controller = function (item, config, instance) {
                    var me = this;
                    config = initConfig(config);
                    var context = platform.acquireContext(item, config);
                    var canvas = context && context.canvas;
                    var height = canvas && canvas.height;
                    var width = canvas && canvas.width;
                    instance.ctx = context;
                    instance.canvas = canvas;
                    instance.config = config;
                    instance.width = width;
                    instance.height = height;
                    instance.aspectRatio = height ? width / height : null;
                    me.id = helpers.uid();
                    me.chart = instance;
                    me.config = config;
                    me.options = config.options;
                    me._bufferedRender = false;
                    Chart.instances[me.id] = me;
                    Object.defineProperty(me, 'data', {
                        get: function () {
                            return me.config.data;
                        }
                    });
                    if (!context || !canvas) {
                        console.error('Failed to create chart: can\'t acquire context from the given item');
                        return me;
                    }
                    me.initialize();
                    me.update();
                    return me;
                };
                helpers.extend(Chart.Controller.prototype, {
                    initialize: function () {
                        var me = this;
                        plugins.notify(me, 'beforeInit');
                        helpers.retinaScale(me.chart);
                        me.bindEvents();
                        if (me.options.responsive) {
                            me.resize(true);
                        }
                        me.ensureScalesHaveIDs();
                        me.buildScales();
                        me.initToolTip();
                        plugins.notify(me, 'afterInit');
                        return me;
                    },
                    clear: function () {
                        helpers.clear(this.chart);
                        return this;
                    },
                    stop: function () {
                        Chart.animationService.cancelAnimation(this);
                        return this;
                    },
                    resize: function (silent) {
                        var me = this;
                        var chart = me.chart;
                        var options = me.options;
                        var canvas = chart.canvas;
                        var aspectRatio = options.maintainAspectRatio && chart.aspectRatio || null;
                        var newWidth = Math.floor(helpers.getMaximumWidth(canvas));
                        var newHeight = Math.floor(aspectRatio ? newWidth / aspectRatio : helpers.getMaximumHeight(canvas));
                        if (chart.width === newWidth && chart.height === newHeight) {
                            return;
                        }
                        canvas.width = chart.width = newWidth;
                        canvas.height = chart.height = newHeight;
                        canvas.style.width = newWidth + 'px';
                        canvas.style.height = newHeight + 'px';
                        helpers.retinaScale(chart);
                        if (!silent) {
                            var newSize = {
                                width: newWidth,
                                height: newHeight
                            };
                            plugins.notify(me, 'resize', [newSize]);
                            if (me.options.onResize) {
                                me.options.onResize(me, newSize);
                            }
                            me.stop();
                            me.update(me.options.responsiveAnimationDuration);
                        }
                    },
                    ensureScalesHaveIDs: function () {
                        var options = this.options;
                        var scalesOptions = options.scales || {};
                        var scaleOptions = options.scale;
                        helpers.each(scalesOptions.xAxes, function (xAxisOptions, index) {
                            xAxisOptions.id = xAxisOptions.id || 'x-axis-' + index;
                        });
                        helpers.each(scalesOptions.yAxes, function (yAxisOptions, index) {
                            yAxisOptions.id = yAxisOptions.id || 'y-axis-' + index;
                        });
                        if (scaleOptions) {
                            scaleOptions.id = scaleOptions.id || 'scale';
                        }
                    },
                    buildScales: function () {
                        var me = this;
                        var options = me.options;
                        var scales = me.scales = {};
                        var items = [];
                        if (options.scales) {
                            items = items.concat((options.scales.xAxes || []).map(function (xAxisOptions) {
                                return {
                                    options: xAxisOptions,
                                    dtype: 'category'
                                };
                            }), (options.scales.yAxes || []).map(function (yAxisOptions) {
                                return {
                                    options: yAxisOptions,
                                    dtype: 'linear'
                                };
                            }));
                        }
                        if (options.scale) {
                            items.push({
                                options: options.scale,
                                dtype: 'radialLinear',
                                isDefault: true
                            });
                        }
                        helpers.each(items, function (item) {
                            var scaleOptions = item.options;
                            var scaleType = helpers.getValueOrDefault(scaleOptions.type, item.dtype);
                            var scaleClass = Chart.scaleService.getScaleConstructor(scaleType);
                            if (!scaleClass) {
                                return;
                            }
                            var scale = new scaleClass({
                                id: scaleOptions.id,
                                options: scaleOptions,
                                ctx: me.chart.ctx,
                                chart: me
                            });
                            scales[scale.id] = scale;
                            if (item.isDefault) {
                                me.scale = scale;
                            }
                        });
                        Chart.scaleService.addScalesToLayout(this);
                    },
                    buildOrUpdateControllers: function () {
                        var me = this;
                        var types = [];
                        var newControllers = [];
                        helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                            var meta = me.getDatasetMeta(datasetIndex);
                            if (!meta.type) {
                                meta.type = dataset.type || me.config.type;
                            }
                            types.push(meta.type);
                            if (meta.controller) {
                                meta.controller.updateIndex(datasetIndex);
                            } else {
                                meta.controller = new Chart.controllers[meta.type](me, datasetIndex);
                                newControllers.push(meta.controller);
                            }
                        }, me);
                        if (types.length > 1) {
                            for (var i = 1; i < types.length; i++) {
                                if (types[i] !== types[i - 1]) {
                                    me.isCombo = true;
                                    break;
                                }
                            }
                        }
                        return newControllers;
                    },
                    resetElements: function () {
                        var me = this;
                        helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                            me.getDatasetMeta(datasetIndex).controller.reset();
                        }, me);
                    },
                    reset: function () {
                        this.resetElements();
                        this.tooltip.initialize();
                    },
                    update: function (animationDuration, lazy) {
                        var me = this;
                        updateConfig(me);
                        if (plugins.notify(me, 'beforeUpdate') === false) {
                            return;
                        }
                        me.tooltip._data = me.data;
                        var newControllers = me.buildOrUpdateControllers();
                        helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                            me.getDatasetMeta(datasetIndex).controller.buildOrUpdateElements();
                        }, me);
                        me.updateLayout();
                        helpers.each(newControllers, function (controller) {
                            controller.reset();
                        });
                        me.updateDatasets();
                        plugins.notify(me, 'afterUpdate');
                        if (me._bufferedRender) {
                            me._bufferedRequest = {
                                lazy: lazy,
                                duration: animationDuration
                            };
                        } else {
                            me.render(animationDuration, lazy);
                        }
                    },
                    updateLayout: function () {
                        var me = this;
                        if (plugins.notify(me, 'beforeLayout') === false) {
                            return;
                        }
                        Chart.layoutService.update(this, this.chart.width, this.chart.height);
                        plugins.notify(me, 'afterScaleUpdate');
                        plugins.notify(me, 'afterLayout');
                    },
                    updateDatasets: function () {
                        var me = this;
                        if (plugins.notify(me, 'beforeDatasetsUpdate') === false) {
                            return;
                        }
                        for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
                            me.getDatasetMeta(i).controller.update();
                        }
                        plugins.notify(me, 'afterDatasetsUpdate');
                    },
                    render: function (duration, lazy) {
                        var me = this;
                        if (plugins.notify(me, 'beforeRender') === false) {
                            return;
                        }
                        var animationOptions = me.options.animation;
                        var onComplete = function () {
                            plugins.notify(me, 'afterRender');
                            var callback = animationOptions && animationOptions.onComplete;
                            if (callback && callback.call) {
                                callback.call(me);
                            }
                        };
                        if (animationOptions && (typeof duration !== 'undefined' && duration !== 0 || typeof duration === 'undefined' && animationOptions.duration !== 0)) {
                            var animation = new Chart.Animation();
                            animation.numSteps = (duration || animationOptions.duration) / 16.66;
                            animation.easing = animationOptions.easing;
                            animation.render = function (chartInstance, animationObject) {
                                var easingFunction = helpers.easingEffects[animationObject.easing];
                                var stepDecimal = animationObject.currentStep / animationObject.numSteps;
                                var easeDecimal = easingFunction(stepDecimal);
                                chartInstance.draw(easeDecimal, stepDecimal, animationObject.currentStep);
                            };
                            animation.onAnimationProgress = animationOptions.onProgress;
                            animation.onAnimationComplete = onComplete;
                            Chart.animationService.addAnimation(me, animation, duration, lazy);
                        } else {
                            me.draw();
                            onComplete();
                        }
                        return me;
                    },
                    draw: function (easingValue) {
                        var me = this;
                        me.clear();
                        if (easingValue === undefined || easingValue === null) {
                            easingValue = 1;
                        }
                        if (plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
                            return;
                        }
                        helpers.each(me.boxes, function (box) {
                            box.draw(me.chartArea);
                        }, me);
                        if (me.scale) {
                            me.scale.draw();
                        }
                        me.drawDatasets(easingValue);
                        me.tooltip.transition(easingValue).draw();
                        plugins.notify(me, 'afterDraw', [easingValue]);
                    },
                    drawDatasets: function (easingValue) {
                        var me = this;
                        if (plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
                            return;
                        }
                        helpers.each(me.data.datasets, function (dataset, datasetIndex) {
                            if (me.isDatasetVisible(datasetIndex)) {
                                me.getDatasetMeta(datasetIndex).controller.draw(easingValue);
                            }
                        }, me, true);
                        plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
                    },
                    getElementAtEvent: function (e) {
                        return Chart.Interaction.modes.single(this, e);
                    },
                    getElementsAtEvent: function (e) {
                        return Chart.Interaction.modes.label(this, e, {
                            intersect: true
                        });
                    },
                    getElementsAtXAxis: function (e) {
                        return Chart.Interaction.modes['x-axis'](this, e, {
                            intersect: true
                        });
                    },
                    getElementsAtEventForMode: function (e, mode, options) {
                        var method = Chart.Interaction.modes[mode];
                        if (typeof method === 'function') {
                            return method(this, e, options);
                        }
                        return [];
                    },
                    getDatasetAtEvent: function (e) {
                        return Chart.Interaction.modes.dataset(this, e, {
                            intersect: true
                        });
                    },
                    getDatasetMeta: function (datasetIndex) {
                        var me = this;
                        var dataset = me.data.datasets[datasetIndex];
                        if (!dataset._meta) {
                            dataset._meta = {};
                        }
                        var meta = dataset._meta[me.id];
                        if (!meta) {
                            meta = dataset._meta[me.id] = {
                                type: null,
                                data: [],
                                dataset: null,
                                controller: null,
                                hidden: null,
                                xAxisID: null,
                                yAxisID: null
                            };
                        }
                        return meta;
                    },
                    getVisibleDatasetCount: function () {
                        var count = 0;
                        for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
                            if (this.isDatasetVisible(i)) {
                                count++;
                            }
                        }
                        return count;
                    },
                    isDatasetVisible: function (datasetIndex) {
                        var meta = this.getDatasetMeta(datasetIndex);
                        return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
                    },
                    generateLegend: function () {
                        return this.options.legendCallback(this);
                    },
                    destroy: function () {
                        var me = this;
                        var canvas = me.chart.canvas;
                        var meta, i, ilen;
                        me.stop();
                        for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
                            meta = me.getDatasetMeta(i);
                            if (meta.controller) {
                                meta.controller.destroy();
                                meta.controller = null;
                            }
                        }
                        if (canvas) {
                            me.unbindEvents();
                            helpers.clear(me.chart);
                            platform.releaseContext(me.chart.ctx);
                            me.chart.canvas = null;
                            me.chart.ctx = null;
                        }
                        plugins.notify(me, 'destroy');
                        delete Chart.instances[me.id];
                    },
                    toBase64Image: function () {
                        return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments);
                    },
                    initToolTip: function () {
                        var me = this;
                        me.tooltip = new Chart.Tooltip({
                            _chart: me.chart,
                            _chartInstance: me,
                            _data: me.data,
                            _options: me.options.tooltips
                        }, me);
                        me.tooltip.initialize();
                    },
                    bindEvents: function () {
                        var me = this;
                        var listeners = me._listeners = {};
                        var listener = function () {
                            me.eventHandler.apply(me, arguments);
                        };
                        helpers.each(me.options.events, function (type) {
                            platform.addEventListener(me, type, listener);
                            listeners[type] = listener;
                        });
                        if (me.options.responsive) {
                            listener = function () {
                                me.resize();
                            };
                            platform.addEventListener(me, 'resize', listener);
                            listeners.resize = listener;
                        }
                    },
                    unbindEvents: function () {
                        var me = this;
                        var listeners = me._listeners;
                        if (!listeners) {
                            return;
                        }
                        delete me._listeners;
                        helpers.each(listeners, function (listener, type) {
                            platform.removeEventListener(me, type, listener);
                        });
                    },
                    updateHoverStyle: function (elements, mode, enabled) {
                        var method = enabled ? 'setHoverStyle' : 'removeHoverStyle';
                        var element, i, ilen;
                        for (i = 0, ilen = elements.length; i < ilen; ++i) {
                            element = elements[i];
                            if (element) {
                                this.getDatasetMeta(element._datasetIndex).controller[method](element);
                            }
                        }
                    },
                    eventHandler: function (e) {
                        var me = this;
                        var tooltip = me.tooltip;
                        if (plugins.notify(me, 'beforeEvent', [e]) === false) {
                            return;
                        }
                        me._bufferedRender = true;
                        me._bufferedRequest = null;
                        var changed = me.handleEvent(e);
                        changed |= tooltip && tooltip.handleEvent(e);
                        plugins.notify(me, 'afterEvent', [e]);
                        var bufferedRequest = me._bufferedRequest;
                        if (bufferedRequest) {
                            me.render(bufferedRequest.duration, bufferedRequest.lazy);
                        } else if (changed && !me.animating) {
                            me.stop();
                            me.render(me.options.hover.animationDuration, true);
                        }
                        me._bufferedRender = false;
                        me._bufferedRequest = null;
                        return me;
                    },
                    handleEvent: function (e) {
                        var me = this;
                        var options = me.options || {};
                        var hoverOptions = options.hover;
                        var changed = false;
                        me.lastActive = me.lastActive || [];
                        if (e.type === 'mouseout') {
                            me.active = [];
                        } else {
                            me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
                        }
                        if (hoverOptions.onHover) {
                            hoverOptions.onHover.call(me, e.native, me.active);
                        }
                        if (e.type === 'mouseup' || e.type === 'click') {
                            if (options.onClick) {
                                options.onClick.call(me, e.native, me.active);
                            }
                        }
                        if (me.lastActive.length) {
                            me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
                        }
                        if (me.active.length && hoverOptions.mode) {
                            me.updateHoverStyle(me.active, hoverOptions.mode, true);
                        }
                        changed = !helpers.arrayEquals(me.active, me.lastActive);
                        me.lastActive = me.active;
                        return changed;
                    }
                });
            };
        },
        {}
    ],
    24: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                var arrayEvents = [
                    'push',
                    'pop',
                    'shift',
                    'splice',
                    'unshift'
                ];
                function listenArrayEvents(array, listener) {
                    if (array._chartjs) {
                        array._chartjs.listeners.push(listener);
                        return;
                    }
                    Object.defineProperty(array, '_chartjs', {
                        configurable: true,
                        enumerable: false,
                        value: {
                            listeners: [listener]
                        }
                    });
                    arrayEvents.forEach(function (key) {
                        var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
                        var base = array[key];
                        Object.defineProperty(array, key, {
                            configurable: true,
                            enumerable: false,
                            value: function () {
                                var args = Array.prototype.slice.call(arguments);
                                var res = base.apply(this, args);
                                helpers.each(array._chartjs.listeners, function (object) {
                                    if (typeof object[method] === 'function') {
                                        object[method].apply(object, args);
                                    }
                                });
                                return res;
                            }
                        });
                    });
                }
                function unlistenArrayEvents(array, listener) {
                    var stub = array._chartjs;
                    if (!stub) {
                        return;
                    }
                    var listeners = stub.listeners;
                    var index = listeners.indexOf(listener);
                    if (index !== -1) {
                        listeners.splice(index, 1);
                    }
                    if (listeners.length > 0) {
                        return;
                    }
                    arrayEvents.forEach(function (key) {
                        delete array[key];
                    });
                    delete array._chartjs;
                }
                Chart.DatasetController = function (chart, datasetIndex) {
                    this.initialize(chart, datasetIndex);
                };
                helpers.extend(Chart.DatasetController.prototype, {
                    datasetElementType: null,
                    dataElementType: null,
                    initialize: function (chart, datasetIndex) {
                        var me = this;
                        me.chart = chart;
                        me.index = datasetIndex;
                        me.linkScales();
                        me.addElements();
                    },
                    updateIndex: function (datasetIndex) {
                        this.index = datasetIndex;
                    },
                    linkScales: function () {
                        var me = this;
                        var meta = me.getMeta();
                        var dataset = me.getDataset();
                        if (meta.xAxisID === null) {
                            meta.xAxisID = dataset.xAxisID || me.chart.options.scales.xAxes[0].id;
                        }
                        if (meta.yAxisID === null) {
                            meta.yAxisID = dataset.yAxisID || me.chart.options.scales.yAxes[0].id;
                        }
                    },
                    getDataset: function () {
                        return this.chart.data.datasets[this.index];
                    },
                    getMeta: function () {
                        return this.chart.getDatasetMeta(this.index);
                    },
                    getScaleForId: function (scaleID) {
                        return this.chart.scales[scaleID];
                    },
                    reset: function () {
                        this.update(true);
                    },
                    destroy: function () {
                        if (this._data) {
                            unlistenArrayEvents(this._data, this);
                        }
                    },
                    createMetaDataset: function () {
                        var me = this;
                        var type = me.datasetElementType;
                        return type && new type({
                            _chart: me.chart.chart,
                            _datasetIndex: me.index
                        });
                    },
                    createMetaData: function (index) {
                        var me = this;
                        var type = me.dataElementType;
                        return type && new type({
                            _chart: me.chart.chart,
                            _datasetIndex: me.index,
                            _index: index
                        });
                    },
                    addElements: function () {
                        var me = this;
                        var meta = me.getMeta();
                        var data = me.getDataset().data || [];
                        var metaData = meta.data;
                        var i, ilen;
                        for (i = 0, ilen = data.length; i < ilen; ++i) {
                            metaData[i] = metaData[i] || me.createMetaData(i);
                        }
                        meta.dataset = meta.dataset || me.createMetaDataset();
                    },
                    addElementAndReset: function (index) {
                        var element = this.createMetaData(index);
                        this.getMeta().data.splice(index, 0, element);
                        this.updateElement(element, index, true);
                    },
                    buildOrUpdateElements: function () {
                        var me = this;
                        var dataset = me.getDataset();
                        var data = dataset.data || (dataset.data = []);
                        if (me._data !== data) {
                            if (me._data) {
                                unlistenArrayEvents(me._data, me);
                            }
                            listenArrayEvents(data, me);
                            me._data = data;
                        }
                        me.resyncElements();
                    },
                    update: helpers.noop,
                    draw: function (ease) {
                        var easingDecimal = ease || 1;
                        var i, len;
                        var metaData = this.getMeta().data;
                        for (i = 0, len = metaData.length; i < len; ++i) {
                            metaData[i].transition(easingDecimal).draw();
                        }
                    },
                    removeHoverStyle: function (element, elementOpts) {
                        var dataset = this.chart.data.datasets[element._datasetIndex], index = element._index, custom = element.custom || {}, valueOrDefault = helpers.getValueAtIndexOrDefault, model = element._model;
                        model.backgroundColor = custom.backgroundColor ? custom.backgroundColor : valueOrDefault(dataset.backgroundColor, index, elementOpts.backgroundColor);
                        model.borderColor = custom.borderColor ? custom.borderColor : valueOrDefault(dataset.borderColor, index, elementOpts.borderColor);
                        model.borderWidth = custom.borderWidth ? custom.borderWidth : valueOrDefault(dataset.borderWidth, index, elementOpts.borderWidth);
                    },
                    setHoverStyle: function (element) {
                        var dataset = this.chart.data.datasets[element._datasetIndex], index = element._index, custom = element.custom || {}, valueOrDefault = helpers.getValueAtIndexOrDefault, getHoverColor = helpers.getHoverColor, model = element._model;
                        model.backgroundColor = custom.hoverBackgroundColor ? custom.hoverBackgroundColor : valueOrDefault(dataset.hoverBackgroundColor, index, getHoverColor(model.backgroundColor));
                        model.borderColor = custom.hoverBorderColor ? custom.hoverBorderColor : valueOrDefault(dataset.hoverBorderColor, index, getHoverColor(model.borderColor));
                        model.borderWidth = custom.hoverBorderWidth ? custom.hoverBorderWidth : valueOrDefault(dataset.hoverBorderWidth, index, model.borderWidth);
                    },
                    resyncElements: function () {
                        var me = this;
                        var meta = me.getMeta();
                        var data = me.getDataset().data;
                        var numMeta = meta.data.length;
                        var numData = data.length;
                        if (numData < numMeta) {
                            meta.data.splice(numData, numMeta - numData);
                        } else if (numData > numMeta) {
                            me.insertElements(numMeta, numData - numMeta);
                        }
                    },
                    insertElements: function (start, count) {
                        for (var i = 0; i < count; ++i) {
                            this.addElementAndReset(start + i);
                        }
                    },
                    onDataPush: function () {
                        this.insertElements(this.getDataset().data.length - 1, arguments.length);
                    },
                    onDataPop: function () {
                        this.getMeta().data.pop();
                    },
                    onDataShift: function () {
                        this.getMeta().data.shift();
                    },
                    onDataSplice: function (start, count) {
                        this.getMeta().data.splice(start, count);
                        this.insertElements(start, arguments.length - 2);
                    },
                    onDataUnshift: function () {
                        this.insertElements(0, arguments.length);
                    }
                });
                Chart.DatasetController.extend = helpers.inherits;
            };
        },
        {}
    ],
    25: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.elements = {};
                Chart.Element = function (configuration) {
                    helpers.extend(this, configuration);
                    this.initialize.apply(this, arguments);
                };
                helpers.extend(Chart.Element.prototype, {
                    initialize: function () {
                        this.hidden = false;
                    },
                    pivot: function () {
                        var me = this;
                        if (!me._view) {
                            me._view = helpers.clone(me._model);
                        }
                        me._start = helpers.clone(me._view);
                        return me;
                    },
                    transition: function (ease) {
                        var me = this;
                        if (!me._view) {
                            me._view = helpers.clone(me._model);
                        }
                        if (ease === 1) {
                            me._view = me._model;
                            me._start = null;
                            return me;
                        }
                        if (!me._start) {
                            me.pivot();
                        }
                        helpers.each(me._model, function (value, key) {
                            if (key[0] === '_') {
                            } else if (!me._view.hasOwnProperty(key)) {
                                if (typeof value === 'number' && !isNaN(me._view[key])) {
                                    me._view[key] = value * ease;
                                } else {
                                    me._view[key] = value;
                                }
                            } else if (value === me._view[key]) {
                            } else if (typeof value === 'string') {
                                try {
                                    var color = helpers.color(me._model[key]).mix(helpers.color(me._start[key]), ease);
                                    me._view[key] = color.rgbString();
                                } catch (err) {
                                    me._view[key] = value;
                                }
                            } else if (typeof value === 'number') {
                                var startVal = me._start[key] !== undefined && isNaN(me._start[key]) === false ? me._start[key] : 0;
                                me._view[key] = (me._model[key] - startVal) * ease + startVal;
                            } else {
                                me._view[key] = value;
                            }
                        }, me);
                        return me;
                    },
                    tooltipPosition: function () {
                        return {
                            x: this._model.x,
                            y: this._model.y
                        };
                    },
                    hasValue: function () {
                        return helpers.isNumber(this._model.x) && helpers.isNumber(this._model.y);
                    }
                });
                Chart.Element.extend = helpers.inherits;
            };
        },
        {}
    ],
    26: [
        function (require, module, exports) {
            'use strict';
            var color = require(3);
            module.exports = function (Chart) {
                var helpers = Chart.helpers = {};
                helpers.each = function (loopable, callback, self, reverse) {
                    var i, len;
                    if (helpers.isArray(loopable)) {
                        len = loopable.length;
                        if (reverse) {
                            for (i = len - 1; i >= 0; i--) {
                                callback.call(self, loopable[i], i);
                            }
                        } else {
                            for (i = 0; i < len; i++) {
                                callback.call(self, loopable[i], i);
                            }
                        }
                    } else if (typeof loopable === 'object') {
                        var keys = Object.keys(loopable);
                        len = keys.length;
                        for (i = 0; i < len; i++) {
                            callback.call(self, loopable[keys[i]], keys[i]);
                        }
                    }
                };
                helpers.clone = function (obj) {
                    var objClone = {};
                    helpers.each(obj, function (value, key) {
                        if (helpers.isArray(value)) {
                            objClone[key] = value.slice(0);
                        } else if (typeof value === 'object' && value !== null) {
                            objClone[key] = helpers.clone(value);
                        } else {
                            objClone[key] = value;
                        }
                    });
                    return objClone;
                };
                helpers.extend = function (base) {
                    var setFn = function (value, key) {
                        base[key] = value;
                    };
                    for (var i = 1, ilen = arguments.length; i < ilen; i++) {
                        helpers.each(arguments[i], setFn);
                    }
                    return base;
                };
                helpers.configMerge = function (_base) {
                    var base = helpers.clone(_base);
                    helpers.each(Array.prototype.slice.call(arguments, 1), function (extension) {
                        helpers.each(extension, function (value, key) {
                            var baseHasProperty = base.hasOwnProperty(key);
                            var baseVal = baseHasProperty ? base[key] : {};
                            if (key === 'scales') {
                                base[key] = helpers.scaleMerge(baseVal, value);
                            } else if (key === 'scale') {
                                base[key] = helpers.configMerge(baseVal, Chart.scaleService.getScaleDefaults(value.type), value);
                            } else if (baseHasProperty && typeof baseVal === 'object' && !helpers.isArray(baseVal) && baseVal !== null && typeof value === 'object' && !helpers.isArray(value)) {
                                base[key] = helpers.configMerge(baseVal, value);
                            } else {
                                base[key] = value;
                            }
                        });
                    });
                    return base;
                };
                helpers.scaleMerge = function (_base, extension) {
                    var base = helpers.clone(_base);
                    helpers.each(extension, function (value, key) {
                        if (key === 'xAxes' || key === 'yAxes') {
                            if (base.hasOwnProperty(key)) {
                                helpers.each(value, function (valueObj, index) {
                                    var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
                                    var axisDefaults = Chart.scaleService.getScaleDefaults(axisType);
                                    if (index >= base[key].length || !base[key][index].type) {
                                        base[key].push(helpers.configMerge(axisDefaults, valueObj));
                                    } else if (valueObj.type && valueObj.type !== base[key][index].type) {
                                        base[key][index] = helpers.configMerge(base[key][index], axisDefaults, valueObj);
                                    } else {
                                        base[key][index] = helpers.configMerge(base[key][index], valueObj);
                                    }
                                });
                            } else {
                                base[key] = [];
                                helpers.each(value, function (valueObj) {
                                    var axisType = helpers.getValueOrDefault(valueObj.type, key === 'xAxes' ? 'category' : 'linear');
                                    base[key].push(helpers.configMerge(Chart.scaleService.getScaleDefaults(axisType), valueObj));
                                });
                            }
                        } else if (base.hasOwnProperty(key) && typeof base[key] === 'object' && base[key] !== null && typeof value === 'object') {
                            base[key] = helpers.configMerge(base[key], value);
                        } else {
                            base[key] = value;
                        }
                    });
                    return base;
                };
                helpers.getValueAtIndexOrDefault = function (value, index, defaultValue) {
                    if (value === undefined || value === null) {
                        return defaultValue;
                    }
                    if (helpers.isArray(value)) {
                        return index < value.length ? value[index] : defaultValue;
                    }
                    return value;
                };
                helpers.getValueOrDefault = function (value, defaultValue) {
                    return value === undefined ? defaultValue : value;
                };
                helpers.indexOf = Array.prototype.indexOf ? function (array, item) {
                    return array.indexOf(item);
                } : function (array, item) {
                    for (var i = 0, ilen = array.length; i < ilen; ++i) {
                        if (array[i] === item) {
                            return i;
                        }
                    }
                    return -1;
                };
                helpers.where = function (collection, filterCallback) {
                    if (helpers.isArray(collection) && Array.prototype.filter) {
                        return collection.filter(filterCallback);
                    }
                    var filtered = [];
                    helpers.each(collection, function (item) {
                        if (filterCallback(item)) {
                            filtered.push(item);
                        }
                    });
                    return filtered;
                };
                helpers.findIndex = Array.prototype.findIndex ? function (array, callback, scope) {
                    return array.findIndex(callback, scope);
                } : function (array, callback, scope) {
                    scope = scope === undefined ? array : scope;
                    for (var i = 0, ilen = array.length; i < ilen; ++i) {
                        if (callback.call(scope, array[i], i, array)) {
                            return i;
                        }
                    }
                    return -1;
                };
                helpers.findNextWhere = function (arrayToSearch, filterCallback, startIndex) {
                    if (startIndex === undefined || startIndex === null) {
                        startIndex = -1;
                    }
                    for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
                        var currentItem = arrayToSearch[i];
                        if (filterCallback(currentItem)) {
                            return currentItem;
                        }
                    }
                };
                helpers.findPreviousWhere = function (arrayToSearch, filterCallback, startIndex) {
                    if (startIndex === undefined || startIndex === null) {
                        startIndex = arrayToSearch.length;
                    }
                    for (var i = startIndex - 1; i >= 0; i--) {
                        var currentItem = arrayToSearch[i];
                        if (filterCallback(currentItem)) {
                            return currentItem;
                        }
                    }
                };
                helpers.inherits = function (extensions) {
                    var me = this;
                    var ChartElement = extensions && extensions.hasOwnProperty('constructor') ? extensions.constructor : function () {
                        return me.apply(this, arguments);
                    };
                    var Surrogate = function () {
                        this.constructor = ChartElement;
                    };
                    Surrogate.prototype = me.prototype;
                    ChartElement.prototype = new Surrogate();
                    ChartElement.extend = helpers.inherits;
                    if (extensions) {
                        helpers.extend(ChartElement.prototype, extensions);
                    }
                    ChartElement.__super__ = me.prototype;
                    return ChartElement;
                };
                helpers.noop = function () {
                };
                helpers.uid = function () {
                    var id = 0;
                    return function () {
                        return id++;
                    };
                }();
                helpers.isNumber = function (n) {
                    return !isNaN(parseFloat(n)) && isFinite(n);
                };
                helpers.almostEquals = function (x, y, epsilon) {
                    return Math.abs(x - y) < epsilon;
                };
                helpers.almostWhole = function (x, epsilon) {
                    var rounded = Math.round(x);
                    return rounded - epsilon < x && rounded + epsilon > x;
                };
                helpers.max = function (array) {
                    return array.reduce(function (max, value) {
                        if (!isNaN(value)) {
                            return Math.max(max, value);
                        }
                        return max;
                    }, Number.NEGATIVE_INFINITY);
                };
                helpers.min = function (array) {
                    return array.reduce(function (min, value) {
                        if (!isNaN(value)) {
                            return Math.min(min, value);
                        }
                        return min;
                    }, Number.POSITIVE_INFINITY);
                };
                helpers.sign = Math.sign ? function (x) {
                    return Math.sign(x);
                } : function (x) {
                    x = +x;
                    if (x === 0 || isNaN(x)) {
                        return x;
                    }
                    return x > 0 ? 1 : -1;
                };
                helpers.log10 = Math.log10 ? function (x) {
                    return Math.log10(x);
                } : function (x) {
                    return Math.log(x) / Math.LN10;
                };
                helpers.toRadians = function (degrees) {
                    return degrees * (Math.PI / 180);
                };
                helpers.toDegrees = function (radians) {
                    return radians * (180 / Math.PI);
                };
                helpers.getAngleFromPoint = function (centrePoint, anglePoint) {
                    var distanceFromXCenter = anglePoint.x - centrePoint.x, distanceFromYCenter = anglePoint.y - centrePoint.y, radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
                    var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
                    if (angle < -0.5 * Math.PI) {
                        angle += 2 * Math.PI;
                    }
                    return {
                        angle: angle,
                        distance: radialDistanceFromCenter
                    };
                };
                helpers.distanceBetweenPoints = function (pt1, pt2) {
                    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
                };
                helpers.aliasPixel = function (pixelWidth) {
                    return pixelWidth % 2 === 0 ? 0 : 0.5;
                };
                helpers.splineCurve = function (firstPoint, middlePoint, afterPoint, t) {
                    var previous = firstPoint.skip ? middlePoint : firstPoint, current = middlePoint, next = afterPoint.skip ? middlePoint : afterPoint;
                    var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
                    var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
                    var s01 = d01 / (d01 + d12);
                    var s12 = d12 / (d01 + d12);
                    s01 = isNaN(s01) ? 0 : s01;
                    s12 = isNaN(s12) ? 0 : s12;
                    var fa = t * s01;
                    var fb = t * s12;
                    return {
                        previous: {
                            x: current.x - fa * (next.x - previous.x),
                            y: current.y - fa * (next.y - previous.y)
                        },
                        next: {
                            x: current.x + fb * (next.x - previous.x),
                            y: current.y + fb * (next.y - previous.y)
                        }
                    };
                };
                helpers.EPSILON = Number.EPSILON || 1e-14;
                helpers.splineCurveMonotone = function (points) {
                    var pointsWithTangents = (points || []).map(function (point) {
                        return {
                            model: point._model,
                            deltaK: 0,
                            mK: 0
                        };
                    });
                    var pointsLen = pointsWithTangents.length;
                    var i, pointBefore, pointCurrent, pointAfter;
                    for (i = 0; i < pointsLen; ++i) {
                        pointCurrent = pointsWithTangents[i];
                        if (pointCurrent.model.skip) {
                            continue;
                        }
                        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
                        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
                        if (pointAfter && !pointAfter.model.skip) {
                            var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x;
                            pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
                        }
                        if (!pointBefore || pointBefore.model.skip) {
                            pointCurrent.mK = pointCurrent.deltaK;
                        } else if (!pointAfter || pointAfter.model.skip) {
                            pointCurrent.mK = pointBefore.deltaK;
                        } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
                            pointCurrent.mK = 0;
                        } else {
                            pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
                        }
                    }
                    var alphaK, betaK, tauK, squaredMagnitude;
                    for (i = 0; i < pointsLen - 1; ++i) {
                        pointCurrent = pointsWithTangents[i];
                        pointAfter = pointsWithTangents[i + 1];
                        if (pointCurrent.model.skip || pointAfter.model.skip) {
                            continue;
                        }
                        if (helpers.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
                            pointCurrent.mK = pointAfter.mK = 0;
                            continue;
                        }
                        alphaK = pointCurrent.mK / pointCurrent.deltaK;
                        betaK = pointAfter.mK / pointCurrent.deltaK;
                        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
                        if (squaredMagnitude <= 9) {
                            continue;
                        }
                        tauK = 3 / Math.sqrt(squaredMagnitude);
                        pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
                        pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
                    }
                    var deltaX;
                    for (i = 0; i < pointsLen; ++i) {
                        pointCurrent = pointsWithTangents[i];
                        if (pointCurrent.model.skip) {
                            continue;
                        }
                        pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
                        pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
                        if (pointBefore && !pointBefore.model.skip) {
                            deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
                            pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
                            pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
                        }
                        if (pointAfter && !pointAfter.model.skip) {
                            deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
                            pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
                            pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
                        }
                    }
                };
                helpers.nextItem = function (collection, index, loop) {
                    if (loop) {
                        return index >= collection.length - 1 ? collection[0] : collection[index + 1];
                    }
                    return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
                };
                helpers.previousItem = function (collection, index, loop) {
                    if (loop) {
                        return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
                    }
                    return index <= 0 ? collection[0] : collection[index - 1];
                };
                helpers.niceNum = function (range, round) {
                    var exponent = Math.floor(helpers.log10(range));
                    var fraction = range / Math.pow(10, exponent);
                    var niceFraction;
                    if (round) {
                        if (fraction < 1.5) {
                            niceFraction = 1;
                        } else if (fraction < 3) {
                            niceFraction = 2;
                        } else if (fraction < 7) {
                            niceFraction = 5;
                        } else {
                            niceFraction = 10;
                        }
                    } else if (fraction <= 1) {
                        niceFraction = 1;
                    } else if (fraction <= 2) {
                        niceFraction = 2;
                    } else if (fraction <= 5) {
                        niceFraction = 5;
                    } else {
                        niceFraction = 10;
                    }
                    return niceFraction * Math.pow(10, exponent);
                };
                var easingEffects = helpers.easingEffects = {
                    linear: function (t) {
                        return t;
                    },
                    easeInQuad: function (t) {
                        return t * t;
                    },
                    easeOutQuad: function (t) {
                        return -1 * t * (t - 2);
                    },
                    easeInOutQuad: function (t) {
                        if ((t /= 1 / 2) < 1) {
                            return 1 / 2 * t * t;
                        }
                        return -1 / 2 * (--t * (t - 2) - 1);
                    },
                    easeInCubic: function (t) {
                        return t * t * t;
                    },
                    easeOutCubic: function (t) {
                        return 1 * ((t = t / 1 - 1) * t * t + 1);
                    },
                    easeInOutCubic: function (t) {
                        if ((t /= 1 / 2) < 1) {
                            return 1 / 2 * t * t * t;
                        }
                        return 1 / 2 * ((t -= 2) * t * t + 2);
                    },
                    easeInQuart: function (t) {
                        return t * t * t * t;
                    },
                    easeOutQuart: function (t) {
                        return -1 * ((t = t / 1 - 1) * t * t * t - 1);
                    },
                    easeInOutQuart: function (t) {
                        if ((t /= 1 / 2) < 1) {
                            return 1 / 2 * t * t * t * t;
                        }
                        return -1 / 2 * ((t -= 2) * t * t * t - 2);
                    },
                    easeInQuint: function (t) {
                        return 1 * (t /= 1) * t * t * t * t;
                    },
                    easeOutQuint: function (t) {
                        return 1 * ((t = t / 1 - 1) * t * t * t * t + 1);
                    },
                    easeInOutQuint: function (t) {
                        if ((t /= 1 / 2) < 1) {
                            return 1 / 2 * t * t * t * t * t;
                        }
                        return 1 / 2 * ((t -= 2) * t * t * t * t + 2);
                    },
                    easeInSine: function (t) {
                        return -1 * Math.cos(t / 1 * (Math.PI / 2)) + 1;
                    },
                    easeOutSine: function (t) {
                        return 1 * Math.sin(t / 1 * (Math.PI / 2));
                    },
                    easeInOutSine: function (t) {
                        return -1 / 2 * (Math.cos(Math.PI * t / 1) - 1);
                    },
                    easeInExpo: function (t) {
                        return t === 0 ? 1 : 1 * Math.pow(2, 10 * (t / 1 - 1));
                    },
                    easeOutExpo: function (t) {
                        return t === 1 ? 1 : 1 * (-Math.pow(2, -10 * t / 1) + 1);
                    },
                    easeInOutExpo: function (t) {
                        if (t === 0) {
                            return 0;
                        }
                        if (t === 1) {
                            return 1;
                        }
                        if ((t /= 1 / 2) < 1) {
                            return 1 / 2 * Math.pow(2, 10 * (t - 1));
                        }
                        return 1 / 2 * (-Math.pow(2, -10 * --t) + 2);
                    },
                    easeInCirc: function (t) {
                        if (t >= 1) {
                            return t;
                        }
                        return -1 * (Math.sqrt(1 - (t /= 1) * t) - 1);
                    },
                    easeOutCirc: function (t) {
                        return 1 * Math.sqrt(1 - (t = t / 1 - 1) * t);
                    },
                    easeInOutCirc: function (t) {
                        if ((t /= 1 / 2) < 1) {
                            return -1 / 2 * (Math.sqrt(1 - t * t) - 1);
                        }
                        return 1 / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1);
                    },
                    easeInElastic: function (t) {
                        var s = 1.70158;
                        var p = 0;
                        var a = 1;
                        if (t === 0) {
                            return 0;
                        }
                        if ((t /= 1) === 1) {
                            return 1;
                        }
                        if (!p) {
                            p = 1 * 0.3;
                        }
                        if (a < Math.abs(1)) {
                            a = 1;
                            s = p / 4;
                        } else {
                            s = p / (2 * Math.PI) * Math.asin(1 / a);
                        }
                        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
                    },
                    easeOutElastic: function (t) {
                        var s = 1.70158;
                        var p = 0;
                        var a = 1;
                        if (t === 0) {
                            return 0;
                        }
                        if ((t /= 1) === 1) {
                            return 1;
                        }
                        if (!p) {
                            p = 1 * 0.3;
                        }
                        if (a < Math.abs(1)) {
                            a = 1;
                            s = p / 4;
                        } else {
                            s = p / (2 * Math.PI) * Math.asin(1 / a);
                        }
                        return a * Math.pow(2, -10 * t) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) + 1;
                    },
                    easeInOutElastic: function (t) {
                        var s = 1.70158;
                        var p = 0;
                        var a = 1;
                        if (t === 0) {
                            return 0;
                        }
                        if ((t /= 1 / 2) === 2) {
                            return 1;
                        }
                        if (!p) {
                            p = 1 * (0.3 * 1.5);
                        }
                        if (a < Math.abs(1)) {
                            a = 1;
                            s = p / 4;
                        } else {
                            s = p / (2 * Math.PI) * Math.asin(1 / a);
                        }
                        if (t < 1) {
                            return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p));
                        }
                        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * 1 - s) * (2 * Math.PI) / p) * 0.5 + 1;
                    },
                    easeInBack: function (t) {
                        var s = 1.70158;
                        return 1 * (t /= 1) * t * ((s + 1) * t - s);
                    },
                    easeOutBack: function (t) {
                        var s = 1.70158;
                        return 1 * ((t = t / 1 - 1) * t * ((s + 1) * t + s) + 1);
                    },
                    easeInOutBack: function (t) {
                        var s = 1.70158;
                        if ((t /= 1 / 2) < 1) {
                            return 1 / 2 * (t * t * (((s *= 1.525) + 1) * t - s));
                        }
                        return 1 / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
                    },
                    easeInBounce: function (t) {
                        return 1 - easingEffects.easeOutBounce(1 - t);
                    },
                    easeOutBounce: function (t) {
                        if ((t /= 1) < 1 / 2.75) {
                            return 1 * (7.5625 * t * t);
                        } else if (t < 2 / 2.75) {
                            return 1 * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75);
                        } else if (t < 2.5 / 2.75) {
                            return 1 * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375);
                        }
                        return 1 * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375);
                    },
                    easeInOutBounce: function (t) {
                        if (t < 1 / 2) {
                            return easingEffects.easeInBounce(t * 2) * 0.5;
                        }
                        return easingEffects.easeOutBounce(t * 2 - 1) * 0.5 + 1 * 0.5;
                    }
                };
                helpers.requestAnimFrame = function () {
                    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
                        return window.setTimeout(callback, 1000 / 60);
                    };
                }();
                helpers.getRelativePosition = function (evt, chart) {
                    var mouseX, mouseY;
                    var e = evt.originalEvent || evt, canvas = evt.currentTarget || evt.srcElement, boundingRect = canvas.getBoundingClientRect();
                    var touches = e.touches;
                    if (touches && touches.length > 0) {
                        mouseX = touches[0].clientX;
                        mouseY = touches[0].clientY;
                    } else {
                        mouseX = e.clientX;
                        mouseY = e.clientY;
                    }
                    var paddingLeft = parseFloat(helpers.getStyle(canvas, 'padding-left'));
                    var paddingTop = parseFloat(helpers.getStyle(canvas, 'padding-top'));
                    var paddingRight = parseFloat(helpers.getStyle(canvas, 'padding-right'));
                    var paddingBottom = parseFloat(helpers.getStyle(canvas, 'padding-bottom'));
                    var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
                    var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
                    mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas.width / chart.currentDevicePixelRatio);
                    mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas.height / chart.currentDevicePixelRatio);
                    return {
                        x: mouseX,
                        y: mouseY
                    };
                };
                helpers.addEvent = function (node, eventType, method) {
                    if (node.addEventListener) {
                        node.addEventListener(eventType, method);
                    } else if (node.attachEvent) {
                        node.attachEvent('on' + eventType, method);
                    } else {
                        node['on' + eventType] = method;
                    }
                };
                helpers.removeEvent = function (node, eventType, handler) {
                    if (node.removeEventListener) {
                        node.removeEventListener(eventType, handler, false);
                    } else if (node.detachEvent) {
                        node.detachEvent('on' + eventType, handler);
                    } else {
                        node['on' + eventType] = helpers.noop;
                    }
                };
                function parseMaxStyle(styleValue, node, parentProperty) {
                    var valueInPixels;
                    if (typeof styleValue === 'string') {
                        valueInPixels = parseInt(styleValue, 10);
                        if (styleValue.indexOf('%') !== -1) {
                            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
                        }
                    } else {
                        valueInPixels = styleValue;
                    }
                    return valueInPixels;
                }
                function isConstrainedValue(value) {
                    return value !== undefined && value !== null && value !== 'none';
                }
                function getConstraintDimension(domNode, maxStyle, percentageProperty) {
                    var view = document.defaultView;
                    var parentNode = domNode.parentNode;
                    var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
                    var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
                    var hasCNode = isConstrainedValue(constrainedNode);
                    var hasCContainer = isConstrainedValue(constrainedContainer);
                    var infinity = Number.POSITIVE_INFINITY;
                    if (hasCNode || hasCContainer) {
                        return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
                    }
                    return 'none';
                }
                helpers.getConstraintWidth = function (domNode) {
                    return getConstraintDimension(domNode, 'max-width', 'clientWidth');
                };
                helpers.getConstraintHeight = function (domNode) {
                    return getConstraintDimension(domNode, 'max-height', 'clientHeight');
                };
                helpers.getMaximumWidth = function (domNode) {
                    var container = domNode.parentNode;
                    var paddingLeft = parseInt(helpers.getStyle(container, 'padding-left'), 10);
                    var paddingRight = parseInt(helpers.getStyle(container, 'padding-right'), 10);
                    var w = container.clientWidth - paddingLeft - paddingRight;
                    var cw = helpers.getConstraintWidth(domNode);
                    return isNaN(cw) ? w : Math.min(w, cw);
                };
                helpers.getMaximumHeight = function (domNode) {
                    var container = domNode.parentNode;
                    var paddingTop = parseInt(helpers.getStyle(container, 'padding-top'), 10);
                    var paddingBottom = parseInt(helpers.getStyle(container, 'padding-bottom'), 10);
                    var h = container.clientHeight - paddingTop - paddingBottom;
                    var ch = helpers.getConstraintHeight(domNode);
                    return isNaN(ch) ? h : Math.min(h, ch);
                };
                helpers.getStyle = function (el, property) {
                    return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
                };
                helpers.retinaScale = function (chart) {
                    var pixelRatio = chart.currentDevicePixelRatio = window.devicePixelRatio || 1;
                    if (pixelRatio === 1) {
                        return;
                    }
                    var canvas = chart.canvas;
                    var height = chart.height;
                    var width = chart.width;
                    canvas.height = height * pixelRatio;
                    canvas.width = width * pixelRatio;
                    chart.ctx.scale(pixelRatio, pixelRatio);
                    canvas.style.height = height + 'px';
                    canvas.style.width = width + 'px';
                };
                helpers.clear = function (chart) {
                    chart.ctx.clearRect(0, 0, chart.width, chart.height);
                };
                helpers.fontString = function (pixelSize, fontStyle, fontFamily) {
                    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
                };
                helpers.longestText = function (ctx, font, arrayOfThings, cache) {
                    cache = cache || {};
                    var data = cache.data = cache.data || {};
                    var gc = cache.garbageCollect = cache.garbageCollect || [];
                    if (cache.font !== font) {
                        data = cache.data = {};
                        gc = cache.garbageCollect = [];
                        cache.font = font;
                    }
                    ctx.font = font;
                    var longest = 0;
                    helpers.each(arrayOfThings, function (thing) {
                        if (thing !== undefined && thing !== null && helpers.isArray(thing) !== true) {
                            longest = helpers.measureText(ctx, data, gc, longest, thing);
                        } else if (helpers.isArray(thing)) {
                            helpers.each(thing, function (nestedThing) {
                                if (nestedThing !== undefined && nestedThing !== null && !helpers.isArray(nestedThing)) {
                                    longest = helpers.measureText(ctx, data, gc, longest, nestedThing);
                                }
                            });
                        }
                    });
                    var gcLen = gc.length / 2;
                    if (gcLen > arrayOfThings.length) {
                        for (var i = 0; i < gcLen; i++) {
                            delete data[gc[i]];
                        }
                        gc.splice(0, gcLen);
                    }
                    return longest;
                };
                helpers.measureText = function (ctx, data, gc, longest, string) {
                    var textWidth = data[string];
                    if (!textWidth) {
                        textWidth = data[string] = ctx.measureText(string).width;
                        gc.push(string);
                    }
                    if (textWidth > longest) {
                        longest = textWidth;
                    }
                    return longest;
                };
                helpers.numberOfLabelLines = function (arrayOfThings) {
                    var numberOfLines = 1;
                    helpers.each(arrayOfThings, function (thing) {
                        if (helpers.isArray(thing)) {
                            if (thing.length > numberOfLines) {
                                numberOfLines = thing.length;
                            }
                        }
                    });
                    return numberOfLines;
                };
                helpers.drawRoundedRectangle = function (ctx, x, y, width, height, radius) {
                    ctx.beginPath();
                    ctx.moveTo(x + radius, y);
                    ctx.lineTo(x + width - radius, y);
                    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
                    ctx.lineTo(x + width, y + height - radius);
                    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
                    ctx.lineTo(x + radius, y + height);
                    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
                    ctx.lineTo(x, y + radius);
                    ctx.quadraticCurveTo(x, y, x + radius, y);
                    ctx.closePath();
                };
                helpers.color = function (c) {
                    if (!color) {
                        console.error('Color.js not found!');
                        return c;
                    }
                    if (c instanceof CanvasGradient) {
                        return color(Chart.defaults.global.defaultColor);
                    }
                    return color(c);
                };
                helpers.isArray = Array.isArray ? function (obj) {
                    return Array.isArray(obj);
                } : function (obj) {
                    return Object.prototype.toString.call(obj) === '[object Array]';
                };
                helpers.arrayEquals = function (a0, a1) {
                    var i, ilen, v0, v1;
                    if (!a0 || !a1 || a0.length !== a1.length) {
                        return false;
                    }
                    for (i = 0, ilen = a0.length; i < ilen; ++i) {
                        v0 = a0[i];
                        v1 = a1[i];
                        if (v0 instanceof Array && v1 instanceof Array) {
                            if (!helpers.arrayEquals(v0, v1)) {
                                return false;
                            }
                        } else if (v0 !== v1) {
                            return false;
                        }
                    }
                    return true;
                };
                helpers.callCallback = function (fn, args, _tArg) {
                    if (fn && typeof fn.call === 'function') {
                        fn.apply(_tArg, args);
                    }
                };
                helpers.getHoverColor = function (colorValue) {
                    return colorValue instanceof CanvasPattern ? colorValue : helpers.color(colorValue).saturate(0.5).darken(0.1).rgbString();
                };
            };
        },
        {
            '3': 3
        }
    ],
    27: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                function getRelativePosition(e, chart) {
                    if (e.native) {
                        return {
                            x: e.x,
                            y: e.y
                        };
                    }
                    return helpers.getRelativePosition(e, chart);
                }
                function parseVisibleItems(chart, handler) {
                    var datasets = chart.data.datasets;
                    var meta, i, j, ilen, jlen;
                    for (i = 0, ilen = datasets.length; i < ilen; ++i) {
                        if (!chart.isDatasetVisible(i)) {
                            continue;
                        }
                        meta = chart.getDatasetMeta(i);
                        for (j = 0, jlen = meta.data.length; j < jlen; ++j) {
                            var element = meta.data[j];
                            if (!element._view.skip) {
                                handler(element);
                            }
                        }
                    }
                }
                function getIntersectItems(chart, position) {
                    var elements = [];
                    parseVisibleItems(chart, function (element) {
                        if (element.inRange(position.x, position.y)) {
                            elements.push(element);
                        }
                    });
                    return elements;
                }
                function getNearestItems(chart, position, intersect, distanceMetric) {
                    var minDistance = Number.POSITIVE_INFINITY;
                    var nearestItems = [];
                    if (!distanceMetric) {
                        distanceMetric = helpers.distanceBetweenPoints;
                    }
                    parseVisibleItems(chart, function (element) {
                        if (intersect && !element.inRange(position.x, position.y)) {
                            return;
                        }
                        var center = element.getCenterPoint();
                        var distance = distanceMetric(position, center);
                        if (distance < minDistance) {
                            nearestItems = [element];
                            minDistance = distance;
                        } else if (distance === minDistance) {
                            nearestItems.push(element);
                        }
                    });
                    return nearestItems;
                }
                function indexMode(chart, e, options) {
                    var position = getRelativePosition(e, chart.chart);
                    var distanceMetric = function (pt1, pt2) {
                        return Math.abs(pt1.x - pt2.x);
                    };
                    var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
                    var elements = [];
                    if (!items.length) {
                        return [];
                    }
                    chart.data.datasets.forEach(function (dataset, datasetIndex) {
                        if (chart.isDatasetVisible(datasetIndex)) {
                            var meta = chart.getDatasetMeta(datasetIndex), element = meta.data[items[0]._index];
                            if (element && !element._view.skip) {
                                elements.push(element);
                            }
                        }
                    });
                    return elements;
                }
                Chart.Interaction = {
                    modes: {
                        single: function (chart, e) {
                            var position = getRelativePosition(e, chart.chart);
                            var elements = [];
                            parseVisibleItems(chart, function (element) {
                                if (element.inRange(position.x, position.y)) {
                                    elements.push(element);
                                    return elements;
                                }
                            });
                            return elements.slice(0, 1);
                        },
                        label: indexMode,
                        index: indexMode,
                        dataset: function (chart, e, options) {
                            var position = getRelativePosition(e, chart.chart);
                            var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false);
                            if (items.length > 0) {
                                items = chart.getDatasetMeta(items[0]._datasetIndex).data;
                            }
                            return items;
                        },
                        'x-axis': function (chart, e) {
                            return indexMode(chart, e, true);
                        },
                        point: function (chart, e) {
                            var position = getRelativePosition(e, chart.chart);
                            return getIntersectItems(chart, position);
                        },
                        nearest: function (chart, e, options) {
                            var position = getRelativePosition(e, chart.chart);
                            var nearestItems = getNearestItems(chart, position, options.intersect);
                            if (nearestItems.length > 1) {
                                nearestItems.sort(function (a, b) {
                                    var sizeA = a.getArea();
                                    var sizeB = b.getArea();
                                    var ret = sizeA - sizeB;
                                    if (ret === 0) {
                                        ret = a._datasetIndex - b._datasetIndex;
                                    }
                                    return ret;
                                });
                            }
                            return nearestItems.slice(0, 1);
                        },
                        x: function (chart, e, options) {
                            var position = getRelativePosition(e, chart.chart);
                            var items = [];
                            var intersectsItem = false;
                            parseVisibleItems(chart, function (element) {
                                if (element.inXRange(position.x)) {
                                    items.push(element);
                                }
                                if (element.inRange(position.x, position.y)) {
                                    intersectsItem = true;
                                }
                            });
                            if (options.intersect && !intersectsItem) {
                                items = [];
                            }
                            return items;
                        },
                        y: function (chart, e, options) {
                            var position = getRelativePosition(e, chart.chart);
                            var items = [];
                            var intersectsItem = false;
                            parseVisibleItems(chart, function (element) {
                                if (element.inYRange(position.y)) {
                                    items.push(element);
                                }
                                if (element.inRange(position.x, position.y)) {
                                    intersectsItem = true;
                                }
                            });
                            if (options.intersect && !intersectsItem) {
                                items = [];
                            }
                            return items;
                        }
                    }
                };
            };
        },
        {}
    ],
    28: [
        function (require, module, exports) {
            'use strict';
            module.exports = function () {
                var Chart = function (item, config) {
                    this.controller = new Chart.Controller(item, config, this);
                    return this.controller;
                };
                Chart.defaults = {
                    global: {
                        responsive: true,
                        responsiveAnimationDuration: 0,
                        maintainAspectRatio: true,
                        events: [
                            'mousemove',
                            'mouseout',
                            'click',
                            'touchstart',
                            'touchmove'
                        ],
                        hover: {
                            onHover: null,
                            mode: 'nearest',
                            intersect: true,
                            animationDuration: 400
                        },
                        onClick: null,
                        defaultColor: 'rgba(0,0,0,0.1)',
                        defaultFontColor: '#666',
                        defaultFontFamily: '\'Helvetica Neue\', \'Helvetica\', \'Arial\', sans-serif',
                        defaultFontSize: 12,
                        defaultFontStyle: 'normal',
                        showLines: true,
                        elements: {},
                        legendCallback: function (chart) {
                            var text = [];
                            text.push('<ul class="' + chart.id + '-legend">');
                            for (var i = 0; i < chart.data.datasets.length; i++) {
                                text.push('<li><span style="background-color:' + chart.data.datasets[i].backgroundColor + '"></span>');
                                if (chart.data.datasets[i].label) {
                                    text.push(chart.data.datasets[i].label);
                                }
                                text.push('</li>');
                            }
                            text.push('</ul>');
                            return text.join('');
                        }
                    }
                };
                Chart.Chart = Chart;
                return Chart;
            };
        },
        {}
    ],
    29: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.layoutService = {
                    defaults: {},
                    addBox: function (chartInstance, box) {
                        if (!chartInstance.boxes) {
                            chartInstance.boxes = [];
                        }
                        chartInstance.boxes.push(box);
                    },
                    removeBox: function (chartInstance, box) {
                        if (!chartInstance.boxes) {
                            return;
                        }
                        chartInstance.boxes.splice(chartInstance.boxes.indexOf(box), 1);
                    },
                    update: function (chartInstance, width, height) {
                        if (!chartInstance) {
                            return;
                        }
                        var layoutOptions = chartInstance.options.layout;
                        var padding = layoutOptions ? layoutOptions.padding : null;
                        var leftPadding = 0;
                        var rightPadding = 0;
                        var topPadding = 0;
                        var bottomPadding = 0;
                        if (!isNaN(padding)) {
                            leftPadding = padding;
                            rightPadding = padding;
                            topPadding = padding;
                            bottomPadding = padding;
                        } else {
                            leftPadding = padding.left || 0;
                            rightPadding = padding.right || 0;
                            topPadding = padding.top || 0;
                            bottomPadding = padding.bottom || 0;
                        }
                        var leftBoxes = helpers.where(chartInstance.boxes, function (box) {
                            return box.options.position === 'left';
                        });
                        var rightBoxes = helpers.where(chartInstance.boxes, function (box) {
                            return box.options.position === 'right';
                        });
                        var topBoxes = helpers.where(chartInstance.boxes, function (box) {
                            return box.options.position === 'top';
                        });
                        var bottomBoxes = helpers.where(chartInstance.boxes, function (box) {
                            return box.options.position === 'bottom';
                        });
                        var chartAreaBoxes = helpers.where(chartInstance.boxes, function (box) {
                            return box.options.position === 'chartArea';
                        });
                        topBoxes.sort(function (a, b) {
                            return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0);
                        });
                        bottomBoxes.sort(function (a, b) {
                            return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0);
                        });
                        var chartWidth = width - leftPadding - rightPadding;
                        var chartHeight = height - topPadding - bottomPadding;
                        var chartAreaWidth = chartWidth / 2;
                        var chartAreaHeight = chartHeight / 2;
                        var verticalBoxWidth = (width - chartAreaWidth) / (leftBoxes.length + rightBoxes.length);
                        var horizontalBoxHeight = (height - chartAreaHeight) / (topBoxes.length + bottomBoxes.length);
                        var maxChartAreaWidth = chartWidth;
                        var maxChartAreaHeight = chartHeight;
                        var minBoxSizes = [];
                        function getMinimumBoxSize(box) {
                            var minSize;
                            var isHorizontal = box.isHorizontal();
                            if (isHorizontal) {
                                minSize = box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, horizontalBoxHeight);
                                maxChartAreaHeight -= minSize.height;
                            } else {
                                minSize = box.update(verticalBoxWidth, chartAreaHeight);
                                maxChartAreaWidth -= minSize.width;
                            }
                            minBoxSizes.push({
                                horizontal: isHorizontal,
                                minSize: minSize,
                                box: box
                            });
                        }
                        helpers.each(leftBoxes.concat(rightBoxes, topBoxes, bottomBoxes), getMinimumBoxSize);
                        var maxHorizontalLeftPadding = 0;
                        var maxHorizontalRightPadding = 0;
                        var maxVerticalTopPadding = 0;
                        var maxVerticalBottomPadding = 0;
                        helpers.each(topBoxes.concat(bottomBoxes), function (horizontalBox) {
                            if (horizontalBox.getPadding) {
                                var boxPadding = horizontalBox.getPadding();
                                maxHorizontalLeftPadding = Math.max(maxHorizontalLeftPadding, boxPadding.left);
                                maxHorizontalRightPadding = Math.max(maxHorizontalRightPadding, boxPadding.right);
                            }
                        });
                        helpers.each(leftBoxes.concat(rightBoxes), function (verticalBox) {
                            if (verticalBox.getPadding) {
                                var boxPadding = verticalBox.getPadding();
                                maxVerticalTopPadding = Math.max(maxVerticalTopPadding, boxPadding.top);
                                maxVerticalBottomPadding = Math.max(maxVerticalBottomPadding, boxPadding.bottom);
                            }
                        });
                        var totalLeftBoxesWidth = leftPadding;
                        var totalRightBoxesWidth = rightPadding;
                        var totalTopBoxesHeight = topPadding;
                        var totalBottomBoxesHeight = bottomPadding;
                        function fitBox(box) {
                            var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minBox) {
                                return minBox.box === box;
                            });
                            if (minBoxSize) {
                                if (box.isHorizontal()) {
                                    var scaleMargin = {
                                        left: Math.max(totalLeftBoxesWidth, maxHorizontalLeftPadding),
                                        right: Math.max(totalRightBoxesWidth, maxHorizontalRightPadding),
                                        top: 0,
                                        bottom: 0
                                    };
                                    box.update(box.options.fullWidth ? chartWidth : maxChartAreaWidth, chartHeight / 2, scaleMargin);
                                } else {
                                    box.update(minBoxSize.minSize.width, maxChartAreaHeight);
                                }
                            }
                        }
                        helpers.each(leftBoxes.concat(rightBoxes), fitBox);
                        helpers.each(leftBoxes, function (box) {
                            totalLeftBoxesWidth += box.width;
                        });
                        helpers.each(rightBoxes, function (box) {
                            totalRightBoxesWidth += box.width;
                        });
                        helpers.each(topBoxes.concat(bottomBoxes), fitBox);
                        helpers.each(topBoxes, function (box) {
                            totalTopBoxesHeight += box.height;
                        });
                        helpers.each(bottomBoxes, function (box) {
                            totalBottomBoxesHeight += box.height;
                        });
                        function finalFitVerticalBox(box) {
                            var minBoxSize = helpers.findNextWhere(minBoxSizes, function (minSize) {
                                return minSize.box === box;
                            });
                            var scaleMargin = {
                                left: 0,
                                right: 0,
                                top: totalTopBoxesHeight,
                                bottom: totalBottomBoxesHeight
                            };
                            if (minBoxSize) {
                                box.update(minBoxSize.minSize.width, maxChartAreaHeight, scaleMargin);
                            }
                        }
                        helpers.each(leftBoxes.concat(rightBoxes), finalFitVerticalBox);
                        totalLeftBoxesWidth = leftPadding;
                        totalRightBoxesWidth = rightPadding;
                        totalTopBoxesHeight = topPadding;
                        totalBottomBoxesHeight = bottomPadding;
                        helpers.each(leftBoxes, function (box) {
                            totalLeftBoxesWidth += box.width;
                        });
                        helpers.each(rightBoxes, function (box) {
                            totalRightBoxesWidth += box.width;
                        });
                        helpers.each(topBoxes, function (box) {
                            totalTopBoxesHeight += box.height;
                        });
                        helpers.each(bottomBoxes, function (box) {
                            totalBottomBoxesHeight += box.height;
                        });
                        var leftPaddingAddition = Math.max(maxHorizontalLeftPadding - totalLeftBoxesWidth, 0);
                        totalLeftBoxesWidth += leftPaddingAddition;
                        totalRightBoxesWidth += Math.max(maxHorizontalRightPadding - totalRightBoxesWidth, 0);
                        var topPaddingAddition = Math.max(maxVerticalTopPadding - totalTopBoxesHeight, 0);
                        totalTopBoxesHeight += topPaddingAddition;
                        totalBottomBoxesHeight += Math.max(maxVerticalBottomPadding - totalBottomBoxesHeight, 0);
                        var newMaxChartAreaHeight = height - totalTopBoxesHeight - totalBottomBoxesHeight;
                        var newMaxChartAreaWidth = width - totalLeftBoxesWidth - totalRightBoxesWidth;
                        if (newMaxChartAreaWidth !== maxChartAreaWidth || newMaxChartAreaHeight !== maxChartAreaHeight) {
                            helpers.each(leftBoxes, function (box) {
                                box.height = newMaxChartAreaHeight;
                            });
                            helpers.each(rightBoxes, function (box) {
                                box.height = newMaxChartAreaHeight;
                            });
                            helpers.each(topBoxes, function (box) {
                                if (!box.options.fullWidth) {
                                    box.width = newMaxChartAreaWidth;
                                }
                            });
                            helpers.each(bottomBoxes, function (box) {
                                if (!box.options.fullWidth) {
                                    box.width = newMaxChartAreaWidth;
                                }
                            });
                            maxChartAreaHeight = newMaxChartAreaHeight;
                            maxChartAreaWidth = newMaxChartAreaWidth;
                        }
                        var left = leftPadding + leftPaddingAddition;
                        var top = topPadding + topPaddingAddition;
                        function placeBox(box) {
                            if (box.isHorizontal()) {
                                box.left = box.options.fullWidth ? leftPadding : totalLeftBoxesWidth;
                                box.right = box.options.fullWidth ? width - rightPadding : totalLeftBoxesWidth + maxChartAreaWidth;
                                box.top = top;
                                box.bottom = top + box.height;
                                top = box.bottom;
                            } else {
                                box.left = left;
                                box.right = left + box.width;
                                box.top = totalTopBoxesHeight;
                                box.bottom = totalTopBoxesHeight + maxChartAreaHeight;
                                left = box.right;
                            }
                        }
                        helpers.each(leftBoxes.concat(topBoxes), placeBox);
                        left += maxChartAreaWidth;
                        top += maxChartAreaHeight;
                        helpers.each(rightBoxes, placeBox);
                        helpers.each(bottomBoxes, placeBox);
                        chartInstance.chartArea = {
                            left: totalLeftBoxesWidth,
                            top: totalTopBoxesHeight,
                            right: totalLeftBoxesWidth + maxChartAreaWidth,
                            bottom: totalTopBoxesHeight + maxChartAreaHeight
                        };
                        helpers.each(chartAreaBoxes, function (box) {
                            box.left = chartInstance.chartArea.left;
                            box.top = chartInstance.chartArea.top;
                            box.right = chartInstance.chartArea.right;
                            box.bottom = chartInstance.chartArea.bottom;
                            box.update(maxChartAreaWidth, maxChartAreaHeight);
                        });
                    }
                };
            };
        },
        {}
    ],
    30: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                var noop = helpers.noop;
                Chart.defaults.global.legend = {
                    display: true,
                    position: 'top',
                    fullWidth: true,
                    reverse: false,
                    onClick: function (e, legendItem) {
                        var index = legendItem.datasetIndex;
                        var ci = this.chart;
                        var meta = ci.getDatasetMeta(index);
                        meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
                        ci.update();
                    },
                    onHover: null,
                    labels: {
                        boxWidth: 40,
                        padding: 10,
                        generateLabels: function (chart) {
                            var data = chart.data;
                            return helpers.isArray(data.datasets) ? data.datasets.map(function (dataset, i) {
                                return {
                                    text: dataset.label,
                                    fillStyle: !helpers.isArray(dataset.backgroundColor) ? dataset.backgroundColor : dataset.backgroundColor[0],
                                    hidden: !chart.isDatasetVisible(i),
                                    lineCap: dataset.borderCapStyle,
                                    lineDash: dataset.borderDash,
                                    lineDashOffset: dataset.borderDashOffset,
                                    lineJoin: dataset.borderJoinStyle,
                                    lineWidth: dataset.borderWidth,
                                    strokeStyle: dataset.borderColor,
                                    pointStyle: dataset.pointStyle,
                                    datasetIndex: i
                                };
                            }, this) : [];
                        }
                    }
                };
                function getBoxWidth(labelOpts, fontSize) {
                    return labelOpts.usePointStyle ? fontSize * Math.SQRT2 : labelOpts.boxWidth;
                }
                Chart.Legend = Chart.Element.extend({
                    initialize: function (config) {
                        helpers.extend(this, config);
                        this.legendHitBoxes = [];
                        this.doughnutMode = false;
                    },
                    beforeUpdate: noop,
                    update: function (maxWidth, maxHeight, margins) {
                        var me = this;
                        me.beforeUpdate();
                        me.maxWidth = maxWidth;
                        me.maxHeight = maxHeight;
                        me.margins = margins;
                        me.beforeSetDimensions();
                        me.setDimensions();
                        me.afterSetDimensions();
                        me.beforeBuildLabels();
                        me.buildLabels();
                        me.afterBuildLabels();
                        me.beforeFit();
                        me.fit();
                        me.afterFit();
                        me.afterUpdate();
                        return me.minSize;
                    },
                    afterUpdate: noop,
                    beforeSetDimensions: noop,
                    setDimensions: function () {
                        var me = this;
                        if (me.isHorizontal()) {
                            me.width = me.maxWidth;
                            me.left = 0;
                            me.right = me.width;
                        } else {
                            me.height = me.maxHeight;
                            me.top = 0;
                            me.bottom = me.height;
                        }
                        me.paddingLeft = 0;
                        me.paddingTop = 0;
                        me.paddingRight = 0;
                        me.paddingBottom = 0;
                        me.minSize = {
                            width: 0,
                            height: 0
                        };
                    },
                    afterSetDimensions: noop,
                    beforeBuildLabels: noop,
                    buildLabels: function () {
                        var me = this;
                        var labelOpts = me.options.labels;
                        var legendItems = labelOpts.generateLabels.call(me, me.chart);
                        if (labelOpts.filter) {
                            legendItems = legendItems.filter(function (item) {
                                return labelOpts.filter(item, me.chart.data);
                            });
                        }
                        if (me.options.reverse) {
                            legendItems.reverse();
                        }
                        me.legendItems = legendItems;
                    },
                    afterBuildLabels: noop,
                    beforeFit: noop,
                    fit: function () {
                        var me = this;
                        var opts = me.options;
                        var labelOpts = opts.labels;
                        var display = opts.display;
                        var ctx = me.ctx;
                        var globalDefault = Chart.defaults.global, itemOrDefault = helpers.getValueOrDefault, fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize), fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle), fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily), labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
                        var hitboxes = me.legendHitBoxes = [];
                        var minSize = me.minSize;
                        var isHorizontal = me.isHorizontal();
                        if (isHorizontal) {
                            minSize.width = me.maxWidth;
                            minSize.height = display ? 10 : 0;
                        } else {
                            minSize.width = display ? 10 : 0;
                            minSize.height = me.maxHeight;
                        }
                        if (display) {
                            ctx.font = labelFont;
                            if (isHorizontal) {
                                var lineWidths = me.lineWidths = [0];
                                var totalHeight = me.legendItems.length ? fontSize + labelOpts.padding : 0;
                                ctx.textAlign = 'left';
                                ctx.textBaseline = 'top';
                                helpers.each(me.legendItems, function (legendItem, i) {
                                    var boxWidth = getBoxWidth(labelOpts, fontSize);
                                    var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                                    if (lineWidths[lineWidths.length - 1] + width + labelOpts.padding >= me.width) {
                                        totalHeight += fontSize + labelOpts.padding;
                                        lineWidths[lineWidths.length] = me.left;
                                    }
                                    hitboxes[i] = {
                                        left: 0,
                                        top: 0,
                                        width: width,
                                        height: fontSize
                                    };
                                    lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
                                });
                                minSize.height += totalHeight;
                            } else {
                                var vPadding = labelOpts.padding;
                                var columnWidths = me.columnWidths = [];
                                var totalWidth = labelOpts.padding;
                                var currentColWidth = 0;
                                var currentColHeight = 0;
                                var itemHeight = fontSize + vPadding;
                                helpers.each(me.legendItems, function (legendItem, i) {
                                    var boxWidth = getBoxWidth(labelOpts, fontSize);
                                    var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                                    if (currentColHeight + itemHeight > minSize.height) {
                                        totalWidth += currentColWidth + labelOpts.padding;
                                        columnWidths.push(currentColWidth);
                                        currentColWidth = 0;
                                        currentColHeight = 0;
                                    }
                                    currentColWidth = Math.max(currentColWidth, itemWidth);
                                    currentColHeight += itemHeight;
                                    hitboxes[i] = {
                                        left: 0,
                                        top: 0,
                                        width: itemWidth,
                                        height: fontSize
                                    };
                                });
                                totalWidth += currentColWidth;
                                columnWidths.push(currentColWidth);
                                minSize.width += totalWidth;
                            }
                        }
                        me.width = minSize.width;
                        me.height = minSize.height;
                    },
                    afterFit: noop,
                    isHorizontal: function () {
                        return this.options.position === 'top' || this.options.position === 'bottom';
                    },
                    draw: function () {
                        var me = this;
                        var opts = me.options;
                        var labelOpts = opts.labels;
                        var globalDefault = Chart.defaults.global, lineDefault = globalDefault.elements.line, legendWidth = me.width, lineWidths = me.lineWidths;
                        if (opts.display) {
                            var ctx = me.ctx, cursor, itemOrDefault = helpers.getValueOrDefault, fontColor = itemOrDefault(labelOpts.fontColor, globalDefault.defaultFontColor), fontSize = itemOrDefault(labelOpts.fontSize, globalDefault.defaultFontSize), fontStyle = itemOrDefault(labelOpts.fontStyle, globalDefault.defaultFontStyle), fontFamily = itemOrDefault(labelOpts.fontFamily, globalDefault.defaultFontFamily), labelFont = helpers.fontString(fontSize, fontStyle, fontFamily);
                            ctx.textAlign = 'left';
                            ctx.textBaseline = 'top';
                            ctx.lineWidth = 0.5;
                            ctx.strokeStyle = fontColor;
                            ctx.fillStyle = fontColor;
                            ctx.font = labelFont;
                            var boxWidth = getBoxWidth(labelOpts, fontSize), hitboxes = me.legendHitBoxes;
                            var drawLegendBox = function (x, y, legendItem) {
                                if (isNaN(boxWidth) || boxWidth <= 0) {
                                    return;
                                }
                                ctx.save();
                                ctx.fillStyle = itemOrDefault(legendItem.fillStyle, globalDefault.defaultColor);
                                ctx.lineCap = itemOrDefault(legendItem.lineCap, lineDefault.borderCapStyle);
                                ctx.lineDashOffset = itemOrDefault(legendItem.lineDashOffset, lineDefault.borderDashOffset);
                                ctx.lineJoin = itemOrDefault(legendItem.lineJoin, lineDefault.borderJoinStyle);
                                ctx.lineWidth = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth);
                                ctx.strokeStyle = itemOrDefault(legendItem.strokeStyle, globalDefault.defaultColor);
                                var isLineWidthZero = itemOrDefault(legendItem.lineWidth, lineDefault.borderWidth) === 0;
                                if (ctx.setLineDash) {
                                    ctx.setLineDash(itemOrDefault(legendItem.lineDash, lineDefault.borderDash));
                                }
                                if (opts.labels && opts.labels.usePointStyle) {
                                    var radius = fontSize * Math.SQRT2 / 2;
                                    var offSet = radius / Math.SQRT2;
                                    var centerX = x + offSet;
                                    var centerY = y + offSet;
                                    Chart.canvasHelpers.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY);
                                } else {
                                    if (!isLineWidthZero) {
                                        ctx.strokeRect(x, y, boxWidth, fontSize);
                                    }
                                    ctx.fillRect(x, y, boxWidth, fontSize);
                                }
                                ctx.restore();
                            };
                            var fillText = function (x, y, legendItem, textWidth) {
                                ctx.fillText(legendItem.text, boxWidth + fontSize / 2 + x, y);
                                if (legendItem.hidden) {
                                    ctx.beginPath();
                                    ctx.lineWidth = 2;
                                    ctx.moveTo(boxWidth + fontSize / 2 + x, y + fontSize / 2);
                                    ctx.lineTo(boxWidth + fontSize / 2 + x + textWidth, y + fontSize / 2);
                                    ctx.stroke();
                                }
                            };
                            var isHorizontal = me.isHorizontal();
                            if (isHorizontal) {
                                cursor = {
                                    x: me.left + (legendWidth - lineWidths[0]) / 2,
                                    y: me.top + labelOpts.padding,
                                    line: 0
                                };
                            } else {
                                cursor = {
                                    x: me.left + labelOpts.padding,
                                    y: me.top + labelOpts.padding,
                                    line: 0
                                };
                            }
                            var itemHeight = fontSize + labelOpts.padding;
                            helpers.each(me.legendItems, function (legendItem, i) {
                                var textWidth = ctx.measureText(legendItem.text).width, width = boxWidth + fontSize / 2 + textWidth, x = cursor.x, y = cursor.y;
                                if (isHorizontal) {
                                    if (x + width >= legendWidth) {
                                        y = cursor.y += itemHeight;
                                        cursor.line++;
                                        x = cursor.x = me.left + (legendWidth - lineWidths[cursor.line]) / 2;
                                    }
                                } else if (y + itemHeight > me.bottom) {
                                    x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
                                    y = cursor.y = me.top + labelOpts.padding;
                                    cursor.line++;
                                }
                                drawLegendBox(x, y, legendItem);
                                hitboxes[i].left = x;
                                hitboxes[i].top = y;
                                fillText(x, y, legendItem, textWidth);
                                if (isHorizontal) {
                                    cursor.x += width + labelOpts.padding;
                                } else {
                                    cursor.y += itemHeight;
                                }
                            });
                        }
                    },
                    handleEvent: function (e) {
                        var me = this;
                        var opts = me.options;
                        var type = e.type === 'mouseup' ? 'click' : e.type;
                        var changed = false;
                        if (type === 'mousemove') {
                            if (!opts.onHover) {
                                return;
                            }
                        } else if (type === 'click') {
                            if (!opts.onClick) {
                                return;
                            }
                        } else {
                            return;
                        }
                        var x = e.x, y = e.y;
                        if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
                            var lh = me.legendHitBoxes;
                            for (var i = 0; i < lh.length; ++i) {
                                var hitBox = lh[i];
                                if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
                                    if (type === 'click') {
                                        opts.onClick.call(me, e.native, me.legendItems[i]);
                                        changed = true;
                                        break;
                                    } else if (type === 'mousemove') {
                                        opts.onHover.call(me, e.native, me.legendItems[i]);
                                        changed = true;
                                        break;
                                    }
                                }
                            }
                        }
                        return changed;
                    }
                });
                function createNewLegendAndAttach(chartInstance, legendOpts) {
                    var legend = new Chart.Legend({
                        ctx: chartInstance.chart.ctx,
                        options: legendOpts,
                        chart: chartInstance
                    });
                    chartInstance.legend = legend;
                    Chart.layoutService.addBox(chartInstance, legend);
                }
                Chart.plugins.register({
                    beforeInit: function (chartInstance) {
                        var legendOpts = chartInstance.options.legend;
                        if (legendOpts) {
                            createNewLegendAndAttach(chartInstance, legendOpts);
                        }
                    },
                    beforeUpdate: function (chartInstance) {
                        var legendOpts = chartInstance.options.legend;
                        if (legendOpts) {
                            legendOpts = helpers.configMerge(Chart.defaults.global.legend, legendOpts);
                            if (chartInstance.legend) {
                                chartInstance.legend.options = legendOpts;
                            } else {
                                createNewLegendAndAttach(chartInstance, legendOpts);
                            }
                        } else {
                            Chart.layoutService.removeBox(chartInstance, chartInstance.legend);
                            delete chartInstance.legend;
                        }
                    },
                    afterEvent: function (chartInstance, e) {
                        var legend = chartInstance.legend;
                        if (legend) {
                            legend.handleEvent(e);
                        }
                    }
                });
            };
        },
        {}
    ],
    31: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.defaults.global.plugins = {};
                Chart.plugins = {
                    _plugins: [],
                    _cacheId: 0,
                    register: function (plugins) {
                        var p = this._plugins;
                        [].concat(plugins).forEach(function (plugin) {
                            if (p.indexOf(plugin) === -1) {
                                p.push(plugin);
                            }
                        });
                        this._cacheId++;
                    },
                    unregister: function (plugins) {
                        var p = this._plugins;
                        [].concat(plugins).forEach(function (plugin) {
                            var idx = p.indexOf(plugin);
                            if (idx !== -1) {
                                p.splice(idx, 1);
                            }
                        });
                        this._cacheId++;
                    },
                    clear: function () {
                        this._plugins = [];
                        this._cacheId++;
                    },
                    count: function () {
                        return this._plugins.length;
                    },
                    getAll: function () {
                        return this._plugins;
                    },
                    notify: function (chart, hook, args) {
                        var descriptors = this.descriptors(chart);
                        var ilen = descriptors.length;
                        var i, descriptor, plugin, params, method;
                        for (i = 0; i < ilen; ++i) {
                            descriptor = descriptors[i];
                            plugin = descriptor.plugin;
                            method = plugin[hook];
                            if (typeof method === 'function') {
                                params = [chart].concat(args || []);
                                params.push(descriptor.options);
                                if (method.apply(plugin, params) === false) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    },
                    descriptors: function (chart) {
                        var cache = chart._plugins || (chart._plugins = {});
                        if (cache.id === this._cacheId) {
                            return cache.descriptors;
                        }
                        var plugins = [];
                        var descriptors = [];
                        var config = chart && chart.config || {};
                        var defaults = Chart.defaults.global.plugins;
                        var options = config.options && config.options.plugins || {};
                        this._plugins.concat(config.plugins || []).forEach(function (plugin) {
                            var idx = plugins.indexOf(plugin);
                            if (idx !== -1) {
                                return;
                            }
                            var id = plugin.id;
                            var opts = options[id];
                            if (opts === false) {
                                return;
                            }
                            if (opts === true) {
                                opts = helpers.clone(defaults[id]);
                            }
                            plugins.push(plugin);
                            descriptors.push({
                                plugin: plugin,
                                options: opts || {}
                            });
                        });
                        cache.descriptors = descriptors;
                        cache.id = this._cacheId;
                        return descriptors;
                    }
                };
                Chart.pluginService = Chart.plugins;
                Chart.PluginBase = helpers.inherits({});
            };
        },
        {}
    ],
    32: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.defaults.scale = {
                    display: true,
                    position: 'left',
                    gridLines: {
                        display: true,
                        color: 'rgba(0, 0, 0, 0.1)',
                        lineWidth: 1,
                        drawBorder: true,
                        drawOnChartArea: true,
                        drawTicks: true,
                        tickMarkLength: 10,
                        zeroLineWidth: 1,
                        zeroLineColor: 'rgba(0,0,0,0.25)',
                        offsetGridLines: false,
                        borderDash: [],
                        borderDashOffset: 0
                    },
                    scaleLabel: {
                        labelString: '',
                        display: false
                    },
                    ticks: {
                        beginAtZero: false,
                        minRotation: 0,
                        maxRotation: 50,
                        mirror: false,
                        padding: 0,
                        reverse: false,
                        display: true,
                        autoSkip: true,
                        autoSkipPadding: 0,
                        labelOffset: 0,
                        callback: Chart.Ticks.formatters.values
                    }
                };
                function computeTextSize(context, tick, font) {
                    return helpers.isArray(tick) ? helpers.longestText(context, font, tick) : context.measureText(tick).width;
                }
                function parseFontOptions(options) {
                    var getValueOrDefault = helpers.getValueOrDefault;
                    var globalDefaults = Chart.defaults.global;
                    var size = getValueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
                    var style = getValueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle);
                    var family = getValueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily);
                    return {
                        size: size,
                        style: style,
                        family: family,
                        font: helpers.fontString(size, style, family)
                    };
                }
                Chart.Scale = Chart.Element.extend({
                    getPadding: function () {
                        var me = this;
                        return {
                            left: me.paddingLeft || 0,
                            top: me.paddingTop || 0,
                            right: me.paddingRight || 0,
                            bottom: me.paddingBottom || 0
                        };
                    },
                    beforeUpdate: function () {
                        helpers.callCallback(this.options.beforeUpdate, [this]);
                    },
                    update: function (maxWidth, maxHeight, margins) {
                        var me = this;
                        me.beforeUpdate();
                        me.maxWidth = maxWidth;
                        me.maxHeight = maxHeight;
                        me.margins = helpers.extend({
                            left: 0,
                            right: 0,
                            top: 0,
                            bottom: 0
                        }, margins);
                        me.longestTextCache = me.longestTextCache || {};
                        me.beforeSetDimensions();
                        me.setDimensions();
                        me.afterSetDimensions();
                        me.beforeDataLimits();
                        me.determineDataLimits();
                        me.afterDataLimits();
                        me.beforeBuildTicks();
                        me.buildTicks();
                        me.afterBuildTicks();
                        me.beforeTickToLabelConversion();
                        me.convertTicksToLabels();
                        me.afterTickToLabelConversion();
                        me.beforeCalculateTickRotation();
                        me.calculateTickRotation();
                        me.afterCalculateTickRotation();
                        me.beforeFit();
                        me.fit();
                        me.afterFit();
                        me.afterUpdate();
                        return me.minSize;
                    },
                    afterUpdate: function () {
                        helpers.callCallback(this.options.afterUpdate, [this]);
                    },
                    beforeSetDimensions: function () {
                        helpers.callCallback(this.options.beforeSetDimensions, [this]);
                    },
                    setDimensions: function () {
                        var me = this;
                        if (me.isHorizontal()) {
                            me.width = me.maxWidth;
                            me.left = 0;
                            me.right = me.width;
                        } else {
                            me.height = me.maxHeight;
                            me.top = 0;
                            me.bottom = me.height;
                        }
                        me.paddingLeft = 0;
                        me.paddingTop = 0;
                        me.paddingRight = 0;
                        me.paddingBottom = 0;
                    },
                    afterSetDimensions: function () {
                        helpers.callCallback(this.options.afterSetDimensions, [this]);
                    },
                    beforeDataLimits: function () {
                        helpers.callCallback(this.options.beforeDataLimits, [this]);
                    },
                    determineDataLimits: helpers.noop,
                    afterDataLimits: function () {
                        helpers.callCallback(this.options.afterDataLimits, [this]);
                    },
                    beforeBuildTicks: function () {
                        helpers.callCallback(this.options.beforeBuildTicks, [this]);
                    },
                    buildTicks: helpers.noop,
                    afterBuildTicks: function () {
                        helpers.callCallback(this.options.afterBuildTicks, [this]);
                    },
                    beforeTickToLabelConversion: function () {
                        helpers.callCallback(this.options.beforeTickToLabelConversion, [this]);
                    },
                    convertTicksToLabels: function () {
                        var me = this;
                        var tickOpts = me.options.ticks;
                        me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback);
                    },
                    afterTickToLabelConversion: function () {
                        helpers.callCallback(this.options.afterTickToLabelConversion, [this]);
                    },
                    beforeCalculateTickRotation: function () {
                        helpers.callCallback(this.options.beforeCalculateTickRotation, [this]);
                    },
                    calculateTickRotation: function () {
                        var me = this;
                        var context = me.ctx;
                        var tickOpts = me.options.ticks;
                        var tickFont = parseFontOptions(tickOpts);
                        context.font = tickFont.font;
                        var labelRotation = tickOpts.minRotation || 0;
                        if (me.options.display && me.isHorizontal()) {
                            var originalLabelWidth = helpers.longestText(context, tickFont.font, me.ticks, me.longestTextCache);
                            var labelWidth = originalLabelWidth;
                            var cosRotation;
                            var sinRotation;
                            var tickWidth = me.getPixelForTick(1) - me.getPixelForTick(0) - 6;
                            while (labelWidth > tickWidth && labelRotation < tickOpts.maxRotation) {
                                var angleRadians = helpers.toRadians(labelRotation);
                                cosRotation = Math.cos(angleRadians);
                                sinRotation = Math.sin(angleRadians);
                                if (sinRotation * originalLabelWidth > me.maxHeight) {
                                    labelRotation--;
                                    break;
                                }
                                labelRotation++;
                                labelWidth = cosRotation * originalLabelWidth;
                            }
                        }
                        me.labelRotation = labelRotation;
                    },
                    afterCalculateTickRotation: function () {
                        helpers.callCallback(this.options.afterCalculateTickRotation, [this]);
                    },
                    beforeFit: function () {
                        helpers.callCallback(this.options.beforeFit, [this]);
                    },
                    fit: function () {
                        var me = this;
                        var minSize = me.minSize = {
                            width: 0,
                            height: 0
                        };
                        var opts = me.options;
                        var tickOpts = opts.ticks;
                        var scaleLabelOpts = opts.scaleLabel;
                        var gridLineOpts = opts.gridLines;
                        var display = opts.display;
                        var isHorizontal = me.isHorizontal();
                        var tickFont = parseFontOptions(tickOpts);
                        var scaleLabelFontSize = parseFontOptions(scaleLabelOpts).size * 1.5;
                        var tickMarkLength = opts.gridLines.tickMarkLength;
                        if (isHorizontal) {
                            minSize.width = me.isFullWidth() ? me.maxWidth - me.margins.left - me.margins.right : me.maxWidth;
                        } else {
                            minSize.width = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
                        }
                        if (isHorizontal) {
                            minSize.height = display && gridLineOpts.drawTicks ? tickMarkLength : 0;
                        } else {
                            minSize.height = me.maxHeight;
                        }
                        if (scaleLabelOpts.display && display) {
                            if (isHorizontal) {
                                minSize.height += scaleLabelFontSize;
                            } else {
                                minSize.width += scaleLabelFontSize;
                            }
                        }
                        if (tickOpts.display && display) {
                            var largestTextWidth = helpers.longestText(me.ctx, tickFont.font, me.ticks, me.longestTextCache);
                            var tallestLabelHeightInLines = helpers.numberOfLabelLines(me.ticks);
                            var lineSpace = tickFont.size * 0.5;
                            if (isHorizontal) {
                                me.longestLabelWidth = largestTextWidth;
                                var angleRadians = helpers.toRadians(me.labelRotation);
                                var cosRotation = Math.cos(angleRadians);
                                var sinRotation = Math.sin(angleRadians);
                                var labelHeight = sinRotation * largestTextWidth + tickFont.size * tallestLabelHeightInLines + lineSpace * tallestLabelHeightInLines;
                                minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight);
                                me.ctx.font = tickFont.font;
                                var firstTick = me.ticks[0];
                                var firstLabelWidth = computeTextSize(me.ctx, firstTick, tickFont.font);
                                var lastTick = me.ticks[me.ticks.length - 1];
                                var lastLabelWidth = computeTextSize(me.ctx, lastTick, tickFont.font);
                                if (me.labelRotation !== 0) {
                                    me.paddingLeft = opts.position === 'bottom' ? cosRotation * firstLabelWidth + 3 : cosRotation * lineSpace + 3;
                                    me.paddingRight = opts.position === 'bottom' ? cosRotation * lineSpace + 3 : cosRotation * lastLabelWidth + 3;
                                } else {
                                    me.paddingLeft = firstLabelWidth / 2 + 3;
                                    me.paddingRight = lastLabelWidth / 2 + 3;
                                }
                            } else {
                                if (tickOpts.mirror) {
                                    largestTextWidth = 0;
                                } else {
                                    largestTextWidth += me.options.ticks.padding;
                                }
                                minSize.width += largestTextWidth;
                                me.paddingTop = tickFont.size / 2;
                                me.paddingBottom = tickFont.size / 2;
                            }
                        }
                        me.handleMargins();
                        me.width = minSize.width;
                        me.height = minSize.height;
                    },
                    handleMargins: function () {
                        var me = this;
                        if (me.margins) {
                            me.paddingLeft = Math.max(me.paddingLeft - me.margins.left, 0);
                            me.paddingTop = Math.max(me.paddingTop - me.margins.top, 0);
                            me.paddingRight = Math.max(me.paddingRight - me.margins.right, 0);
                            me.paddingBottom = Math.max(me.paddingBottom - me.margins.bottom, 0);
                        }
                    },
                    afterFit: function () {
                        helpers.callCallback(this.options.afterFit, [this]);
                    },
                    isHorizontal: function () {
                        return this.options.position === 'top' || this.options.position === 'bottom';
                    },
                    isFullWidth: function () {
                        return this.options.fullWidth;
                    },
                    getRightValue: function (rawValue) {
                        if (rawValue === null || typeof rawValue === 'undefined') {
                            return NaN;
                        }
                        if (typeof rawValue === 'number' && !isFinite(rawValue)) {
                            return NaN;
                        }
                        if (typeof rawValue === 'object') {
                            if (rawValue instanceof Date || rawValue.isValid) {
                                return rawValue;
                            }
                            return this.getRightValue(this.isHorizontal() ? rawValue.x : rawValue.y);
                        }
                        return rawValue;
                    },
                    getLabelForIndex: helpers.noop,
                    getPixelForValue: helpers.noop,
                    getValueForPixel: helpers.noop,
                    getPixelForTick: function (index, includeOffset) {
                        var me = this;
                        if (me.isHorizontal()) {
                            var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
                            var tickWidth = innerWidth / Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
                            var pixel = tickWidth * index + me.paddingLeft;
                            if (includeOffset) {
                                pixel += tickWidth / 2;
                            }
                            var finalVal = me.left + Math.round(pixel);
                            finalVal += me.isFullWidth() ? me.margins.left : 0;
                            return finalVal;
                        }
                        var innerHeight = me.height - (me.paddingTop + me.paddingBottom);
                        return me.top + index * (innerHeight / (me.ticks.length - 1));
                    },
                    getPixelForDecimal: function (decimal) {
                        var me = this;
                        if (me.isHorizontal()) {
                            var innerWidth = me.width - (me.paddingLeft + me.paddingRight);
                            var valueOffset = innerWidth * decimal + me.paddingLeft;
                            var finalVal = me.left + Math.round(valueOffset);
                            finalVal += me.isFullWidth() ? me.margins.left : 0;
                            return finalVal;
                        }
                        return me.top + decimal * me.height;
                    },
                    getBasePixel: function () {
                        return this.getPixelForValue(this.getBaseValue());
                    },
                    getBaseValue: function () {
                        var me = this;
                        var min = me.min;
                        var max = me.max;
                        return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
                    },
                    draw: function (chartArea) {
                        var me = this;
                        var options = me.options;
                        if (!options.display) {
                            return;
                        }
                        var context = me.ctx;
                        var globalDefaults = Chart.defaults.global;
                        var optionTicks = options.ticks;
                        var gridLines = options.gridLines;
                        var scaleLabel = options.scaleLabel;
                        var isRotated = me.labelRotation !== 0;
                        var skipRatio;
                        var useAutoskipper = optionTicks.autoSkip;
                        var isHorizontal = me.isHorizontal();
                        var maxTicks;
                        if (optionTicks.maxTicksLimit) {
                            maxTicks = optionTicks.maxTicksLimit;
                        }
                        var tickFontColor = helpers.getValueOrDefault(optionTicks.fontColor, globalDefaults.defaultFontColor);
                        var tickFont = parseFontOptions(optionTicks);
                        var tl = gridLines.drawTicks ? gridLines.tickMarkLength : 0;
                        var borderDash = helpers.getValueOrDefault(gridLines.borderDash, globalDefaults.borderDash);
                        var borderDashOffset = helpers.getValueOrDefault(gridLines.borderDashOffset, globalDefaults.borderDashOffset);
                        var scaleLabelFontColor = helpers.getValueOrDefault(scaleLabel.fontColor, globalDefaults.defaultFontColor);
                        var scaleLabelFont = parseFontOptions(scaleLabel);
                        var labelRotationRadians = helpers.toRadians(me.labelRotation);
                        var cosRotation = Math.cos(labelRotationRadians);
                        var longestRotatedLabel = me.longestLabelWidth * cosRotation;
                        context.fillStyle = tickFontColor;
                        var itemsToDraw = [];
                        if (isHorizontal) {
                            skipRatio = false;
                            if (isRotated) {
                                longestRotatedLabel /= 2;
                            }
                            if ((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length > me.width - (me.paddingLeft + me.paddingRight)) {
                                skipRatio = 1 + Math.floor((longestRotatedLabel + optionTicks.autoSkipPadding) * me.ticks.length / (me.width - (me.paddingLeft + me.paddingRight)));
                            }
                            if (maxTicks && me.ticks.length > maxTicks) {
                                while (!skipRatio || me.ticks.length / (skipRatio || 1) > maxTicks) {
                                    if (!skipRatio) {
                                        skipRatio = 1;
                                    }
                                    skipRatio += 1;
                                }
                            }
                            if (!useAutoskipper) {
                                skipRatio = false;
                            }
                        }
                        var xTickStart = options.position === 'right' ? me.left : me.right - tl;
                        var xTickEnd = options.position === 'right' ? me.left + tl : me.right;
                        var yTickStart = options.position === 'bottom' ? me.top : me.bottom - tl;
                        var yTickEnd = options.position === 'bottom' ? me.top + tl : me.bottom;
                        helpers.each(me.ticks, function (label, index) {
                            if (label === undefined || label === null) {
                                return;
                            }
                            var isLastTick = me.ticks.length === index + 1;
                            var shouldSkip = skipRatio > 1 && index % skipRatio > 0 || index % skipRatio === 0 && index + skipRatio >= me.ticks.length;
                            if (shouldSkip && !isLastTick || (label === undefined || label === null)) {
                                return;
                            }
                            var lineWidth, lineColor;
                            if (index === (typeof me.zeroLineIndex !== 'undefined' ? me.zeroLineIndex : 0)) {
                                lineWidth = gridLines.zeroLineWidth;
                                lineColor = gridLines.zeroLineColor;
                            } else {
                                lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, index);
                                lineColor = helpers.getValueAtIndexOrDefault(gridLines.color, index);
                            }
                            var tx1, ty1, tx2, ty2, x1, y1, x2, y2, labelX, labelY;
                            var textAlign = 'middle';
                            var textBaseline = 'middle';
                            if (isHorizontal) {
                                if (options.position === 'bottom') {
                                    textBaseline = !isRotated ? 'top' : 'middle';
                                    textAlign = !isRotated ? 'center' : 'right';
                                    labelY = me.top + tl;
                                } else {
                                    textBaseline = !isRotated ? 'bottom' : 'middle';
                                    textAlign = !isRotated ? 'center' : 'left';
                                    labelY = me.bottom - tl;
                                }
                                var xLineValue = me.getPixelForTick(index) + helpers.aliasPixel(lineWidth);
                                labelX = me.getPixelForTick(index, gridLines.offsetGridLines) + optionTicks.labelOffset;
                                tx1 = tx2 = x1 = x2 = xLineValue;
                                ty1 = yTickStart;
                                ty2 = yTickEnd;
                                y1 = chartArea.top;
                                y2 = chartArea.bottom;
                            } else {
                                var isLeft = options.position === 'left';
                                var tickPadding = optionTicks.padding;
                                var labelXOffset;
                                if (optionTicks.mirror) {
                                    textAlign = isLeft ? 'left' : 'right';
                                    labelXOffset = tickPadding;
                                } else {
                                    textAlign = isLeft ? 'right' : 'left';
                                    labelXOffset = tl + tickPadding;
                                }
                                labelX = isLeft ? me.right - labelXOffset : me.left + labelXOffset;
                                var yLineValue = me.getPixelForTick(index);
                                yLineValue += helpers.aliasPixel(lineWidth);
                                labelY = me.getPixelForTick(index, gridLines.offsetGridLines);
                                tx1 = xTickStart;
                                tx2 = xTickEnd;
                                x1 = chartArea.left;
                                x2 = chartArea.right;
                                ty1 = ty2 = y1 = y2 = yLineValue;
                            }
                            itemsToDraw.push({
                                tx1: tx1,
                                ty1: ty1,
                                tx2: tx2,
                                ty2: ty2,
                                x1: x1,
                                y1: y1,
                                x2: x2,
                                y2: y2,
                                labelX: labelX,
                                labelY: labelY,
                                glWidth: lineWidth,
                                glColor: lineColor,
                                glBorderDash: borderDash,
                                glBorderDashOffset: borderDashOffset,
                                rotation: -1 * labelRotationRadians,
                                label: label,
                                textBaseline: textBaseline,
                                textAlign: textAlign
                            });
                        });
                        helpers.each(itemsToDraw, function (itemToDraw) {
                            if (gridLines.display) {
                                context.save();
                                context.lineWidth = itemToDraw.glWidth;
                                context.strokeStyle = itemToDraw.glColor;
                                if (context.setLineDash) {
                                    context.setLineDash(itemToDraw.glBorderDash);
                                    context.lineDashOffset = itemToDraw.glBorderDashOffset;
                                }
                                context.beginPath();
                                if (gridLines.drawTicks) {
                                    context.moveTo(itemToDraw.tx1, itemToDraw.ty1);
                                    context.lineTo(itemToDraw.tx2, itemToDraw.ty2);
                                }
                                if (gridLines.drawOnChartArea) {
                                    context.moveTo(itemToDraw.x1, itemToDraw.y1);
                                    context.lineTo(itemToDraw.x2, itemToDraw.y2);
                                }
                                context.stroke();
                                context.restore();
                            }
                            if (optionTicks.display) {
                                context.save();
                                context.translate(itemToDraw.labelX, itemToDraw.labelY);
                                context.rotate(itemToDraw.rotation);
                                context.font = tickFont.font;
                                context.textBaseline = itemToDraw.textBaseline;
                                context.textAlign = itemToDraw.textAlign;
                                var label = itemToDraw.label;
                                if (helpers.isArray(label)) {
                                    for (var i = 0, y = 0; i < label.length; ++i) {
                                        context.fillText('' + label[i], 0, y);
                                        y += tickFont.size * 1.5;
                                    }
                                } else {
                                    context.fillText(label, 0, 0);
                                }
                                context.restore();
                            }
                        });
                        if (scaleLabel.display) {
                            var scaleLabelX;
                            var scaleLabelY;
                            var rotation = 0;
                            if (isHorizontal) {
                                scaleLabelX = me.left + (me.right - me.left) / 2;
                                scaleLabelY = options.position === 'bottom' ? me.bottom - scaleLabelFont.size / 2 : me.top + scaleLabelFont.size / 2;
                            } else {
                                var isLeft = options.position === 'left';
                                scaleLabelX = isLeft ? me.left + scaleLabelFont.size / 2 : me.right - scaleLabelFont.size / 2;
                                scaleLabelY = me.top + (me.bottom - me.top) / 2;
                                rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
                            }
                            context.save();
                            context.translate(scaleLabelX, scaleLabelY);
                            context.rotate(rotation);
                            context.textAlign = 'center';
                            context.textBaseline = 'middle';
                            context.fillStyle = scaleLabelFontColor;
                            context.font = scaleLabelFont.font;
                            context.fillText(scaleLabel.labelString, 0, 0);
                            context.restore();
                        }
                        if (gridLines.drawBorder) {
                            context.lineWidth = helpers.getValueAtIndexOrDefault(gridLines.lineWidth, 0);
                            context.strokeStyle = helpers.getValueAtIndexOrDefault(gridLines.color, 0);
                            var x1 = me.left, x2 = me.right, y1 = me.top, y2 = me.bottom;
                            var aliasPixel = helpers.aliasPixel(context.lineWidth);
                            if (isHorizontal) {
                                y1 = y2 = options.position === 'top' ? me.bottom : me.top;
                                y1 += aliasPixel;
                                y2 += aliasPixel;
                            } else {
                                x1 = x2 = options.position === 'left' ? me.right : me.left;
                                x1 += aliasPixel;
                                x2 += aliasPixel;
                            }
                            context.beginPath();
                            context.moveTo(x1, y1);
                            context.lineTo(x2, y2);
                            context.stroke();
                        }
                    }
                });
            };
        },
        {}
    ],
    33: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.scaleService = {
                    constructors: {},
                    defaults: {},
                    registerScaleType: function (type, scaleConstructor, defaults) {
                        this.constructors[type] = scaleConstructor;
                        this.defaults[type] = helpers.clone(defaults);
                    },
                    getScaleConstructor: function (type) {
                        return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
                    },
                    getScaleDefaults: function (type) {
                        return this.defaults.hasOwnProperty(type) ? helpers.scaleMerge(Chart.defaults.scale, this.defaults[type]) : {};
                    },
                    updateScaleDefaults: function (type, additions) {
                        var defaults = this.defaults;
                        if (defaults.hasOwnProperty(type)) {
                            defaults[type] = helpers.extend(defaults[type], additions);
                        }
                    },
                    addScalesToLayout: function (chartInstance) {
                        helpers.each(chartInstance.scales, function (scale) {
                            Chart.layoutService.addBox(chartInstance, scale);
                        });
                    }
                };
            };
        },
        {}
    ],
    34: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.Ticks = {
                    generators: {
                        linear: function (generationOptions, dataRange) {
                            var ticks = [];
                            var spacing;
                            if (generationOptions.stepSize && generationOptions.stepSize > 0) {
                                spacing = generationOptions.stepSize;
                            } else {
                                var niceRange = helpers.niceNum(dataRange.max - dataRange.min, false);
                                spacing = helpers.niceNum(niceRange / (generationOptions.maxTicks - 1), true);
                            }
                            var niceMin = Math.floor(dataRange.min / spacing) * spacing;
                            var niceMax = Math.ceil(dataRange.max / spacing) * spacing;
                            if (generationOptions.min && generationOptions.max && generationOptions.stepSize) {
                                if (helpers.almostWhole((generationOptions.max - generationOptions.min) / generationOptions.stepSize, spacing / 1000)) {
                                    niceMin = generationOptions.min;
                                    niceMax = generationOptions.max;
                                }
                            }
                            var numSpaces = (niceMax - niceMin) / spacing;
                            if (helpers.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
                                numSpaces = Math.round(numSpaces);
                            } else {
                                numSpaces = Math.ceil(numSpaces);
                            }
                            ticks.push(generationOptions.min !== undefined ? generationOptions.min : niceMin);
                            for (var j = 1; j < numSpaces; ++j) {
                                ticks.push(niceMin + j * spacing);
                            }
                            ticks.push(generationOptions.max !== undefined ? generationOptions.max : niceMax);
                            return ticks;
                        },
                        logarithmic: function (generationOptions, dataRange) {
                            var ticks = [];
                            var getValueOrDefault = helpers.getValueOrDefault;
                            var tickVal = getValueOrDefault(generationOptions.min, Math.pow(10, Math.floor(helpers.log10(dataRange.min))));
                            var endExp = Math.floor(helpers.log10(dataRange.max));
                            var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
                            var exp;
                            var significand;
                            if (tickVal === 0) {
                                exp = Math.floor(helpers.log10(dataRange.minNotZero));
                                significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
                                ticks.push(tickVal);
                                tickVal = significand * Math.pow(10, exp);
                            } else {
                                exp = Math.floor(helpers.log10(tickVal));
                                significand = Math.floor(tickVal / Math.pow(10, exp));
                            }
                            do {
                                ticks.push(tickVal);
                                ++significand;
                                if (significand === 10) {
                                    significand = 1;
                                    ++exp;
                                }
                                tickVal = significand * Math.pow(10, exp);
                            } while (exp < endExp || exp === endExp && significand < endSignificand);
                            var lastTick = getValueOrDefault(generationOptions.max, tickVal);
                            ticks.push(lastTick);
                            return ticks;
                        }
                    },
                    formatters: {
                        values: function (value) {
                            return helpers.isArray(value) ? value : '' + value;
                        },
                        linear: function (tickValue, index, ticks) {
                            var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
                            if (Math.abs(delta) > 1) {
                                if (tickValue !== Math.floor(tickValue)) {
                                    delta = tickValue - Math.floor(tickValue);
                                }
                            }
                            var logDelta = helpers.log10(Math.abs(delta));
                            var tickString = '';
                            if (tickValue !== 0) {
                                var numDecimal = -1 * Math.floor(logDelta);
                                numDecimal = Math.max(Math.min(numDecimal, 20), 0);
                                tickString = tickValue.toFixed(numDecimal);
                            } else {
                                tickString = '0';
                            }
                            return tickString;
                        },
                        logarithmic: function (tickValue, index, ticks) {
                            var remain = tickValue / Math.pow(10, Math.floor(helpers.log10(tickValue)));
                            if (tickValue === 0) {
                                return '0';
                            } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
                                return tickValue.toExponential();
                            }
                            return '';
                        }
                    }
                };
            };
        },
        {}
    ],
    35: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                Chart.defaults.global.title = {
                    display: false,
                    position: 'top',
                    fullWidth: true,
                    fontStyle: 'bold',
                    padding: 10,
                    text: ''
                };
                var noop = helpers.noop;
                Chart.Title = Chart.Element.extend({
                    initialize: function (config) {
                        var me = this;
                        helpers.extend(me, config);
                        me.legendHitBoxes = [];
                    },
                    beforeUpdate: noop,
                    update: function (maxWidth, maxHeight, margins) {
                        var me = this;
                        me.beforeUpdate();
                        me.maxWidth = maxWidth;
                        me.maxHeight = maxHeight;
                        me.margins = margins;
                        me.beforeSetDimensions();
                        me.setDimensions();
                        me.afterSetDimensions();
                        me.beforeBuildLabels();
                        me.buildLabels();
                        me.afterBuildLabels();
                        me.beforeFit();
                        me.fit();
                        me.afterFit();
                        me.afterUpdate();
                        return me.minSize;
                    },
                    afterUpdate: noop,
                    beforeSetDimensions: noop,
                    setDimensions: function () {
                        var me = this;
                        if (me.isHorizontal()) {
                            me.width = me.maxWidth;
                            me.left = 0;
                            me.right = me.width;
                        } else {
                            me.height = me.maxHeight;
                            me.top = 0;
                            me.bottom = me.height;
                        }
                        me.paddingLeft = 0;
                        me.paddingTop = 0;
                        me.paddingRight = 0;
                        me.paddingBottom = 0;
                        me.minSize = {
                            width: 0,
                            height: 0
                        };
                    },
                    afterSetDimensions: noop,
                    beforeBuildLabels: noop,
                    buildLabels: noop,
                    afterBuildLabels: noop,
                    beforeFit: noop,
                    fit: function () {
                        var me = this, valueOrDefault = helpers.getValueOrDefault, opts = me.options, globalDefaults = Chart.defaults.global, display = opts.display, fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize), minSize = me.minSize;
                        if (me.isHorizontal()) {
                            minSize.width = me.maxWidth;
                            minSize.height = display ? fontSize + opts.padding * 2 : 0;
                        } else {
                            minSize.width = display ? fontSize + opts.padding * 2 : 0;
                            minSize.height = me.maxHeight;
                        }
                        me.width = minSize.width;
                        me.height = minSize.height;
                    },
                    afterFit: noop,
                    isHorizontal: function () {
                        var pos = this.options.position;
                        return pos === 'top' || pos === 'bottom';
                    },
                    draw: function () {
                        var me = this, ctx = me.ctx, valueOrDefault = helpers.getValueOrDefault, opts = me.options, globalDefaults = Chart.defaults.global;
                        if (opts.display) {
                            var fontSize = valueOrDefault(opts.fontSize, globalDefaults.defaultFontSize), fontStyle = valueOrDefault(opts.fontStyle, globalDefaults.defaultFontStyle), fontFamily = valueOrDefault(opts.fontFamily, globalDefaults.defaultFontFamily), titleFont = helpers.fontString(fontSize, fontStyle, fontFamily), rotation = 0, titleX, titleY, top = me.top, left = me.left, bottom = me.bottom, right = me.right, maxWidth;
                            ctx.fillStyle = valueOrDefault(opts.fontColor, globalDefaults.defaultFontColor);
                            ctx.font = titleFont;
                            if (me.isHorizontal()) {
                                titleX = left + (right - left) / 2;
                                titleY = top + (bottom - top) / 2;
                                maxWidth = right - left;
                            } else {
                                titleX = opts.position === 'left' ? left + fontSize / 2 : right - fontSize / 2;
                                titleY = top + (bottom - top) / 2;
                                maxWidth = bottom - top;
                                rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
                            }
                            ctx.save();
                            ctx.translate(titleX, titleY);
                            ctx.rotate(rotation);
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'middle';
                            ctx.fillText(opts.text, 0, 0, maxWidth);
                            ctx.restore();
                        }
                    }
                });
                function createNewTitleBlockAndAttach(chartInstance, titleOpts) {
                    var title = new Chart.Title({
                        ctx: chartInstance.chart.ctx,
                        options: titleOpts,
                        chart: chartInstance
                    });
                    chartInstance.titleBlock = title;
                    Chart.layoutService.addBox(chartInstance, title);
                }
                Chart.plugins.register({
                    beforeInit: function (chartInstance) {
                        var titleOpts = chartInstance.options.title;
                        if (titleOpts) {
                            createNewTitleBlockAndAttach(chartInstance, titleOpts);
                        }
                    },
                    beforeUpdate: function (chartInstance) {
                        var titleOpts = chartInstance.options.title;
                        if (titleOpts) {
                            titleOpts = helpers.configMerge(Chart.defaults.global.title, titleOpts);
                            if (chartInstance.titleBlock) {
                                chartInstance.titleBlock.options = titleOpts;
                            } else {
                                createNewTitleBlockAndAttach(chartInstance, titleOpts);
                            }
                        } else {
                            Chart.layoutService.removeBox(chartInstance, chartInstance.titleBlock);
                            delete chartInstance.titleBlock;
                        }
                    }
                });
            };
        },
        {}
    ],
    36: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                function mergeOpacity(colorString, opacity) {
                    var color = helpers.color(colorString);
                    return color.alpha(opacity * color.alpha()).rgbaString();
                }
                Chart.defaults.global.tooltips = {
                    enabled: true,
                    custom: null,
                    mode: 'nearest',
                    position: 'average',
                    intersect: true,
                    backgroundColor: 'rgba(0,0,0,0.8)',
                    titleFontStyle: 'bold',
                    titleSpacing: 2,
                    titleMarginBottom: 6,
                    titleFontColor: '#fff',
                    titleAlign: 'left',
                    bodySpacing: 2,
                    bodyFontColor: '#fff',
                    bodyAlign: 'left',
                    footerFontStyle: 'bold',
                    footerSpacing: 2,
                    footerMarginTop: 6,
                    footerFontColor: '#fff',
                    footerAlign: 'left',
                    yPadding: 6,
                    xPadding: 6,
                    caretSize: 5,
                    cornerRadius: 6,
                    multiKeyBackground: '#fff',
                    displayColors: true,
                    callbacks: {
                        beforeTitle: helpers.noop,
                        title: function (tooltipItems, data) {
                            var title = '';
                            var labels = data.labels;
                            var labelCount = labels ? labels.length : 0;
                            if (tooltipItems.length > 0) {
                                var item = tooltipItems[0];
                                if (item.xLabel) {
                                    title = item.xLabel;
                                } else if (labelCount > 0 && item.index < labelCount) {
                                    title = labels[item.index];
                                }
                            }
                            return title;
                        },
                        afterTitle: helpers.noop,
                        beforeBody: helpers.noop,
                        beforeLabel: helpers.noop,
                        label: function (tooltipItem, data) {
                            var datasetLabel = data.datasets[tooltipItem.datasetIndex].label || '';
                            return datasetLabel + ': ' + tooltipItem.yLabel;
                        },
                        labelColor: function (tooltipItem, chartInstance) {
                            var meta = chartInstance.getDatasetMeta(tooltipItem.datasetIndex);
                            var activeElement = meta.data[tooltipItem.index];
                            var view = activeElement._view;
                            return {
                                borderColor: view.borderColor,
                                backgroundColor: view.backgroundColor
                            };
                        },
                        afterLabel: helpers.noop,
                        afterBody: helpers.noop,
                        beforeFooter: helpers.noop,
                        footer: helpers.noop,
                        afterFooter: helpers.noop
                    }
                };
                function pushOrConcat(base, toPush) {
                    if (toPush) {
                        if (helpers.isArray(toPush)) {
                            Array.prototype.push.apply(base, toPush);
                        } else {
                            base.push(toPush);
                        }
                    }
                    return base;
                }
                function createTooltipItem(element) {
                    var xScale = element._xScale;
                    var yScale = element._yScale || element._scale;
                    var index = element._index, datasetIndex = element._datasetIndex;
                    return {
                        xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
                        yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
                        index: index,
                        datasetIndex: datasetIndex,
                        x: element._model.x,
                        y: element._model.y
                    };
                }
                function getBaseModel(tooltipOpts) {
                    var globalDefaults = Chart.defaults.global;
                    var getValueOrDefault = helpers.getValueOrDefault;
                    return {
                        xPadding: tooltipOpts.xPadding,
                        yPadding: tooltipOpts.yPadding,
                        xAlign: tooltipOpts.xAlign,
                        yAlign: tooltipOpts.yAlign,
                        bodyFontColor: tooltipOpts.bodyFontColor,
                        _bodyFontFamily: getValueOrDefault(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
                        _bodyFontStyle: getValueOrDefault(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
                        _bodyAlign: tooltipOpts.bodyAlign,
                        bodyFontSize: getValueOrDefault(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
                        bodySpacing: tooltipOpts.bodySpacing,
                        titleFontColor: tooltipOpts.titleFontColor,
                        _titleFontFamily: getValueOrDefault(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
                        _titleFontStyle: getValueOrDefault(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
                        titleFontSize: getValueOrDefault(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
                        _titleAlign: tooltipOpts.titleAlign,
                        titleSpacing: tooltipOpts.titleSpacing,
                        titleMarginBottom: tooltipOpts.titleMarginBottom,
                        footerFontColor: tooltipOpts.footerFontColor,
                        _footerFontFamily: getValueOrDefault(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
                        _footerFontStyle: getValueOrDefault(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
                        footerFontSize: getValueOrDefault(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
                        _footerAlign: tooltipOpts.footerAlign,
                        footerSpacing: tooltipOpts.footerSpacing,
                        footerMarginTop: tooltipOpts.footerMarginTop,
                        caretSize: tooltipOpts.caretSize,
                        cornerRadius: tooltipOpts.cornerRadius,
                        backgroundColor: tooltipOpts.backgroundColor,
                        opacity: 0,
                        legendColorBackground: tooltipOpts.multiKeyBackground,
                        displayColors: tooltipOpts.displayColors
                    };
                }
                function getTooltipSize(tooltip, model) {
                    var ctx = tooltip._chart.ctx;
                    var height = model.yPadding * 2;
                    var width = 0;
                    var body = model.body;
                    var combinedBodyLength = body.reduce(function (count, bodyItem) {
                        return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
                    }, 0);
                    combinedBodyLength += model.beforeBody.length + model.afterBody.length;
                    var titleLineCount = model.title.length;
                    var footerLineCount = model.footer.length;
                    var titleFontSize = model.titleFontSize, bodyFontSize = model.bodyFontSize, footerFontSize = model.footerFontSize;
                    height += titleLineCount * titleFontSize;
                    height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0;
                    height += titleLineCount ? model.titleMarginBottom : 0;
                    height += combinedBodyLength * bodyFontSize;
                    height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0;
                    height += footerLineCount ? model.footerMarginTop : 0;
                    height += footerLineCount * footerFontSize;
                    height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0;
                    var widthPadding = 0;
                    var maxLineWidth = function (line) {
                        width = Math.max(width, ctx.measureText(line).width + widthPadding);
                    };
                    ctx.font = helpers.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
                    helpers.each(model.title, maxLineWidth);
                    ctx.font = helpers.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
                    helpers.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
                    widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
                    helpers.each(body, function (bodyItem) {
                        helpers.each(bodyItem.before, maxLineWidth);
                        helpers.each(bodyItem.lines, maxLineWidth);
                        helpers.each(bodyItem.after, maxLineWidth);
                    });
                    widthPadding = 0;
                    ctx.font = helpers.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
                    helpers.each(model.footer, maxLineWidth);
                    width += 2 * model.xPadding;
                    return {
                        width: width,
                        height: height
                    };
                }
                function determineAlignment(tooltip, size) {
                    var model = tooltip._model;
                    var chart = tooltip._chart;
                    var chartArea = tooltip._chartInstance.chartArea;
                    var xAlign = 'center';
                    var yAlign = 'center';
                    if (model.y < size.height) {
                        yAlign = 'top';
                    } else if (model.y > chart.height - size.height) {
                        yAlign = 'bottom';
                    }
                    var lf, rf;
                    var olf, orf;
                    var yf;
                    var midX = (chartArea.left + chartArea.right) / 2;
                    var midY = (chartArea.top + chartArea.bottom) / 2;
                    if (yAlign === 'center') {
                        lf = function (x) {
                            return x <= midX;
                        };
                        rf = function (x) {
                            return x > midX;
                        };
                    } else {
                        lf = function (x) {
                            return x <= size.width / 2;
                        };
                        rf = function (x) {
                            return x >= chart.width - size.width / 2;
                        };
                    }
                    olf = function (x) {
                        return x + size.width > chart.width;
                    };
                    orf = function (x) {
                        return x - size.width < 0;
                    };
                    yf = function (y) {
                        return y <= midY ? 'top' : 'bottom';
                    };
                    if (lf(model.x)) {
                        xAlign = 'left';
                        if (olf(model.x)) {
                            xAlign = 'center';
                            yAlign = yf(model.y);
                        }
                    } else if (rf(model.x)) {
                        xAlign = 'right';
                        if (orf(model.x)) {
                            xAlign = 'center';
                            yAlign = yf(model.y);
                        }
                    }
                    var opts = tooltip._options;
                    return {
                        xAlign: opts.xAlign ? opts.xAlign : xAlign,
                        yAlign: opts.yAlign ? opts.yAlign : yAlign
                    };
                }
                function getBackgroundPoint(vm, size, alignment) {
                    var x = vm.x;
                    var y = vm.y;
                    var caretSize = vm.caretSize, caretPadding = vm.caretPadding, cornerRadius = vm.cornerRadius, xAlign = alignment.xAlign, yAlign = alignment.yAlign, paddingAndSize = caretSize + caretPadding, radiusAndPadding = cornerRadius + caretPadding;
                    if (xAlign === 'right') {
                        x -= size.width;
                    } else if (xAlign === 'center') {
                        x -= size.width / 2;
                    }
                    if (yAlign === 'top') {
                        y += paddingAndSize;
                    } else if (yAlign === 'bottom') {
                        y -= size.height + paddingAndSize;
                    } else {
                        y -= size.height / 2;
                    }
                    if (yAlign === 'center') {
                        if (xAlign === 'left') {
                            x += paddingAndSize;
                        } else if (xAlign === 'right') {
                            x -= paddingAndSize;
                        }
                    } else if (xAlign === 'left') {
                        x -= radiusAndPadding;
                    } else if (xAlign === 'right') {
                        x += radiusAndPadding;
                    }
                    return {
                        x: x,
                        y: y
                    };
                }
                Chart.Tooltip = Chart.Element.extend({
                    initialize: function () {
                        this._model = getBaseModel(this._options);
                    },
                    getTitle: function () {
                        var me = this;
                        var opts = me._options;
                        var callbacks = opts.callbacks;
                        var beforeTitle = callbacks.beforeTitle.apply(me, arguments), title = callbacks.title.apply(me, arguments), afterTitle = callbacks.afterTitle.apply(me, arguments);
                        var lines = [];
                        lines = pushOrConcat(lines, beforeTitle);
                        lines = pushOrConcat(lines, title);
                        lines = pushOrConcat(lines, afterTitle);
                        return lines;
                    },
                    getBeforeBody: function () {
                        var lines = this._options.callbacks.beforeBody.apply(this, arguments);
                        return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
                    },
                    getBody: function (tooltipItems, data) {
                        var me = this;
                        var callbacks = me._options.callbacks;
                        var bodyItems = [];
                        helpers.each(tooltipItems, function (tooltipItem) {
                            var bodyItem = {
                                before: [],
                                lines: [],
                                after: []
                            };
                            pushOrConcat(bodyItem.before, callbacks.beforeLabel.call(me, tooltipItem, data));
                            pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
                            pushOrConcat(bodyItem.after, callbacks.afterLabel.call(me, tooltipItem, data));
                            bodyItems.push(bodyItem);
                        });
                        return bodyItems;
                    },
                    getAfterBody: function () {
                        var lines = this._options.callbacks.afterBody.apply(this, arguments);
                        return helpers.isArray(lines) ? lines : lines !== undefined ? [lines] : [];
                    },
                    getFooter: function () {
                        var me = this;
                        var callbacks = me._options.callbacks;
                        var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
                        var footer = callbacks.footer.apply(me, arguments);
                        var afterFooter = callbacks.afterFooter.apply(me, arguments);
                        var lines = [];
                        lines = pushOrConcat(lines, beforeFooter);
                        lines = pushOrConcat(lines, footer);
                        lines = pushOrConcat(lines, afterFooter);
                        return lines;
                    },
                    update: function (changed) {
                        var me = this;
                        var opts = me._options;
                        var existingModel = me._model;
                        var model = me._model = getBaseModel(opts);
                        var active = me._active;
                        var data = me._data;
                        var chartInstance = me._chartInstance;
                        var alignment = {
                            xAlign: existingModel.xAlign,
                            yAlign: existingModel.yAlign
                        };
                        var backgroundPoint = {
                            x: existingModel.x,
                            y: existingModel.y
                        };
                        var tooltipSize = {
                            width: existingModel.width,
                            height: existingModel.height
                        };
                        var tooltipPosition = {
                            x: existingModel.caretX,
                            y: existingModel.caretY
                        };
                        var i, len;
                        if (active.length) {
                            model.opacity = 1;
                            var labelColors = [];
                            tooltipPosition = Chart.Tooltip.positioners[opts.position](active, me._eventPosition);
                            var tooltipItems = [];
                            for (i = 0, len = active.length; i < len; ++i) {
                                tooltipItems.push(createTooltipItem(active[i]));
                            }
                            if (opts.filter) {
                                tooltipItems = tooltipItems.filter(function (a) {
                                    return opts.filter(a, data);
                                });
                            }
                            if (opts.itemSort) {
                                tooltipItems = tooltipItems.sort(function (a, b) {
                                    return opts.itemSort(a, b, data);
                                });
                            }
                            helpers.each(tooltipItems, function (tooltipItem) {
                                labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, chartInstance));
                            });
                            model.title = me.getTitle(tooltipItems, data);
                            model.beforeBody = me.getBeforeBody(tooltipItems, data);
                            model.body = me.getBody(tooltipItems, data);
                            model.afterBody = me.getAfterBody(tooltipItems, data);
                            model.footer = me.getFooter(tooltipItems, data);
                            model.x = Math.round(tooltipPosition.x);
                            model.y = Math.round(tooltipPosition.y);
                            model.caretPadding = helpers.getValueOrDefault(tooltipPosition.padding, 2);
                            model.labelColors = labelColors;
                            model.dataPoints = tooltipItems;
                            tooltipSize = getTooltipSize(this, model);
                            alignment = determineAlignment(this, tooltipSize);
                            backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment);
                        } else {
                            model.opacity = 0;
                        }
                        model.xAlign = alignment.xAlign;
                        model.yAlign = alignment.yAlign;
                        model.x = backgroundPoint.x;
                        model.y = backgroundPoint.y;
                        model.width = tooltipSize.width;
                        model.height = tooltipSize.height;
                        model.caretX = tooltipPosition.x;
                        model.caretY = tooltipPosition.y;
                        me._model = model;
                        if (changed && opts.custom) {
                            opts.custom.call(me, model);
                        }
                        return me;
                    },
                    drawCaret: function (tooltipPoint, size, opacity) {
                        var vm = this._view;
                        var ctx = this._chart.ctx;
                        var x1, x2, x3;
                        var y1, y2, y3;
                        var caretSize = vm.caretSize;
                        var cornerRadius = vm.cornerRadius;
                        var xAlign = vm.xAlign, yAlign = vm.yAlign;
                        var ptX = tooltipPoint.x, ptY = tooltipPoint.y;
                        var width = size.width, height = size.height;
                        if (yAlign === 'center') {
                            if (xAlign === 'left') {
                                x1 = ptX;
                                x2 = x1 - caretSize;
                                x3 = x1;
                            } else {
                                x1 = ptX + width;
                                x2 = x1 + caretSize;
                                x3 = x1;
                            }
                            y2 = ptY + height / 2;
                            y1 = y2 - caretSize;
                            y3 = y2 + caretSize;
                        } else {
                            if (xAlign === 'left') {
                                x1 = ptX + cornerRadius;
                                x2 = x1 + caretSize;
                                x3 = x2 + caretSize;
                            } else if (xAlign === 'right') {
                                x1 = ptX + width - cornerRadius;
                                x2 = x1 - caretSize;
                                x3 = x2 - caretSize;
                            } else {
                                x2 = ptX + width / 2;
                                x1 = x2 - caretSize;
                                x3 = x2 + caretSize;
                            }
                            if (yAlign === 'top') {
                                y1 = ptY;
                                y2 = y1 - caretSize;
                                y3 = y1;
                            } else {
                                y1 = ptY + height;
                                y2 = y1 + caretSize;
                                y3 = y1;
                            }
                        }
                        ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
                        ctx.beginPath();
                        ctx.moveTo(x1, y1);
                        ctx.lineTo(x2, y2);
                        ctx.lineTo(x3, y3);
                        ctx.closePath();
                        ctx.fill();
                    },
                    drawTitle: function (pt, vm, ctx, opacity) {
                        var title = vm.title;
                        if (title.length) {
                            ctx.textAlign = vm._titleAlign;
                            ctx.textBaseline = 'top';
                            var titleFontSize = vm.titleFontSize, titleSpacing = vm.titleSpacing;
                            ctx.fillStyle = mergeOpacity(vm.titleFontColor, opacity);
                            ctx.font = helpers.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
                            var i, len;
                            for (i = 0, len = title.length; i < len; ++i) {
                                ctx.fillText(title[i], pt.x, pt.y);
                                pt.y += titleFontSize + titleSpacing;
                                if (i + 1 === title.length) {
                                    pt.y += vm.titleMarginBottom - titleSpacing;
                                }
                            }
                        }
                    },
                    drawBody: function (pt, vm, ctx, opacity) {
                        var bodyFontSize = vm.bodyFontSize;
                        var bodySpacing = vm.bodySpacing;
                        var body = vm.body;
                        ctx.textAlign = vm._bodyAlign;
                        ctx.textBaseline = 'top';
                        var textColor = mergeOpacity(vm.bodyFontColor, opacity);
                        ctx.fillStyle = textColor;
                        ctx.font = helpers.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
                        var xLinePadding = 0;
                        var fillLineOfText = function (line) {
                            ctx.fillText(line, pt.x + xLinePadding, pt.y);
                            pt.y += bodyFontSize + bodySpacing;
                        };
                        helpers.each(vm.beforeBody, fillLineOfText);
                        var drawColorBoxes = vm.displayColors;
                        xLinePadding = drawColorBoxes ? bodyFontSize + 2 : 0;
                        helpers.each(body, function (bodyItem, i) {
                            helpers.each(bodyItem.before, fillLineOfText);
                            helpers.each(bodyItem.lines, function (line) {
                                if (drawColorBoxes) {
                                    ctx.fillStyle = mergeOpacity(vm.legendColorBackground, opacity);
                                    ctx.fillRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
                                    ctx.strokeStyle = mergeOpacity(vm.labelColors[i].borderColor, opacity);
                                    ctx.strokeRect(pt.x, pt.y, bodyFontSize, bodyFontSize);
                                    ctx.fillStyle = mergeOpacity(vm.labelColors[i].backgroundColor, opacity);
                                    ctx.fillRect(pt.x + 1, pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
                                    ctx.fillStyle = textColor;
                                }
                                fillLineOfText(line);
                            });
                            helpers.each(bodyItem.after, fillLineOfText);
                        });
                        xLinePadding = 0;
                        helpers.each(vm.afterBody, fillLineOfText);
                        pt.y -= bodySpacing;
                    },
                    drawFooter: function (pt, vm, ctx, opacity) {
                        var footer = vm.footer;
                        if (footer.length) {
                            pt.y += vm.footerMarginTop;
                            ctx.textAlign = vm._footerAlign;
                            ctx.textBaseline = 'top';
                            ctx.fillStyle = mergeOpacity(vm.footerFontColor, opacity);
                            ctx.font = helpers.fontString(vm.footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
                            helpers.each(footer, function (line) {
                                ctx.fillText(line, pt.x, pt.y);
                                pt.y += vm.footerFontSize + vm.footerSpacing;
                            });
                        }
                    },
                    drawBackground: function (pt, vm, ctx, tooltipSize, opacity) {
                        ctx.fillStyle = mergeOpacity(vm.backgroundColor, opacity);
                        helpers.drawRoundedRectangle(ctx, pt.x, pt.y, tooltipSize.width, tooltipSize.height, vm.cornerRadius);
                        ctx.fill();
                    },
                    draw: function () {
                        var ctx = this._chart.ctx;
                        var vm = this._view;
                        if (vm.opacity === 0) {
                            return;
                        }
                        var tooltipSize = {
                            width: vm.width,
                            height: vm.height
                        };
                        var pt = {
                            x: vm.x,
                            y: vm.y
                        };
                        var opacity = Math.abs(vm.opacity < 0.001) ? 0 : vm.opacity;
                        if (this._options.enabled) {
                            this.drawBackground(pt, vm, ctx, tooltipSize, opacity);
                            this.drawCaret(pt, tooltipSize, opacity);
                            pt.x += vm.xPadding;
                            pt.y += vm.yPadding;
                            this.drawTitle(pt, vm, ctx, opacity);
                            this.drawBody(pt, vm, ctx, opacity);
                            this.drawFooter(pt, vm, ctx, opacity);
                        }
                    },
                    handleEvent: function (e) {
                        var me = this;
                        var options = me._options;
                        var changed = false;
                        me._lastActive = me._lastActive || [];
                        if (e.type === 'mouseout') {
                            me._active = [];
                        } else {
                            me._active = me._chartInstance.getElementsAtEventForMode(e, options.mode, options);
                        }
                        changed = !helpers.arrayEquals(me._active, me._lastActive);
                        me._lastActive = me._active;
                        if (options.enabled || options.custom) {
                            me._eventPosition = {
                                x: e.x,
                                y: e.y
                            };
                            var model = me._model;
                            me.update(true);
                            me.pivot();
                            changed |= model.x !== me._model.x || model.y !== me._model.y;
                        }
                        return changed;
                    }
                });
                Chart.Tooltip.positioners = {
                    average: function (elements) {
                        if (!elements.length) {
                            return false;
                        }
                        var i, len;
                        var x = 0;
                        var y = 0;
                        var count = 0;
                        for (i = 0, len = elements.length; i < len; ++i) {
                            var el = elements[i];
                            if (el && el.hasValue()) {
                                var pos = el.tooltipPosition();
                                x += pos.x;
                                y += pos.y;
                                ++count;
                            }
                        }
                        return {
                            x: Math.round(x / count),
                            y: Math.round(y / count)
                        };
                    },
                    nearest: function (elements, eventPosition) {
                        var x = eventPosition.x;
                        var y = eventPosition.y;
                        var nearestElement;
                        var minDistance = Number.POSITIVE_INFINITY;
                        var i, len;
                        for (i = 0, len = elements.length; i < len; ++i) {
                            var el = elements[i];
                            if (el && el.hasValue()) {
                                var center = el.getCenterPoint();
                                var d = helpers.distanceBetweenPoints(eventPosition, center);
                                if (d < minDistance) {
                                    minDistance = d;
                                    nearestElement = el;
                                }
                            }
                        }
                        if (nearestElement) {
                            var tp = nearestElement.tooltipPosition();
                            x = tp.x;
                            y = tp.y;
                        }
                        return {
                            x: x,
                            y: y
                        };
                    }
                };
            };
        },
        {}
    ],
    37: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers, globalOpts = Chart.defaults.global;
                globalOpts.elements.arc = {
                    backgroundColor: globalOpts.defaultColor,
                    borderColor: '#fff',
                    borderWidth: 2
                };
                Chart.elements.Arc = Chart.Element.extend({
                    inLabelRange: function (mouseX) {
                        var vm = this._view;
                        if (vm) {
                            return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
                        }
                        return false;
                    },
                    inRange: function (chartX, chartY) {
                        var vm = this._view;
                        if (vm) {
                            var pointRelativePosition = helpers.getAngleFromPoint(vm, {
                                    x: chartX,
                                    y: chartY
                                }), angle = pointRelativePosition.angle, distance = pointRelativePosition.distance;
                            var startAngle = vm.startAngle;
                            var endAngle = vm.endAngle;
                            while (endAngle < startAngle) {
                                endAngle += 2 * Math.PI;
                            }
                            while (angle > endAngle) {
                                angle -= 2 * Math.PI;
                            }
                            while (angle < startAngle) {
                                angle += 2 * Math.PI;
                            }
                            var betweenAngles = angle >= startAngle && angle <= endAngle, withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
                            return betweenAngles && withinRadius;
                        }
                        return false;
                    },
                    getCenterPoint: function () {
                        var vm = this._view;
                        var halfAngle = (vm.startAngle + vm.endAngle) / 2;
                        var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
                        return {
                            x: vm.x + Math.cos(halfAngle) * halfRadius,
                            y: vm.y + Math.sin(halfAngle) * halfRadius
                        };
                    },
                    getArea: function () {
                        var vm = this._view;
                        return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
                    },
                    tooltipPosition: function () {
                        var vm = this._view;
                        var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2, rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
                        return {
                            x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
                            y: vm.y + Math.sin(centreAngle) * rangeFromCentre
                        };
                    },
                    draw: function () {
                        var ctx = this._chart.ctx, vm = this._view, sA = vm.startAngle, eA = vm.endAngle;
                        ctx.beginPath();
                        ctx.arc(vm.x, vm.y, vm.outerRadius, sA, eA);
                        ctx.arc(vm.x, vm.y, vm.innerRadius, eA, sA, true);
                        ctx.closePath();
                        ctx.strokeStyle = vm.borderColor;
                        ctx.lineWidth = vm.borderWidth;
                        ctx.fillStyle = vm.backgroundColor;
                        ctx.fill();
                        ctx.lineJoin = 'bevel';
                        if (vm.borderWidth) {
                            ctx.stroke();
                        }
                    }
                });
            };
        },
        {}
    ],
    38: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                var globalDefaults = Chart.defaults.global;
                Chart.defaults.global.elements.line = {
                    tension: 0.4,
                    backgroundColor: globalDefaults.defaultColor,
                    borderWidth: 3,
                    borderColor: globalDefaults.defaultColor,
                    borderCapStyle: 'butt',
                    borderDash: [],
                    borderDashOffset: 0,
                    borderJoinStyle: 'miter',
                    capBezierPoints: true,
                    fill: true
                };
                Chart.elements.Line = Chart.Element.extend({
                    draw: function () {
                        var me = this;
                        var vm = me._view;
                        var spanGaps = vm.spanGaps;
                        var fillPoint = vm.scaleZero;
                        var loop = me._loop;
                        if (!loop) {
                            if (vm.fill === 'top') {
                                fillPoint = vm.scaleTop;
                            } else if (vm.fill === 'bottom') {
                                fillPoint = vm.scaleBottom;
                            }
                        }
                        var ctx = me._chart.ctx;
                        ctx.save();
                        function lineToPoint(previousPoint, point) {
                            var pointVM = point._view;
                            if (point._view.steppedLine === true) {
                                ctx.lineTo(pointVM.x, previousPoint._view.y);
                                ctx.lineTo(pointVM.x, pointVM.y);
                            } else if (point._view.tension === 0) {
                                ctx.lineTo(pointVM.x, pointVM.y);
                            } else {
                                ctx.bezierCurveTo(previousPoint._view.controlPointNextX, previousPoint._view.controlPointNextY, pointVM.controlPointPreviousX, pointVM.controlPointPreviousY, pointVM.x, pointVM.y);
                            }
                        }
                        var points = me._children.slice();
                        var lastDrawnIndex = -1;
                        if (loop && points.length) {
                            points.push(points[0]);
                        }
                        var index, current, previous, currentVM;
                        if (points.length && vm.fill) {
                            ctx.beginPath();
                            for (index = 0; index < points.length; ++index) {
                                current = points[index];
                                previous = helpers.previousItem(points, index);
                                currentVM = current._view;
                                if (index === 0) {
                                    if (loop) {
                                        ctx.moveTo(fillPoint.x, fillPoint.y);
                                    } else {
                                        ctx.moveTo(currentVM.x, fillPoint);
                                    }
                                    if (!currentVM.skip) {
                                        lastDrawnIndex = index;
                                        ctx.lineTo(currentVM.x, currentVM.y);
                                    }
                                } else {
                                    previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
                                    if (currentVM.skip) {
                                        if (!spanGaps && lastDrawnIndex === index - 1) {
                                            if (loop) {
                                                ctx.lineTo(fillPoint.x, fillPoint.y);
                                            } else {
                                                ctx.lineTo(previous._view.x, fillPoint);
                                            }
                                        }
                                    } else {
                                        if (lastDrawnIndex !== index - 1) {
                                            if (spanGaps && lastDrawnIndex !== -1) {
                                                lineToPoint(previous, current);
                                            } else if (loop) {
                                                ctx.lineTo(currentVM.x, currentVM.y);
                                            } else {
                                                ctx.lineTo(currentVM.x, fillPoint);
                                                ctx.lineTo(currentVM.x, currentVM.y);
                                            }
                                        } else {
                                            lineToPoint(previous, current);
                                        }
                                        lastDrawnIndex = index;
                                    }
                                }
                            }
                            if (!loop && lastDrawnIndex !== -1) {
                                ctx.lineTo(points[lastDrawnIndex]._view.x, fillPoint);
                            }
                            ctx.fillStyle = vm.backgroundColor || globalDefaults.defaultColor;
                            ctx.closePath();
                            ctx.fill();
                        }
                        var globalOptionLineElements = globalDefaults.elements.line;
                        ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
                        if (ctx.setLineDash) {
                            ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
                        }
                        ctx.lineDashOffset = vm.borderDashOffset || globalOptionLineElements.borderDashOffset;
                        ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
                        ctx.lineWidth = vm.borderWidth || globalOptionLineElements.borderWidth;
                        ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
                        ctx.beginPath();
                        lastDrawnIndex = -1;
                        for (index = 0; index < points.length; ++index) {
                            current = points[index];
                            previous = helpers.previousItem(points, index);
                            currentVM = current._view;
                            if (index === 0) {
                                if (!currentVM.skip) {
                                    ctx.moveTo(currentVM.x, currentVM.y);
                                    lastDrawnIndex = index;
                                }
                            } else {
                                previous = lastDrawnIndex === -1 ? previous : points[lastDrawnIndex];
                                if (!currentVM.skip) {
                                    if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                                        ctx.moveTo(currentVM.x, currentVM.y);
                                    } else {
                                        lineToPoint(previous, current);
                                    }
                                    lastDrawnIndex = index;
                                }
                            }
                        }
                        ctx.stroke();
                        ctx.restore();
                    }
                });
            };
        },
        {}
    ],
    39: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers, globalOpts = Chart.defaults.global, defaultColor = globalOpts.defaultColor;
                globalOpts.elements.point = {
                    radius: 3,
                    pointStyle: 'circle',
                    backgroundColor: defaultColor,
                    borderWidth: 1,
                    borderColor: defaultColor,
                    hitRadius: 1,
                    hoverRadius: 4,
                    hoverBorderWidth: 1
                };
                function xRange(mouseX) {
                    var vm = this._view;
                    return vm ? Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;
                }
                function yRange(mouseY) {
                    var vm = this._view;
                    return vm ? Math.pow(mouseY - vm.y, 2) < Math.pow(vm.radius + vm.hitRadius, 2) : false;
                }
                Chart.elements.Point = Chart.Element.extend({
                    inRange: function (mouseX, mouseY) {
                        var vm = this._view;
                        return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;
                    },
                    inLabelRange: xRange,
                    inXRange: xRange,
                    inYRange: yRange,
                    getCenterPoint: function () {
                        var vm = this._view;
                        return {
                            x: vm.x,
                            y: vm.y
                        };
                    },
                    getArea: function () {
                        return Math.PI * Math.pow(this._view.radius, 2);
                    },
                    tooltipPosition: function () {
                        var vm = this._view;
                        return {
                            x: vm.x,
                            y: vm.y,
                            padding: vm.radius + vm.borderWidth
                        };
                    },
                    draw: function (chartArea) {
                        var vm = this._view;
                        var model = this._model;
                        var ctx = this._chart.ctx;
                        var pointStyle = vm.pointStyle;
                        var radius = vm.radius;
                        var x = vm.x;
                        var y = vm.y;
                        var color = Chart.helpers.color;
                        var errMargin = 1.01;
                        var ratio = 0;
                        if (vm.skip) {
                            return;
                        }
                        ctx.strokeStyle = vm.borderColor || defaultColor;
                        ctx.lineWidth = helpers.getValueOrDefault(vm.borderWidth, globalOpts.elements.point.borderWidth);
                        ctx.fillStyle = vm.backgroundColor || defaultColor;
                        if (chartArea !== undefined && (model.x < chartArea.left || chartArea.right * errMargin < model.x || model.y < chartArea.top || chartArea.bottom * errMargin < model.y)) {
                            if (model.x < chartArea.left) {
                                ratio = (x - model.x) / (chartArea.left - model.x);
                            } else if (chartArea.right * errMargin < model.x) {
                                ratio = (model.x - x) / (model.x - chartArea.right);
                            } else if (model.y < chartArea.top) {
                                ratio = (y - model.y) / (chartArea.top - model.y);
                            } else if (chartArea.bottom * errMargin < model.y) {
                                ratio = (model.y - y) / (model.y - chartArea.bottom);
                            }
                            ratio = Math.round(ratio * 100) / 100;
                            ctx.strokeStyle = color(ctx.strokeStyle).alpha(ratio).rgbString();
                            ctx.fillStyle = color(ctx.fillStyle).alpha(ratio).rgbString();
                        }
                        Chart.canvasHelpers.drawPoint(ctx, pointStyle, radius, x, y);
                    }
                });
            };
        },
        {}
    ],
    40: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var globalOpts = Chart.defaults.global;
                globalOpts.elements.rectangle = {
                    backgroundColor: globalOpts.defaultColor,
                    borderWidth: 0,
                    borderColor: globalOpts.defaultColor,
                    borderSkipped: 'bottom'
                };
                function isVertical(bar) {
                    return bar._view.width !== undefined;
                }
                function getBarBounds(bar) {
                    var vm = bar._view;
                    var x1, x2, y1, y2;
                    if (isVertical(bar)) {
                        var halfWidth = vm.width / 2;
                        x1 = vm.x - halfWidth;
                        x2 = vm.x + halfWidth;
                        y1 = Math.min(vm.y, vm.base);
                        y2 = Math.max(vm.y, vm.base);
                    } else {
                        var halfHeight = vm.height / 2;
                        x1 = Math.min(vm.x, vm.base);
                        x2 = Math.max(vm.x, vm.base);
                        y1 = vm.y - halfHeight;
                        y2 = vm.y + halfHeight;
                    }
                    return {
                        left: x1,
                        top: y1,
                        right: x2,
                        bottom: y2
                    };
                }
                Chart.elements.Rectangle = Chart.Element.extend({
                    draw: function () {
                        var ctx = this._chart.ctx;
                        var vm = this._view;
                        var left, right, top, bottom, signX, signY, borderSkipped;
                        var borderWidth = vm.borderWidth;
                        if (!vm.horizontal) {
                            left = vm.x - vm.width / 2;
                            right = vm.x + vm.width / 2;
                            top = vm.y;
                            bottom = vm.base;
                            signX = 1;
                            signY = bottom > top ? 1 : -1;
                            borderSkipped = vm.borderSkipped || 'bottom';
                        } else {
                            left = vm.base;
                            right = vm.x;
                            top = vm.y - vm.height / 2;
                            bottom = vm.y + vm.height / 2;
                            signX = right > left ? 1 : -1;
                            signY = 1;
                            borderSkipped = vm.borderSkipped || 'left';
                        }
                        if (borderWidth) {
                            var barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));
                            borderWidth = borderWidth > barSize ? barSize : borderWidth;
                            var halfStroke = borderWidth / 2;
                            var borderLeft = left + (borderSkipped !== 'left' ? halfStroke * signX : 0);
                            var borderRight = right + (borderSkipped !== 'right' ? -halfStroke * signX : 0);
                            var borderTop = top + (borderSkipped !== 'top' ? halfStroke * signY : 0);
                            var borderBottom = bottom + (borderSkipped !== 'bottom' ? -halfStroke * signY : 0);
                            if (borderLeft !== borderRight) {
                                top = borderTop;
                                bottom = borderBottom;
                            }
                            if (borderTop !== borderBottom) {
                                left = borderLeft;
                                right = borderRight;
                            }
                        }
                        ctx.beginPath();
                        ctx.fillStyle = vm.backgroundColor;
                        ctx.strokeStyle = vm.borderColor;
                        ctx.lineWidth = borderWidth;
                        var corners = [
                            [
                                left,
                                bottom
                            ],
                            [
                                left,
                                top
                            ],
                            [
                                right,
                                top
                            ],
                            [
                                right,
                                bottom
                            ]
                        ];
                        var borders = [
                            'bottom',
                            'left',
                            'top',
                            'right'
                        ];
                        var startCorner = borders.indexOf(borderSkipped, 0);
                        if (startCorner === -1) {
                            startCorner = 0;
                        }
                        function cornerAt(index) {
                            return corners[(startCorner + index) % 4];
                        }
                        var corner = cornerAt(0);
                        ctx.moveTo(corner[0], corner[1]);
                        for (var i = 1; i < 4; i++) {
                            corner = cornerAt(i);
                            ctx.lineTo(corner[0], corner[1]);
                        }
                        ctx.fill();
                        if (borderWidth) {
                            ctx.stroke();
                        }
                    },
                    height: function () {
                        var vm = this._view;
                        return vm.base - vm.y;
                    },
                    inRange: function (mouseX, mouseY) {
                        var inRange = false;
                        if (this._view) {
                            var bounds = getBarBounds(this);
                            inRange = mouseX >= bounds.left && mouseX <= bounds.right && mouseY >= bounds.top && mouseY <= bounds.bottom;
                        }
                        return inRange;
                    },
                    inLabelRange: function (mouseX, mouseY) {
                        var me = this;
                        if (!me._view) {
                            return false;
                        }
                        var inRange = false;
                        var bounds = getBarBounds(me);
                        if (isVertical(me)) {
                            inRange = mouseX >= bounds.left && mouseX <= bounds.right;
                        } else {
                            inRange = mouseY >= bounds.top && mouseY <= bounds.bottom;
                        }
                        return inRange;
                    },
                    inXRange: function (mouseX) {
                        var bounds = getBarBounds(this);
                        return mouseX >= bounds.left && mouseX <= bounds.right;
                    },
                    inYRange: function (mouseY) {
                        var bounds = getBarBounds(this);
                        return mouseY >= bounds.top && mouseY <= bounds.bottom;
                    },
                    getCenterPoint: function () {
                        var vm = this._view;
                        var x, y;
                        if (isVertical(this)) {
                            x = vm.x;
                            y = (vm.y + vm.base) / 2;
                        } else {
                            x = (vm.x + vm.base) / 2;
                            y = vm.y;
                        }
                        return {
                            x: x,
                            y: y
                        };
                    },
                    getArea: function () {
                        var vm = this._view;
                        return vm.width * Math.abs(vm.y - vm.base);
                    },
                    tooltipPosition: function () {
                        var vm = this._view;
                        return {
                            x: vm.x,
                            y: vm.y
                        };
                    }
                });
            };
        },
        {}
    ],
    41: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                var eventTypeMap = {
                    touchstart: 'mousedown',
                    touchmove: 'mousemove',
                    touchend: 'mouseup',
                    pointerenter: 'mouseenter',
                    pointerdown: 'mousedown',
                    pointermove: 'mousemove',
                    pointerup: 'mouseup',
                    pointerleave: 'mouseout',
                    pointerout: 'mouseout'
                };
                function readUsedSize(element, property) {
                    var value = helpers.getStyle(element, property);
                    var matches = value && value.match(/(\d+)px/);
                    return matches ? Number(matches[1]) : undefined;
                }
                function initCanvas(canvas, config) {
                    var style = canvas.style;
                    var renderHeight = canvas.getAttribute('height');
                    var renderWidth = canvas.getAttribute('width');
                    canvas._chartjs = {
                        initial: {
                            height: renderHeight,
                            width: renderWidth,
                            style: {
                                display: style.display,
                                height: style.height,
                                width: style.width
                            }
                        }
                    };
                    style.display = style.display || 'block';
                    if (renderWidth === null || renderWidth === '') {
                        var displayWidth = readUsedSize(canvas, 'width');
                        if (displayWidth !== undefined) {
                            canvas.width = displayWidth;
                        }
                    }
                    if (renderHeight === null || renderHeight === '') {
                        if (canvas.style.height === '') {
                            canvas.height = canvas.width / (config.options.aspectRatio || 2);
                        } else {
                            var displayHeight = readUsedSize(canvas, 'height');
                            if (displayWidth !== undefined) {
                                canvas.height = displayHeight;
                            }
                        }
                    }
                    return canvas;
                }
                function createEvent(type, chart, x, y, native) {
                    return {
                        type: type,
                        chart: chart,
                        native: native || null,
                        x: x !== undefined ? x : null,
                        y: y !== undefined ? y : null
                    };
                }
                function fromNativeEvent(event, chart) {
                    var type = eventTypeMap[event.type] || event.type;
                    var pos = helpers.getRelativePosition(event, chart);
                    return createEvent(type, chart, pos.x, pos.y, event);
                }
                function createResizer(handler) {
                    var iframe = document.createElement('iframe');
                    iframe.className = 'chartjs-hidden-iframe';
                    iframe.style.cssText = 'display:block;' + 'overflow:hidden;' + 'border:0;' + 'margin:0;' + 'top:0;' + 'left:0;' + 'bottom:0;' + 'right:0;' + 'height:100%;' + 'width:100%;' + 'position:absolute;' + 'pointer-events:none;' + 'z-index:-1;';
                    iframe.tabIndex = -1;
                    helpers.addEvent(iframe, 'load', function () {
                        helpers.addEvent(iframe.contentWindow || iframe, 'resize', handler);
                        handler();
                    });
                    return iframe;
                }
                function addResizeListener(node, listener, chart) {
                    var stub = node._chartjs = {
                        ticking: false
                    };
                    var notify = function () {
                        if (!stub.ticking) {
                            stub.ticking = true;
                            helpers.requestAnimFrame.call(window, function () {
                                if (stub.resizer) {
                                    stub.ticking = false;
                                    return listener(createEvent('resize', chart));
                                }
                            });
                        }
                    };
                    stub.resizer = createResizer(notify);
                    node.insertBefore(stub.resizer, node.firstChild);
                }
                function removeResizeListener(node) {
                    if (!node || !node._chartjs) {
                        return;
                    }
                    var resizer = node._chartjs.resizer;
                    if (resizer) {
                        resizer.parentNode.removeChild(resizer);
                        node._chartjs.resizer = null;
                    }
                    delete node._chartjs;
                }
                return {
                    acquireContext: function (item, config) {
                        if (typeof item === 'string') {
                            item = document.getElementById(item);
                        } else if (item.length) {
                            item = item[0];
                        }
                        if (item && item.canvas) {
                            item = item.canvas;
                        }
                        if (item instanceof HTMLCanvasElement) {
                            var context = item.getContext && item.getContext('2d');
                            if (context instanceof CanvasRenderingContext2D) {
                                initCanvas(item, config);
                                return context;
                            }
                        }
                        return null;
                    },
                    releaseContext: function (context) {
                        var canvas = context.canvas;
                        if (!canvas._chartjs) {
                            return;
                        }
                        var initial = canvas._chartjs.initial;
                        [
                            'height',
                            'width'
                        ].forEach(function (prop) {
                            var value = initial[prop];
                            if (value === undefined || value === null) {
                                canvas.removeAttribute(prop);
                            } else {
                                canvas.setAttribute(prop, value);
                            }
                        });
                        helpers.each(initial.style || {}, function (value, key) {
                            canvas.style[key] = value;
                        });
                        canvas.width = canvas.width;
                        delete canvas._chartjs;
                    },
                    addEventListener: function (chart, type, listener) {
                        var canvas = chart.chart.canvas;
                        if (type === 'resize') {
                            addResizeListener(canvas.parentNode, listener, chart.chart);
                            return;
                        }
                        var stub = listener._chartjs || (listener._chartjs = {});
                        var proxies = stub.proxies || (stub.proxies = {});
                        var proxy = proxies[chart.id + '_' + type] = function (event) {
                            listener(fromNativeEvent(event, chart.chart));
                        };
                        helpers.addEvent(canvas, type, proxy);
                    },
                    removeEventListener: function (chart, type, listener) {
                        var canvas = chart.chart.canvas;
                        if (type === 'resize') {
                            removeResizeListener(canvas.parentNode, listener);
                            return;
                        }
                        var stub = listener._chartjs || {};
                        var proxies = stub.proxies || {};
                        var proxy = proxies[chart.id + '_' + type];
                        if (!proxy) {
                            return;
                        }
                        helpers.removeEvent(canvas, type, proxy);
                    }
                };
            };
        },
        {}
    ],
    42: [
        function (require, module, exports) {
            'use strict';
            var implementation = require(41);
            module.exports = function (Chart) {
                Chart.platform = {
                    acquireContext: function () {
                    },
                    releaseContext: function () {
                    },
                    addEventListener: function () {
                    },
                    removeEventListener: function () {
                    }
                };
                Chart.helpers.extend(Chart.platform, implementation(Chart));
            };
        },
        {
            '41': 41
        }
    ],
    43: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                var defaultConfig = {
                    position: 'bottom'
                };
                var DatasetScale = Chart.Scale.extend({
                    getLabels: function () {
                        var data = this.chart.data;
                        return (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels;
                    },
                    determineDataLimits: function () {
                        var me = this;
                        var labels = me.getLabels();
                        me.minIndex = 0;
                        me.maxIndex = labels.length - 1;
                        var findIndex;
                        if (me.options.ticks.min !== undefined) {
                            findIndex = helpers.indexOf(labels, me.options.ticks.min);
                            me.minIndex = findIndex !== -1 ? findIndex : me.minIndex;
                        }
                        if (me.options.ticks.max !== undefined) {
                            findIndex = helpers.indexOf(labels, me.options.ticks.max);
                            me.maxIndex = findIndex !== -1 ? findIndex : me.maxIndex;
                        }
                        me.min = labels[me.minIndex];
                        me.max = labels[me.maxIndex];
                    },
                    buildTicks: function () {
                        var me = this;
                        var labels = me.getLabels();
                        me.ticks = me.minIndex === 0 && me.maxIndex === labels.length - 1 ? labels : labels.slice(me.minIndex, me.maxIndex + 1);
                    },
                    getLabelForIndex: function (index, datasetIndex) {
                        var me = this;
                        var data = me.chart.data;
                        var isHorizontal = me.isHorizontal();
                        if (data.yLabels && !isHorizontal) {
                            return me.getRightValue(data.datasets[datasetIndex].data[index]);
                        }
                        return me.ticks[index - me.minIndex];
                    },
                    getPixelForValue: function (value, index, datasetIndex, includeOffset) {
                        var me = this;
                        var offsetAmt = Math.max(me.maxIndex + 1 - me.minIndex - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
                        if (value !== undefined && isNaN(index)) {
                            var labels = me.getLabels();
                            var idx = labels.indexOf(value);
                            index = idx !== -1 ? idx : index;
                        }
                        if (me.isHorizontal()) {
                            var valueWidth = me.width / offsetAmt;
                            var widthOffset = valueWidth * (index - me.minIndex);
                            if (me.options.gridLines.offsetGridLines && includeOffset || me.maxIndex === me.minIndex && includeOffset) {
                                widthOffset += valueWidth / 2;
                            }
                            return me.left + Math.round(widthOffset);
                        }
                        var valueHeight = me.height / offsetAmt;
                        var heightOffset = valueHeight * (index - me.minIndex);
                        if (me.options.gridLines.offsetGridLines && includeOffset) {
                            heightOffset += valueHeight / 2;
                        }
                        return me.top + Math.round(heightOffset);
                    },
                    getPixelForTick: function (index, includeOffset) {
                        return this.getPixelForValue(this.ticks[index], index + this.minIndex, null, includeOffset);
                    },
                    getValueForPixel: function (pixel) {
                        var me = this;
                        var value;
                        var offsetAmt = Math.max(me.ticks.length - (me.options.gridLines.offsetGridLines ? 0 : 1), 1);
                        var horz = me.isHorizontal();
                        var valueDimension = (horz ? me.width : me.height) / offsetAmt;
                        pixel -= horz ? me.left : me.top;
                        if (me.options.gridLines.offsetGridLines) {
                            pixel -= valueDimension / 2;
                        }
                        if (pixel <= 0) {
                            value = 0;
                        } else {
                            value = Math.round(pixel / valueDimension);
                        }
                        return value;
                    },
                    getBasePixel: function () {
                        return this.bottom;
                    }
                });
                Chart.scaleService.registerScaleType('category', DatasetScale, defaultConfig);
            };
        },
        {}
    ],
    44: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                var defaultConfig = {
                    position: 'left',
                    ticks: {
                        callback: Chart.Ticks.formatters.linear
                    }
                };
                var LinearScale = Chart.LinearScaleBase.extend({
                    determineDataLimits: function () {
                        var me = this;
                        var opts = me.options;
                        var chart = me.chart;
                        var data = chart.data;
                        var datasets = data.datasets;
                        var isHorizontal = me.isHorizontal();
                        function IDMatches(meta) {
                            return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
                        }
                        me.min = null;
                        me.max = null;
                        var hasStacks = opts.stacked;
                        if (hasStacks === undefined) {
                            helpers.each(datasets, function (dataset, datasetIndex) {
                                if (hasStacks) {
                                    return;
                                }
                                var meta = chart.getDatasetMeta(datasetIndex);
                                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                                    hasStacks = true;
                                }
                            });
                        }
                        if (opts.stacked || hasStacks) {
                            var valuesPerStack = {};
                            helpers.each(datasets, function (dataset, datasetIndex) {
                                var meta = chart.getDatasetMeta(datasetIndex);
                                var key = [
                                    meta.type,
                                    opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '',
                                    meta.stack
                                ].join('.');
                                if (valuesPerStack[key] === undefined) {
                                    valuesPerStack[key] = {
                                        positiveValues: [],
                                        negativeValues: []
                                    };
                                }
                                var positiveValues = valuesPerStack[key].positiveValues;
                                var negativeValues = valuesPerStack[key].negativeValues;
                                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                                    helpers.each(dataset.data, function (rawValue, index) {
                                        var value = +me.getRightValue(rawValue);
                                        if (isNaN(value) || meta.data[index].hidden) {
                                            return;
                                        }
                                        positiveValues[index] = positiveValues[index] || 0;
                                        negativeValues[index] = negativeValues[index] || 0;
                                        if (opts.relativePoints) {
                                            positiveValues[index] = 100;
                                        } else if (value < 0) {
                                            negativeValues[index] += value;
                                        } else {
                                            positiveValues[index] += value;
                                        }
                                    });
                                }
                            });
                            helpers.each(valuesPerStack, function (valuesForType) {
                                var values = valuesForType.positiveValues.concat(valuesForType.negativeValues);
                                var minVal = helpers.min(values);
                                var maxVal = helpers.max(values);
                                me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                                me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
                            });
                        } else {
                            helpers.each(datasets, function (dataset, datasetIndex) {
                                var meta = chart.getDatasetMeta(datasetIndex);
                                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                                    helpers.each(dataset.data, function (rawValue, index) {
                                        var value = +me.getRightValue(rawValue);
                                        if (isNaN(value) || meta.data[index].hidden) {
                                            return;
                                        }
                                        if (me.min === null) {
                                            me.min = value;
                                        } else if (value < me.min) {
                                            me.min = value;
                                        }
                                        if (me.max === null) {
                                            me.max = value;
                                        } else if (value > me.max) {
                                            me.max = value;
                                        }
                                    });
                                }
                            });
                        }
                        this.handleTickRangeOptions();
                    },
                    getTickLimit: function () {
                        var maxTicks;
                        var me = this;
                        var tickOpts = me.options.ticks;
                        if (me.isHorizontal()) {
                            maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.width / 50));
                        } else {
                            var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, Chart.defaults.global.defaultFontSize);
                            maxTicks = Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(me.height / (2 * tickFontSize)));
                        }
                        return maxTicks;
                    },
                    handleDirectionalChanges: function () {
                        if (!this.isHorizontal()) {
                            this.ticks.reverse();
                        }
                    },
                    getLabelForIndex: function (index, datasetIndex) {
                        return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
                    },
                    getPixelForValue: function (value) {
                        var me = this;
                        var start = me.start;
                        var rightValue = +me.getRightValue(value);
                        var pixel;
                        var range = me.end - start;
                        if (me.isHorizontal()) {
                            pixel = me.left + me.width / range * (rightValue - start);
                            return Math.round(pixel);
                        }
                        pixel = me.bottom - me.height / range * (rightValue - start);
                        return Math.round(pixel);
                    },
                    getValueForPixel: function (pixel) {
                        var me = this;
                        var isHorizontal = me.isHorizontal();
                        var innerDimension = isHorizontal ? me.width : me.height;
                        var offset = (isHorizontal ? pixel - me.left : me.bottom - pixel) / innerDimension;
                        return me.start + (me.end - me.start) * offset;
                    },
                    getPixelForTick: function (index) {
                        return this.getPixelForValue(this.ticksAsNumbers[index]);
                    }
                });
                Chart.scaleService.registerScaleType('linear', LinearScale, defaultConfig);
            };
        },
        {}
    ],
    45: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers, noop = helpers.noop;
                Chart.LinearScaleBase = Chart.Scale.extend({
                    handleTickRangeOptions: function () {
                        var me = this;
                        var opts = me.options;
                        var tickOpts = opts.ticks;
                        if (tickOpts.beginAtZero) {
                            var minSign = helpers.sign(me.min);
                            var maxSign = helpers.sign(me.max);
                            if (minSign < 0 && maxSign < 0) {
                                me.max = 0;
                            } else if (minSign > 0 && maxSign > 0) {
                                me.min = 0;
                            }
                        }
                        if (tickOpts.min !== undefined) {
                            me.min = tickOpts.min;
                        } else if (tickOpts.suggestedMin !== undefined) {
                            me.min = Math.min(me.min, tickOpts.suggestedMin);
                        }
                        if (tickOpts.max !== undefined) {
                            me.max = tickOpts.max;
                        } else if (tickOpts.suggestedMax !== undefined) {
                            me.max = Math.max(me.max, tickOpts.suggestedMax);
                        }
                        if (me.min === me.max) {
                            me.max++;
                            if (!tickOpts.beginAtZero) {
                                me.min--;
                            }
                        }
                    },
                    getTickLimit: noop,
                    handleDirectionalChanges: noop,
                    buildTicks: function () {
                        var me = this;
                        var opts = me.options;
                        var tickOpts = opts.ticks;
                        var maxTicks = me.getTickLimit();
                        maxTicks = Math.max(2, maxTicks);
                        var numericGeneratorOptions = {
                            maxTicks: maxTicks,
                            min: tickOpts.min,
                            max: tickOpts.max,
                            stepSize: helpers.getValueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
                        };
                        var ticks = me.ticks = Chart.Ticks.generators.linear(numericGeneratorOptions, me);
                        me.handleDirectionalChanges();
                        me.max = helpers.max(ticks);
                        me.min = helpers.min(ticks);
                        if (tickOpts.reverse) {
                            ticks.reverse();
                            me.start = me.max;
                            me.end = me.min;
                        } else {
                            me.start = me.min;
                            me.end = me.max;
                        }
                    },
                    convertTicksToLabels: function () {
                        var me = this;
                        me.ticksAsNumbers = me.ticks.slice();
                        me.zeroLineIndex = me.ticks.indexOf(0);
                        Chart.Scale.prototype.convertTicksToLabels.call(me);
                    }
                });
            };
        },
        {}
    ],
    46: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                var defaultConfig = {
                    position: 'left',
                    ticks: {
                        callback: Chart.Ticks.formatters.logarithmic
                    }
                };
                var LogarithmicScale = Chart.Scale.extend({
                    determineDataLimits: function () {
                        var me = this;
                        var opts = me.options;
                        var tickOpts = opts.ticks;
                        var chart = me.chart;
                        var data = chart.data;
                        var datasets = data.datasets;
                        var getValueOrDefault = helpers.getValueOrDefault;
                        var isHorizontal = me.isHorizontal();
                        function IDMatches(meta) {
                            return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
                        }
                        me.min = null;
                        me.max = null;
                        me.minNotZero = null;
                        var hasStacks = opts.stacked;
                        if (hasStacks === undefined) {
                            helpers.each(datasets, function (dataset, datasetIndex) {
                                if (hasStacks) {
                                    return;
                                }
                                var meta = chart.getDatasetMeta(datasetIndex);
                                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== undefined) {
                                    hasStacks = true;
                                }
                            });
                        }
                        if (opts.stacked || hasStacks) {
                            var valuesPerStack = {};
                            helpers.each(datasets, function (dataset, datasetIndex) {
                                var meta = chart.getDatasetMeta(datasetIndex);
                                var key = [
                                    meta.type,
                                    opts.stacked === undefined && meta.stack === undefined ? datasetIndex : '',
                                    meta.stack
                                ].join('.');
                                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                                    if (valuesPerStack[key] === undefined) {
                                        valuesPerStack[key] = [];
                                    }
                                    helpers.each(dataset.data, function (rawValue, index) {
                                        var values = valuesPerStack[key];
                                        var value = +me.getRightValue(rawValue);
                                        if (isNaN(value) || meta.data[index].hidden) {
                                            return;
                                        }
                                        values[index] = values[index] || 0;
                                        if (opts.relativePoints) {
                                            values[index] = 100;
                                        } else {
                                            values[index] += value;
                                        }
                                    });
                                }
                            });
                            helpers.each(valuesPerStack, function (valuesForType) {
                                var minVal = helpers.min(valuesForType);
                                var maxVal = helpers.max(valuesForType);
                                me.min = me.min === null ? minVal : Math.min(me.min, minVal);
                                me.max = me.max === null ? maxVal : Math.max(me.max, maxVal);
                            });
                        } else {
                            helpers.each(datasets, function (dataset, datasetIndex) {
                                var meta = chart.getDatasetMeta(datasetIndex);
                                if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                                    helpers.each(dataset.data, function (rawValue, index) {
                                        var value = +me.getRightValue(rawValue);
                                        if (isNaN(value) || meta.data[index].hidden) {
                                            return;
                                        }
                                        if (me.min === null) {
                                            me.min = value;
                                        } else if (value < me.min) {
                                            me.min = value;
                                        }
                                        if (me.max === null) {
                                            me.max = value;
                                        } else if (value > me.max) {
                                            me.max = value;
                                        }
                                        if (value !== 0 && (me.minNotZero === null || value < me.minNotZero)) {
                                            me.minNotZero = value;
                                        }
                                    });
                                }
                            });
                        }
                        me.min = getValueOrDefault(tickOpts.min, me.min);
                        me.max = getValueOrDefault(tickOpts.max, me.max);
                        if (me.min === me.max) {
                            if (me.min !== 0 && me.min !== null) {
                                me.min = Math.pow(10, Math.floor(helpers.log10(me.min)) - 1);
                                me.max = Math.pow(10, Math.floor(helpers.log10(me.max)) + 1);
                            } else {
                                me.min = 1;
                                me.max = 10;
                            }
                        }
                    },
                    buildTicks: function () {
                        var me = this;
                        var opts = me.options;
                        var tickOpts = opts.ticks;
                        var generationOptions = {
                            min: tickOpts.min,
                            max: tickOpts.max
                        };
                        var ticks = me.ticks = Chart.Ticks.generators.logarithmic(generationOptions, me);
                        if (!me.isHorizontal()) {
                            ticks.reverse();
                        }
                        me.max = helpers.max(ticks);
                        me.min = helpers.min(ticks);
                        if (tickOpts.reverse) {
                            ticks.reverse();
                            me.start = me.max;
                            me.end = me.min;
                        } else {
                            me.start = me.min;
                            me.end = me.max;
                        }
                    },
                    convertTicksToLabels: function () {
                        this.tickValues = this.ticks.slice();
                        Chart.Scale.prototype.convertTicksToLabels.call(this);
                    },
                    getLabelForIndex: function (index, datasetIndex) {
                        return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
                    },
                    getPixelForTick: function (index) {
                        return this.getPixelForValue(this.tickValues[index]);
                    },
                    getPixelForValue: function (value) {
                        var me = this;
                        var innerDimension;
                        var pixel;
                        var start = me.start;
                        var newVal = +me.getRightValue(value);
                        var range;
                        var opts = me.options;
                        var tickOpts = opts.ticks;
                        if (me.isHorizontal()) {
                            range = helpers.log10(me.end) - helpers.log10(start);
                            if (newVal === 0) {
                                pixel = me.left;
                            } else {
                                innerDimension = me.width;
                                pixel = me.left + innerDimension / range * (helpers.log10(newVal) - helpers.log10(start));
                            }
                        } else {
                            innerDimension = me.height;
                            if (start === 0 && !tickOpts.reverse) {
                                range = helpers.log10(me.end) - helpers.log10(me.minNotZero);
                                if (newVal === start) {
                                    pixel = me.bottom;
                                } else if (newVal === me.minNotZero) {
                                    pixel = me.bottom - innerDimension * 0.02;
                                } else {
                                    pixel = me.bottom - innerDimension * 0.02 - innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero));
                                }
                            } else if (me.end === 0 && tickOpts.reverse) {
                                range = helpers.log10(me.start) - helpers.log10(me.minNotZero);
                                if (newVal === me.end) {
                                    pixel = me.top;
                                } else if (newVal === me.minNotZero) {
                                    pixel = me.top + innerDimension * 0.02;
                                } else {
                                    pixel = me.top + innerDimension * 0.02 + innerDimension * 0.98 / range * (helpers.log10(newVal) - helpers.log10(me.minNotZero));
                                }
                            } else {
                                range = helpers.log10(me.end) - helpers.log10(start);
                                innerDimension = me.height;
                                pixel = me.bottom - innerDimension / range * (helpers.log10(newVal) - helpers.log10(start));
                            }
                        }
                        return pixel;
                    },
                    getValueForPixel: function (pixel) {
                        var me = this;
                        var range = helpers.log10(me.end) - helpers.log10(me.start);
                        var value, innerDimension;
                        if (me.isHorizontal()) {
                            innerDimension = me.width;
                            value = me.start * Math.pow(10, (pixel - me.left) * range / innerDimension);
                        } else {
                            innerDimension = me.height;
                            value = Math.pow(10, (me.bottom - pixel) * range / innerDimension) / me.start;
                        }
                        return value;
                    }
                });
                Chart.scaleService.registerScaleType('logarithmic', LogarithmicScale, defaultConfig);
            };
        },
        {}
    ],
    47: [
        function (require, module, exports) {
            'use strict';
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                var globalDefaults = Chart.defaults.global;
                var defaultConfig = {
                    display: true,
                    animate: true,
                    lineArc: false,
                    position: 'chartArea',
                    angleLines: {
                        display: true,
                        color: 'rgba(0, 0, 0, 0.1)',
                        lineWidth: 1
                    },
                    ticks: {
                        showLabelBackdrop: true,
                        backdropColor: 'rgba(255,255,255,0.75)',
                        backdropPaddingY: 2,
                        backdropPaddingX: 2,
                        callback: Chart.Ticks.formatters.linear
                    },
                    pointLabels: {
                        fontSize: 10,
                        callback: function (label) {
                            return label;
                        }
                    }
                };
                function getValueCount(scale) {
                    return !scale.options.lineArc ? scale.chart.data.labels.length : 0;
                }
                function getPointLabelFontOptions(scale) {
                    var pointLabelOptions = scale.options.pointLabels;
                    var fontSize = helpers.getValueOrDefault(pointLabelOptions.fontSize, globalDefaults.defaultFontSize);
                    var fontStyle = helpers.getValueOrDefault(pointLabelOptions.fontStyle, globalDefaults.defaultFontStyle);
                    var fontFamily = helpers.getValueOrDefault(pointLabelOptions.fontFamily, globalDefaults.defaultFontFamily);
                    var font = helpers.fontString(fontSize, fontStyle, fontFamily);
                    return {
                        size: fontSize,
                        style: fontStyle,
                        family: fontFamily,
                        font: font
                    };
                }
                function measureLabelSize(ctx, fontSize, label) {
                    if (helpers.isArray(label)) {
                        return {
                            w: helpers.longestText(ctx, ctx.font, label),
                            h: label.length * fontSize + (label.length - 1) * 1.5 * fontSize
                        };
                    }
                    return {
                        w: ctx.measureText(label).width,
                        h: fontSize
                    };
                }
                function determineLimits(angle, pos, size, min, max) {
                    if (angle === min || angle === max) {
                        return {
                            start: pos - size / 2,
                            end: pos + size / 2
                        };
                    } else if (angle < min || angle > max) {
                        return {
                            start: pos - size - 5,
                            end: pos
                        };
                    }
                    return {
                        start: pos,
                        end: pos + size + 5
                    };
                }
                function fitWithPointLabels(scale) {
                    var plFont = getPointLabelFontOptions(scale);
                    var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
                    var furthestLimits = {
                        l: scale.width,
                        r: 0,
                        t: scale.height,
                        b: 0
                    };
                    var furthestAngles = {};
                    var i;
                    var textSize;
                    var pointPosition;
                    scale.ctx.font = plFont.font;
                    scale._pointLabelSizes = [];
                    var valueCount = getValueCount(scale);
                    for (i = 0; i < valueCount; i++) {
                        pointPosition = scale.getPointPosition(i, largestPossibleRadius);
                        textSize = measureLabelSize(scale.ctx, plFont.size, scale.pointLabels[i] || '');
                        scale._pointLabelSizes[i] = textSize;
                        var angleRadians = scale.getIndexAngle(i);
                        var angle = helpers.toDegrees(angleRadians) % 360;
                        var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
                        var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
                        if (hLimits.start < furthestLimits.l) {
                            furthestLimits.l = hLimits.start;
                            furthestAngles.l = angleRadians;
                        }
                        if (hLimits.end > furthestLimits.r) {
                            furthestLimits.r = hLimits.end;
                            furthestAngles.r = angleRadians;
                        }
                        if (vLimits.start < furthestLimits.t) {
                            furthestLimits.t = vLimits.start;
                            furthestAngles.t = angleRadians;
                        }
                        if (vLimits.end > furthestLimits.b) {
                            furthestLimits.b = vLimits.end;
                            furthestAngles.b = angleRadians;
                        }
                    }
                    scale.setReductions(largestPossibleRadius, furthestLimits, furthestAngles);
                }
                function fit(scale) {
                    var largestPossibleRadius = Math.min(scale.height / 2, scale.width / 2);
                    scale.drawingArea = Math.round(largestPossibleRadius);
                    scale.setCenterPoint(0, 0, 0, 0);
                }
                function getTextAlignForAngle(angle) {
                    if (angle === 0 || angle === 180) {
                        return 'center';
                    } else if (angle < 180) {
                        return 'left';
                    }
                    return 'right';
                }
                function fillText(ctx, text, position, fontSize) {
                    if (helpers.isArray(text)) {
                        var y = position.y;
                        var spacing = 1.5 * fontSize;
                        for (var i = 0; i < text.length; ++i) {
                            ctx.fillText(text[i], position.x, y);
                            y += spacing;
                        }
                    } else {
                        ctx.fillText(text, position.x, position.y);
                    }
                }
                function adjustPointPositionForLabelHeight(angle, textSize, position) {
                    if (angle === 90 || angle === 270) {
                        position.y -= textSize.h / 2;
                    } else if (angle > 270 || angle < 90) {
                        position.y -= textSize.h;
                    }
                }
                function drawPointLabels(scale) {
                    var ctx = scale.ctx;
                    var getValueOrDefault = helpers.getValueOrDefault;
                    var opts = scale.options;
                    var angleLineOpts = opts.angleLines;
                    var pointLabelOpts = opts.pointLabels;
                    ctx.lineWidth = angleLineOpts.lineWidth;
                    ctx.strokeStyle = angleLineOpts.color;
                    var outerDistance = scale.getDistanceFromCenterForValue(opts.reverse ? scale.min : scale.max);
                    var plFont = getPointLabelFontOptions(scale);
                    ctx.textBaseline = 'top';
                    for (var i = getValueCount(scale) - 1; i >= 0; i--) {
                        if (angleLineOpts.display) {
                            var outerPosition = scale.getPointPosition(i, outerDistance);
                            ctx.beginPath();
                            ctx.moveTo(scale.xCenter, scale.yCenter);
                            ctx.lineTo(outerPosition.x, outerPosition.y);
                            ctx.stroke();
                            ctx.closePath();
                        }
                        var pointLabelPosition = scale.getPointPosition(i, outerDistance + 5);
                        var pointLabelFontColor = getValueOrDefault(pointLabelOpts.fontColor, globalDefaults.defaultFontColor);
                        ctx.font = plFont.font;
                        ctx.fillStyle = pointLabelFontColor;
                        var angleRadians = scale.getIndexAngle(i);
                        var angle = helpers.toDegrees(angleRadians);
                        ctx.textAlign = getTextAlignForAngle(angle);
                        adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
                        fillText(ctx, scale.pointLabels[i] || '', pointLabelPosition, plFont.size);
                    }
                }
                function drawRadiusLine(scale, gridLineOpts, radius, index) {
                    var ctx = scale.ctx;
                    ctx.strokeStyle = helpers.getValueAtIndexOrDefault(gridLineOpts.color, index - 1);
                    ctx.lineWidth = helpers.getValueAtIndexOrDefault(gridLineOpts.lineWidth, index - 1);
                    if (scale.options.lineArc) {
                        ctx.beginPath();
                        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
                        ctx.closePath();
                        ctx.stroke();
                    } else {
                        var valueCount = getValueCount(scale);
                        if (valueCount === 0) {
                            return;
                        }
                        ctx.beginPath();
                        var pointPosition = scale.getPointPosition(0, radius);
                        ctx.moveTo(pointPosition.x, pointPosition.y);
                        for (var i = 1; i < valueCount; i++) {
                            pointPosition = scale.getPointPosition(i, radius);
                            ctx.lineTo(pointPosition.x, pointPosition.y);
                        }
                        ctx.closePath();
                        ctx.stroke();
                    }
                }
                function numberOrZero(param) {
                    return helpers.isNumber(param) ? param : 0;
                }
                var LinearRadialScale = Chart.LinearScaleBase.extend({
                    setDimensions: function () {
                        var me = this;
                        var opts = me.options;
                        var tickOpts = opts.ticks;
                        me.width = me.maxWidth;
                        me.height = me.maxHeight;
                        me.xCenter = Math.round(me.width / 2);
                        me.yCenter = Math.round(me.height / 2);
                        var minSize = helpers.min([
                            me.height,
                            me.width
                        ]);
                        var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
                        me.drawingArea = opts.display ? minSize / 2 - (tickFontSize / 2 + tickOpts.backdropPaddingY) : minSize / 2;
                    },
                    determineDataLimits: function () {
                        var me = this;
                        var chart = me.chart;
                        var min = Number.POSITIVE_INFINITY;
                        var max = Number.NEGATIVE_INFINITY;
                        helpers.each(chart.data.datasets, function (dataset, datasetIndex) {
                            if (chart.isDatasetVisible(datasetIndex)) {
                                var meta = chart.getDatasetMeta(datasetIndex);
                                helpers.each(dataset.data, function (rawValue, index) {
                                    var value = +me.getRightValue(rawValue);
                                    if (isNaN(value) || meta.data[index].hidden) {
                                        return;
                                    }
                                    min = Math.min(value, min);
                                    max = Math.max(value, max);
                                });
                            }
                        });
                        me.min = min === Number.POSITIVE_INFINITY ? 0 : min;
                        me.max = max === Number.NEGATIVE_INFINITY ? 0 : max;
                        me.handleTickRangeOptions();
                    },
                    getTickLimit: function () {
                        var tickOpts = this.options.ticks;
                        var tickFontSize = helpers.getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
                        return Math.min(tickOpts.maxTicksLimit ? tickOpts.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * tickFontSize)));
                    },
                    convertTicksToLabels: function () {
                        var me = this;
                        Chart.LinearScaleBase.prototype.convertTicksToLabels.call(me);
                        me.pointLabels = me.chart.data.labels.map(me.options.pointLabels.callback, me);
                    },
                    getLabelForIndex: function (index, datasetIndex) {
                        return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
                    },
                    fit: function () {
                        if (this.options.lineArc) {
                            fit(this);
                        } else {
                            fitWithPointLabels(this);
                        }
                    },
                    setReductions: function (largestPossibleRadius, furthestLimits, furthestAngles) {
                        var me = this;
                        var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
                        var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
                        var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
                        var radiusReductionBottom = -Math.max(furthestLimits.b - me.height, 0) / Math.cos(furthestAngles.b);
                        radiusReductionLeft = numberOrZero(radiusReductionLeft);
                        radiusReductionRight = numberOrZero(radiusReductionRight);
                        radiusReductionTop = numberOrZero(radiusReductionTop);
                        radiusReductionBottom = numberOrZero(radiusReductionBottom);
                        me.drawingArea = Math.min(Math.round(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.round(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
                        me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
                    },
                    setCenterPoint: function (leftMovement, rightMovement, topMovement, bottomMovement) {
                        var me = this;
                        var maxRight = me.width - rightMovement - me.drawingArea, maxLeft = leftMovement + me.drawingArea, maxTop = topMovement + me.drawingArea, maxBottom = me.height - bottomMovement - me.drawingArea;
                        me.xCenter = Math.round((maxLeft + maxRight) / 2 + me.left);
                        me.yCenter = Math.round((maxTop + maxBottom) / 2 + me.top);
                    },
                    getIndexAngle: function (index) {
                        var angleMultiplier = Math.PI * 2 / getValueCount(this);
                        var startAngle = this.chart.options && this.chart.options.startAngle ? this.chart.options.startAngle : 0;
                        var startAngleRadians = startAngle * Math.PI * 2 / 360;
                        return index * angleMultiplier + startAngleRadians;
                    },
                    getDistanceFromCenterForValue: function (value) {
                        var me = this;
                        if (value === null) {
                            return 0;
                        }
                        var scalingFactor = me.drawingArea / (me.max - me.min);
                        if (me.options.reverse) {
                            return (me.max - value) * scalingFactor;
                        }
                        return (value - me.min) * scalingFactor;
                    },
                    getPointPosition: function (index, distanceFromCenter) {
                        var me = this;
                        var thisAngle = me.getIndexAngle(index) - Math.PI / 2;
                        return {
                            x: Math.round(Math.cos(thisAngle) * distanceFromCenter) + me.xCenter,
                            y: Math.round(Math.sin(thisAngle) * distanceFromCenter) + me.yCenter
                        };
                    },
                    getPointPositionForValue: function (index, value) {
                        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
                    },
                    getBasePosition: function () {
                        var me = this;
                        var min = me.min;
                        var max = me.max;
                        return me.getPointPositionForValue(0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);
                    },
                    draw: function () {
                        var me = this;
                        var opts = me.options;
                        var gridLineOpts = opts.gridLines;
                        var tickOpts = opts.ticks;
                        var getValueOrDefault = helpers.getValueOrDefault;
                        if (opts.display) {
                            var ctx = me.ctx;
                            var tickFontSize = getValueOrDefault(tickOpts.fontSize, globalDefaults.defaultFontSize);
                            var tickFontStyle = getValueOrDefault(tickOpts.fontStyle, globalDefaults.defaultFontStyle);
                            var tickFontFamily = getValueOrDefault(tickOpts.fontFamily, globalDefaults.defaultFontFamily);
                            var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
                            helpers.each(me.ticks, function (label, index) {
                                if (index > 0 || opts.reverse) {
                                    var yCenterOffset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                                    var yHeight = me.yCenter - yCenterOffset;
                                    if (gridLineOpts.display && index !== 0) {
                                        drawRadiusLine(me, gridLineOpts, yCenterOffset, index);
                                    }
                                    if (tickOpts.display) {
                                        var tickFontColor = getValueOrDefault(tickOpts.fontColor, globalDefaults.defaultFontColor);
                                        ctx.font = tickLabelFont;
                                        if (tickOpts.showLabelBackdrop) {
                                            var labelWidth = ctx.measureText(label).width;
                                            ctx.fillStyle = tickOpts.backdropColor;
                                            ctx.fillRect(me.xCenter - labelWidth / 2 - tickOpts.backdropPaddingX, yHeight - tickFontSize / 2 - tickOpts.backdropPaddingY, labelWidth + tickOpts.backdropPaddingX * 2, tickFontSize + tickOpts.backdropPaddingY * 2);
                                        }
                                        ctx.textAlign = 'center';
                                        ctx.textBaseline = 'middle';
                                        ctx.fillStyle = tickFontColor;
                                        ctx.fillText(label, me.xCenter, yHeight);
                                    }
                                }
                            });
                            if (!opts.lineArc) {
                                drawPointLabels(me);
                            }
                        }
                    }
                });
                Chart.scaleService.registerScaleType('radialLinear', LinearRadialScale, defaultConfig);
            };
        },
        {}
    ],
    48: [
        function (require, module, exports) {
            'use strict';
            var moment = require(1);
            moment = typeof moment === 'function' ? moment : window.moment;
            module.exports = function (Chart) {
                var helpers = Chart.helpers;
                var time = {
                    units: [
                        {
                            name: 'millisecond',
                            steps: [
                                1,
                                2,
                                5,
                                10,
                                20,
                                50,
                                100,
                                250,
                                500
                            ]
                        },
                        {
                            name: 'second',
                            steps: [
                                1,
                                2,
                                5,
                                10,
                                30
                            ]
                        },
                        {
                            name: 'minute',
                            steps: [
                                1,
                                2,
                                5,
                                10,
                                30
                            ]
                        },
                        {
                            name: 'hour',
                            steps: [
                                1,
                                2,
                                3,
                                6,
                                12
                            ]
                        },
                        {
                            name: 'day',
                            steps: [
                                1,
                                2,
                                5
                            ]
                        },
                        {
                            name: 'week',
                            maxStep: 4
                        },
                        {
                            name: 'month',
                            maxStep: 3
                        },
                        {
                            name: 'quarter',
                            maxStep: 4
                        },
                        {
                            name: 'year',
                            maxStep: false
                        }
                    ]
                };
                var defaultConfig = {
                    position: 'bottom',
                    time: {
                        parser: false,
                        format: false,
                        unit: false,
                        round: false,
                        displayFormat: false,
                        isoWeekday: false,
                        minUnit: 'millisecond',
                        displayFormats: {
                            millisecond: 'h:mm:ss.SSS a',
                            second: 'h:mm:ss a',
                            minute: 'h:mm:ss a',
                            hour: 'MMM D, hA',
                            day: 'll',
                            week: 'll',
                            month: 'MMM YYYY',
                            quarter: '[Q]Q - YYYY',
                            year: 'YYYY'
                        }
                    },
                    ticks: {
                        autoSkip: false
                    }
                };
                var TimeScale = Chart.Scale.extend({
                    initialize: function () {
                        if (!moment) {
                            throw new Error('Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com');
                        }
                        Chart.Scale.prototype.initialize.call(this);
                    },
                    getLabelMoment: function (datasetIndex, index) {
                        if (datasetIndex === null || index === null) {
                            return null;
                        }
                        if (typeof this.labelMoments[datasetIndex] !== 'undefined') {
                            return this.labelMoments[datasetIndex][index];
                        }
                        return null;
                    },
                    getLabelDiff: function (datasetIndex, index) {
                        var me = this;
                        if (datasetIndex === null || index === null) {
                            return null;
                        }
                        if (me.labelDiffs === undefined) {
                            me.buildLabelDiffs();
                        }
                        if (typeof me.labelDiffs[datasetIndex] !== 'undefined') {
                            return me.labelDiffs[datasetIndex][index];
                        }
                        return null;
                    },
                    getMomentStartOf: function (tick) {
                        var me = this;
                        if (me.options.time.unit === 'week' && me.options.time.isoWeekday !== false) {
                            return tick.clone().startOf('isoWeek').isoWeekday(me.options.time.isoWeekday);
                        }
                        return tick.clone().startOf(me.tickUnit);
                    },
                    determineDataLimits: function () {
                        var me = this;
                        me.labelMoments = [];
                        var scaleLabelMoments = [];
                        if (me.chart.data.labels && me.chart.data.labels.length > 0) {
                            helpers.each(me.chart.data.labels, function (label) {
                                var labelMoment = me.parseTime(label);
                                if (labelMoment.isValid()) {
                                    if (me.options.time.round) {
                                        labelMoment.startOf(me.options.time.round);
                                    }
                                    scaleLabelMoments.push(labelMoment);
                                }
                            }, me);
                            me.firstTick = moment.min.call(me, scaleLabelMoments);
                            me.lastTick = moment.max.call(me, scaleLabelMoments);
                        } else {
                            me.firstTick = null;
                            me.lastTick = null;
                        }
                        helpers.each(me.chart.data.datasets, function (dataset, datasetIndex) {
                            var momentsForDataset = [];
                            var datasetVisible = me.chart.isDatasetVisible(datasetIndex);
                            if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
                                helpers.each(dataset.data, function (value) {
                                    var labelMoment = me.parseTime(me.getRightValue(value));
                                    if (labelMoment.isValid()) {
                                        if (me.options.time.round) {
                                            labelMoment.startOf(me.options.time.round);
                                        }
                                        momentsForDataset.push(labelMoment);
                                        if (datasetVisible) {
                                            me.firstTick = me.firstTick !== null ? moment.min(me.firstTick, labelMoment) : labelMoment;
                                            me.lastTick = me.lastTick !== null ? moment.max(me.lastTick, labelMoment) : labelMoment;
                                        }
                                    }
                                }, me);
                            } else {
                                momentsForDataset = scaleLabelMoments;
                            }
                            me.labelMoments.push(momentsForDataset);
                        }, me);
                        if (me.options.time.min) {
                            me.firstTick = me.parseTime(me.options.time.min);
                        }
                        if (me.options.time.max) {
                            me.lastTick = me.parseTime(me.options.time.max);
                        }
                        me.firstTick = (me.firstTick || moment()).clone();
                        me.lastTick = (me.lastTick || moment()).clone();
                    },
                    buildLabelDiffs: function () {
                        var me = this;
                        me.labelDiffs = [];
                        var scaleLabelDiffs = [];
                        if (me.chart.data.labels && me.chart.data.labels.length > 0) {
                            helpers.each(me.chart.data.labels, function (label) {
                                var labelMoment = me.parseTime(label);
                                if (labelMoment.isValid()) {
                                    if (me.options.time.round) {
                                        labelMoment.startOf(me.options.time.round);
                                    }
                                    scaleLabelDiffs.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
                                }
                            }, me);
                        }
                        helpers.each(me.chart.data.datasets, function (dataset) {
                            var diffsForDataset = [];
                            if (typeof dataset.data[0] === 'object' && dataset.data[0] !== null) {
                                helpers.each(dataset.data, function (value) {
                                    var labelMoment = me.parseTime(me.getRightValue(value));
                                    if (labelMoment.isValid()) {
                                        if (me.options.time.round) {
                                            labelMoment.startOf(me.options.time.round);
                                        }
                                        diffsForDataset.push(labelMoment.diff(me.firstTick, me.tickUnit, true));
                                    }
                                }, me);
                            } else {
                                diffsForDataset = scaleLabelDiffs;
                            }
                            me.labelDiffs.push(diffsForDataset);
                        }, me);
                    },
                    buildTicks: function () {
                        var me = this;
                        me.ctx.save();
                        var tickFontSize = helpers.getValueOrDefault(me.options.ticks.fontSize, Chart.defaults.global.defaultFontSize);
                        var tickFontStyle = helpers.getValueOrDefault(me.options.ticks.fontStyle, Chart.defaults.global.defaultFontStyle);
                        var tickFontFamily = helpers.getValueOrDefault(me.options.ticks.fontFamily, Chart.defaults.global.defaultFontFamily);
                        var tickLabelFont = helpers.fontString(tickFontSize, tickFontStyle, tickFontFamily);
                        me.ctx.font = tickLabelFont;
                        me.ticks = [];
                        me.unitScale = 1;
                        me.scaleSizeInUnits = 0;
                        if (me.options.time.unit) {
                            me.tickUnit = me.options.time.unit || 'day';
                            me.displayFormat = me.options.time.displayFormats[me.tickUnit];
                            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
                            me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, 1);
                        } else {
                            var innerWidth = me.isHorizontal() ? me.width : me.height;
                            var tempFirstLabel = me.tickFormatFunction(me.firstTick, 0, []);
                            var tickLabelWidth = me.ctx.measureText(tempFirstLabel).width;
                            var cosRotation = Math.cos(helpers.toRadians(me.options.ticks.maxRotation));
                            var sinRotation = Math.sin(helpers.toRadians(me.options.ticks.maxRotation));
                            tickLabelWidth = tickLabelWidth * cosRotation + tickFontSize * sinRotation;
                            var labelCapacity = innerWidth / tickLabelWidth;
                            me.tickUnit = me.options.time.minUnit;
                            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
                            me.displayFormat = me.options.time.displayFormats[me.tickUnit];
                            var unitDefinitionIndex = 0;
                            var unitDefinition = time.units[unitDefinitionIndex];
                            while (unitDefinitionIndex < time.units.length) {
                                me.unitScale = 1;
                                if (helpers.isArray(unitDefinition.steps) && Math.ceil(me.scaleSizeInUnits / labelCapacity) < helpers.max(unitDefinition.steps)) {
                                    for (var idx = 0; idx < unitDefinition.steps.length; ++idx) {
                                        if (unitDefinition.steps[idx] >= Math.ceil(me.scaleSizeInUnits / labelCapacity)) {
                                            me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, unitDefinition.steps[idx]);
                                            break;
                                        }
                                    }
                                    break;
                                } else if (unitDefinition.maxStep === false || Math.ceil(me.scaleSizeInUnits / labelCapacity) < unitDefinition.maxStep) {
                                    me.unitScale = helpers.getValueOrDefault(me.options.time.unitStepSize, Math.ceil(me.scaleSizeInUnits / labelCapacity));
                                    break;
                                } else {
                                    ++unitDefinitionIndex;
                                    unitDefinition = time.units[unitDefinitionIndex];
                                    me.tickUnit = unitDefinition.name;
                                    var leadingUnitBuffer = me.firstTick.diff(me.getMomentStartOf(me.firstTick), me.tickUnit, true);
                                    var trailingUnitBuffer = me.getMomentStartOf(me.lastTick.clone().add(1, me.tickUnit)).diff(me.lastTick, me.tickUnit, true);
                                    me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true) + leadingUnitBuffer + trailingUnitBuffer;
                                    me.displayFormat = me.options.time.displayFormats[unitDefinition.name];
                                }
                            }
                        }
                        var roundedStart;
                        if (!me.options.time.min) {
                            me.firstTick = me.getMomentStartOf(me.firstTick);
                            roundedStart = me.firstTick;
                        } else {
                            roundedStart = me.getMomentStartOf(me.firstTick);
                        }
                        if (!me.options.time.max) {
                            var roundedEnd = me.getMomentStartOf(me.lastTick);
                            var delta = roundedEnd.diff(me.lastTick, me.tickUnit, true);
                            if (delta < 0) {
                                me.lastTick = me.getMomentStartOf(me.lastTick.add(1, me.tickUnit));
                            } else if (delta >= 0) {
                                me.lastTick = roundedEnd;
                            }
                            me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
                        }
                        if (me.options.time.displayFormat) {
                            me.displayFormat = me.options.time.displayFormat;
                        }
                        me.ticks.push(me.firstTick.clone());
                        for (var i = me.unitScale; i <= me.scaleSizeInUnits; i += me.unitScale) {
                            var newTick = roundedStart.clone().add(i, me.tickUnit);
                            if (me.options.time.max && newTick.diff(me.lastTick, me.tickUnit, true) >= 0) {
                                break;
                            }
                            me.ticks.push(newTick);
                        }
                        var diff = me.ticks[me.ticks.length - 1].diff(me.lastTick, me.tickUnit);
                        if (diff !== 0 || me.scaleSizeInUnits === 0) {
                            if (me.options.time.max) {
                                me.ticks.push(me.lastTick.clone());
                                me.scaleSizeInUnits = me.lastTick.diff(me.ticks[0], me.tickUnit, true);
                            } else {
                                me.ticks.push(me.lastTick.clone());
                                me.scaleSizeInUnits = me.lastTick.diff(me.firstTick, me.tickUnit, true);
                            }
                        }
                        me.ctx.restore();
                        me.labelDiffs = undefined;
                    },
                    getLabelForIndex: function (index, datasetIndex) {
                        var me = this;
                        var label = me.chart.data.labels && index < me.chart.data.labels.length ? me.chart.data.labels[index] : '';
                        var value = me.chart.data.datasets[datasetIndex].data[index];
                        if (value !== null && typeof value === 'object') {
                            label = me.getRightValue(value);
                        }
                        if (me.options.time.tooltipFormat) {
                            label = me.parseTime(label).format(me.options.time.tooltipFormat);
                        }
                        return label;
                    },
                    tickFormatFunction: function (tick, index, ticks) {
                        var formattedTick = tick.format(this.displayFormat);
                        var tickOpts = this.options.ticks;
                        var callback = helpers.getValueOrDefault(tickOpts.callback, tickOpts.userCallback);
                        if (callback) {
                            return callback(formattedTick, index, ticks);
                        }
                        return formattedTick;
                    },
                    convertTicksToLabels: function () {
                        var me = this;
                        me.tickMoments = me.ticks;
                        me.ticks = me.ticks.map(me.tickFormatFunction, me);
                    },
                    getPixelForValue: function (value, index, datasetIndex) {
                        var me = this;
                        var offset = null;
                        if (index !== undefined && datasetIndex !== undefined) {
                            offset = me.getLabelDiff(datasetIndex, index);
                        }
                        if (offset === null) {
                            if (!value || !value.isValid) {
                                value = me.parseTime(me.getRightValue(value));
                            }
                            if (value && value.isValid && value.isValid()) {
                                offset = value.diff(me.firstTick, me.tickUnit, true);
                            }
                        }
                        if (offset !== null) {
                            var decimal = offset !== 0 ? offset / me.scaleSizeInUnits : offset;
                            if (me.isHorizontal()) {
                                var valueOffset = me.width * decimal;
                                return me.left + Math.round(valueOffset);
                            }
                            var heightOffset = me.height * decimal;
                            return me.top + Math.round(heightOffset);
                        }
                    },
                    getPixelForTick: function (index) {
                        return this.getPixelForValue(this.tickMoments[index], null, null);
                    },
                    getValueForPixel: function (pixel) {
                        var me = this;
                        var innerDimension = me.isHorizontal() ? me.width : me.height;
                        var offset = (pixel - (me.isHorizontal() ? me.left : me.top)) / innerDimension;
                        offset *= me.scaleSizeInUnits;
                        return me.firstTick.clone().add(moment.duration(offset, me.tickUnit).asSeconds(), 'seconds');
                    },
                    parseTime: function (label) {
                        var me = this;
                        if (typeof me.options.time.parser === 'string') {
                            return moment(label, me.options.time.parser);
                        }
                        if (typeof me.options.time.parser === 'function') {
                            return me.options.time.parser(label);
                        }
                        if (typeof label.getMonth === 'function' || typeof label === 'number') {
                            return moment(label);
                        }
                        if (label.isValid && label.isValid()) {
                            return label;
                        }
                        if (typeof me.options.time.format !== 'string' && me.options.time.format.call) {
                            console.warn('options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale');
                            return me.options.time.format(label);
                        }
                        return moment(label, me.options.time.format);
                    }
                });
                Chart.scaleService.registerScaleType('time', TimeScale, defaultConfig);
            };
        },
        {
            '1': 1
        }
    ]
}, {}, [7])(7);})), 0, true, $__.uid);